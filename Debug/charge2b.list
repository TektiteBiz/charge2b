
charge2b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017120  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08017300  08017300  00018300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801748c  0801748c  000192ac  2**0
                  CONTENTS
  4 .ARM          00000008  0801748c  0801748c  0001848c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017494  08017494  000192ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017494  08017494  00018494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017498  08017498  00018498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002ac  20000000  0801749c  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037b4  200002ac  08017748  000192ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000900  20003a60  08017748  00019a60  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  000192ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000361a4  00000000  00000000  000192e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007db6  00000000  00000000  0004f484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002de0  00000000  00000000  00057240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000022d7  00000000  00000000  0005a020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d004  00000000  00000000  0005c2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034e50  00000000  00000000  000692fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109270  00000000  00000000  0009e14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000351b  00000000  00000000  001a73bb  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000033c  00000000  00000000  001aa8d6  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000024  00000000  00000000  001aac14  2**2
                  CONTENTS, READONLY
 22 .iar.debug_frame 000003bf  00000000  00000000  001aac38  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000df7c  00000000  00000000  001aaff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000007b  00000000  00000000  001b8f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002ac 	.word	0x200002ac
 80001fc:	00000000 	.word	0x00000000
 8000200:	080172e8 	.word	0x080172e8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002b0 	.word	0x200002b0
 800021c:	080172e8 	.word	0x080172e8

08000220 <USBPD_CAD_Init>:
 8000220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000224:	2600      	movs	r6, #0
 8000226:	2803      	cmp	r0, #3
 8000228:	4681      	mov	r9, r0
 800022a:	460c      	mov	r4, r1
 800022c:	4690      	mov	r8, r2
 800022e:	461f      	mov	r7, r3
 8000230:	bf28      	it	cs
 8000232:	2601      	movcs	r6, #1
 8000234:	d219      	bcs.n	800026a <USBPD_CAD_Init+0x4a>
 8000236:	b90c      	cbnz	r4, 800023c <USBPD_CAD_Init+0x1c>
 8000238:	2602      	movs	r6, #2
 800023a:	e016      	b.n	800026a <USBPD_CAD_Init+0x4a>
 800023c:	200c      	movs	r0, #12
 800023e:	f016 fea5 	bl	8016f8c <malloc>
 8000242:	0005      	movs	r5, r0
 8000244:	bf08      	it	eq
 8000246:	2603      	moveq	r6, #3
 8000248:	d00f      	beq.n	800026a <USBPD_CAD_Init+0x4a>
 800024a:	210c      	movs	r1, #12
 800024c:	f016 ffee 	bl	801722c <__aeabi_memclr>
 8000250:	602f      	str	r7, [r5, #0]
 8000252:	722e      	strb	r6, [r5, #8]
 8000254:	606c      	str	r4, [r5, #4]
 8000256:	464a      	mov	r2, r9
 8000258:	4947      	ldr	r1, [pc, #284]	@ (8000378 <.text_6>)
 800025a:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 800025e:	463a      	mov	r2, r7
 8000260:	6863      	ldr	r3, [r4, #4]
 8000262:	4641      	mov	r1, r8
 8000264:	4648      	mov	r0, r9
 8000266:	f00e fcf1 	bl	800ec4c <CAD_Init>
 800026a:	4630      	mov	r0, r6
 800026c:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08000270 <USBPD_CAD_PortEnable>:
 8000270:	2803      	cmp	r0, #3
 8000272:	d203      	bcs.n	800027c <USBPD_CAD_PortEnable+0xc>
 8000274:	4a40      	ldr	r2, [pc, #256]	@ (8000378 <.text_6>)
 8000276:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800027a:	7201      	strb	r1, [r0, #8]
 800027c:	4770      	bx	lr

0800027e <USBPD_CAD_Process>:
 800027e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000280:	2100      	movs	r1, #0
 8000282:	f88d 1000 	strb.w	r1, [sp]
 8000286:	9101      	str	r1, [sp, #4]
 8000288:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800028c:	2600      	movs	r6, #0
 800028e:	4c3a      	ldr	r4, [pc, #232]	@ (8000378 <.text_6>)
 8000290:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000294:	2800      	cmp	r0, #0
 8000296:	d069      	beq.n	800036c <USBPD_CAD_Process+0xee>
 8000298:	7a00      	ldrb	r0, [r0, #8]
 800029a:	2801      	cmp	r0, #1
 800029c:	d166      	bne.n	800036c <USBPD_CAD_Process+0xee>
 800029e:	aa01      	add	r2, sp, #4
 80002a0:	4669      	mov	r1, sp
 80002a2:	b2f0      	uxtb	r0, r6
 80002a4:	f00e fe5e 	bl	800ef64 <CAD_StateMachine>
 80002a8:	42a8      	cmp	r0, r5
 80002aa:	bf98      	it	ls
 80002ac:	4605      	movls	r5, r0
 80002ae:	f89d 0000 	ldrb.w	r0, [sp]
 80002b2:	2801      	cmp	r0, #1
 80002b4:	d004      	beq.n	80002c0 <USBPD_CAD_Process+0x42>
 80002b6:	2802      	cmp	r0, #2
 80002b8:	bf18      	it	ne
 80002ba:	2804      	cmpne	r0, #4
 80002bc:	d012      	beq.n	80002e4 <USBPD_CAD_Process+0x66>
 80002be:	e03e      	b.n	800033e <USBPD_CAD_Process+0xc0>
 80002c0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002c4:	6801      	ldr	r1, [r0, #0]
 80002c6:	680a      	ldr	r2, [r1, #0]
 80002c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80002cc:	600a      	str	r2, [r1, #0]
 80002ce:	6801      	ldr	r1, [r0, #0]
 80002d0:	680b      	ldr	r3, [r1, #0]
 80002d2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80002d6:	600b      	str	r3, [r1, #0]
 80002d8:	6800      	ldr	r0, [r0, #0]
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	e02f      	b.n	8000344 <USBPD_CAD_Process+0xc6>
 80002e4:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002e8:	6802      	ldr	r2, [r0, #0]
 80002ea:	9901      	ldr	r1, [sp, #4]
 80002ec:	6813      	ldr	r3, [r2, #0]
 80002ee:	2901      	cmp	r1, #1
 80002f0:	bf0c      	ite	eq
 80002f2:	2102      	moveq	r1, #2
 80002f4:	2101      	movne	r1, #1
 80002f6:	f361 334e 	bfi	r3, r1, #13, #2
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	6800      	ldr	r0, [r0, #0]
 80002fe:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 8000302:	9a01      	ldr	r2, [sp, #4]
 8000304:	6803      	ldr	r3, [r0, #0]
 8000306:	f362 1387 	bfi	r3, r2, #6, #2
 800030a:	680a      	ldr	r2, [r1, #0]
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	6808      	ldr	r0, [r1, #0]
 8000310:	6803      	ldr	r3, [r0, #0]
 8000312:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000316:	6003      	str	r3, [r0, #0]
 8000318:	6808      	ldr	r0, [r1, #0]
 800031a:	6801      	ldr	r1, [r0, #0]
 800031c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000320:	2800      	cmp	r0, #0
 8000322:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000326:	6800      	ldr	r0, [r0, #0]
 8000328:	6801      	ldr	r1, [r0, #0]
 800032a:	bf0c      	ite	eq
 800032c:	f021 0108 	biceq.w	r1, r1, #8
 8000330:	f041 0108 	orrne.w	r1, r1, #8
 8000334:	6001      	str	r1, [r0, #0]
 8000336:	b2f0      	uxtb	r0, r6
 8000338:	2168      	movs	r1, #104	@ 0x68
 800033a:	f000 f90c 	bl	8000556 <USBPD_PE_Notification>
 800033e:	f89d 0000 	ldrb.w	r0, [sp]
 8000342:	b198      	cbz	r0, 800036c <USBPD_CAD_Process+0xee>
 8000344:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 8000348:	685f      	ldr	r7, [r3, #4]
 800034a:	9a01      	ldr	r2, [sp, #4]
 800034c:	f89d 1000 	ldrb.w	r1, [sp]
 8000350:	f8d7 c000 	ldr.w	ip, [r7]
 8000354:	b2f0      	uxtb	r0, r6
 8000356:	47e0      	blx	ip
 8000358:	f89d 0000 	ldrb.w	r0, [sp]
 800035c:	2801      	cmp	r0, #1
 800035e:	bf18      	it	ne
 8000360:	2803      	cmpne	r0, #3
 8000362:	d103      	bne.n	800036c <USBPD_CAD_Process+0xee>
 8000364:	2169      	movs	r1, #105	@ 0x69
 8000366:	b2f0      	uxtb	r0, r6
 8000368:	f000 f8f5 	bl	8000556 <USBPD_PE_Notification>
 800036c:	1c76      	adds	r6, r6, #1
 800036e:	2e02      	cmp	r6, #2
 8000370:	d98e      	bls.n	8000290 <USBPD_CAD_Process+0x12>
 8000372:	4628      	mov	r0, r5
 8000374:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08000378 <.text_6>:
 8000378:	200002c8 	.word	0x200002c8

0800037c <USBPD_CAD_AssertRd>:
 800037c:	b510      	push	{r4, lr}
 800037e:	4604      	mov	r4, r0
 8000380:	f010 f97c 	bl	801067c <USBPDM1_DeAssertRp>
 8000384:	4620      	mov	r0, r4
 8000386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800038a:	f010 b983 	b.w	8010694 <USBPDM1_AssertRd>

0800038e <USBPD_CAD_AssertRp>:
 800038e:	b510      	push	{r4, lr}
 8000390:	4604      	mov	r4, r0
 8000392:	f010 fa05 	bl	80107a0 <USBPDM1_DeAssertRd>
 8000396:	4620      	mov	r0, r4
 8000398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800039c:	f010 b8d8 	b.w	8010550 <USBPDM1_AssertRp>

080003a0 <USBPD_CAD_EnterErrorRecovery>:
 80003a0:	f00e bd36 	b.w	800ee10 <CAD_Enter_ErrorRecovery>

080003a4 <USBPD_CAD_SRC_SetRpResistor>:
 80003a4:	b510      	push	{r4, lr}
 80003a6:	f00e fd8f 	bl	800eec8 <CAD_Set_ResistorRp>
 80003aa:	2404      	movs	r4, #4
 80003ac:	b900      	cbnz	r0, 80003b0 <USBPD_CAD_SRC_SetRpResistor+0xc>
 80003ae:	2400      	movs	r4, #0
 80003b0:	4620      	mov	r0, r4
 80003b2:	bd10      	pop	{r4, pc}

080003b4 <USBPD_CAD_SetRpResistor>:
 80003b4:	e7f6      	b.n	80003a4 <USBPD_CAD_SRC_SetRpResistor>

080003b6 <USBPD_CAD_GetMemoryConsumption>:
 80003b6:	2024      	movs	r0, #36	@ 0x24
 80003b8:	4770      	bx	lr
	...

080003bc <USBPD_PE_Init>:
 80003bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003c0:	460e      	mov	r6, r1
 80003c2:	4680      	mov	r8, r0
 80003c4:	6870      	ldr	r0, [r6, #4]
 80003c6:	4617      	mov	r7, r2
 80003c8:	461d      	mov	r5, r3
 80003ca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80003ce:	b108      	cbz	r0, 80003d4 <USBPD_PE_Init+0x18>
 80003d0:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80003d2:	b108      	cbz	r0, 80003d8 <USBPD_PE_Init+0x1c>
 80003d4:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 80003d6:	b908      	cbnz	r0, 80003dc <USBPD_PE_Init+0x20>
 80003d8:	271b      	movs	r7, #27
 80003da:	e042      	b.n	8000462 <USBPD_PE_Init+0xa6>
 80003dc:	f1b8 0f03 	cmp.w	r8, #3
 80003e0:	bf28      	it	cs
 80003e2:	2717      	movcs	r7, #23
 80003e4:	d23d      	bcs.n	8000462 <USBPD_PE_Init+0xa6>
 80003e6:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80003ea:	f016 fdcf 	bl	8016f8c <malloc>
 80003ee:	0004      	movs	r4, r0
 80003f0:	bf08      	it	eq
 80003f2:	2716      	moveq	r7, #22
 80003f4:	d035      	beq.n	8000462 <USBPD_PE_Init+0xa6>
 80003f6:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80003fa:	f016 ff17 	bl	801722c <__aeabi_memclr>
 80003fe:	f8df 09ac 	ldr.w	r0, [pc, #2476]	@ 8000dac <.text_47>
 8000402:	4641      	mov	r1, r8
 8000404:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8000408:	6026      	str	r6, [r4, #0]
 800040a:	6067      	str	r7, [r4, #4]
 800040c:	f884 8010 	strb.w	r8, [r4, #16]
 8000410:	60a5      	str	r5, [r4, #8]
 8000412:	f204 438e 	addw	r3, r4, #1166	@ 0x48e
 8000416:	f204 2281 	addw	r2, r4, #641	@ 0x281
 800041a:	4631      	mov	r1, r6
 800041c:	4640      	mov	r0, r8
 800041e:	f004 fd92 	bl	8004f46 <USBPD_PRL_Init>
 8000422:	0007      	movs	r7, r0
 8000424:	d11d      	bne.n	8000462 <USBPD_PE_Init+0xa6>
 8000426:	6820      	ldr	r0, [r4, #0]
 8000428:	6841      	ldr	r1, [r0, #4]
 800042a:	f3c1 0080 	ubfx	r0, r1, #2, #1
 800042e:	2800      	cmp	r0, #0
 8000430:	6860      	ldr	r0, [r4, #4]
 8000432:	6801      	ldr	r1, [r0, #0]
 8000434:	d004      	beq.n	8000440 <USBPD_PE_Init+0x84>
 8000436:	f041 0108 	orr.w	r1, r1, #8
 800043a:	6001      	str	r1, [r0, #0]
 800043c:	2201      	movs	r2, #1
 800043e:	e003      	b.n	8000448 <USBPD_PE_Init+0x8c>
 8000440:	f021 0108 	bic.w	r1, r1, #8
 8000444:	6001      	str	r1, [r0, #0]
 8000446:	2200      	movs	r2, #0
 8000448:	7933      	ldrb	r3, [r6, #4]
 800044a:	f003 0303 	and.w	r3, r3, #3
 800044e:	4611      	mov	r1, r2
 8000450:	4640      	mov	r0, r8
 8000452:	f004 fda6 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000456:	7931      	ldrb	r1, [r6, #4]
 8000458:	f001 0103 	and.w	r1, r1, #3
 800045c:	4640      	mov	r0, r8
 800045e:	f004 fdd1 	bl	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000462:	4638      	mov	r0, r7
 8000464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000468 <USBPD_PE_TimerCounter>:
 8000468:	f8df 1940 	ldr.w	r1, [pc, #2368]	@ 8000dac <.text_47>
 800046c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000470:	8bc1      	ldrh	r1, [r0, #30]
 8000472:	044a      	lsls	r2, r1, #17
 8000474:	d002      	beq.n	800047c <USBPD_PE_TimerCounter+0x14>
 8000476:	8bc1      	ldrh	r1, [r0, #30]
 8000478:	1e4a      	subs	r2, r1, #1
 800047a:	83c2      	strh	r2, [r0, #30]
 800047c:	8c01      	ldrh	r1, [r0, #32]
 800047e:	044a      	lsls	r2, r1, #17
 8000480:	d002      	beq.n	8000488 <USBPD_PE_TimerCounter+0x20>
 8000482:	8c01      	ldrh	r1, [r0, #32]
 8000484:	1e4a      	subs	r2, r1, #1
 8000486:	8402      	strh	r2, [r0, #32]
 8000488:	8cc1      	ldrh	r1, [r0, #38]	@ 0x26
 800048a:	044a      	lsls	r2, r1, #17
 800048c:	d002      	beq.n	8000494 <USBPD_PE_TimerCounter+0x2c>
 800048e:	8cc1      	ldrh	r1, [r0, #38]	@ 0x26
 8000490:	1e4a      	subs	r2, r1, #1
 8000492:	84c2      	strh	r2, [r0, #38]	@ 0x26
 8000494:	8c41      	ldrh	r1, [r0, #34]	@ 0x22
 8000496:	044a      	lsls	r2, r1, #17
 8000498:	d002      	beq.n	80004a0 <USBPD_PE_TimerCounter+0x38>
 800049a:	8c41      	ldrh	r1, [r0, #34]	@ 0x22
 800049c:	1e4a      	subs	r2, r1, #1
 800049e:	8442      	strh	r2, [r0, #34]	@ 0x22
 80004a0:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
 80004a2:	044a      	lsls	r2, r1, #17
 80004a4:	d002      	beq.n	80004ac <USBPD_PE_TimerCounter+0x44>
 80004a6:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
 80004a8:	1e4a      	subs	r2, r1, #1
 80004aa:	8482      	strh	r2, [r0, #36]	@ 0x24
 80004ac:	4770      	bx	lr

080004ae <USBPD_PE_TimerCounteUpdate>:
 80004ae:	b538      	push	{r3, r4, r5, lr}
 80004b0:	460c      	mov	r4, r1
 80004b2:	f8df 18f8 	ldr.w	r1, [pc, #2296]	@ 8000dac <.text_47>
 80004b6:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 80004ba:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 80004be:	da22      	bge.n	8000506 <USBPD_PE_TimerCounteUpdate+0x58>
 80004c0:	8be8      	ldrh	r0, [r5, #30]
 80004c2:	0441      	lsls	r1, r0, #17
 80004c4:	d003      	beq.n	80004ce <USBPD_PE_TimerCounteUpdate+0x20>
 80004c6:	8be8      	ldrh	r0, [r5, #30]
 80004c8:	f000 f81e 	bl	8000508 <.text_8>
 80004cc:	83e8      	strh	r0, [r5, #30]
 80004ce:	8c28      	ldrh	r0, [r5, #32]
 80004d0:	0441      	lsls	r1, r0, #17
 80004d2:	d003      	beq.n	80004dc <USBPD_PE_TimerCounteUpdate+0x2e>
 80004d4:	8c28      	ldrh	r0, [r5, #32]
 80004d6:	f000 f817 	bl	8000508 <.text_8>
 80004da:	8428      	strh	r0, [r5, #32]
 80004dc:	8ce8      	ldrh	r0, [r5, #38]	@ 0x26
 80004de:	0441      	lsls	r1, r0, #17
 80004e0:	d003      	beq.n	80004ea <USBPD_PE_TimerCounteUpdate+0x3c>
 80004e2:	8ce8      	ldrh	r0, [r5, #38]	@ 0x26
 80004e4:	f000 f810 	bl	8000508 <.text_8>
 80004e8:	84e8      	strh	r0, [r5, #38]	@ 0x26
 80004ea:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 80004ec:	0441      	lsls	r1, r0, #17
 80004ee:	d003      	beq.n	80004f8 <USBPD_PE_TimerCounteUpdate+0x4a>
 80004f0:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 80004f2:	f000 f809 	bl	8000508 <.text_8>
 80004f6:	8468      	strh	r0, [r5, #34]	@ 0x22
 80004f8:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
 80004fa:	0441      	lsls	r1, r0, #17
 80004fc:	d003      	beq.n	8000506 <USBPD_PE_TimerCounteUpdate+0x58>
 80004fe:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
 8000500:	f000 f802 	bl	8000508 <.text_8>
 8000504:	84a8      	strh	r0, [r5, #36]	@ 0x24
 8000506:	bd31      	pop	{r0, r4, r5, pc}

08000508 <.text_8>:
 8000508:	4621      	mov	r1, r4
 800050a:	f000 bef9 	b.w	8001300 <PE_UpdateTimer>

0800050e <USBPD_PE_IsCableConnected>:
 800050e:	f8df 289c 	ldr.w	r2, [pc, #2204]	@ 8000dac <.text_47>
 8000512:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000516:	6842      	ldr	r2, [r0, #4]
 8000518:	6813      	ldr	r3, [r2, #0]
 800051a:	f361 330c 	bfi	r3, r1, #12, #1
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	2248      	movs	r2, #72	@ 0x48
 8000522:	7442      	strb	r2, [r0, #17]
 8000524:	4770      	bx	lr

08000526 <USBPD_PE_StateMachine_Reset>:
 8000526:	f8df 2884 	ldr.w	r2, [pc, #2180]	@ 8000dac <.text_47>
 800052a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800052e:	2148      	movs	r1, #72	@ 0x48
 8000530:	7441      	strb	r1, [r0, #17]
 8000532:	4770      	bx	lr

08000534 <USBPD_PE_StateMachine_Stop>:
 8000534:	f005 b81f 	b.w	8005576 <USBPD_PRL_Stop>

08000538 <USBPD_PE_StateMachine_DRP>:
 8000538:	f8df 1870 	ldr.w	r1, [pc, #2160]	@ 8000dac <.text_47>
 800053c:	4602      	mov	r2, r0
 800053e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8000542:	6859      	ldr	r1, [r3, #4]
 8000544:	680a      	ldr	r2, [r1, #0]
 8000546:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800054a:	2900      	cmp	r1, #0
 800054c:	bf18      	it	ne
 800054e:	f002 b9ed 	bne.w	800292c <USBPD_PE_StateMachine_SRC>
 8000552:	f001 bbcd 	b.w	8001cf0 <USBPD_PE_StateMachine_SNK>

08000556 <USBPD_PE_Notification>:
 8000556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000558:	2803      	cmp	r0, #3
 800055a:	4604      	mov	r4, r0
 800055c:	460d      	mov	r5, r1
 800055e:	d214      	bcs.n	800058a <__iar_annotation$$tailcall+0x2>
 8000560:	2600      	movs	r6, #0
 8000562:	9600      	str	r6, [sp, #0]
 8000564:	2300      	movs	r3, #0
 8000566:	f8df 7848 	ldr.w	r7, [pc, #2120]	@ 8000db0 <.text_48>
 800056a:	683e      	ldr	r6, [r7, #0]
 800056c:	462a      	mov	r2, r5
 800056e:	4621      	mov	r1, r4
 8000570:	2009      	movs	r0, #9
 8000572:	47b0      	blx	r6
 8000574:	f8df 2834 	ldr.w	r2, [pc, #2100]	@ 8000dac <.text_47>
 8000578:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800057c:	689a      	ldr	r2, [r3, #8]
 800057e:	68d3      	ldr	r3, [r2, #12]
 8000580:	4629      	mov	r1, r5
 8000582:	4620      	mov	r0, r4
 8000584:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}

08000588 <__iar_annotation$$tailcall>:
 8000588:	4718      	bx	r3
 800058a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800058c <USBPD_PE_InitVDM_Callback>:
 800058c:	f8df 281c 	ldr.w	r2, [pc, #2076]	@ 8000dac <.text_47>
 8000590:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000594:	60c1      	str	r1, [r0, #12]
 8000596:	4770      	bx	lr

08000598 <USBPD_PE_Request_HardReset>:
 8000598:	b580      	push	{r7, lr}
 800059a:	f8df 1810 	ldr.w	r1, [pc, #2064]	@ 8000dac <.text_47>
 800059e:	4602      	mov	r2, r0
 80005a0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80005a4:	230f      	movs	r3, #15
 80005a6:	f881 3032 	strb.w	r3, [r1, #50]	@ 0x32
 80005aa:	6889      	ldr	r1, [r1, #8]
 80005ac:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80005ae:	4790      	blx	r2
 80005b0:	2000      	movs	r0, #0
 80005b2:	bd02      	pop	{r1, pc}

080005b4 <USBPD_PE_Request_CableReset>:
 80005b4:	b538      	push	{r3, r4, r5, lr}
 80005b6:	f000 fbe8 	bl	8000d8a <.text_45>
 80005ba:	6853      	ldr	r3, [r2, #4]
 80005bc:	681c      	ldr	r4, [r3, #0]
 80005be:	f248 7108 	movw	r1, #34568	@ 0x8708
 80005c2:	400c      	ands	r4, r1
 80005c4:	f248 3508 	movw	r5, #33544	@ 0x8308
 80005c8:	42ac      	cmp	r4, r5
 80005ca:	d105      	bne.n	80005d8 <USBPD_PE_Request_CableReset+0x24>
 80005cc:	6891      	ldr	r1, [r2, #8]
 80005ce:	2399      	movs	r3, #153	@ 0x99
 80005d0:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
 80005d4:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80005d6:	4790      	blx	r2
 80005d8:	2010      	movs	r0, #16
 80005da:	bd32      	pop	{r1, r4, r5, pc}

080005dc <USBPD_PE_Request_CtrlMessage>:
 80005dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005e0:	4680      	mov	r8, r0
 80005e2:	460c      	mov	r4, r1
 80005e4:	f8df 07c4 	ldr.w	r0, [pc, #1988]	@ 8000dac <.text_47>
 80005e8:	b093      	sub	sp, #76	@ 0x4c
 80005ea:	4641      	mov	r1, r8
 80005ec:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80005f0:	f8df 17c0 	ldr.w	r1, [pc, #1984]	@ 8000db4 <.text_49>
 80005f4:	4617      	mov	r7, r2
 80005f6:	4668      	mov	r0, sp
 80005f8:	224c      	movs	r2, #76	@ 0x4c
 80005fa:	f016 fe28 	bl	801724e <__aeabi_memcpy>
 80005fe:	f105 0132 	add.w	r1, r5, #50	@ 0x32
 8000602:	2600      	movs	r6, #0
 8000604:	7808      	ldrb	r0, [r1, #0]
 8000606:	b920      	cbnz	r0, 8000612 <USBPD_PE_Request_CtrlMessage+0x36>
 8000608:	6868      	ldr	r0, [r5, #4]
 800060a:	6802      	ldr	r2, [r0, #0]
 800060c:	f3c2 3000 	ubfx	r0, r2, #12, #1
 8000610:	b908      	cbnz	r0, 8000616 <USBPD_PE_Request_CtrlMessage+0x3a>
 8000612:	2603      	movs	r6, #3
 8000614:	e07f      	b.n	8000716 <USBPD_PE_Request_CtrlMessage+0x13a>
 8000616:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800061a:	6828      	ldr	r0, [r5, #0]
 800061c:	f8dc e000 	ldr.w	lr, [ip]
 8000620:	6842      	ldr	r2, [r0, #4]
 8000622:	6868      	ldr	r0, [r5, #4]
 8000624:	6803      	ldr	r3, [r0, #0]
 8000626:	f3c3 0080 	ubfx	r0, r3, #2, #1
 800062a:	f3ce 2c02 	ubfx	ip, lr, #8, #3
 800062e:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8000632:	f89e 9000 	ldrb.w	r9, [lr]
 8000636:	f009 0903 	and.w	r9, r9, #3
 800063a:	08d2      	lsrs	r2, r2, #3
 800063c:	2800      	cmp	r0, #0
 800063e:	bf07      	ittee	eq
 8000640:	2002      	moveq	r0, #2
 8000642:	2300      	moveq	r3, #0
 8000644:	2000      	movne	r0, #0
 8000646:	2304      	movne	r3, #4
 8000648:	f1bc 0f03 	cmp.w	ip, #3
 800064c:	bf0c      	ite	eq
 800064e:	f04f 0c08 	moveq.w	ip, #8
 8000652:	46b4      	movne	ip, r6
 8000654:	f1b9 0f02 	cmp.w	r9, #2
 8000658:	f002 0201 	and.w	r2, r2, #1
 800065c:	bf0c      	ite	eq
 800065e:	f04f 0e40 	moveq.w	lr, #64	@ 0x40
 8000662:	46b6      	movne	lr, r6
 8000664:	4302      	orrs	r2, r0
 8000666:	431a      	orrs	r2, r3
 8000668:	ea4c 0202 	orr.w	r2, ip, r2
 800066c:	ea4e 0202 	orr.w	r2, lr, r2
 8000670:	f012 0f03 	tst.w	r2, #3
 8000674:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8000678:	bf18      	it	ne
 800067a:	f042 0210 	orrne.w	r2, r2, #16
 800067e:	f012 0f05 	tst.w	r2, #5
 8000682:	f81d 0003 	ldrb.w	r0, [sp, r3]
 8000686:	bf18      	it	ne
 8000688:	f042 0220 	orrne.w	r2, r2, #32
 800068c:	4002      	ands	r2, r0
 800068e:	4282      	cmp	r2, r0
 8000690:	d118      	bne.n	80006c4 <USBPD_PE_Request_CtrlMessage+0xe8>
 8000692:	2c05      	cmp	r4, #5
 8000694:	704e      	strb	r6, [r1, #1]
 8000696:	f205 225e 	addw	r2, r5, #606	@ 0x25e
 800069a:	d02e      	beq.n	80006fa <USBPD_PE_Request_CtrlMessage+0x11e>
 800069c:	2c0b      	cmp	r4, #11
 800069e:	d00e      	beq.n	80006be <USBPD_PE_Request_CtrlMessage+0xe2>
 80006a0:	2c0d      	cmp	r4, #13
 80006a2:	d028      	beq.n	80006f6 <USBPD_PE_Request_CtrlMessage+0x11a>
 80006a4:	2c11      	cmp	r4, #17
 80006a6:	d00f      	beq.n	80006c8 <USBPD_PE_Request_CtrlMessage+0xec>
 80006a8:	2c12      	cmp	r4, #18
 80006aa:	d012      	beq.n	80006d2 <USBPD_PE_Request_CtrlMessage+0xf6>
 80006ac:	2c14      	cmp	r4, #20
 80006ae:	d012      	beq.n	80006d6 <USBPD_PE_Request_CtrlMessage+0xfa>
 80006b0:	2c15      	cmp	r4, #21
 80006b2:	d017      	beq.n	80006e4 <USBPD_PE_Request_CtrlMessage+0x108>
 80006b4:	2c16      	cmp	r4, #22
 80006b6:	d009      	beq.n	80006cc <USBPD_PE_Request_CtrlMessage+0xf0>
 80006b8:	2c18      	cmp	r4, #24
 80006ba:	d01c      	beq.n	80006f6 <USBPD_PE_Request_CtrlMessage+0x11a>
 80006bc:	e01f      	b.n	80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006be:	68af      	ldr	r7, [r5, #8]
 80006c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80006c2:	b9e0      	cbnz	r0, 80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006c4:	2602      	movs	r6, #2
 80006c6:	e026      	b.n	8000716 <USBPD_PE_Request_CtrlMessage+0x13a>
 80006c8:	2011      	movs	r0, #17
 80006ca:	e017      	b.n	80006fc <USBPD_PE_Request_CtrlMessage+0x120>
 80006cc:	2716      	movs	r7, #22
 80006ce:	7017      	strb	r7, [r2, #0]
 80006d0:	e015      	b.n	80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006d2:	2012      	movs	r0, #18
 80006d4:	e012      	b.n	80006fc <USBPD_PE_Request_CtrlMessage+0x120>
 80006d6:	6828      	ldr	r0, [r5, #0]
 80006d8:	8907      	ldrh	r7, [r0, #8]
 80006da:	f3c7 0080 	ubfx	r0, r7, #2, #1
 80006de:	b970      	cbnz	r0, 80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006e0:	2610      	movs	r6, #16
 80006e2:	e018      	b.n	8000716 <USBPD_PE_Request_CtrlMessage+0x13a>
 80006e4:	6828      	ldr	r0, [r5, #0]
 80006e6:	8907      	ldrh	r7, [r0, #8]
 80006e8:	f3c7 10c0 	ubfx	r0, r7, #7, #1
 80006ec:	b908      	cbnz	r0, 80006f2 <USBPD_PE_Request_CtrlMessage+0x116>
 80006ee:	2010      	movs	r0, #16
 80006f0:	e012      	b.n	8000718 <USBPD_PE_Request_CtrlMessage+0x13c>
 80006f2:	2015      	movs	r0, #21
 80006f4:	e002      	b.n	80006fc <USBPD_PE_Request_CtrlMessage+0x120>
 80006f6:	704f      	strb	r7, [r1, #1]
 80006f8:	e001      	b.n	80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006fa:	2005      	movs	r0, #5
 80006fc:	7010      	strb	r0, [r2, #0]
 80006fe:	eb0d 0703 	add.w	r7, sp, r3
 8000702:	7878      	ldrb	r0, [r7, #1]
 8000704:	7050      	strb	r0, [r2, #1]
 8000706:	eb0d 0203 	add.w	r2, sp, r3
 800070a:	7890      	ldrb	r0, [r2, #2]
 800070c:	7008      	strb	r0, [r1, #0]
 800070e:	4640      	mov	r0, r8
 8000710:	68a9      	ldr	r1, [r5, #8]
 8000712:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8000714:	4790      	blx	r2
 8000716:	4630      	mov	r0, r6
 8000718:	b013      	add	sp, #76	@ 0x4c
 800071a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800071e <USBPD_PE_Request_DataMessage>:
 800071e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000720:	f000 f85f 	bl	80007e2 <.text_20>
 8000724:	b923      	cbnz	r3, 8000730 <USBPD_PE_Request_DataMessage+0x12>
 8000726:	686b      	ldr	r3, [r5, #4]
 8000728:	681f      	ldr	r7, [r3, #0]
 800072a:	f3c7 3300 	ubfx	r3, r7, #12, #1
 800072e:	b90b      	cbnz	r3, 8000734 <USBPD_PE_Request_DataMessage+0x16>
 8000730:	2403      	movs	r4, #3
 8000732:	e01a      	b.n	800076a <USBPD_PE_Request_DataMessage+0x4c>
 8000734:	2300      	movs	r3, #0
 8000736:	7073      	strb	r3, [r6, #1]
 8000738:	2901      	cmp	r1, #1
 800073a:	f240 3302 	movw	r3, #770	@ 0x302
 800073e:	f240 7703 	movw	r7, #1795	@ 0x703
 8000742:	d004      	beq.n	800074e <USBPD_PE_Request_DataMessage+0x30>
 8000744:	2906      	cmp	r1, #6
 8000746:	d012      	beq.n	800076e <USBPD_PE_Request_DataMessage+0x50>
 8000748:	2907      	cmp	r1, #7
 800074a:	d01a      	beq.n	8000782 <USBPD_PE_Request_DataMessage+0x64>
 800074c:	e025      	b.n	800079a <USBPD_PE_Request_DataMessage+0x7c>
 800074e:	6869      	ldr	r1, [r5, #4]
 8000750:	680a      	ldr	r2, [r1, #0]
 8000752:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8000756:	b141      	cbz	r1, 800076a <USBPD_PE_Request_DataMessage+0x4c>
 8000758:	2101      	movs	r1, #1
 800075a:	f885 125f 	strb.w	r1, [r5, #607]	@ 0x25f
 800075e:	2207      	movs	r2, #7
 8000760:	7032      	strb	r2, [r6, #0]
 8000762:	68a9      	ldr	r1, [r5, #8]
 8000764:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8000766:	4790      	blx	r2
 8000768:	2400      	movs	r4, #0
 800076a:	4620      	mov	r0, r4
 800076c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800076e:	6869      	ldr	r1, [r5, #4]
 8000770:	6809      	ldr	r1, [r1, #0]
 8000772:	400f      	ands	r7, r1
 8000774:	429f      	cmp	r7, r3
 8000776:	d1f8      	bne.n	800076a <USBPD_PE_Request_DataMessage+0x4c>
 8000778:	6812      	ldr	r2, [r2, #0]
 800077a:	62aa      	str	r2, [r5, #40]	@ 0x28
 800077c:	212b      	movs	r1, #43	@ 0x2b
 800077e:	7031      	strb	r1, [r6, #0]
 8000780:	e7ef      	b.n	8000762 <USBPD_PE_Request_DataMessage+0x44>
 8000782:	6869      	ldr	r1, [r5, #4]
 8000784:	6809      	ldr	r1, [r1, #0]
 8000786:	400f      	ands	r7, r1
 8000788:	429f      	cmp	r7, r3
 800078a:	d1ee      	bne.n	800076a <USBPD_PE_Request_DataMessage+0x4c>
 800078c:	6812      	ldr	r2, [r2, #0]
 800078e:	62aa      	str	r2, [r5, #40]	@ 0x28
 8000790:	215d      	movs	r1, #93	@ 0x5d
 8000792:	f885 125f 	strb.w	r1, [r5, #607]	@ 0x25f
 8000796:	2262      	movs	r2, #98	@ 0x62
 8000798:	e7e2      	b.n	8000760 <USBPD_PE_Request_DataMessage+0x42>
 800079a:	2410      	movs	r4, #16
 800079c:	e7e5      	b.n	800076a <USBPD_PE_Request_DataMessage+0x4c>

0800079e <USBPD_PE_Send_Request>:
 800079e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a0:	f000 f81f 	bl	80007e2 <.text_20>
 80007a4:	b923      	cbnz	r3, 80007b0 <USBPD_PE_Send_Request+0x12>
 80007a6:	686b      	ldr	r3, [r5, #4]
 80007a8:	681f      	ldr	r7, [r3, #0]
 80007aa:	f3c7 3300 	ubfx	r3, r7, #12, #1
 80007ae:	b90b      	cbnz	r3, 80007b4 <USBPD_PE_Send_Request+0x16>
 80007b0:	2403      	movs	r4, #3
 80007b2:	e014      	b.n	80007de <USBPD_PE_Send_Request+0x40>
 80007b4:	686f      	ldr	r7, [r5, #4]
 80007b6:	683f      	ldr	r7, [r7, #0]
 80007b8:	f240 7304 	movw	r3, #1796	@ 0x704
 80007bc:	403b      	ands	r3, r7
 80007be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80007c2:	d10c      	bne.n	80007de <USBPD_PE_Send_Request+0x40>
 80007c4:	2445      	movs	r4, #69	@ 0x45
 80007c6:	7034      	strb	r4, [r6, #0]
 80007c8:	61a9      	str	r1, [r5, #24]
 80007ca:	2400      	movs	r4, #0
 80007cc:	6969      	ldr	r1, [r5, #20]
 80007ce:	f362 01c4 	bfi	r1, r2, #3, #2
 80007d2:	6169      	str	r1, [r5, #20]
 80007d4:	2200      	movs	r2, #0
 80007d6:	7072      	strb	r2, [r6, #1]
 80007d8:	68a9      	ldr	r1, [r5, #8]
 80007da:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80007dc:	4790      	blx	r2
 80007de:	4620      	mov	r0, r4
 80007e0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080007e2 <.text_20>:
 80007e2:	f8df 3be4 	ldr.w	r3, [pc, #3044]	@ 80013c8 <.text_70>
 80007e6:	4604      	mov	r4, r0
 80007e8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80007ec:	f105 0632 	add.w	r6, r5, #50	@ 0x32
 80007f0:	2402      	movs	r4, #2
 80007f2:	7833      	ldrb	r3, [r6, #0]
 80007f4:	4770      	bx	lr

080007f6 <USBPD_PE_SendExtendedMessage>:
 80007f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007fa:	4681      	mov	r9, r0
 80007fc:	468a      	mov	sl, r1
 80007fe:	f8df 0bc8 	ldr.w	r0, [pc, #3016]	@ 80013c8 <.text_70>
 8000802:	4649      	mov	r1, r9
 8000804:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 8000808:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 800080c:	469b      	mov	fp, r3
 800080e:	2500      	movs	r5, #0
 8000810:	b920      	cbnz	r0, 800081c <USBPD_PE_SendExtendedMessage+0x26>
 8000812:	6860      	ldr	r0, [r4, #4]
 8000814:	6801      	ldr	r1, [r0, #0]
 8000816:	f3c1 3000 	ubfx	r0, r1, #12, #1
 800081a:	b908      	cbnz	r0, 8000820 <USBPD_PE_SendExtendedMessage+0x2a>
 800081c:	2503      	movs	r5, #3
 800081e:	e066      	b.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 8000820:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8000824:	2803      	cmp	r0, #3
 8000826:	d10d      	bne.n	8000844 <USBPD_PE_SendExtendedMessage+0x4e>
 8000828:	6860      	ldr	r0, [r4, #4]
 800082a:	7801      	ldrb	r1, [r0, #0]
 800082c:	f001 0103 	and.w	r1, r1, #3
 8000830:	2901      	cmp	r1, #1
 8000832:	bf98      	it	ls
 8000834:	2501      	movls	r5, #1
 8000836:	d95a      	bls.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 8000838:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 800083c:	f240 1105 	movw	r1, #261	@ 0x105
 8000840:	4588      	cmp	r8, r1
 8000842:	d301      	bcc.n	8000848 <USBPD_PE_SendExtendedMessage+0x52>
 8000844:	2502      	movs	r5, #2
 8000846:	e052      	b.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 8000848:	f88d 2000 	strb.w	r2, [sp]
 800084c:	f204 265d 	addw	r6, r4, #605	@ 0x25d
 8000850:	6960      	ldr	r0, [r4, #20]
 8000852:	f020 0020 	bic.w	r0, r0, #32
 8000856:	6160      	str	r0, [r4, #20]
 8000858:	f89d 0000 	ldrb.w	r0, [sp]
 800085c:	2803      	cmp	r0, #3
 800085e:	d008      	beq.n	8000872 <USBPD_PE_SendExtendedMessage+0x7c>
 8000860:	2804      	cmp	r0, #4
 8000862:	d018      	beq.n	8000896 <USBPD_PE_SendExtendedMessage+0xa0>
 8000864:	2806      	cmp	r0, #6
 8000866:	d01d      	beq.n	80008a4 <USBPD_PE_SendExtendedMessage+0xae>
 8000868:	2808      	cmp	r0, #8
 800086a:	d01d      	beq.n	80008a8 <USBPD_PE_SendExtendedMessage+0xb2>
 800086c:	280a      	cmp	r0, #10
 800086e:	d01e      	beq.n	80008ae <USBPD_PE_SendExtendedMessage+0xb8>
 8000870:	e020      	b.n	80008b4 <USBPD_PE_SendExtendedMessage+0xbe>
 8000872:	210c      	movs	r1, #12
 8000874:	70b1      	strb	r1, [r6, #2]
 8000876:	6960      	ldr	r0, [r4, #20]
 8000878:	f040 0020 	orr.w	r0, r0, #32
 800087c:	6160      	str	r0, [r4, #20]
 800087e:	ea5f 0008 	movs.w	r0, r8
 8000882:	d025      	beq.n	80008d0 <USBPD_PE_SendExtendedMessage+0xda>
 8000884:	4648      	mov	r0, r9
 8000886:	f000 fa86 	bl	8000d96 <PE_Get_UnchunkedSupport>
 800088a:	2700      	movs	r7, #0
 800088c:	2801      	cmp	r0, #1
 800088e:	bf08      	it	eq
 8000890:	2704      	moveq	r7, #4
 8000892:	2000      	movs	r0, #0
 8000894:	e017      	b.n	80008c6 <USBPD_PE_SendExtendedMessage+0xd0>
 8000896:	200d      	movs	r0, #13
 8000898:	70b0      	strb	r0, [r6, #2]
 800089a:	6961      	ldr	r1, [r4, #20]
 800089c:	f041 0120 	orr.w	r1, r1, #32
 80008a0:	6161      	str	r1, [r4, #20]
 80008a2:	e7ec      	b.n	800087e <USBPD_PE_SendExtendedMessage+0x88>
 80008a4:	200e      	movs	r0, #14
 80008a6:	e7f7      	b.n	8000898 <USBPD_PE_SendExtendedMessage+0xa2>
 80008a8:	205b      	movs	r0, #91	@ 0x5b
 80008aa:	70b0      	strb	r0, [r6, #2]
 80008ac:	e7e7      	b.n	800087e <USBPD_PE_SendExtendedMessage+0x88>
 80008ae:	215c      	movs	r1, #92	@ 0x5c
 80008b0:	70b1      	strb	r1, [r6, #2]
 80008b2:	e7e4      	b.n	800087e <USBPD_PE_SendExtendedMessage+0x88>
 80008b4:	2510      	movs	r5, #16
 80008b6:	e01a      	b.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 80008b8:	183a      	adds	r2, r7, r0
 80008ba:	f81b 1000 	ldrb.w	r1, [fp, r0]
 80008be:	4422      	add	r2, r4
 80008c0:	1c40      	adds	r0, r0, #1
 80008c2:	f882 1385 	strb.w	r1, [r2, #901]	@ 0x385
 80008c6:	4540      	cmp	r0, r8
 80008c8:	d3f6      	bcc.n	80008b8 <USBPD_PE_SendExtendedMessage+0xc2>
 80008ca:	f8a4 8490 	strh.w	r8, [r4, #1168]	@ 0x490
 80008ce:	e001      	b.n	80008d4 <USBPD_PE_SendExtendedMessage+0xde>
 80008d0:	f8a4 5490 	strh.w	r5, [r4, #1168]	@ 0x490
 80008d4:	f104 0032 	add.w	r0, r4, #50	@ 0x32
 80008d8:	2231      	movs	r2, #49	@ 0x31
 80008da:	f880 a001 	strb.w	sl, [r0, #1]
 80008de:	f89d 1000 	ldrb.w	r1, [sp]
 80008e2:	7031      	strb	r1, [r6, #0]
 80008e4:	7002      	strb	r2, [r0, #0]
 80008e6:	4648      	mov	r0, r9
 80008e8:	68a3      	ldr	r3, [r4, #8]
 80008ea:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80008ec:	4788      	blx	r1
 80008ee:	4628      	mov	r0, r5
 80008f0:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080008f4 <PE_Send_RESET>:
 80008f4:	b538      	push	{r3, r4, r5, lr}
 80008f6:	4604      	mov	r4, r0
 80008f8:	460d      	mov	r5, r1
 80008fa:	2d05      	cmp	r5, #5
 80008fc:	7c20      	ldrb	r0, [r4, #16]
 80008fe:	bf0c      	ite	eq
 8000900:	211f      	moveq	r1, #31
 8000902:	215e      	movne	r1, #94	@ 0x5e
 8000904:	f7ff fe27 	bl	8000556 <USBPD_PE_Notification>
 8000908:	7c20      	ldrb	r0, [r4, #16]
 800090a:	4629      	mov	r1, r5
 800090c:	f004 fdd9 	bl	80054c2 <USBPD_PRL_ResetRequestProcess>
 8000910:	f3ef 8010 	mrs	r0, PRIMASK
 8000914:	b672      	cpsid	i
 8000916:	2100      	movs	r1, #0
 8000918:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
 800091c:	f380 8810 	msr	PRIMASK, r0
 8000920:	bd31      	pop	{r0, r4, r5, pc}

08000922 <PE_Get_SpecRevision>:
 8000922:	f8df 1aa4 	ldr.w	r1, [pc, #2724]	@ 80013c8 <.text_70>
 8000926:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800092a:	6841      	ldr	r1, [r0, #4]
 800092c:	7808      	ldrb	r0, [r1, #0]
 800092e:	f000 0003 	and.w	r0, r0, #3
 8000932:	4770      	bx	lr

08000934 <PE_ChangePowerRole>:
 8000934:	6842      	ldr	r2, [r0, #4]
 8000936:	6813      	ldr	r3, [r2, #0]
 8000938:	f361 0382 	bfi	r3, r1, #2, #1
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	7c00      	ldrb	r0, [r0, #16]
 8000940:	f004 bb45 	b.w	8004fce <USBPD_PRL_SetHeaderPowerRole>

08000944 <PE_Get_RxEvent>:
 8000944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000946:	2114      	movs	r1, #20
 8000948:	f3ef 8410 	mrs	r4, PRIMASK
 800094c:	b672      	cpsid	i
 800094e:	f100 0530 	add.w	r5, r0, #48	@ 0x30
 8000952:	7b2a      	ldrb	r2, [r5, #12]
 8000954:	b332      	cbz	r2, 80009a4 <PE_Get_RxEvent+0x60>
 8000956:	f500 7613 	add.w	r6, r0, #588	@ 0x24c
 800095a:	5cb3      	ldrb	r3, [r6, r2]
 800095c:	065f      	lsls	r7, r3, #25
 800095e:	bf58      	it	pl
 8000960:	2103      	movpl	r1, #3
 8000962:	d51f      	bpl.n	80009a4 <PE_Get_RxEvent+0x60>
 8000964:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000968:	435a      	muls	r2, r3
 800096a:	4410      	add	r0, r2
 800096c:	38cb      	subs	r0, #203	@ 0xcb
 800096e:	60a8      	str	r0, [r5, #8]
 8000970:	7802      	ldrb	r2, [r0, #0]
 8000972:	7840      	ldrb	r0, [r0, #1]
 8000974:	eb02 2300 	add.w	r3, r2, r0, lsl #8
 8000978:	7b28      	ldrb	r0, [r5, #12]
 800097a:	80ab      	strh	r3, [r5, #4]
 800097c:	5c32      	ldrb	r2, [r6, r0]
 800097e:	f002 021f 	and.w	r2, r2, #31
 8000982:	2a01      	cmp	r2, #1
 8000984:	d004      	beq.n	8000990 <PE_Get_RxEvent+0x4c>
 8000986:	2a02      	cmp	r2, #2
 8000988:	d005      	beq.n	8000996 <PE_Get_RxEvent+0x52>
 800098a:	2a04      	cmp	r2, #4
 800098c:	d007      	beq.n	800099e <PE_Get_RxEvent+0x5a>
 800098e:	e009      	b.n	80009a4 <PE_Get_RxEvent+0x60>
 8000990:	2111      	movs	r1, #17
 8000992:	2000      	movs	r0, #0
 8000994:	e005      	b.n	80009a2 <PE_Get_RxEvent+0x5e>
 8000996:	2201      	movs	r2, #1
 8000998:	2112      	movs	r1, #18
 800099a:	702a      	strb	r2, [r5, #0]
 800099c:	e002      	b.n	80009a4 <PE_Get_RxEvent+0x60>
 800099e:	2113      	movs	r1, #19
 80009a0:	2002      	movs	r0, #2
 80009a2:	7028      	strb	r0, [r5, #0]
 80009a4:	f384 8810 	msr	PRIMASK, r4
 80009a8:	4608      	mov	r0, r1
 80009aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009ac <PE_Clear_RxEvent>:
 80009ac:	b510      	push	{r4, lr}
 80009ae:	4601      	mov	r1, r0
 80009b0:	f3ef 8210 	mrs	r2, PRIMASK
 80009b4:	b672      	cpsid	i
 80009b6:	f891 003c 	ldrb.w	r0, [r1, #60]	@ 0x3c
 80009ba:	b1c8      	cbz	r0, 80009f0 <__iar_annotation$$tailcall+0x8>
 80009bc:	1e40      	subs	r0, r0, #1
 80009be:	b2c0      	uxtb	r0, r0
 80009c0:	f201 234d 	addw	r3, r1, #589	@ 0x24d
 80009c4:	2400      	movs	r4, #0
 80009c6:	541c      	strb	r4, [r3, r0]
 80009c8:	1e40      	subs	r0, r0, #1
 80009ca:	4180      	sbcs	r0, r0
 80009cc:	0fc0      	lsrs	r0, r0, #31
 80009ce:	5c1b      	ldrb	r3, [r3, r0]
 80009d0:	065c      	lsls	r4, r3, #25
 80009d2:	d50a      	bpl.n	80009ea <__iar_annotation$$tailcall+0x2>
 80009d4:	1c40      	adds	r0, r0, #1
 80009d6:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 80009da:	f382 8810 	msr	PRIMASK, r2
 80009de:	7c08      	ldrb	r0, [r1, #16]
 80009e0:	6889      	ldr	r1, [r1, #8]
 80009e2:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80009e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

080009e8 <__iar_annotation$$tailcall>:
 80009e8:	4710      	bx	r2
 80009ea:	2000      	movs	r0, #0
 80009ec:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 80009f0:	f382 8810 	msr	PRIMASK, r2
 80009f4:	bd10      	pop	{r4, pc}

080009f6 <PE_PRL_Control_RxEvent>:
 80009f6:	f8df 19d0 	ldr.w	r1, [pc, #2512]	@ 80013c8 <.text_70>
 80009fa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80009fe:	2000      	movs	r0, #0
 8000a00:	f3ef 8210 	mrs	r2, PRIMASK
 8000a04:	b672      	cpsid	i
 8000a06:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8000a0a:	b101      	cbz	r1, 8000a0e <PE_PRL_Control_RxEvent+0x18>
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f382 8810 	msr	PRIMASK, r2
 8000a12:	4770      	bx	lr

08000a14 <PE_Convert_SOPRxEvent>:
 8000a14:	b118      	cbz	r0, 8000a1e <PE_Convert_SOPRxEvent+0xa>
 8000a16:	2802      	cmp	r0, #2
 8000a18:	d005      	beq.n	8000a26 <PE_Convert_SOPRxEvent+0x12>
 8000a1a:	d302      	bcc.n	8000a22 <PE_Convert_SOPRxEvent+0xe>
 8000a1c:	e005      	b.n	8000a2a <PE_Convert_SOPRxEvent+0x16>
 8000a1e:	2011      	movs	r0, #17
 8000a20:	4770      	bx	lr
 8000a22:	2012      	movs	r0, #18
 8000a24:	4770      	bx	lr
 8000a26:	2013      	movs	r0, #19
 8000a28:	4770      	bx	lr
 8000a2a:	2014      	movs	r0, #20
 8000a2c:	4770      	bx	lr

08000a2e <PE_Check_AMSConflict>:
 8000a2e:	b538      	push	{r3, r4, r5, lr}
 8000a30:	4605      	mov	r5, r0
 8000a32:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 8000a36:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8000a38:	2400      	movs	r4, #0
 8000a3a:	4001      	ands	r1, r0
 8000a3c:	290d      	cmp	r1, #13
 8000a3e:	d102      	bne.n	8000a46 <PE_Check_AMSConflict+0x18>
 8000a40:	2110      	movs	r1, #16
 8000a42:	7469      	strb	r1, [r5, #17]
 8000a44:	e02c      	b.n	8000aa0 <PE_Check_AMSConflict+0x72>
 8000a46:	7f28      	ldrb	r0, [r5, #28]
 8000a48:	b188      	cbz	r0, 8000a6e <PE_Check_AMSConflict+0x40>
 8000a4a:	1e40      	subs	r0, r0, #1
 8000a4c:	2801      	cmp	r0, #1
 8000a4e:	d914      	bls.n	8000a7a <PE_Check_AMSConflict+0x4c>
 8000a50:	1e80      	subs	r0, r0, #2
 8000a52:	d014      	beq.n	8000a7e <PE_Check_AMSConflict+0x50>
 8000a54:	1e40      	subs	r0, r0, #1
 8000a56:	d023      	beq.n	8000aa0 <PE_Check_AMSConflict+0x72>
 8000a58:	1e40      	subs	r0, r0, #1
 8000a5a:	2809      	cmp	r0, #9
 8000a5c:	bf84      	itt	hi
 8000a5e:	380b      	subhi	r0, #11
 8000a60:	2801      	cmphi	r0, #1
 8000a62:	d90a      	bls.n	8000a7a <PE_Check_AMSConflict+0x4c>
 8000a64:	1e80      	subs	r0, r0, #2
 8000a66:	d005      	beq.n	8000a74 <PE_Check_AMSConflict+0x46>
 8000a68:	384d      	subs	r0, #77	@ 0x4d
 8000a6a:	d006      	beq.n	8000a7a <PE_Check_AMSConflict+0x4c>
 8000a6c:	e00a      	b.n	8000a84 <PE_Check_AMSConflict+0x56>
 8000a6e:	2203      	movs	r2, #3
 8000a70:	746a      	strb	r2, [r5, #17]
 8000a72:	e016      	b.n	8000aa2 <PE_Check_AMSConflict+0x74>
 8000a74:	200f      	movs	r0, #15
 8000a76:	7468      	strb	r0, [r5, #17]
 8000a78:	e013      	b.n	8000aa2 <PE_Check_AMSConflict+0x74>
 8000a7a:	2011      	movs	r0, #17
 8000a7c:	e000      	b.n	8000a80 <PE_Check_AMSConflict+0x52>
 8000a7e:	200f      	movs	r0, #15
 8000a80:	7468      	strb	r0, [r5, #17]
 8000a82:	e00d      	b.n	8000aa0 <PE_Check_AMSConflict+0x72>
 8000a84:	7c28      	ldrb	r0, [r5, #16]
 8000a86:	215c      	movs	r1, #92	@ 0x5c
 8000a88:	f7ff fd65 	bl	8000556 <USBPD_PE_Notification>
 8000a8c:	2103      	movs	r1, #3
 8000a8e:	686a      	ldr	r2, [r5, #4]
 8000a90:	7469      	strb	r1, [r5, #17]
 8000a92:	f240 7004 	movw	r0, #1796	@ 0x704
 8000a96:	6811      	ldr	r1, [r2, #0]
 8000a98:	4001      	ands	r1, r0
 8000a9a:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8000a9e:	d000      	beq.n	8000aa2 <PE_Check_AMSConflict+0x74>
 8000aa0:	2415      	movs	r4, #21
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	bd32      	pop	{r1, r4, r5, pc}

08000aa6 <PE_PRL_ResetReceived>:
 8000aa6:	b538      	push	{r3, r4, r5, lr}
 8000aa8:	4604      	mov	r4, r0
 8000aaa:	f8df 091c 	ldr.w	r0, [pc, #2332]	@ 80013c8 <.text_70>
 8000aae:	4622      	mov	r2, r4
 8000ab0:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8000ab4:	2905      	cmp	r1, #5
 8000ab6:	d114      	bne.n	8000ae2 <PE_PRL_ResetReceived+0x3c>
 8000ab8:	6868      	ldr	r0, [r5, #4]
 8000aba:	6801      	ldr	r1, [r0, #0]
 8000abc:	f021 0110 	bic.w	r1, r1, #16
 8000ac0:	6001      	str	r1, [r0, #0]
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	6969      	ldr	r1, [r5, #20]
 8000ac6:	f360 214a 	bfi	r1, r0, #9, #2
 8000aca:	f105 0032 	add.w	r0, r5, #50	@ 0x32
 8000ace:	6169      	str	r1, [r5, #20]
 8000ad0:	2214      	movs	r2, #20
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	7002      	strb	r2, [r0, #0]
 8000ad6:	7283      	strb	r3, [r0, #10]
 8000ad8:	211e      	movs	r1, #30
 8000ada:	7c28      	ldrb	r0, [r5, #16]
 8000adc:	f7ff fd3b 	bl	8000556 <USBPD_PE_Notification>
 8000ae0:	e003      	b.n	8000aea <PE_PRL_ResetReceived+0x44>
 8000ae2:	6968      	ldr	r0, [r5, #20]
 8000ae4:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8000ae8:	6168      	str	r0, [r5, #20]
 8000aea:	4620      	mov	r0, r4
 8000aec:	68a9      	ldr	r1, [r5, #8]
 8000aee:	e148      	b.n	8000d82 <.text_44>

08000af0 <PE_PRL_BistCompleted>:
 8000af0:	4770      	bx	lr

08000af2 <PE_Reset_HardReset>:
 8000af2:	b510      	push	{r4, lr}
 8000af4:	4604      	mov	r4, r0
 8000af6:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8000afa:	b118      	cbz	r0, 8000b04 <PE_Reset_HardReset+0x12>
 8000afc:	7c20      	ldrb	r0, [r4, #16]
 8000afe:	215b      	movs	r1, #91	@ 0x5b
 8000b00:	f7ff fd29 	bl	8000556 <USBPD_PE_Notification>
 8000b04:	4620      	mov	r0, r4
 8000b06:	f000 f82a 	bl	8000b5e <PE_Reset_ZI>
 8000b0a:	f000 f88e 	bl	8000c2a <.text_37>
 8000b0e:	6820      	ldr	r0, [r4, #0]
 8000b10:	7903      	ldrb	r3, [r0, #4]
 8000b12:	f003 0303 	and.w	r3, r3, #3
 8000b16:	d009      	beq.n	8000b2c <PE_Reset_HardReset+0x3a>
 8000b18:	7c20      	ldrb	r0, [r4, #16]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	f004 fa40 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000b22:	6860      	ldr	r0, [r4, #4]
 8000b24:	6801      	ldr	r1, [r0, #0]
 8000b26:	f041 0108 	orr.w	r1, r1, #8
 8000b2a:	e008      	b.n	8000b3e <PE_Reset_HardReset+0x4c>
 8000b2c:	7c20      	ldrb	r0, [r4, #16]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	f004 fa36 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000b36:	6860      	ldr	r0, [r4, #4]
 8000b38:	6801      	ldr	r1, [r0, #0]
 8000b3a:	f021 0108 	bic.w	r1, r1, #8
 8000b3e:	6001      	str	r1, [r0, #0]
 8000b40:	f000 f840 	bl	8000bc4 <.text_34>
 8000b44:	0892      	lsrs	r2, r2, #2
 8000b46:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
 8000b4a:	6008      	str	r0, [r1, #0]
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	7c20      	ldrb	r0, [r4, #16]
 8000b50:	f004 fa7e 	bl	8005050 <USBPD_PRL_SOPCapability>
 8000b54:	7c20      	ldrb	r0, [r4, #16]
 8000b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b5a:	f004 bcee 	b.w	800553a <USBPD_PRL_Reset>

08000b5e <PE_Reset_ZI>:
 8000b5e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000b60:	4604      	mov	r4, r0
 8000b62:	2000      	movs	r0, #0
 8000b64:	9001      	str	r0, [sp, #4]
 8000b66:	2100      	movs	r1, #0
 8000b68:	6860      	ldr	r0, [r4, #4]
 8000b6a:	6802      	ldr	r2, [r0, #0]
 8000b6c:	f022 0210 	bic.w	r2, r2, #16
 8000b70:	6002      	str	r2, [r0, #0]
 8000b72:	4620      	mov	r0, r4
 8000b74:	f000 fbd6 	bl	8001324 <PE_SetPowerNegotiation>
 8000b78:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8000b7c:	f104 0014 	add.w	r0, r4, #20
 8000b80:	f016 fb54 	bl	801722c <__aeabi_memclr>
 8000b84:	68a5      	ldr	r5, [r4, #8]
 8000b86:	7c20      	ldrb	r0, [r4, #16]
 8000b88:	69ae      	ldr	r6, [r5, #24]
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	aa01      	add	r2, sp, #4
 8000b8e:	2102      	movs	r1, #2
 8000b90:	47b0      	blx	r6
 8000b92:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8000b96:	9000      	str	r0, [sp, #0]
 8000b98:	2304      	movs	r3, #4
 8000b9a:	68a5      	ldr	r5, [r4, #8]
 8000b9c:	7c20      	ldrb	r0, [r4, #16]
 8000b9e:	69ae      	ldr	r6, [r5, #24]
 8000ba0:	466a      	mov	r2, sp
 8000ba2:	2106      	movs	r1, #6
 8000ba4:	47b0      	blx	r6
 8000ba6:	6820      	ldr	r0, [r4, #0]
 8000ba8:	7901      	ldrb	r1, [r0, #4]
 8000baa:	7c20      	ldrb	r0, [r4, #16]
 8000bac:	f001 0103 	and.w	r1, r1, #3
 8000bb0:	f004 fa28 	bl	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000bb4:	f000 f806 	bl	8000bc4 <.text_34>
 8000bb8:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8000bbc:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000bc0:	600a      	str	r2, [r1, #0]
 8000bc2:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08000bc4 <.text_34>:
 8000bc4:	6820      	ldr	r0, [r4, #0]
 8000bc6:	6861      	ldr	r1, [r4, #4]
 8000bc8:	7900      	ldrb	r0, [r0, #4]
 8000bca:	680a      	ldr	r2, [r1, #0]
 8000bcc:	f000 0003 	and.w	r0, r0, #3
 8000bd0:	4770      	bx	lr

08000bd2 <PE_Reset_Counter>:
 8000bd2:	2103      	movs	r1, #3
 8000bd4:	f500 7018 	add.w	r0, r0, #608	@ 0x260
 8000bd8:	f016 bb28 	b.w	801722c <__aeabi_memclr>

08000bdc <PE_Reset_StateMachine>:
 8000bdc:	b510      	push	{r4, lr}
 8000bde:	4604      	mov	r4, r0
 8000be0:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8000be4:	b118      	cbz	r0, 8000bee <PE_Reset_StateMachine+0x12>
 8000be6:	7c20      	ldrb	r0, [r4, #16]
 8000be8:	215b      	movs	r1, #91	@ 0x5b
 8000bea:	f7ff fcb4 	bl	8000556 <USBPD_PE_Notification>
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f7ff ffb5 	bl	8000b5e <PE_Reset_ZI>
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f000 fb94 	bl	8001324 <PE_SetPowerNegotiation>
 8000bfc:	7c20      	ldrb	r0, [r4, #16]
 8000bfe:	f004 fc9c 	bl	800553a <USBPD_PRL_Reset>
 8000c02:	f000 f812 	bl	8000c2a <.text_37>
 8000c06:	f001 0303 	and.w	r3, r1, #3
 8000c0a:	f3c1 02c0 	ubfx	r2, r1, #3, #1
 8000c0e:	d005      	beq.n	8000c1c <PE_Reset_StateMachine+0x40>
 8000c10:	7c20      	ldrb	r0, [r4, #16]
 8000c12:	2101      	movs	r1, #1
 8000c14:	f004 f9c5 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000c18:	2002      	movs	r0, #2
 8000c1a:	e004      	b.n	8000c26 <PE_Reset_StateMachine+0x4a>
 8000c1c:	7c20      	ldrb	r0, [r4, #16]
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f004 f9bf 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000c24:	203e      	movs	r0, #62	@ 0x3e
 8000c26:	7460      	strb	r0, [r4, #17]
 8000c28:	bd10      	pop	{r4, pc}

08000c2a <.text_37>:
 8000c2a:	6860      	ldr	r0, [r4, #4]
 8000c2c:	6801      	ldr	r1, [r0, #0]
 8000c2e:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000c32:	2800      	cmp	r0, #0
 8000c34:	4770      	bx	lr

08000c36 <PE_ExtRevisionInteroperability>:
 8000c36:	b538      	push	{r3, r4, r5, lr}
 8000c38:	f8df 378c 	ldr.w	r3, [pc, #1932]	@ 80013c8 <.text_70>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8000c42:	6865      	ldr	r5, [r4, #4]
 8000c44:	682c      	ldr	r4, [r5, #0]
 8000c46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c4a:	f004 0503 	and.w	r5, r4, #3
 8000c4e:	42a9      	cmp	r1, r5
 8000c50:	bfa8      	it	ge
 8000c52:	4629      	movge	r1, r5
 8000c54:	f361 0401 	bfi	r4, r1, #0, #2
 8000c58:	6851      	ldr	r1, [r2, #4]
 8000c5a:	600c      	str	r4, [r1, #0]
 8000c5c:	6851      	ldr	r1, [r2, #4]
 8000c5e:	680b      	ldr	r3, [r1, #0]
 8000c60:	f003 0403 	and.w	r4, r3, #3
 8000c64:	2c01      	cmp	r4, #1
 8000c66:	bf0c      	ite	eq
 8000c68:	2400      	moveq	r4, #0
 8000c6a:	2420      	movne	r4, #32
 8000c6c:	f023 0320 	bic.w	r3, r3, #32
 8000c70:	4323      	orrs	r3, r4
 8000c72:	600b      	str	r3, [r1, #0]
 8000c74:	6852      	ldr	r2, [r2, #4]
 8000c76:	7811      	ldrb	r1, [r2, #0]
 8000c78:	e8bd 4034 	ldmia.w	sp!, {r2, r4, r5, lr}
 8000c7c:	f001 0103 	and.w	r1, r1, #3
 8000c80:	f004 b9b9 	b.w	8004ff6 <USBPD_PRL_SetHeaderSpecification>

08000c84 <PE_PRL_FastRoleSwapReception>:
 8000c84:	f8df 1740 	ldr.w	r1, [pc, #1856]	@ 80013c8 <.text_70>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000c8e:	7f0a      	ldrb	r2, [r1, #28]
 8000c90:	2a09      	cmp	r2, #9
 8000c92:	d005      	beq.n	8000ca0 <PE_PRL_FastRoleSwapReception+0x1c>
 8000c94:	684a      	ldr	r2, [r1, #4]
 8000c96:	6813      	ldr	r3, [r2, #0]
 8000c98:	f043 0310 	orr.w	r3, r3, #16
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e354      	b.n	800134a <.text_66>
 8000ca0:	4770      	bx	lr

08000ca2 <PE_PRL_PostReceiveEvent>:
 8000ca2:	b570      	push	{r4, r5, r6, lr}
 8000ca4:	f8df 2720 	ldr.w	r2, [pc, #1824]	@ 80013c8 <.text_70>
 8000ca8:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8000cac:	2000      	movs	r0, #0
 8000cae:	2400      	movs	r4, #0
 8000cb0:	191a      	adds	r2, r3, r4
 8000cb2:	f892 224d 	ldrb.w	r2, [r2, #589]	@ 0x24d
 8000cb6:	b122      	cbz	r2, 8000cc2 <PE_PRL_PostReceiveEvent+0x20>
 8000cb8:	1c64      	adds	r4, r4, #1
 8000cba:	b2e4      	uxtb	r4, r4
 8000cbc:	2c01      	cmp	r4, #1
 8000cbe:	d9f7      	bls.n	8000cb0 <PE_PRL_PostReceiveEvent+0xe>
 8000cc0:	bd70      	pop	{r4, r5, r6, pc}
 8000cc2:	191a      	adds	r2, r3, r4
 8000cc4:	2020      	movs	r0, #32
 8000cc6:	191d      	adds	r5, r3, r4
 8000cc8:	f882 024d 	strb.w	r0, [r2, #589]	@ 0x24d
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f895 624d 	ldrb.w	r6, [r5, #589]	@ 0x24d
 8000cd2:	fa00 f101 	lsl.w	r1, r0, r1
 8000cd6:	1918      	adds	r0, r3, r4
 8000cd8:	4331      	orrs	r1, r6
 8000cda:	f880 124d 	strb.w	r1, [r0, #589]	@ 0x24d
 8000cde:	2001      	movs	r0, #1
 8000ce0:	bd70      	pop	{r4, r5, r6, pc}

08000ce2 <PE_PRL_PostReceiveEventError>:
 8000ce2:	f8df 16e4 	ldr.w	r1, [pc, #1764]	@ 80013c8 <.text_70>
 8000ce6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000cea:	2100      	movs	r1, #0
 8000cec:	b2ca      	uxtb	r2, r1
 8000cee:	4402      	add	r2, r0
 8000cf0:	f892 324d 	ldrb.w	r3, [r2, #589]	@ 0x24d
 8000cf4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8000cf8:	2b20      	cmp	r3, #32
 8000cfa:	d004      	beq.n	8000d06 <PE_PRL_PostReceiveEventError+0x24>
 8000cfc:	1c49      	adds	r1, r1, #1
 8000cfe:	b2ca      	uxtb	r2, r1
 8000d00:	2a02      	cmp	r2, #2
 8000d02:	d3f3      	bcc.n	8000cec <PE_PRL_PostReceiveEventError+0xa>
 8000d04:	4770      	bx	lr
 8000d06:	2000      	movs	r0, #0
 8000d08:	f882 024d 	strb.w	r0, [r2, #589]	@ 0x24d
 8000d0c:	4770      	bx	lr

08000d0e <PE_PRL_PostReceiveEventCopy>:
 8000d0e:	b510      	push	{r4, lr}
 8000d10:	f8df 26b4 	ldr.w	r2, [pc, #1716]	@ 80013c8 <.text_70>
 8000d14:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	b2d3      	uxtb	r3, r2
 8000d1c:	18c4      	adds	r4, r0, r3
 8000d1e:	f894 424d 	ldrb.w	r4, [r4, #589]	@ 0x24d
 8000d22:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8000d26:	2c20      	cmp	r4, #32
 8000d28:	d004      	beq.n	8000d34 <PE_PRL_PostReceiveEventCopy+0x26>
 8000d2a:	1c52      	adds	r2, r2, #1
 8000d2c:	b2d3      	uxtb	r3, r2
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d3f3      	bcc.n	8000d1a <PE_PRL_PostReceiveEventCopy+0xc>
 8000d32:	bd10      	pop	{r4, pc}
 8000d34:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8000d38:	4353      	muls	r3, r2
 8000d3a:	18c4      	adds	r4, r0, r3
 8000d3c:	f104 003d 	add.w	r0, r4, #61	@ 0x3d
 8000d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d44:	f016 ba83 	b.w	801724e <__aeabi_memcpy>

08000d48 <PE_PRL_PostReceiveEventComplete>:
 8000d48:	b538      	push	{r3, r4, r5, lr}
 8000d4a:	f000 f81e 	bl	8000d8a <.text_45>
 8000d4e:	2100      	movs	r1, #0
 8000d50:	1854      	adds	r4, r2, r1
 8000d52:	1c4b      	adds	r3, r1, #1
 8000d54:	f894 524d 	ldrb.w	r5, [r4, #589]	@ 0x24d
 8000d58:	f005 0560 	and.w	r5, r5, #96	@ 0x60
 8000d5c:	2d20      	cmp	r5, #32
 8000d5e:	d003      	beq.n	8000d68 <PE_PRL_PostReceiveEventComplete+0x20>
 8000d60:	b2d9      	uxtb	r1, r3
 8000d62:	2902      	cmp	r1, #2
 8000d64:	d3f4      	bcc.n	8000d50 <PE_PRL_PostReceiveEventComplete+0x8>
 8000d66:	bd31      	pop	{r0, r4, r5, pc}
 8000d68:	f894 424d 	ldrb.w	r4, [r4, #589]	@ 0x24d
 8000d6c:	1855      	adds	r5, r2, r1
 8000d6e:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 8000d72:	f885 424d 	strb.w	r4, [r5, #589]	@ 0x24d
 8000d76:	f892 103c 	ldrb.w	r1, [r2, #60]	@ 0x3c
 8000d7a:	b909      	cbnz	r1, 8000d80 <PE_PRL_PostReceiveEventComplete+0x38>
 8000d7c:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
 8000d80:	6891      	ldr	r1, [r2, #8]

08000d82 <.text_44>:
 8000d82:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8000d84:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}

08000d88 <__iar_annotation$$tailcall>:
 8000d88:	4710      	bx	r2

08000d8a <.text_45>:
 8000d8a:	f8df 163c 	ldr.w	r1, [pc, #1596]	@ 80013c8 <.text_70>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d94:	4770      	bx	lr

08000d96 <PE_Get_UnchunkedSupport>:
 8000d96:	f8df 1630 	ldr.w	r1, [pc, #1584]	@ 80013c8 <.text_70>
 8000d9a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000d9e:	6841      	ldr	r1, [r0, #4]
 8000da0:	6808      	ldr	r0, [r1, #0]
 8000da2:	0e40      	lsrs	r0, r0, #25
 8000da4:	f000 0001 	and.w	r0, r0, #1
 8000da8:	4770      	bx	lr
	...

08000dac <.text_47>:
 8000dac:	200002d4 	.word	0x200002d4

08000db0 <.text_48>:
 8000db0:	20000000 	.word	0x20000000

08000db4 <.text_49>:
 8000db4:	08017388 	.word	0x08017388

08000db8 <PE_SubStateMachine_Generic>:
 8000db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dbc:	b08c      	sub	sp, #48	@ 0x30
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	9003      	str	r0, [sp, #12]
 8000dc4:	460e      	mov	r6, r1
 8000dc6:	7c63      	ldrb	r3, [r4, #17]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	f04f 0a02 	mov.w	sl, #2
 8000dce:	f104 0730 	add.w	r7, r4, #48	@ 0x30
 8000dd2:	f204 2963 	addw	r9, r4, #611	@ 0x263
 8000dd6:	f204 2565 	addw	r5, r4, #613	@ 0x265
 8000dda:	f204 2267 	addw	r2, r4, #615	@ 0x267
 8000dde:	f248 081b 	movw	r8, #32795	@ 0x801b
 8000de2:	f000 8163 	beq.w	80010ac <PE_SubStateMachine_Generic+0x2f4>
 8000de6:	2b18      	cmp	r3, #24
 8000de8:	d03f      	beq.n	8000e6a <PE_SubStateMachine_Generic+0xb2>
 8000dea:	2b19      	cmp	r3, #25
 8000dec:	d04e      	beq.n	8000e8c <PE_SubStateMachine_Generic+0xd4>
 8000dee:	2b1d      	cmp	r3, #29
 8000df0:	f000 808e 	beq.w	8000f10 <PE_SubStateMachine_Generic+0x158>
 8000df4:	2b27      	cmp	r3, #39	@ 0x27
 8000df6:	f000 80aa 	beq.w	8000f4e <PE_SubStateMachine_Generic+0x196>
 8000dfa:	2b28      	cmp	r3, #40	@ 0x28
 8000dfc:	f000 80b5 	beq.w	8000f6a <PE_SubStateMachine_Generic+0x1b2>
 8000e00:	2b29      	cmp	r3, #41	@ 0x29
 8000e02:	f000 80bc 	beq.w	8000f7e <PE_SubStateMachine_Generic+0x1c6>
 8000e06:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e08:	f000 8205 	beq.w	8001216 <PE_SubStateMachine_Generic+0x45e>
 8000e0c:	2b30      	cmp	r3, #48	@ 0x30
 8000e0e:	f000 8179 	beq.w	8001104 <PE_SubStateMachine_Generic+0x34c>
 8000e12:	2b3a      	cmp	r3, #58	@ 0x3a
 8000e14:	f000 81ee 	beq.w	80011f4 <PE_SubStateMachine_Generic+0x43c>
 8000e18:	2b3b      	cmp	r3, #59	@ 0x3b
 8000e1a:	f000 81d1 	beq.w	80011c0 <PE_SubStateMachine_Generic+0x408>
 8000e1e:	2b3c      	cmp	r3, #60	@ 0x3c
 8000e20:	f000 81be 	beq.w	80011a0 <PE_SubStateMachine_Generic+0x3e8>
 8000e24:	2b4b      	cmp	r3, #75	@ 0x4b
 8000e26:	f000 80f8 	beq.w	800101a <PE_SubStateMachine_Generic+0x262>
 8000e2a:	2b63      	cmp	r3, #99	@ 0x63
 8000e2c:	f000 8144 	beq.w	80010b8 <PE_SubStateMachine_Generic+0x300>
 8000e30:	2b64      	cmp	r3, #100	@ 0x64
 8000e32:	f000 8154 	beq.w	80010de <PE_SubStateMachine_Generic+0x326>
 8000e36:	2b67      	cmp	r3, #103	@ 0x67
 8000e38:	f000 8102 	beq.w	8001040 <PE_SubStateMachine_Generic+0x288>
 8000e3c:	2b68      	cmp	r3, #104	@ 0x68
 8000e3e:	f000 8111 	beq.w	8001064 <PE_SubStateMachine_Generic+0x2ac>
 8000e42:	2b74      	cmp	r3, #116	@ 0x74
 8000e44:	f000 8174 	beq.w	8001130 <PE_SubStateMachine_Generic+0x378>
 8000e48:	2b93      	cmp	r3, #147	@ 0x93
 8000e4a:	f000 809e 	beq.w	8000f8a <PE_SubStateMachine_Generic+0x1d2>
 8000e4e:	2b94      	cmp	r3, #148	@ 0x94
 8000e50:	f000 809f 	beq.w	8000f92 <PE_SubStateMachine_Generic+0x1da>
 8000e54:	2b95      	cmp	r3, #149	@ 0x95
 8000e56:	f000 80b0 	beq.w	8000fba <PE_SubStateMachine_Generic+0x202>
 8000e5a:	2b99      	cmp	r3, #153	@ 0x99
 8000e5c:	f040 81e0 	bne.w	8001220 <PE_SubStateMachine_Generic+0x468>
 8000e60:	2106      	movs	r1, #6
 8000e62:	4620      	mov	r0, r4
 8000e64:	f7ff fd46 	bl	80008f4 <PE_Send_RESET>
 8000e68:	e195      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 8000e6a:	f7ff fede 	bl	8000c2a <.text_37>
 8000e6e:	bf1d      	ittte	ne
 8000e70:	6960      	ldrne	r0, [r4, #20]
 8000e72:	0880      	lsrne	r0, r0, #2
 8000e74:	f000 0001 	andne.w	r0, r0, #1
 8000e78:	2002      	moveq	r0, #2
 8000e7a:	9000      	str	r0, [sp, #0]
 8000e7c:	2319      	movs	r3, #25
 8000e7e:	2208      	movs	r2, #8
 8000e80:	f000 fa3a 	bl	80012f8 <.text_61>
 8000e84:	2800      	cmp	r0, #0
 8000e86:	d16f      	bne.n	8000f68 <PE_SubStateMachine_Generic+0x1b0>
 8000e88:	2007      	movs	r0, #7
 8000e8a:	e0e8      	b.n	800105e <PE_SubStateMachine_Generic+0x2a6>
 8000e8c:	7830      	ldrb	r0, [r6, #0]
 8000e8e:	2811      	cmp	r0, #17
 8000e90:	d13d      	bne.n	8000f0e <PE_SubStateMachine_Generic+0x156>
 8000e92:	88b9      	ldrh	r1, [r7, #4]
 8000e94:	0bc8      	lsrs	r0, r1, #15
 8000e96:	d121      	bne.n	8000edc <PE_SubStateMachine_Generic+0x124>
 8000e98:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8000e9c:	b1f0      	cbz	r0, 8000edc <PE_SubStateMachine_Generic+0x124>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	f000 011f 	and.w	r1, r0, #31
 8000ea4:	2904      	cmp	r1, #4
 8000ea6:	d119      	bne.n	8000edc <PE_SubStateMachine_Generic+0x124>
 8000ea8:	68a5      	ldr	r5, [r4, #8]
 8000eaa:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8000eae:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8000eb2:	68b8      	ldr	r0, [r7, #8]
 8000eb4:	1c82      	adds	r2, r0, #2
 8000eb6:	7c20      	ldrb	r0, [r4, #16]
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	2105      	movs	r1, #5
 8000ebc:	47e0      	blx	ip
 8000ebe:	7830      	ldrb	r0, [r6, #0]
 8000ec0:	2814      	cmp	r0, #20
 8000ec2:	d003      	beq.n	8000ecc <PE_SubStateMachine_Generic+0x114>
 8000ec4:	2114      	movs	r1, #20
 8000ec6:	7031      	strb	r1, [r6, #0]
 8000ec8:	f000 f9d1 	bl	800126e <.text_57+0x4>
 8000ecc:	2003      	movs	r0, #3
 8000ece:	7460      	strb	r0, [r4, #17]
 8000ed0:	2107      	movs	r1, #7
 8000ed2:	7c20      	ldrb	r0, [r4, #16]
 8000ed4:	f7ff fb3f 	bl	8000556 <USBPD_PE_Notification>
 8000ed8:	f04f 0a00 	mov.w	sl, #0
 8000edc:	88b8      	ldrh	r0, [r7, #4]
 8000ede:	f410 4f70 	tst.w	r0, #61440	@ 0xf000
 8000ee2:	d114      	bne.n	8000f0e <PE_SubStateMachine_Generic+0x156>
 8000ee4:	f000 001f 	and.w	r0, r0, #31
 8000ee8:	2804      	cmp	r0, #4
 8000eea:	bf18      	it	ne
 8000eec:	2810      	cmpne	r0, #16
 8000eee:	d10e      	bne.n	8000f0e <PE_SubStateMachine_Generic+0x156>
 8000ef0:	7830      	ldrb	r0, [r6, #0]
 8000ef2:	2814      	cmp	r0, #20
 8000ef4:	d003      	beq.n	8000efe <PE_SubStateMachine_Generic+0x146>
 8000ef6:	2114      	movs	r1, #20
 8000ef8:	7031      	strb	r1, [r6, #0]
 8000efa:	f000 f9b8 	bl	800126e <.text_57+0x4>
 8000efe:	2003      	movs	r0, #3
 8000f00:	7460      	strb	r0, [r4, #17]
 8000f02:	2108      	movs	r1, #8
 8000f04:	7c20      	ldrb	r0, [r4, #16]
 8000f06:	f7ff fb26 	bl	8000556 <USBPD_PE_Notification>
 8000f0a:	f04f 0a00 	mov.w	sl, #0
 8000f0e:	e080      	b.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000f10:	9004      	str	r0, [sp, #16]
 8000f12:	ab04      	add	r3, sp, #16
 8000f14:	68a6      	ldr	r6, [r4, #8]
 8000f16:	7c20      	ldrb	r0, [r4, #16]
 8000f18:	6977      	ldr	r7, [r6, #20]
 8000f1a:	aa05      	add	r2, sp, #20
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	47b8      	blx	r7
 8000f20:	9804      	ldr	r0, [sp, #16]
 8000f22:	2104      	movs	r1, #4
 8000f24:	f000 fa40 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8000f28:	b108      	cbz	r0, 8000f2e <PE_SubStateMachine_Generic+0x176>
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	e179      	b.n	8001222 <PE_SubStateMachine_Generic+0x46a>
 8000f2e:	9a04      	ldr	r2, [sp, #16]
 8000f30:	2003      	movs	r0, #3
 8000f32:	0892      	lsrs	r2, r2, #2
 8000f34:	2100      	movs	r1, #0
 8000f36:	9001      	str	r0, [sp, #4]
 8000f38:	9200      	str	r2, [sp, #0]
 8000f3a:	9102      	str	r1, [sp, #8]
 8000f3c:	ab05      	add	r3, sp, #20
 8000f3e:	2204      	movs	r2, #4
 8000f40:	4620      	mov	r0, r4
 8000f42:	f000 fabe 	bl	80014c2 <PE_Send_DataMessage>
 8000f46:	2800      	cmp	r0, #0
 8000f48:	d10e      	bne.n	8000f68 <PE_SubStateMachine_Generic+0x1b0>
 8000f4a:	210a      	movs	r1, #10
 8000f4c:	e0ec      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 8000f4e:	2012      	movs	r0, #18
 8000f50:	7720      	strb	r0, [r4, #28]
 8000f52:	2105      	movs	r1, #5
 8000f54:	7c20      	ldrb	r0, [r4, #16]
 8000f56:	f004 fae3 	bl	8005520 <USBDPD_PRL_BistCarrierEyeMode>
 8000f5a:	2028      	movs	r0, #40	@ 0x28
 8000f5c:	7460      	strb	r0, [r4, #17]
 8000f5e:	f248 012d 	movw	r1, #32813	@ 0x802d
 8000f62:	83e1      	strh	r1, [r4, #30]
 8000f64:	f04f 0a2d 	mov.w	sl, #45	@ 0x2d
 8000f68:	e15c      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8000f6a:	f000 f95f 	bl	800122c <.text_51>
 8000f6e:	d1fb      	bne.n	8000f68 <PE_SubStateMachine_Generic+0x1b0>
 8000f70:	7c20      	ldrb	r0, [r4, #16]
 8000f72:	2105      	movs	r1, #5
 8000f74:	f004 fada 	bl	800552c <USBDPD_PRL_BistCarrierEyeModeExit>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	83e0      	strh	r0, [r4, #30]
 8000f7c:	e10b      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 8000f7e:	7831      	ldrb	r1, [r6, #0]
 8000f80:	2914      	cmp	r1, #20
 8000f82:	d001      	beq.n	8000f88 <PE_SubStateMachine_Generic+0x1d0>
 8000f84:	f000 f971 	bl	800126a <.text_57>
 8000f88:	e14c      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f000 f990 	bl	80012b0 <PE_SubStateMachine_ReceiveDRS>
 8000f90:	e148      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8000f92:	f7ff fe4a 	bl	8000c2a <.text_37>
 8000f96:	bf1d      	ittte	ne
 8000f98:	6960      	ldrne	r0, [r4, #20]
 8000f9a:	0880      	lsrne	r0, r0, #2
 8000f9c:	f000 0001 	andne.w	r0, r0, #1
 8000fa0:	2002      	moveq	r0, #2
 8000fa2:	9000      	str	r0, [sp, #0]
 8000fa4:	2395      	movs	r3, #149	@ 0x95
 8000fa6:	2209      	movs	r2, #9
 8000fa8:	f000 f9a6 	bl	80012f8 <.text_61>
 8000fac:	2800      	cmp	r0, #0
 8000fae:	d1ef      	bne.n	8000f90 <PE_SubStateMachine_Generic+0x1d8>
 8000fb0:	2010      	movs	r0, #16
 8000fb2:	f000 f93f 	bl	8001234 <.text_52>
 8000fb6:	2122      	movs	r1, #34	@ 0x22
 8000fb8:	e0b6      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 8000fba:	7830      	ldrb	r0, [r6, #0]
 8000fbc:	2814      	cmp	r0, #20
 8000fbe:	d028      	beq.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000fc0:	88b8      	ldrh	r0, [r7, #4]
 8000fc2:	f410 4f70 	tst.w	r0, #61440	@ 0xf000
 8000fc6:	d124      	bne.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000fc8:	f000 011f 	and.w	r1, r0, #31
 8000fcc:	2903      	cmp	r1, #3
 8000fce:	d006      	beq.n	8000fde <PE_SubStateMachine_Generic+0x226>
 8000fd0:	2904      	cmp	r1, #4
 8000fd2:	bf18      	it	ne
 8000fd4:	290c      	cmpne	r1, #12
 8000fd6:	d006      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x22e>
 8000fd8:	2910      	cmp	r1, #16
 8000fda:	d011      	beq.n	8001000 <PE_SubStateMachine_Generic+0x248>
 8000fdc:	e019      	b.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000fde:	4620      	mov	r0, r4
 8000fe0:	f000 f9f6 	bl	80013d0 <PE_SwitchDataRole>
 8000fe4:	e008      	b.n	8000ff8 <PE_SubStateMachine_Generic+0x240>
 8000fe6:	f000 001f 	and.w	r0, r0, #31
 8000fea:	280c      	cmp	r0, #12
 8000fec:	7c20      	ldrb	r0, [r4, #16]
 8000fee:	bf0c      	ite	eq
 8000ff0:	2126      	moveq	r1, #38	@ 0x26
 8000ff2:	2127      	movne	r1, #39	@ 0x27
 8000ff4:	f7ff faaf 	bl	8000556 <USBPD_PE_Notification>
 8000ff8:	f000 f922 	bl	8001240 <.text_53>
 8000ffc:	d107      	bne.n	800100e <PE_SubStateMachine_Generic+0x256>
 8000ffe:	e008      	b.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8001000:	7c20      	ldrb	r0, [r4, #16]
 8001002:	2128      	movs	r1, #40	@ 0x28
 8001004:	f7ff faa7 	bl	8000556 <USBPD_PE_Notification>
 8001008:	f000 f91a 	bl	8001240 <.text_53>
 800100c:	d001      	beq.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 800100e:	f000 f92c 	bl	800126a <.text_57>
 8001012:	f000 f90b 	bl	800122c <.text_51>
 8001016:	d124      	bne.n	8001062 <PE_SubStateMachine_Generic+0x2aa>
 8001018:	e0bd      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 800101a:	f000 f918 	bl	800124e <.text_54>
 800101e:	aa04      	add	r2, sp, #16
 8001020:	2114      	movs	r1, #20
 8001022:	47b8      	blx	r7
 8001024:	9803      	ldr	r0, [sp, #12]
 8001026:	2800      	cmp	r0, #0
 8001028:	f000 80fa 	beq.w	8001220 <PE_SubStateMachine_Generic+0x468>
 800102c:	9a03      	ldr	r2, [sp, #12]
 800102e:	0892      	lsrs	r2, r2, #2
 8001030:	9200      	str	r2, [sp, #0]
 8001032:	2100      	movs	r1, #0
 8001034:	2003      	movs	r0, #3
 8001036:	9102      	str	r1, [sp, #8]
 8001038:	9001      	str	r0, [sp, #4]
 800103a:	ab04      	add	r3, sp, #16
 800103c:	220c      	movs	r2, #12
 800103e:	e0d5      	b.n	80011ec <PE_SubStateMachine_Generic+0x434>
 8001040:	6860      	ldr	r0, [r4, #4]
 8001042:	6801      	ldr	r1, [r0, #0]
 8001044:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001048:	b900      	cbnz	r0, 800104c <PE_SubStateMachine_Generic+0x294>
 800104a:	2002      	movs	r0, #2
 800104c:	9000      	str	r0, [sp, #0]
 800104e:	2368      	movs	r3, #104	@ 0x68
 8001050:	7879      	ldrb	r1, [r7, #1]
 8001052:	2218      	movs	r2, #24
 8001054:	f000 f951 	bl	80012fa <.text_61+0x2>
 8001058:	2800      	cmp	r0, #0
 800105a:	d102      	bne.n	8001062 <PE_SubStateMachine_Generic+0x2aa>
 800105c:	200f      	movs	r0, #15
 800105e:	f000 f8e9 	bl	8001234 <.text_52>
 8001062:	e0df      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001064:	7830      	ldrb	r0, [r6, #0]
 8001066:	2814      	cmp	r0, #20
 8001068:	d01b      	beq.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 800106a:	7839      	ldrb	r1, [r7, #0]
 800106c:	7878      	ldrb	r0, [r7, #1]
 800106e:	4281      	cmp	r1, r0
 8001070:	d117      	bne.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 8001072:	88b9      	ldrh	r1, [r7, #4]
 8001074:	0bc8      	lsrs	r0, r1, #15
 8001076:	d114      	bne.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 8001078:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800107c:	b188      	cbz	r0, 80010a2 <PE_SubStateMachine_Generic+0x2ea>
 800107e:	7938      	ldrb	r0, [r7, #4]
 8001080:	f000 001f 	and.w	r0, r0, #31
 8001084:	280c      	cmp	r0, #12
 8001086:	d10c      	bne.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	68a5      	ldr	r5, [r4, #8]
 800108c:	69af      	ldr	r7, [r5, #24]
 800108e:	1c82      	adds	r2, r0, #2
 8001090:	7c20      	ldrb	r0, [r4, #16]
 8001092:	2304      	movs	r3, #4
 8001094:	2114      	movs	r1, #20
 8001096:	47b8      	blx	r7
 8001098:	f000 f8d2 	bl	8001240 <.text_53>
 800109c:	d001      	beq.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 800109e:	f000 f8e4 	bl	800126a <.text_57>
 80010a2:	f000 f8c3 	bl	800122c <.text_51>
 80010a6:	d106      	bne.n	80010b6 <PE_SubStateMachine_Generic+0x2fe>
 80010a8:	2111      	movs	r1, #17
 80010aa:	e075      	b.n	8001198 <PE_SubStateMachine_Generic+0x3e0>
 80010ac:	9000      	str	r0, [sp, #0]
 80010ae:	2303      	movs	r3, #3
 80010b0:	2210      	movs	r2, #16
 80010b2:	f000 f921 	bl	80012f8 <.text_61>
 80010b6:	e0b5      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 80010b8:	f000 f8c9 	bl	800124e <.text_54>
 80010bc:	2108      	movs	r1, #8
 80010be:	47b8      	blx	r7
 80010c0:	9803      	ldr	r0, [sp, #12]
 80010c2:	2119      	movs	r1, #25
 80010c4:	f000 f970 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80010c8:	2800      	cmp	r0, #0
 80010ca:	d172      	bne.n	80011b2 <PE_SubStateMachine_Generic+0x3fa>
 80010cc:	f000 f8c4 	bl	8001258 <.text_55>
 80010d0:	f000 f8df 	bl	8001292 <.text_59>
 80010d4:	2201      	movs	r2, #1
 80010d6:	f000 f8c4 	bl	8001262 <.text_56>
 80010da:	2148      	movs	r1, #72	@ 0x48
 80010dc:	e024      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 80010de:	f000 f8b6 	bl	800124e <.text_54>
 80010e2:	2113      	movs	r1, #19
 80010e4:	47b8      	blx	r7
 80010e6:	9803      	ldr	r0, [sp, #12]
 80010e8:	2118      	movs	r1, #24
 80010ea:	f000 f95d 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	d15f      	bne.n	80011b2 <PE_SubStateMachine_Generic+0x3fa>
 80010f2:	f000 f8b1 	bl	8001258 <.text_55>
 80010f6:	f000 f8cc 	bl	8001292 <.text_59>
 80010fa:	220f      	movs	r2, #15
 80010fc:	f000 f8b1 	bl	8001262 <.text_56>
 8001100:	2161      	movs	r1, #97	@ 0x61
 8001102:	e011      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 8001104:	f000 f8a3 	bl	800124e <.text_54>
 8001108:	2109      	movs	r1, #9
 800110a:	47b8      	blx	r7
 800110c:	9803      	ldr	r0, [sp, #12]
 800110e:	2107      	movs	r1, #7
 8001110:	f000 f94a 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8001114:	2800      	cmp	r0, #0
 8001116:	d14c      	bne.n	80011b2 <PE_SubStateMachine_Generic+0x3fa>
 8001118:	f000 f89e 	bl	8001258 <.text_55>
 800111c:	f000 f8b9 	bl	8001292 <.text_59>
 8001120:	2202      	movs	r2, #2
 8001122:	f000 f89e 	bl	8001262 <.text_56>
 8001126:	214f      	movs	r1, #79	@ 0x4f
 8001128:	7c20      	ldrb	r0, [r4, #16]
 800112a:	f7ff fa14 	bl	8000556 <USBPD_PE_Notification>
 800112e:	e079      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001130:	7831      	ldrb	r1, [r6, #0]
 8001132:	2914      	cmp	r1, #20
 8001134:	d02c      	beq.n	8001190 <PE_SubStateMachine_Generic+0x3d8>
 8001136:	88b9      	ldrh	r1, [r7, #4]
 8001138:	0bc8      	lsrs	r0, r1, #15
 800113a:	d115      	bne.n	8001168 <PE_SubStateMachine_Generic+0x3b0>
 800113c:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8001140:	b190      	cbz	r0, 8001168 <PE_SubStateMachine_Generic+0x3b0>
 8001142:	7938      	ldrb	r0, [r7, #4]
 8001144:	f000 001f 	and.w	r0, r0, #31
 8001148:	2805      	cmp	r0, #5
 800114a:	d10d      	bne.n	8001168 <PE_SubStateMachine_Generic+0x3b0>
 800114c:	68b8      	ldr	r0, [r7, #8]
 800114e:	68a5      	ldr	r5, [r4, #8]
 8001150:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8001154:	1d02      	adds	r2, r0, #4
 8001156:	7c20      	ldrb	r0, [r4, #16]
 8001158:	2304      	movs	r3, #4
 800115a:	210f      	movs	r1, #15
 800115c:	47e0      	blx	ip
 800115e:	f000 f86f 	bl	8001240 <.text_53>
 8001162:	d001      	beq.n	8001168 <PE_SubStateMachine_Generic+0x3b0>
 8001164:	f000 f881 	bl	800126a <.text_57>
 8001168:	7938      	ldrb	r0, [r7, #4]
 800116a:	f000 001f 	and.w	r0, r0, #31
 800116e:	2810      	cmp	r0, #16
 8001170:	d10e      	bne.n	8001190 <PE_SubStateMachine_Generic+0x3d8>
 8001172:	7c20      	ldrb	r0, [r4, #16]
 8001174:	2159      	movs	r1, #89	@ 0x59
 8001176:	f7ff f9ee 	bl	8000556 <USBPD_PE_Notification>
 800117a:	2000      	movs	r0, #0
 800117c:	83e0      	strh	r0, [r4, #30]
 800117e:	7831      	ldrb	r1, [r6, #0]
 8001180:	2914      	cmp	r1, #20
 8001182:	d001      	beq.n	8001188 <PE_SubStateMachine_Generic+0x3d0>
 8001184:	f000 f871 	bl	800126a <.text_57>
 8001188:	2103      	movs	r1, #3
 800118a:	7461      	strb	r1, [r4, #17]
 800118c:	f04f 0a00 	mov.w	sl, #0
 8001190:	f000 f84c 	bl	800122c <.text_51>
 8001194:	d146      	bne.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001196:	2103      	movs	r1, #3
 8001198:	7461      	strb	r1, [r4, #17]
 800119a:	f04f 0a00 	mov.w	sl, #0
 800119e:	e041      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 80011a0:	f000 f855 	bl	800124e <.text_54>
 80011a4:	210d      	movs	r1, #13
 80011a6:	47b8      	blx	r7
 80011a8:	9803      	ldr	r0, [sp, #12]
 80011aa:	2104      	movs	r1, #4
 80011ac:	f000 f8fc 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80011b0:	2800      	cmp	r0, #0
 80011b2:	d135      	bne.n	8001220 <PE_SubStateMachine_Generic+0x468>
 80011b4:	f000 f850 	bl	8001258 <.text_55>
 80011b8:	f000 f85c 	bl	8001274 <.text_58>
 80011bc:	2207      	movs	r2, #7
 80011be:	e027      	b.n	8001210 <PE_SubStateMachine_Generic+0x458>
 80011c0:	9004      	str	r0, [sp, #16]
 80011c2:	ab03      	add	r3, sp, #12
 80011c4:	68a6      	ldr	r6, [r4, #8]
 80011c6:	7c20      	ldrb	r0, [r4, #16]
 80011c8:	6977      	ldr	r7, [r6, #20]
 80011ca:	aa04      	add	r2, sp, #16
 80011cc:	210f      	movs	r1, #15
 80011ce:	47b8      	blx	r7
 80011d0:	9803      	ldr	r0, [sp, #12]
 80011d2:	2104      	movs	r1, #4
 80011d4:	f000 f8e8 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80011d8:	2800      	cmp	r0, #0
 80011da:	d121      	bne.n	8001220 <PE_SubStateMachine_Generic+0x468>
 80011dc:	2103      	movs	r1, #3
 80011de:	2201      	movs	r2, #1
 80011e0:	9101      	str	r1, [sp, #4]
 80011e2:	9200      	str	r2, [sp, #0]
 80011e4:	9002      	str	r0, [sp, #8]
 80011e6:	ab04      	add	r3, sp, #16
 80011e8:	2205      	movs	r2, #5
 80011ea:	2100      	movs	r1, #0
 80011ec:	4620      	mov	r0, r4
 80011ee:	f000 f968 	bl	80014c2 <PE_Send_DataMessage>
 80011f2:	e017      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 80011f4:	f000 f82b 	bl	800124e <.text_54>
 80011f8:	2111      	movs	r1, #17
 80011fa:	47b8      	blx	r7
 80011fc:	9803      	ldr	r0, [sp, #12]
 80011fe:	2109      	movs	r1, #9
 8001200:	f000 f8d2 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8001204:	b960      	cbnz	r0, 8001220 <PE_SubStateMachine_Generic+0x468>
 8001206:	f000 f827 	bl	8001258 <.text_55>
 800120a:	f000 f833 	bl	8001274 <.text_58>
 800120e:	2205      	movs	r2, #5
 8001210:	f000 f827 	bl	8001262 <.text_56>
 8001214:	e006      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001216:	7c20      	ldrb	r0, [r4, #16]
 8001218:	2150      	movs	r1, #80	@ 0x50
 800121a:	f7ff f99c 	bl	8000556 <USBPD_PE_Notification>
 800121e:	e7ba      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 8001220:	2001      	movs	r0, #1
 8001222:	7460      	strb	r0, [r4, #17]
 8001224:	4650      	mov	r0, sl
 8001226:	b00c      	add	sp, #48	@ 0x30
 8001228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800122c <.text_51>:
 800122c:	8be0      	ldrh	r0, [r4, #30]
 800122e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001232:	4770      	bx	lr

08001234 <.text_52>:
 8001234:	7720      	strb	r0, [r4, #28]
 8001236:	f8a4 801e 	strh.w	r8, [r4, #30]
 800123a:	f04f 0a1b 	mov.w	sl, #27
 800123e:	4770      	bx	lr

08001240 <.text_53>:
 8001240:	2003      	movs	r0, #3
 8001242:	7460      	strb	r0, [r4, #17]
 8001244:	f04f 0a00 	mov.w	sl, #0
 8001248:	7831      	ldrb	r1, [r6, #0]
 800124a:	2914      	cmp	r1, #20
 800124c:	4770      	bx	lr

0800124e <.text_54>:
 800124e:	68a6      	ldr	r6, [r4, #8]
 8001250:	7c20      	ldrb	r0, [r4, #16]
 8001252:	6977      	ldr	r7, [r6, #20]
 8001254:	ab03      	add	r3, sp, #12
 8001256:	4770      	bx	lr

08001258 <.text_55>:
 8001258:	7028      	strb	r0, [r5, #0]
 800125a:	2100      	movs	r1, #0
 800125c:	7069      	strb	r1, [r5, #1]
 800125e:	7c20      	ldrb	r0, [r4, #16]
 8001260:	e599      	b.n	8000d96 <PE_Get_UnchunkedSupport>

08001262 <.text_56>:
 8001262:	2100      	movs	r1, #0
 8001264:	4620      	mov	r0, r4
 8001266:	f000 ba4b 	b.w	8001700 <PE_Send_ExtendedMessage>

0800126a <.text_57>:
 800126a:	2014      	movs	r0, #20
 800126c:	7030      	strb	r0, [r6, #0]
 800126e:	4620      	mov	r0, r4
 8001270:	f7ff bb9c 	b.w	80009ac <PE_Clear_RxEvent>

08001274 <.text_58>:
 8001274:	b918      	cbnz	r0, 800127e <.text_58+0xa>
 8001276:	7868      	ldrb	r0, [r5, #1]
 8001278:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800127c:	7068      	strb	r0, [r5, #1]
 800127e:	2000      	movs	r0, #0
 8001280:	9a03      	ldr	r2, [sp, #12]
 8001282:	9002      	str	r0, [sp, #8]
 8001284:	1d12      	adds	r2, r2, #4
 8001286:	b292      	uxth	r2, r2
 8001288:	9200      	str	r2, [sp, #0]
 800128a:	2103      	movs	r1, #3
 800128c:	9101      	str	r1, [sp, #4]
 800128e:	464b      	mov	r3, r9
 8001290:	4770      	bx	lr

08001292 <.text_59>:
 8001292:	b918      	cbnz	r0, 800129c <.text_59+0xa>
 8001294:	7868      	ldrb	r0, [r5, #1]
 8001296:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800129a:	7068      	strb	r0, [r5, #1]
 800129c:	2000      	movs	r0, #0
 800129e:	9a03      	ldr	r2, [sp, #12]
 80012a0:	9002      	str	r0, [sp, #8]
 80012a2:	1d12      	adds	r2, r2, #4
 80012a4:	2103      	movs	r1, #3
 80012a6:	b292      	uxth	r2, r2
 80012a8:	9101      	str	r1, [sp, #4]
 80012aa:	9200      	str	r2, [sp, #0]
 80012ac:	464b      	mov	r3, r9
 80012ae:	4770      	bx	lr

080012b0 <PE_SubStateMachine_ReceiveDRS>:
 80012b0:	b51c      	push	{r2, r3, r4, lr}
 80012b2:	4604      	mov	r4, r0
 80012b4:	68a1      	ldr	r1, [r4, #8]
 80012b6:	7c20      	ldrb	r0, [r4, #16]
 80012b8:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
 80012ba:	4790      	blx	r2
 80012bc:	280a      	cmp	r0, #10
 80012be:	d002      	beq.n	80012c6 <PE_SubStateMachine_ReceiveDRS+0x16>
 80012c0:	280c      	cmp	r0, #12
 80012c2:	d00b      	beq.n	80012dc <PE_SubStateMachine_ReceiveDRS+0x2c>
 80012c4:	e00c      	b.n	80012e0 <PE_SubStateMachine_ReceiveDRS+0x30>
 80012c6:	2000      	movs	r0, #0
 80012c8:	9000      	str	r0, [sp, #0]
 80012ca:	2303      	movs	r3, #3
 80012cc:	2203      	movs	r2, #3
 80012ce:	f000 f813 	bl	80012f8 <.text_61>
 80012d2:	b980      	cbnz	r0, 80012f6 <PE_SubStateMachine_ReceiveDRS+0x46>
 80012d4:	4620      	mov	r0, r4
 80012d6:	e8bd 4016 	ldmia.w	sp!, {r1, r2, r4, lr}
 80012da:	e079      	b.n	80013d0 <PE_SwitchDataRole>
 80012dc:	202a      	movs	r0, #42	@ 0x2a
 80012de:	e006      	b.n	80012ee <PE_SubStateMachine_ReceiveDRS+0x3e>
 80012e0:	6860      	ldr	r0, [r4, #4]
 80012e2:	7801      	ldrb	r1, [r0, #0]
 80012e4:	f001 0103 	and.w	r1, r1, #3
 80012e8:	2902      	cmp	r1, #2
 80012ea:	d102      	bne.n	80012f2 <PE_SubStateMachine_ReceiveDRS+0x42>
 80012ec:	2001      	movs	r0, #1
 80012ee:	7460      	strb	r0, [r4, #17]
 80012f0:	bd13      	pop	{r0, r1, r4, pc}
 80012f2:	212a      	movs	r1, #42	@ 0x2a
 80012f4:	7461      	strb	r1, [r4, #17]
 80012f6:	bd13      	pop	{r0, r1, r4, pc}

080012f8 <.text_61>:
 80012f8:	2100      	movs	r1, #0
 80012fa:	4620      	mov	r0, r4
 80012fc:	f000 b8b4 	b.w	8001468 <PE_Send_CtrlMessage>

08001300 <PE_UpdateTimer>:
 8001300:	b510      	push	{r4, lr}
 8001302:	4602      	mov	r2, r0
 8001304:	f3c2 040e 	ubfx	r4, r2, #0, #15
 8001308:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800130c:	42a1      	cmp	r1, r4
 800130e:	bfb8      	it	lt
 8001310:	1a50      	sublt	r0, r2, r1
 8001312:	b280      	uxth	r0, r0
 8001314:	bd10      	pop	{r4, pc}

08001316 <PE_CallHardResetCallback>:
 8001316:	6883      	ldr	r3, [r0, #8]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf1c      	itt	ne
 800131e:	7c00      	ldrbne	r0, [r0, #16]

08001320 <__iar_annotation$$tailcall>:
 8001320:	4718      	bxne	r3
 8001322:	4770      	bx	lr

08001324 <PE_SetPowerNegotiation>:
 8001324:	6842      	ldr	r2, [r0, #4]
 8001326:	6813      	ldr	r3, [r2, #0]
 8001328:	f3c3 2202 	ubfx	r2, r3, #8, #3
 800132c:	4291      	cmp	r1, r2
 800132e:	d007      	beq.n	8001340 <PE_SetPowerNegotiation+0x1c>
 8001330:	6842      	ldr	r2, [r0, #4]
 8001332:	f361 230a 	bfi	r3, r1, #8, #3
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	215a      	movs	r1, #90	@ 0x5a
 800133a:	7c00      	ldrb	r0, [r0, #16]
 800133c:	f7ff b90b 	b.w	8000556 <USBPD_PE_Notification>
 8001340:	4770      	bx	lr

08001342 <USBPD_PE_ExecFastRoleSwapSignalling>:
 8001342:	4921      	ldr	r1, [pc, #132]	@ (80013c8 <.text_70>)
 8001344:	4602      	mov	r2, r0
 8001346:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]

0800134a <.text_66>:
 800134a:	694a      	ldr	r2, [r1, #20]
 800134c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001350:	614a      	str	r2, [r1, #20]
 8001352:	6889      	ldr	r1, [r1, #8]
 8001354:	6a8a      	ldr	r2, [r1, #40]	@ 0x28

08001356 <__iar_annotation$$tailcall>:
 8001356:	4710      	bx	r2

08001358 <PE_CalculateMinTiming>:
 8001358:	4601      	mov	r1, r0
 800135a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800135e:	8c8a      	ldrh	r2, [r1, #36]	@ 0x24
 8001360:	0453      	lsls	r3, r2, #17
 8001362:	bf1c      	itt	ne
 8001364:	8c88      	ldrhne	r0, [r1, #36]	@ 0x24
 8001366:	f3c0 000e 	ubfxne	r0, r0, #0, #15
 800136a:	8c4a      	ldrh	r2, [r1, #34]	@ 0x22
 800136c:	0453      	lsls	r3, r2, #17
 800136e:	d007      	beq.n	8001380 <PE_CalculateMinTiming+0x28>
 8001370:	8c4a      	ldrh	r2, [r1, #34]	@ 0x22
 8001372:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8001376:	4290      	cmp	r0, r2
 8001378:	bf24      	itt	cs
 800137a:	8c48      	ldrhcs	r0, [r1, #34]	@ 0x22
 800137c:	f3c0 000e 	ubfxcs	r0, r0, #0, #15
 8001380:	4770      	bx	lr

08001382 <PE_SetPowerNegociation>:
 8001382:	b538      	push	{r3, r4, r5, lr}
 8001384:	4604      	mov	r4, r0
 8001386:	460d      	mov	r5, r1
 8001388:	6860      	ldr	r0, [r4, #4]
 800138a:	6802      	ldr	r2, [r0, #0]
 800138c:	f3c2 2002 	ubfx	r0, r2, #8, #3
 8001390:	4285      	cmp	r5, r0
 8001392:	d003      	beq.n	800139c <PE_SetPowerNegociation+0x1a>
 8001394:	7c20      	ldrb	r0, [r4, #16]
 8001396:	215a      	movs	r1, #90	@ 0x5a
 8001398:	f7ff f8dd 	bl	8000556 <USBPD_PE_Notification>
 800139c:	6860      	ldr	r0, [r4, #4]
 800139e:	6801      	ldr	r1, [r0, #0]
 80013a0:	f365 210a 	bfi	r1, r5, #8, #3
 80013a4:	6001      	str	r1, [r0, #0]
 80013a6:	bd31      	pop	{r0, r4, r5, pc}

080013a8 <PE_CheckDataSizeFromGetDataInfo>:
 80013a8:	b538      	push	{r3, r4, r5, lr}
 80013aa:	2200      	movs	r2, #0
 80013ac:	4288      	cmp	r0, r1
 80013ae:	d208      	bcs.n	80013c2 <PE_CheckDataSizeFromGetDataInfo+0x1a>
 80013b0:	2018      	movs	r0, #24
 80013b2:	4c06      	ldr	r4, [pc, #24]	@ (80013cc <.text_71>)
 80013b4:	a316      	add	r3, pc, #88	@ (adr r3, 8001410 <.text_73>)
 80013b6:	6825      	ldr	r5, [r4, #0]
 80013b8:	9000      	str	r0, [sp, #0]
 80013ba:	2100      	movs	r1, #0
 80013bc:	2006      	movs	r0, #6
 80013be:	47a8      	blx	r5
 80013c0:	2202      	movs	r2, #2
 80013c2:	4610      	mov	r0, r2
 80013c4:	bd32      	pop	{r1, r4, r5, pc}
	...

080013c8 <.text_70>:
 80013c8:	200002d4 	.word	0x200002d4

080013cc <.text_71>:
 80013cc:	20000000 	.word	0x20000000

080013d0 <PE_SwitchDataRole>:
 80013d0:	b510      	push	{r4, lr}
 80013d2:	4604      	mov	r4, r0
 80013d4:	6860      	ldr	r0, [r4, #4]
 80013d6:	6801      	ldr	r1, [r0, #0]
 80013d8:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80013dc:	2800      	cmp	r0, #0
 80013de:	6860      	ldr	r0, [r4, #4]
 80013e0:	d109      	bne.n	80013f6 <PE_SwitchDataRole+0x26>
 80013e2:	f041 0108 	orr.w	r1, r1, #8
 80013e6:	6001      	str	r1, [r0, #0]
 80013e8:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80013ec:	7c20      	ldrb	r0, [r4, #16]
 80013ee:	f003 fdf5 	bl	8004fdc <USBPD_PRL_SetHeaderDataRole>
 80013f2:	2125      	movs	r1, #37	@ 0x25
 80013f4:	e007      	b.n	8001406 <PE_SwitchDataRole+0x36>
 80013f6:	f021 0108 	bic.w	r1, r1, #8
 80013fa:	6001      	str	r1, [r0, #0]
 80013fc:	2100      	movs	r1, #0
 80013fe:	7c20      	ldrb	r0, [r4, #16]
 8001400:	f003 fdec 	bl	8004fdc <USBPD_PRL_SetHeaderDataRole>
 8001404:	2124      	movs	r1, #36	@ 0x24
 8001406:	7c20      	ldrb	r0, [r4, #16]
 8001408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800140c:	f7ff b8a3 	b.w	8000556 <USBPD_PE_Notification>

08001410 <.text_73>:
 8001410:	61746144 	.word	0x61746144
 8001414:	7a695320 	.word	0x7a695320
 8001418:	73692065 	.word	0x73692065
 800141c:	746f6e20 	.word	0x746f6e20
 8001420:	726f6320 	.word	0x726f6320
 8001424:	74636572 	.word	0x74636572
 8001428:	00          	.byte	0x00
 8001429:	00          	.byte	0x00
	...

0800142c <USBPD_PE_SetTrace>:
 800142c:	0001      	movs	r1, r0
 800142e:	4906      	ldr	r1, [pc, #24]	@ (8001448 <.text_5>)
 8001430:	bf08      	it	eq
 8001432:	f20f 0031 	addweq	r0, pc, #49	@ 0x31
 8001436:	6008      	str	r0, [r1, #0]
 8001438:	4770      	bx	lr

0800143a <USBPD_PE_CheckLIB>:
 800143a:	4601      	mov	r1, r0
 800143c:	2000      	movs	r0, #0
 800143e:	4a03      	ldr	r2, [pc, #12]	@ (800144c <.text_6>)
 8001440:	4291      	cmp	r1, r2
 8001442:	bf08      	it	eq
 8001444:	2001      	moveq	r0, #1
 8001446:	4770      	bx	lr

08001448 <.text_5>:
 8001448:	20000000 	.word	0x20000000

0800144c <.text_6>:
 800144c:	30410000 	.word	0x30410000

08001450 <USBPD_PE_GetMemoryConsumption>:
 8001450:	b510      	push	{r4, lr}
 8001452:	f003 fda3 	bl	8004f9c <USBPD_PRL_GetMemoryConsumption>
 8001456:	4604      	mov	r4, r0
 8001458:	f7fe ffad 	bl	80003b6 <USBPD_CAD_GetMemoryConsumption>
 800145c:	1904      	adds	r4, r0, r4
 800145e:	f504 6061 	add.w	r0, r4, #3600	@ 0xe10
 8001462:	bd10      	pop	{r4, pc}

08001464 <PE_Trace_Empty>:
 8001464:	4770      	bx	lr
	...

08001468 <PE_Send_CtrlMessage>:
 8001468:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800146c:	9c08      	ldr	r4, [sp, #32]
 800146e:	4606      	mov	r6, r0
 8001470:	4688      	mov	r8, r1
 8001472:	4617      	mov	r7, r2
 8001474:	461d      	mov	r5, r3
 8001476:	f000 f81f 	bl	80014b8 <.text_3>
 800147a:	b190      	cbz	r0, 80014a2 <PE_Send_CtrlMessage+0x3a>
 800147c:	9401      	str	r4, [sp, #4]
 800147e:	2002      	movs	r0, #2
 8001480:	9000      	str	r0, [sp, #0]
 8001482:	f206 2363 	addw	r3, r6, #611	@ 0x263
 8001486:	7c30      	ldrb	r0, [r6, #16]
 8001488:	463a      	mov	r2, r7
 800148a:	4641      	mov	r1, r8
 800148c:	f003 fde2 	bl	8005054 <USBPD_PRL_SendMessage>
 8001490:	2803      	cmp	r0, #3
 8001492:	d0f0      	beq.n	8001476 <PE_Send_CtrlMessage+0xe>
 8001494:	2810      	cmp	r0, #16
 8001496:	d00d      	beq.n	80014b4 <PE_Send_CtrlMessage+0x4c>
 8001498:	2f0d      	cmp	r7, #13
 800149a:	bf0c      	ite	eq
 800149c:	2201      	moveq	r2, #1
 800149e:	2200      	movne	r2, #0
 80014a0:	e002      	b.n	80014a8 <PE_Send_CtrlMessage+0x40>
 80014a2:	7470      	strb	r0, [r6, #17]
 80014a4:	2010      	movs	r0, #16
 80014a6:	e005      	b.n	80014b4 <PE_Send_CtrlMessage+0x4c>
 80014a8:	4603      	mov	r3, r0
 80014aa:	9500      	str	r5, [sp, #0]
 80014ac:	4641      	mov	r1, r8
 80014ae:	4630      	mov	r0, r6
 80014b0:	f000 fbe8 	bl	8001c84 <PE_CheckSendMessageStatus>
 80014b4:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

080014b8 <.text_3>:
 80014b8:	6870      	ldr	r0, [r6, #4]
 80014ba:	6801      	ldr	r1, [r0, #0]
 80014bc:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80014c0:	4770      	bx	lr

080014c2 <PE_Send_DataMessage>:
 80014c2:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80014c4:	4604      	mov	r4, r0
 80014c6:	9f08      	ldr	r7, [sp, #32]
 80014c8:	460d      	mov	r5, r1
 80014ca:	4616      	mov	r6, r2
 80014cc:	2000      	movs	r0, #0
 80014ce:	e010      	b.n	80014f2 <PE_Send_DataMessage+0x30>
 80014d0:	2100      	movs	r1, #0
 80014d2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 80014d6:	f8d3 c000 	ldr.w	ip, [r3]
 80014da:	440a      	add	r2, r1
 80014dc:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 80014e0:	1c49      	adds	r1, r1, #1
 80014e2:	fa2c fc0e 	lsr.w	ip, ip, lr
 80014e6:	2904      	cmp	r1, #4
 80014e8:	f882 c265 	strb.w	ip, [r2, #613]	@ 0x265
 80014ec:	d3f1      	bcc.n	80014d2 <PE_Send_DataMessage+0x10>
 80014ee:	1d1b      	adds	r3, r3, #4
 80014f0:	1c40      	adds	r0, r0, #1
 80014f2:	42b8      	cmp	r0, r7
 80014f4:	d3ec      	bcc.n	80014d0 <PE_Send_DataMessage+0xe>
 80014f6:	6860      	ldr	r0, [r4, #4]
 80014f8:	f7ff ffdf 	bl	80014ba <.text_3+0x2>
 80014fc:	b1d8      	cbz	r0, 8001536 <PE_Send_DataMessage+0x74>
 80014fe:	f89d 0028 	ldrb.w	r0, [sp, #40]	@ 0x28
 8001502:	9001      	str	r0, [sp, #4]
 8001504:	f204 2363 	addw	r3, r4, #611	@ 0x263
 8001508:	00b8      	lsls	r0, r7, #2
 800150a:	1c80      	adds	r0, r0, #2
 800150c:	b280      	uxth	r0, r0
 800150e:	9000      	str	r0, [sp, #0]
 8001510:	4632      	mov	r2, r6
 8001512:	7c20      	ldrb	r0, [r4, #16]
 8001514:	4629      	mov	r1, r5
 8001516:	f003 fd9d 	bl	8005054 <USBPD_PRL_SendMessage>
 800151a:	2803      	cmp	r0, #3
 800151c:	d0eb      	beq.n	80014f6 <PE_Send_DataMessage+0x34>
 800151e:	2810      	cmp	r0, #16
 8001520:	d008      	beq.n	8001534 <PE_Send_DataMessage+0x72>
 8001522:	f89d 1024 	ldrb.w	r1, [sp, #36]	@ 0x24
 8001526:	9100      	str	r1, [sp, #0]
 8001528:	4603      	mov	r3, r0
 800152a:	2200      	movs	r2, #0
 800152c:	4629      	mov	r1, r5
 800152e:	4620      	mov	r0, r4
 8001530:	f000 fba8 	bl	8001c84 <PE_CheckSendMessageStatus>
 8001534:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001536:	2010      	movs	r0, #16
 8001538:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0800153c <PE_Check_ExtendedMessage>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	4604      	mov	r4, r0
 8001540:	f204 265a 	addw	r6, r4, #602	@ 0x25a
 8001544:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001546:	7881      	ldrb	r1, [r0, #2]
 8001548:	78c0      	ldrb	r0, [r0, #3]
 800154a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800154e:	8031      	strh	r1, [r6, #0]
 8001550:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8001554:	f000 001f 	and.w	r0, r0, #31
 8001558:	70b0      	strb	r0, [r6, #2]
 800155a:	f3c1 20c3 	ubfx	r0, r1, #11, #4
 800155e:	2800      	cmp	r0, #0
 8001560:	bf1e      	ittt	ne
 8001562:	f3c1 2080 	ubfxne	r0, r1, #10, #1
 8001566:	2800      	cmpne	r0, #0
 8001568:	2034      	movne	r0, #52	@ 0x34
 800156a:	d126      	bne.n	80015ba <PE_Check_ExtendedMessage+0x7e>
 800156c:	0408      	lsls	r0, r1, #16
 800156e:	0fc0      	lsrs	r0, r0, #31
 8001570:	f204 2281 	addw	r2, r4, #641	@ 0x281
 8001574:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8001578:	d10b      	bne.n	8001592 <PE_Check_ExtendedMessage+0x56>
 800157a:	f8a4 348e 	strh.w	r3, [r4, #1166]	@ 0x48e
 800157e:	f8b4 148e 	ldrh.w	r1, [r4, #1166]	@ 0x48e
 8001582:	4288      	cmp	r0, r1
 8001584:	d21a      	bcs.n	80015bc <PE_Check_ExtendedMessage+0x80>
 8001586:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001588:	1d19      	adds	r1, r3, #4
 800158a:	5c0d      	ldrb	r5, [r1, r0]
 800158c:	5415      	strb	r5, [r2, r0]
 800158e:	1c40      	adds	r0, r0, #1
 8001590:	e7f5      	b.n	800157e <PE_Check_ExtendedMessage+0x42>
 8001592:	f411 4ff8 	tst.w	r1, #31744	@ 0x7c00
 8001596:	d106      	bne.n	80015a6 <PE_Check_ExtendedMessage+0x6a>
 8001598:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800159a:	f3c0 3002 	ubfx	r0, r0, #12, #3
 800159e:	2807      	cmp	r0, #7
 80015a0:	d30c      	bcc.n	80015bc <PE_Check_ExtendedMessage+0x80>
 80015a2:	2b1a      	cmp	r3, #26
 80015a4:	d90a      	bls.n	80015bc <PE_Check_ExtendedMessage+0x80>
 80015a6:	f3c1 2080 	ubfx	r0, r1, #10, #1
 80015aa:	b938      	cbnz	r0, 80015bc <PE_Check_ExtendedMessage+0x80>
 80015ac:	f8b4 048e 	ldrh.w	r0, [r4, #1166]	@ 0x48e
 80015b0:	4298      	cmp	r0, r3
 80015b2:	d203      	bcs.n	80015bc <PE_Check_ExtendedMessage+0x80>
 80015b4:	2100      	movs	r1, #0
 80015b6:	83e1      	strh	r1, [r4, #30]
 80015b8:	2037      	movs	r0, #55	@ 0x37
 80015ba:	e089      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 80015bc:	7f20      	ldrb	r0, [r4, #28]
 80015be:	78b1      	ldrb	r1, [r6, #2]
 80015c0:	2800      	cmp	r0, #0
 80015c2:	d034      	beq.n	800162e <PE_Check_ExtendedMessage+0xf2>
 80015c4:	2901      	cmp	r1, #1
 80015c6:	d008      	beq.n	80015da <PE_Check_ExtendedMessage+0x9e>
 80015c8:	2902      	cmp	r1, #2
 80015ca:	d018      	beq.n	80015fe <PE_Check_ExtendedMessage+0xc2>
 80015cc:	2905      	cmp	r1, #5
 80015ce:	d028      	beq.n	8001622 <PE_Check_ExtendedMessage+0xe6>
 80015d0:	2907      	cmp	r1, #7
 80015d2:	d021      	beq.n	8001618 <PE_Check_ExtendedMessage+0xdc>
 80015d4:	290f      	cmp	r1, #15
 80015d6:	d009      	beq.n	80015ec <PE_Check_ExtendedMessage+0xb0>
 80015d8:	e07c      	b.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 80015da:	f000 f884 	bl	80016e6 <.text_7>
 80015de:	2319      	movs	r3, #25
 80015e0:	2108      	movs	r1, #8
 80015e2:	47b8      	blx	r7
 80015e4:	2003      	movs	r0, #3
 80015e6:	7460      	strb	r0, [r4, #17]
 80015e8:	2147      	movs	r1, #71	@ 0x47
 80015ea:	e010      	b.n	800160e <PE_Check_ExtendedMessage+0xd2>
 80015ec:	f000 f87b 	bl	80016e6 <.text_7>
 80015f0:	2318      	movs	r3, #24
 80015f2:	2113      	movs	r1, #19
 80015f4:	47b8      	blx	r7
 80015f6:	2003      	movs	r0, #3
 80015f8:	7460      	strb	r0, [r4, #17]
 80015fa:	2162      	movs	r1, #98	@ 0x62
 80015fc:	e007      	b.n	800160e <PE_Check_ExtendedMessage+0xd2>
 80015fe:	f000 f872 	bl	80016e6 <.text_7>
 8001602:	2307      	movs	r3, #7
 8001604:	2109      	movs	r1, #9
 8001606:	47b8      	blx	r7
 8001608:	2003      	movs	r0, #3
 800160a:	7460      	strb	r0, [r4, #17]
 800160c:	214e      	movs	r1, #78	@ 0x4e
 800160e:	7c20      	ldrb	r0, [r4, #16]
 8001610:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}
 8001614:	f7fe bf9f 	b.w	8000556 <USBPD_PE_Notification>
 8001618:	f000 f865 	bl	80016e6 <.text_7>
 800161c:	231a      	movs	r3, #26
 800161e:	210d      	movs	r1, #13
 8001620:	e003      	b.n	800162a <PE_Check_ExtendedMessage+0xee>
 8001622:	f000 f860 	bl	80016e6 <.text_7>
 8001626:	2309      	movs	r3, #9
 8001628:	2111      	movs	r1, #17
 800162a:	47b8      	blx	r7
 800162c:	e04f      	b.n	80016ce <PE_Check_ExtendedMessage+0x192>
 800162e:	1ecb      	subs	r3, r1, #3
 8001630:	2b08      	cmp	r3, #8
 8001632:	d84f      	bhi.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 8001634:	e8df f003 	tbb	[pc, r3]
 8001638:	174e0e05 	.word	0x174e0e05
 800163c:	243a314e 	.word	0x243a314e
 8001640:	0029      	.short	0x0029
 8001642:	f000 f84a 	bl	80016da <.text_6>
 8001646:	d045      	beq.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 8001648:	f000 f853 	bl	80016f2 <.text_8>
 800164c:	2110      	movs	r1, #16
 800164e:	47b8      	blx	r7
 8001650:	203a      	movs	r0, #58	@ 0x3a
 8001652:	e03d      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 8001654:	f000 f841 	bl	80016da <.text_6>
 8001658:	d03c      	beq.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 800165a:	f000 f84a 	bl	80016f2 <.text_8>
 800165e:	210e      	movs	r1, #14
 8001660:	47b8      	blx	r7
 8001662:	203b      	movs	r0, #59	@ 0x3b
 8001664:	e034      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 8001666:	6820      	ldr	r0, [r4, #0]
 8001668:	8901      	ldrh	r1, [r0, #8]
 800166a:	f3c1 1080 	ubfx	r0, r1, #6, #1
 800166e:	2800      	cmp	r0, #0
 8001670:	d030      	beq.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 8001672:	f000 f838 	bl	80016e6 <.text_7>
 8001676:	2302      	movs	r3, #2
 8001678:	210c      	movs	r1, #12
 800167a:	47b8      	blx	r7
 800167c:	203c      	movs	r0, #60	@ 0x3c
 800167e:	e027      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 8001680:	6820      	ldr	r0, [r4, #0]
 8001682:	8901      	ldrh	r1, [r0, #8]
 8001684:	f3c1 2080 	ubfx	r0, r1, #10, #1
 8001688:	e00b      	b.n	80016a2 <PE_Check_ExtendedMessage+0x166>
 800168a:	68a0      	ldr	r0, [r4, #8]
 800168c:	6905      	ldr	r5, [r0, #16]
 800168e:	b31d      	cbz	r5, 80016d8 <PE_Check_ExtendedMessage+0x19c>
 8001690:	f8b4 348e 	ldrh.w	r3, [r4, #1166]	@ 0x48e
 8001694:	7c20      	ldrb	r0, [r4, #16]
 8001696:	47a8      	blx	r5
 8001698:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800169a:	6820      	ldr	r0, [r4, #0]
 800169c:	8901      	ldrh	r1, [r0, #8]
 800169e:	f3c1 2040 	ubfx	r0, r1, #9, #1
 80016a2:	b1b8      	cbz	r0, 80016d4 <PE_Check_ExtendedMessage+0x198>
 80016a4:	68a1      	ldr	r1, [r4, #8]
 80016a6:	6908      	ldr	r0, [r1, #16]
 80016a8:	b950      	cbnz	r0, 80016c0 <PE_Check_ExtendedMessage+0x184>
 80016aa:	e013      	b.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 80016ac:	6820      	ldr	r0, [r4, #0]
 80016ae:	8901      	ldrh	r1, [r0, #8]
 80016b0:	f3c1 2040 	ubfx	r0, r1, #9, #1
 80016b4:	2800      	cmp	r0, #0
 80016b6:	bf1e      	ittt	ne
 80016b8:	68a1      	ldrne	r1, [r4, #8]
 80016ba:	6908      	ldrne	r0, [r1, #16]
 80016bc:	2800      	cmpne	r0, #0
 80016be:	d00b      	beq.n	80016d8 <PE_Check_ExtendedMessage+0x19c>
 80016c0:	68a5      	ldr	r5, [r4, #8]
 80016c2:	78b1      	ldrb	r1, [r6, #2]
 80016c4:	f8b4 348e 	ldrh.w	r3, [r4, #1166]	@ 0x48e
 80016c8:	7c20      	ldrb	r0, [r4, #16]
 80016ca:	692e      	ldr	r6, [r5, #16]
 80016cc:	47b0      	blx	r6
 80016ce:	2003      	movs	r0, #3
 80016d0:	7460      	strb	r0, [r4, #17]
 80016d2:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80016d4:	2101      	movs	r1, #1
 80016d6:	7461      	strb	r1, [r4, #17]
 80016d8:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080016da <.text_6>:
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	8901      	ldrh	r1, [r0, #8]
 80016de:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80016e2:	2800      	cmp	r0, #0
 80016e4:	4770      	bx	lr

080016e6 <.text_7>:
 80016e6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80016e8:	68a5      	ldr	r5, [r4, #8]
 80016ea:	69af      	ldr	r7, [r5, #24]
 80016ec:	1d02      	adds	r2, r0, #4
 80016ee:	7c20      	ldrb	r0, [r4, #16]
 80016f0:	4770      	bx	lr

080016f2 <.text_8>:
 80016f2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80016f4:	68a5      	ldr	r5, [r4, #8]
 80016f6:	69af      	ldr	r7, [r5, #24]
 80016f8:	1d02      	adds	r2, r0, #4
 80016fa:	7c20      	ldrb	r0, [r4, #16]
 80016fc:	2301      	movs	r3, #1
 80016fe:	4770      	bx	lr

08001700 <PE_Send_ExtendedMessage>:
 8001700:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8001704:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8001706:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8001708:	4606      	mov	r6, r0
 800170a:	460f      	mov	r7, r1
 800170c:	4690      	mov	r8, r2
 800170e:	4699      	mov	r9, r3
 8001710:	f7ff fed2 	bl	80014b8 <.text_3>
 8001714:	b1b8      	cbz	r0, 8001746 <PE_Send_ExtendedMessage+0x46>
 8001716:	9501      	str	r5, [sp, #4]
 8001718:	9400      	str	r4, [sp, #0]
 800171a:	464b      	mov	r3, r9
 800171c:	7c30      	ldrb	r0, [r6, #16]
 800171e:	f048 0280 	orr.w	r2, r8, #128	@ 0x80
 8001722:	4639      	mov	r1, r7
 8001724:	f003 fc96 	bl	8005054 <USBPD_PRL_SendMessage>
 8001728:	2803      	cmp	r0, #3
 800172a:	d0f1      	beq.n	8001710 <PE_Send_ExtendedMessage+0x10>
 800172c:	2810      	cmp	r0, #16
 800172e:	d008      	beq.n	8001742 <PE_Send_ExtendedMessage+0x42>
 8001730:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 8001734:	9100      	str	r1, [sp, #0]
 8001736:	4603      	mov	r3, r0
 8001738:	2200      	movs	r2, #0
 800173a:	4639      	mov	r1, r7
 800173c:	4630      	mov	r0, r6
 800173e:	f000 faa1 	bl	8001c84 <PE_CheckSendMessageStatus>
 8001742:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8001746:	2011      	movs	r0, #17
 8001748:	7470      	strb	r0, [r6, #17]
 800174a:	2010      	movs	r0, #16
 800174c:	e7f9      	b.n	8001742 <PE_Send_ExtendedMessage+0x42>

0800174e <PE_SubStateMachine_ExtendedMessages>:
 800174e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	4604      	mov	r4, r0
 8001756:	f04f 0802 	mov.w	r8, #2
 800175a:	7c61      	ldrb	r1, [r4, #17]
 800175c:	2931      	cmp	r1, #49	@ 0x31
 800175e:	f204 2a67 	addw	sl, r4, #615	@ 0x267
 8001762:	f204 3b85 	addw	fp, r4, #901	@ 0x385
 8001766:	f204 265a 	addw	r6, r4, #602	@ 0x25a
 800176a:	f104 0930 	add.w	r9, r4, #48	@ 0x30
 800176e:	f204 2563 	addw	r5, r4, #611	@ 0x263
 8001772:	f204 478e 	addw	r7, r4, #1166	@ 0x48e
 8001776:	f248 001b 	movw	r0, #32795	@ 0x801b
 800177a:	d015      	beq.n	80017a8 <PE_SubStateMachine_ExtendedMessages+0x5a>
 800177c:	2933      	cmp	r1, #51	@ 0x33
 800177e:	d058      	beq.n	8001832 <PE_SubStateMachine_ExtendedMessages+0xe4>
 8001780:	2934      	cmp	r1, #52	@ 0x34
 8001782:	d05f      	beq.n	8001844 <PE_SubStateMachine_ExtendedMessages+0xf6>
 8001784:	2935      	cmp	r1, #53	@ 0x35
 8001786:	f000 808a 	beq.w	800189e <PE_SubStateMachine_ExtendedMessages+0x150>
 800178a:	2936      	cmp	r1, #54	@ 0x36
 800178c:	f000 809d 	beq.w	80018ca <PE_SubStateMachine_ExtendedMessages+0x17c>
 8001790:	2937      	cmp	r1, #55	@ 0x37
 8001792:	f000 809f 	beq.w	80018d4 <PE_SubStateMachine_ExtendedMessages+0x186>
 8001796:	2938      	cmp	r1, #56	@ 0x38
 8001798:	bf01      	itttt	eq
 800179a:	2003      	moveq	r0, #3
 800179c:	7460      	strbeq	r0, [r4, #17]
 800179e:	f04f 0800 	moveq.w	r8, #0
 80017a2:	f8a7 8000 	strheq.w	r8, [r7]
 80017a6:	e0c3      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80017a8:	9503      	str	r5, [sp, #12]
 80017aa:	2500      	movs	r5, #0
 80017ac:	803d      	strh	r5, [r7, #0]
 80017ae:	7c20      	ldrb	r0, [r4, #16]
 80017b0:	f7ff faf1 	bl	8000d96 <PE_Get_UnchunkedSupport>
 80017b4:	2801      	cmp	r0, #1
 80017b6:	d106      	bne.n	80017c6 <PE_SubStateMachine_ExtendedMessages+0x78>
 80017b8:	f204 3087 	addw	r0, r4, #903	@ 0x387
 80017bc:	7005      	strb	r5, [r0, #0]
 80017be:	7045      	strb	r5, [r0, #1]
 80017c0:	f8cd b00c 	str.w	fp, [sp, #12]
 80017c4:	e017      	b.n	80017f6 <PE_SubStateMachine_ExtendedMessages+0xa8>
 80017c6:	72f5      	strb	r5, [r6, #11]
 80017c8:	7335      	strb	r5, [r6, #12]
 80017ca:	7c20      	ldrb	r0, [r4, #16]
 80017cc:	f7ff fae3 	bl	8000d96 <PE_Get_UnchunkedSupport>
 80017d0:	b918      	cbnz	r0, 80017da <PE_SubStateMachine_ExtendedMessages+0x8c>
 80017d2:	7b30      	ldrb	r0, [r6, #12]
 80017d4:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80017d8:	7330      	strb	r0, [r6, #12]
 80017da:	8878      	ldrh	r0, [r7, #2]
 80017dc:	281b      	cmp	r0, #27
 80017de:	4628      	mov	r0, r5
 80017e0:	d306      	bcc.n	80017f0 <PE_SubStateMachine_ExtendedMessages+0xa2>
 80017e2:	f000 f8a9 	bl	8001938 <.text_11>
 80017e6:	281a      	cmp	r0, #26
 80017e8:	d3fb      	bcc.n	80017e2 <PE_SubStateMachine_ExtendedMessages+0x94>
 80017ea:	e004      	b.n	80017f6 <PE_SubStateMachine_ExtendedMessages+0xa8>
 80017ec:	f000 f8a4 	bl	8001938 <.text_11>
 80017f0:	8879      	ldrh	r1, [r7, #2]
 80017f2:	4288      	cmp	r0, r1
 80017f4:	d3fa      	bcc.n	80017ec <PE_SubStateMachine_ExtendedMessages+0x9e>
 80017f6:	6960      	ldr	r0, [r4, #20]
 80017f8:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80017fc:	b130      	cbz	r0, 800180c <PE_SubStateMachine_ExtendedMessages+0xbe>
 80017fe:	f000 f98f 	bl	8001b20 <.text_16>
 8001802:	bf14      	ite	ne
 8001804:	2501      	movne	r5, #1
 8001806:	2502      	moveq	r5, #2
 8001808:	2033      	movs	r0, #51	@ 0x33
 800180a:	e000      	b.n	800180e <PE_SubStateMachine_ExtendedMessages+0xc0>
 800180c:	2003      	movs	r0, #3
 800180e:	9502      	str	r5, [sp, #8]
 8001810:	9001      	str	r0, [sp, #4]
 8001812:	8878      	ldrh	r0, [r7, #2]
 8001814:	9b03      	ldr	r3, [sp, #12]
 8001816:	1d00      	adds	r0, r0, #4
 8001818:	b280      	uxth	r0, r0
 800181a:	9000      	str	r0, [sp, #0]
 800181c:	78f2      	ldrb	r2, [r6, #3]
 800181e:	f899 1003 	ldrb.w	r1, [r9, #3]
 8001822:	4620      	mov	r0, r4
 8001824:	f7ff ff6c 	bl	8001700 <PE_Send_ExtendedMessage>
 8001828:	2800      	cmp	r0, #0
 800182a:	d101      	bne.n	8001830 <PE_SubStateMachine_ExtendedMessages+0xe2>
 800182c:	7970      	ldrb	r0, [r6, #5]
 800182e:	7720      	strb	r0, [r4, #28]
 8001830:	e07e      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 8001832:	83e0      	strh	r0, [r4, #30]
 8001834:	f04f 081b 	mov.w	r8, #27
 8001838:	78f0      	ldrb	r0, [r6, #3]
 800183a:	2804      	cmp	r0, #4
 800183c:	d148      	bne.n	80018d0 <PE_SubStateMachine_ExtendedMessages+0x182>
 800183e:	2174      	movs	r1, #116	@ 0x74
 8001840:	7461      	strb	r1, [r4, #17]
 8001842:	e075      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 8001844:	8831      	ldrh	r1, [r6, #0]
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	f3c1 21c3 	ubfx	r1, r1, #11, #4
 800184c:	201a      	movs	r0, #26
 800184e:	4341      	muls	r1, r0
 8001850:	4291      	cmp	r1, r2
 8001852:	da04      	bge.n	800185e <PE_SubStateMachine_ExtendedMessages+0x110>
 8001854:	8830      	ldrh	r0, [r6, #0]
 8001856:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 800185a:	280a      	cmp	r0, #10
 800185c:	d301      	bcc.n	8001862 <PE_SubStateMachine_ExtendedMessages+0x114>
 800185e:	2003      	movs	r0, #3
 8001860:	e019      	b.n	8001896 <PE_SubStateMachine_ExtendedMessages+0x148>
 8001862:	1a50      	subs	r0, r2, r1
 8001864:	281a      	cmp	r0, #26
 8001866:	bf3a      	itte	cc
 8001868:	1a52      	subcc	r2, r2, r1
 800186a:	b2d2      	uxtbcc	r2, r2
 800186c:	221a      	movcs	r2, #26
 800186e:	2000      	movs	r0, #0
 8001870:	e005      	b.n	800187e <PE_SubStateMachine_ExtendedMessages+0x130>
 8001872:	1843      	adds	r3, r0, r1
 8001874:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8001878:	f80a 3000 	strb.w	r3, [sl, r0]
 800187c:	1c40      	adds	r0, r0, #1
 800187e:	4290      	cmp	r0, r2
 8001880:	d3f7      	bcc.n	8001872 <PE_SubStateMachine_ExtendedMessages+0x124>
 8001882:	8831      	ldrh	r1, [r6, #0]
 8001884:	887a      	ldrh	r2, [r7, #2]
 8001886:	7c20      	ldrb	r0, [r4, #16]
 8001888:	0ac9      	lsrs	r1, r1, #11
 800188a:	462b      	mov	r3, r5
 800188c:	f001 010f 	and.w	r1, r1, #15
 8001890:	f004 f86d 	bl	800596e <USBPD_PRL_PrepareExtendedTxChunkSending>
 8001894:	2035      	movs	r0, #53	@ 0x35
 8001896:	7460      	strb	r0, [r4, #17]
 8001898:	f04f 0800 	mov.w	r8, #0
 800189c:	e048      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 800189e:	6960      	ldr	r0, [r4, #20]
 80018a0:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80018a4:	2800      	cmp	r0, #0
 80018a6:	bf14      	ite	ne
 80018a8:	2036      	movne	r0, #54	@ 0x36
 80018aa:	2003      	moveq	r0, #3
 80018ac:	2100      	movs	r1, #0
 80018ae:	9001      	str	r0, [sp, #4]
 80018b0:	9102      	str	r1, [sp, #8]
 80018b2:	462b      	mov	r3, r5
 80018b4:	8878      	ldrh	r0, [r7, #2]
 80018b6:	9000      	str	r0, [sp, #0]
 80018b8:	78f2      	ldrb	r2, [r6, #3]
 80018ba:	f899 1000 	ldrb.w	r1, [r9]
 80018be:	4620      	mov	r0, r4
 80018c0:	f7ff ff1e 	bl	8001700 <PE_Send_ExtendedMessage>
 80018c4:	2000      	movs	r0, #0
 80018c6:	8038      	strh	r0, [r7, #0]
 80018c8:	e032      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80018ca:	83e0      	strh	r0, [r4, #30]
 80018cc:	f04f 081b 	mov.w	r8, #27
 80018d0:	2039      	movs	r0, #57	@ 0x39
 80018d2:	e004      	b.n	80018de <PE_SubStateMachine_ExtendedMessages+0x190>
 80018d4:	8be1      	ldrh	r1, [r4, #30]
 80018d6:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80018da:	d102      	bne.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0x194>
 80018dc:	200f      	movs	r0, #15
 80018de:	7460      	strb	r0, [r4, #17]
 80018e0:	e026      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80018e2:	83e0      	strh	r0, [r4, #30]
 80018e4:	4629      	mov	r1, r5
 80018e6:	7c20      	ldrb	r0, [r4, #16]
 80018e8:	f004 f86a 	bl	80059c0 <USBPD_PRL_PrepareChunkRequest>
 80018ec:	f04f 081b 	mov.w	r8, #27
 80018f0:	6860      	ldr	r0, [r4, #4]
 80018f2:	f7ff fde2 	bl	80014ba <.text_3+0x2>
 80018f6:	b180      	cbz	r0, 800191a <PE_SubStateMachine_ExtendedMessages+0x1cc>
 80018f8:	2000      	movs	r0, #0
 80018fa:	2106      	movs	r1, #6
 80018fc:	9001      	str	r0, [sp, #4]
 80018fe:	9100      	str	r1, [sp, #0]
 8001900:	462b      	mov	r3, r5
 8001902:	78b2      	ldrb	r2, [r6, #2]
 8001904:	f899 1000 	ldrb.w	r1, [r9]
 8001908:	7c20      	ldrb	r0, [r4, #16]
 800190a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800190e:	f003 fba1 	bl	8005054 <USBPD_PRL_SendMessage>
 8001912:	2803      	cmp	r0, #3
 8001914:	4603      	mov	r3, r0
 8001916:	d0eb      	beq.n	80018f0 <PE_SubStateMachine_ExtendedMessages+0x1a2>
 8001918:	e002      	b.n	8001920 <PE_SubStateMachine_ExtendedMessages+0x1d2>
 800191a:	2011      	movs	r0, #17
 800191c:	7460      	strb	r0, [r4, #17]
 800191e:	2310      	movs	r3, #16
 8001920:	2039      	movs	r0, #57	@ 0x39
 8001922:	9000      	str	r0, [sp, #0]
 8001924:	2200      	movs	r2, #0
 8001926:	f899 1000 	ldrb.w	r1, [r9]
 800192a:	4620      	mov	r0, r4
 800192c:	f000 f9aa 	bl	8001c84 <PE_CheckSendMessageStatus>
 8001930:	4640      	mov	r0, r8
 8001932:	b005      	add	sp, #20
 8001934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001938 <.text_11>:
 8001938:	f81b 1000 	ldrb.w	r1, [fp, r0]
 800193c:	f80a 1000 	strb.w	r1, [sl, r0]
 8001940:	1c40      	adds	r0, r0, #1
 8001942:	4770      	bx	lr

08001944 <PE_ManageRXEvent>:
 8001944:	f100 0130 	add.w	r1, r0, #48	@ 0x30
 8001948:	780a      	ldrb	r2, [r1, #0]
 800194a:	704a      	strb	r2, [r1, #1]
 800194c:	888a      	ldrh	r2, [r1, #4]
 800194e:	0bd1      	lsrs	r1, r2, #15
 8001950:	bf18      	it	ne
 8001952:	f7ff bdf3 	bne.w	800153c <PE_Check_ExtendedMessage>
 8001956:	f412 4f70 	tst.w	r2, #61440	@ 0xf000
 800195a:	bf08      	it	eq
 800195c:	f000 b802 	beq.w	8001964 <PE_Check_ControlMessage>
 8001960:	e0e4      	b.n	8001b2c <PE_Check_DataMessage>
	...

08001964 <PE_Check_ControlMessage>:
 8001964:	b510      	push	{r4, lr}
 8001966:	f000 f987 	bl	8001c78 <.text_18>
 800196a:	1e40      	subs	r0, r0, #1
 800196c:	2817      	cmp	r0, #23
 800196e:	d85b      	bhi.n	8001a28 <PE_Check_ControlMessage+0xc4>
 8001970:	e8df f000 	tbb	[pc, r0]
 8001974:	bfbf0ccc 	.word	0xbfbf0ccc
 8001978:	5520bf1e 	.word	0x5520bf1e
 800197c:	bf3b3143 	.word	0xbf3b3143
 8001980:	b9c1c117 	.word	0xb9c1c117
 8001984:	96b18a67 	.word	0x96b18a67
 8001988:	b5c17caa 	.word	0xb5c17caa
 800198c:	f000 f8c8 	bl	8001b20 <.text_16>
 8001990:	f040 80bc 	bne.w	8001b0c <PE_Check_ControlMessage+0x1a8>
 8001994:	2002      	movs	r0, #2
 8001996:	7720      	strb	r0, [r4, #28]
 8001998:	212b      	movs	r1, #43	@ 0x2b
 800199a:	f000 f8be 	bl	8001b1a <.text_15>
 800199e:	2198      	movs	r1, #152	@ 0x98
 80019a0:	e0b3      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 80019a2:	2003      	movs	r0, #3
 80019a4:	7720      	strb	r0, [r4, #28]
 80019a6:	2132      	movs	r1, #50	@ 0x32
 80019a8:	f000 f8b7 	bl	8001b1a <.text_15>
 80019ac:	2010      	movs	r0, #16
 80019ae:	e0a9      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019b0:	2133      	movs	r1, #51	@ 0x33
 80019b2:	e099      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 80019b4:	2006      	movs	r0, #6
 80019b6:	7720      	strb	r0, [r4, #28]
 80019b8:	f000 f8b2 	bl	8001b20 <.text_16>
 80019bc:	bf01      	itttt	eq
 80019be:	6820      	ldreq	r0, [r4, #0]
 80019c0:	6841      	ldreq	r1, [r0, #4]
 80019c2:	f3c1 00c0 	ubfxeq	r0, r1, #3, #1
 80019c6:	2800      	cmpeq	r0, #0
 80019c8:	d024      	beq.n	8001a14 <PE_Check_ControlMessage+0xb0>
 80019ca:	7c20      	ldrb	r0, [r4, #16]
 80019cc:	210c      	movs	r1, #12
 80019ce:	f7fe fdc2 	bl	8000556 <USBPD_PE_Notification>
 80019d2:	204c      	movs	r0, #76	@ 0x4c
 80019d4:	e096      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019d6:	f000 f89a 	bl	8001b0e <.text_14>
 80019da:	d01b      	beq.n	8001a14 <PE_Check_ControlMessage+0xb0>
 80019dc:	2008      	movs	r0, #8
 80019de:	7720      	strb	r0, [r4, #28]
 80019e0:	213c      	movs	r1, #60	@ 0x3c
 80019e2:	f000 f89a 	bl	8001b1a <.text_15>
 80019e6:	2022      	movs	r0, #34	@ 0x22
 80019e8:	e08c      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019ea:	68a1      	ldr	r1, [r4, #8]
 80019ec:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d010      	beq.n	8001a14 <PE_Check_ControlMessage+0xb0>
 80019f2:	2111      	movs	r1, #17
 80019f4:	7721      	strb	r1, [r4, #28]
 80019f6:	209d      	movs	r0, #157	@ 0x9d
 80019f8:	e084      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019fa:	7c20      	ldrb	r0, [r4, #16]
 80019fc:	2123      	movs	r1, #35	@ 0x23
 80019fe:	f7fe fdaa 	bl	8000556 <USBPD_PE_Notification>
 8001a02:	6960      	ldr	r0, [r4, #20]
 8001a04:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8001a08:	b108      	cbz	r0, 8001a0e <PE_Check_ControlMessage+0xaa>
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	e07a      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001a0e:	68a1      	ldr	r1, [r4, #8]
 8001a10:	6b88      	ldr	r0, [r1, #56]	@ 0x38
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d06f      	beq.n	8001af6 <PE_Check_ControlMessage+0x192>
 8001a16:	2010      	movs	r0, #16
 8001a18:	7720      	strb	r0, [r4, #28]
 8001a1a:	2193      	movs	r1, #147	@ 0x93
 8001a1c:	e075      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001a1e:	6860      	ldr	r0, [r4, #4]
 8001a20:	6801      	ldr	r1, [r0, #0]
 8001a22:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8001a26:	2803      	cmp	r0, #3
 8001a28:	d165      	bne.n	8001af6 <PE_Check_ControlMessage+0x192>
 8001a2a:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001a2e:	b110      	cbz	r0, 8001a36 <PE_Check_ControlMessage+0xd2>
 8001a30:	f000 f86d 	bl	8001b0e <.text_14>
 8001a34:	d05f      	beq.n	8001af6 <PE_Check_ControlMessage+0x192>
 8001a36:	211d      	movs	r1, #29
 8001a38:	7461      	strb	r1, [r4, #17]
 8001a3a:	2007      	movs	r0, #7
 8001a3c:	7720      	strb	r0, [r4, #28]
 8001a3e:	2106      	movs	r1, #6
 8001a40:	e052      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 8001a42:	6820      	ldr	r0, [r4, #0]
 8001a44:	8901      	ldrh	r1, [r0, #8]
 8001a46:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d059      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001a4e:	f000 f867 	bl	8001b20 <.text_16>
 8001a52:	bf01      	itttt	eq
 8001a54:	6820      	ldreq	r0, [r4, #0]
 8001a56:	6841      	ldreq	r1, [r0, #4]
 8001a58:	f3c1 00c0 	ubfxeq	r0, r1, #3, #1
 8001a5c:	2800      	cmpeq	r0, #0
 8001a5e:	d050      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001a60:	2163      	movs	r1, #99	@ 0x63
 8001a62:	7461      	strb	r1, [r4, #17]
 8001a64:	200a      	movs	r0, #10
 8001a66:	7720      	strb	r0, [r4, #28]
 8001a68:	2146      	movs	r1, #70	@ 0x46
 8001a6a:	e03d      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 8001a6c:	6860      	ldr	r0, [r4, #4]
 8001a6e:	6801      	ldr	r1, [r0, #0]
 8001a70:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001a74:	b110      	cbz	r0, 8001a7c <PE_Check_ControlMessage+0x118>
 8001a76:	f000 f84a 	bl	8001b0e <.text_14>
 8001a7a:	d042      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001a7c:	2164      	movs	r1, #100	@ 0x64
 8001a7e:	7461      	strb	r1, [r4, #17]
 8001a80:	205f      	movs	r0, #95	@ 0x5f
 8001a82:	7720      	strb	r0, [r4, #28]
 8001a84:	2160      	movs	r1, #96	@ 0x60
 8001a86:	e02f      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 8001a88:	6820      	ldr	r0, [r4, #0]
 8001a8a:	8901      	ldrh	r1, [r0, #8]
 8001a8c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8001a90:	b318      	cbz	r0, 8001ada <PE_Check_ControlMessage+0x176>
 8001a92:	200b      	movs	r0, #11
 8001a94:	7720      	strb	r0, [r4, #28]
 8001a96:	214d      	movs	r1, #77	@ 0x4d
 8001a98:	f000 f83f 	bl	8001b1a <.text_15>
 8001a9c:	2030      	movs	r0, #48	@ 0x30
 8001a9e:	e031      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001aa0:	6820      	ldr	r0, [r4, #0]
 8001aa2:	8901      	ldrh	r1, [r0, #8]
 8001aa4:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d02a      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001aac:	200b      	movs	r0, #11
 8001aae:	7720      	strb	r0, [r4, #28]
 8001ab0:	2149      	movs	r1, #73	@ 0x49
 8001ab2:	f000 f832 	bl	8001b1a <.text_15>
 8001ab6:	6860      	ldr	r0, [r4, #4]
 8001ab8:	6801      	ldr	r1, [r0, #0]
 8001aba:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001abe:	b108      	cbz	r0, 8001ac4 <PE_Check_ControlMessage+0x160>
 8001ac0:	202d      	movs	r0, #45	@ 0x2d
 8001ac2:	e01f      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001ac4:	2111      	movs	r1, #17
 8001ac6:	e020      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001ac8:	6820      	ldr	r0, [r4, #0]
 8001aca:	8901      	ldrh	r1, [r0, #8]
 8001acc:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8001ad0:	b118      	cbz	r0, 8001ada <PE_Check_ControlMessage+0x176>
 8001ad2:	202f      	movs	r0, #47	@ 0x2f
 8001ad4:	e016      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001ad6:	2009      	movs	r0, #9
 8001ad8:	7720      	strb	r0, [r4, #28]
 8001ada:	2101      	movs	r1, #1
 8001adc:	e015      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001ade:	200f      	movs	r0, #15
 8001ae0:	7720      	strb	r0, [r4, #28]
 8001ae2:	214b      	movs	r1, #75	@ 0x4b
 8001ae4:	e011      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001ae6:	2159      	movs	r1, #89	@ 0x59
 8001ae8:	7c20      	ldrb	r0, [r4, #16]
 8001aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001aee:	f7fe bd32 	b.w	8000556 <USBPD_PE_Notification>
 8001af2:	2011      	movs	r0, #17
 8001af4:	e006      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001af6:	6860      	ldr	r0, [r4, #4]
 8001af8:	7801      	ldrb	r1, [r0, #0]
 8001afa:	f001 0103 	and.w	r1, r1, #3
 8001afe:	2902      	cmp	r1, #2
 8001b00:	d102      	bne.n	8001b08 <PE_Check_ControlMessage+0x1a4>
 8001b02:	2001      	movs	r0, #1
 8001b04:	7460      	strb	r0, [r4, #17]
 8001b06:	bd10      	pop	{r4, pc}
 8001b08:	212a      	movs	r1, #42	@ 0x2a
 8001b0a:	7461      	strb	r1, [r4, #17]
 8001b0c:	bd10      	pop	{r4, pc}

08001b0e <.text_14>:
 8001b0e:	6820      	ldr	r0, [r4, #0]
 8001b10:	6841      	ldr	r1, [r0, #4]
 8001b12:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001b16:	2800      	cmp	r0, #0
 8001b18:	4770      	bx	lr

08001b1a <.text_15>:
 8001b1a:	7c20      	ldrb	r0, [r4, #16]
 8001b1c:	f7fe bd1b 	b.w	8000556 <USBPD_PE_Notification>

08001b20 <.text_16>:
 8001b20:	6860      	ldr	r0, [r4, #4]
 8001b22:	6801      	ldr	r1, [r0, #0]
 8001b24:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	4770      	bx	lr

08001b2c <PE_Check_DataMessage>:
 8001b2c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001b2e:	f000 f8a3 	bl	8001c78 <.text_18>
 8001b32:	2801      	cmp	r0, #1
 8001b34:	d02a      	beq.n	8001b8c <PE_Check_DataMessage+0x60>
 8001b36:	2802      	cmp	r0, #2
 8001b38:	d00c      	beq.n	8001b54 <PE_Check_DataMessage+0x28>
 8001b3a:	2803      	cmp	r0, #3
 8001b3c:	d03c      	beq.n	8001bb8 <PE_Check_DataMessage+0x8c>
 8001b3e:	2806      	cmp	r0, #6
 8001b40:	d07c      	beq.n	8001c3c <PE_Check_DataMessage+0x110>
 8001b42:	2807      	cmp	r0, #7
 8001b44:	f000 8089 	beq.w	8001c5a <PE_Check_DataMessage+0x12e>
 8001b48:	280a      	cmp	r0, #10
 8001b4a:	f000 808f 	beq.w	8001c6c <PE_Check_DataMessage+0x140>
 8001b4e:	280f      	cmp	r0, #15
 8001b50:	d070      	beq.n	8001c34 <PE_Check_DataMessage+0x108>
 8001b52:	e08e      	b.n	8001c72 <PE_Check_DataMessage+0x146>
 8001b54:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001b56:	7881      	ldrb	r1, [r0, #2]
 8001b58:	78c2      	ldrb	r2, [r0, #3]
 8001b5a:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 8001b5e:	7901      	ldrb	r1, [r0, #4]
 8001b60:	7940      	ldrb	r0, [r0, #5]
 8001b62:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8001b66:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	f7ff ffd8 	bl	8001b20 <.text_16>
 8001b70:	d063      	beq.n	8001c3a <PE_Check_DataMessage+0x10e>
 8001b72:	68a5      	ldr	r5, [r4, #8]
 8001b74:	7c20      	ldrb	r0, [r4, #16]
 8001b76:	69ae      	ldr	r6, [r5, #24]
 8001b78:	2304      	movs	r3, #4
 8001b7a:	466a      	mov	r2, sp
 8001b7c:	2106      	movs	r1, #6
 8001b7e:	47b0      	blx	r6
 8001b80:	2001      	movs	r0, #1
 8001b82:	7720      	strb	r0, [r4, #28]
 8001b84:	2100      	movs	r1, #0
 8001b86:	84a1      	strh	r1, [r4, #36]	@ 0x24
 8001b88:	2009      	movs	r0, #9
 8001b8a:	e070      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001b8c:	f7ff ffc8 	bl	8001b20 <.text_16>
 8001b90:	d171      	bne.n	8001c76 <PE_Check_DataMessage+0x14a>
 8001b92:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001b94:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8001b98:	7c20      	ldrb	r0, [r4, #16]
 8001b9a:	f7ff f84c 	bl	8000c36 <PE_ExtRevisionInteroperability>
 8001b9e:	68a5      	ldr	r5, [r4, #8]
 8001ba0:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001ba2:	69ae      	ldr	r6, [r5, #24]
 8001ba4:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8001ba8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001baa:	1c82      	adds	r2, r0, #2
 8001bac:	7c20      	ldrb	r0, [r4, #16]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	47b0      	blx	r6
 8001bb4:	2044      	movs	r0, #68	@ 0x44
 8001bb6:	e05a      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001bb8:	2100      	movs	r1, #0
 8001bba:	9101      	str	r1, [sp, #4]
 8001bbc:	9100      	str	r1, [sp, #0]
 8001bbe:	466b      	mov	r3, sp
 8001bc0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001bc2:	7881      	ldrb	r1, [r0, #2]
 8001bc4:	78c2      	ldrb	r2, [r0, #3]
 8001bc6:	68a6      	ldr	r6, [r4, #8]
 8001bc8:	6977      	ldr	r7, [r6, #20]
 8001bca:	eb01 2502 	add.w	r5, r1, r2, lsl #8
 8001bce:	7901      	ldrb	r1, [r0, #4]
 8001bd0:	7940      	ldrb	r0, [r0, #5]
 8001bd2:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 8001bd6:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 8001bda:	7c20      	ldrb	r0, [r4, #16]
 8001bdc:	aa01      	add	r2, sp, #4
 8001bde:	2103      	movs	r1, #3
 8001be0:	47b8      	blx	r7
 8001be2:	9800      	ldr	r0, [sp, #0]
 8001be4:	2104      	movs	r1, #4
 8001be6:	f7ff fbdf 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8001bea:	2800      	cmp	r0, #0
 8001bec:	bf01      	itttt	eq
 8001bee:	6860      	ldreq	r0, [r4, #4]
 8001bf0:	6801      	ldreq	r1, [r0, #0]
 8001bf2:	f3c1 2002 	ubfxeq	r0, r1, #8, #3
 8001bf6:	2803      	cmpeq	r0, #3
 8001bf8:	d11a      	bne.n	8001c30 <PE_Check_DataMessage+0x104>
 8001bfa:	9801      	ldr	r0, [sp, #4]
 8001bfc:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001c00:	4288      	cmp	r0, r1
 8001c02:	d115      	bne.n	8001c30 <PE_Check_DataMessage+0x104>
 8001c04:	0f2d      	lsrs	r5, r5, #28
 8001c06:	2d05      	cmp	r5, #5
 8001c08:	d010      	beq.n	8001c2c <PE_Check_DataMessage+0x100>
 8001c0a:	2d08      	cmp	r5, #8
 8001c0c:	d00c      	beq.n	8001c28 <PE_Check_DataMessage+0xfc>
 8001c0e:	2d09      	cmp	r5, #9
 8001c10:	d004      	beq.n	8001c1c <PE_Check_DataMessage+0xf0>
 8001c12:	2d0a      	cmp	r5, #10
 8001c14:	d12f      	bne.n	8001c76 <PE_Check_DataMessage+0x14a>
 8001c16:	7c20      	ldrb	r0, [r4, #16]
 8001c18:	2166      	movs	r1, #102	@ 0x66
 8001c1a:	e001      	b.n	8001c20 <PE_Check_DataMessage+0xf4>
 8001c1c:	7c20      	ldrb	r0, [r4, #16]
 8001c1e:	2165      	movs	r1, #101	@ 0x65
 8001c20:	f7fe fc99 	bl	8000556 <USBPD_PE_Notification>
 8001c24:	2003      	movs	r0, #3
 8001c26:	e022      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c28:	2129      	movs	r1, #41	@ 0x29
 8001c2a:	e023      	b.n	8001c74 <PE_Check_DataMessage+0x148>
 8001c2c:	2027      	movs	r0, #39	@ 0x27
 8001c2e:	e01e      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c30:	2103      	movs	r1, #3
 8001c32:	e01f      	b.n	8001c74 <PE_Check_DataMessage+0x148>
 8001c34:	4620      	mov	r0, r4
 8001c36:	f003 f816 	bl	8004c66 <PE_Check_DataMessageVDM>
 8001c3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001c3c:	6820      	ldr	r0, [r4, #0]
 8001c3e:	8901      	ldrh	r1, [r0, #8]
 8001c40:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8001c44:	b180      	cbz	r0, 8001c68 <PE_Check_DataMessage+0x13c>
 8001c46:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001c48:	68a5      	ldr	r5, [r4, #8]
 8001c4a:	69ae      	ldr	r6, [r5, #24]
 8001c4c:	1c82      	adds	r2, r0, #2
 8001c4e:	7c20      	ldrb	r0, [r4, #16]
 8001c50:	2304      	movs	r3, #4
 8001c52:	210b      	movs	r1, #11
 8001c54:	47b0      	blx	r6
 8001c56:	202c      	movs	r0, #44	@ 0x2c
 8001c58:	e009      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c5a:	6820      	ldr	r0, [r4, #0]
 8001c5c:	8901      	ldrh	r1, [r0, #8]
 8001c5e:	f3c1 2000 	ubfx	r0, r1, #8, #1
 8001c62:	b108      	cbz	r0, 8001c68 <PE_Check_DataMessage+0x13c>
 8001c64:	203d      	movs	r0, #61	@ 0x3d
 8001c66:	e002      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c68:	2101      	movs	r1, #1
 8001c6a:	e003      	b.n	8001c74 <PE_Check_DataMessage+0x148>
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	7460      	strb	r0, [r4, #17]
 8001c70:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001c72:	2111      	movs	r1, #17
 8001c74:	7461      	strb	r1, [r4, #17]
 8001c76:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001c78 <.text_18>:
 8001c78:	4604      	mov	r4, r0
 8001c7a:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8001c7e:	f000 001f 	and.w	r0, r0, #31
 8001c82:	4770      	bx	lr

08001c84 <PE_CheckSendMessageStatus>:
 8001c84:	b510      	push	{r4, lr}
 8001c86:	2410      	movs	r4, #16
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d007      	beq.n	8001c9c <PE_CheckSendMessageStatus+0x18>
 8001c8c:	2b06      	cmp	r3, #6
 8001c8e:	d00c      	beq.n	8001caa <PE_CheckSendMessageStatus+0x26>
 8001c90:	2b07      	cmp	r3, #7
 8001c92:	d00f      	beq.n	8001cb4 <PE_CheckSendMessageStatus+0x30>
 8001c94:	2b09      	cmp	r3, #9
 8001c96:	bf08      	it	eq
 8001c98:	2409      	moveq	r4, #9
 8001c9a:	e027      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001c9c:	9902      	ldr	r1, [sp, #8]
 8001c9e:	7441      	strb	r1, [r0, #17]
 8001ca0:	2400      	movs	r4, #0
 8001ca2:	6941      	ldr	r1, [r0, #20]
 8001ca4:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8001ca8:	e002      	b.n	8001cb0 <PE_CheckSendMessageStatus+0x2c>
 8001caa:	6941      	ldr	r1, [r0, #20]
 8001cac:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8001cb0:	6141      	str	r1, [r0, #20]
 8001cb2:	e01b      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001cb4:	b129      	cbz	r1, 8001cc2 <PE_CheckSendMessageStatus+0x3e>
 8001cb6:	2a01      	cmp	r2, #1
 8001cb8:	bf08      	it	eq
 8001cba:	2199      	moveq	r1, #153	@ 0x99
 8001cbc:	d015      	beq.n	8001cea <PE_CheckSendMessageStatus+0x66>
 8001cbe:	2407      	movs	r4, #7
 8001cc0:	e014      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001cc2:	6841      	ldr	r1, [r0, #4]
 8001cc4:	680b      	ldr	r3, [r1, #0]
 8001cc6:	f3c3 2102 	ubfx	r1, r3, #8, #3
 8001cca:	2904      	cmp	r1, #4
 8001ccc:	d003      	beq.n	8001cd6 <PE_CheckSendMessageStatus+0x52>
 8001cce:	2a01      	cmp	r2, #1
 8001cd0:	d10a      	bne.n	8001ce8 <PE_CheckSendMessageStatus+0x64>
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	e009      	b.n	8001cea <PE_CheckSendMessageStatus+0x66>
 8001cd6:	2a00      	cmp	r2, #0
 8001cd8:	d1fb      	bne.n	8001cd2 <PE_CheckSendMessageStatus+0x4e>
 8001cda:	6882      	ldr	r2, [r0, #8]
 8001cdc:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8001cde:	2900      	cmp	r1, #0
 8001ce0:	d0f7      	beq.n	8001cd2 <PE_CheckSendMessageStatus+0x4e>
 8001ce2:	2292      	movs	r2, #146	@ 0x92
 8001ce4:	7442      	strb	r2, [r0, #17]
 8001ce6:	e001      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001ce8:	2111      	movs	r1, #17
 8001cea:	7441      	strb	r1, [r0, #17]
 8001cec:	4620      	mov	r0, r4
 8001cee:	bd10      	pop	{r4, pc}

08001cf0 <USBPD_PE_StateMachine_SNK>:
 8001cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	f8df 0c2c 	ldr.w	r0, [pc, #3116]	@ 8002924 <.text_22>
 8001cfa:	b08c      	sub	sp, #48	@ 0x30
 8001cfc:	4621      	mov	r1, r4
 8001cfe:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8001d02:	7c68      	ldrb	r0, [r5, #17]
 8001d04:	2848      	cmp	r0, #72	@ 0x48
 8001d06:	d12c      	bne.n	8001d62 <USBPD_PE_StateMachine_SNK+0x72>
 8001d08:	4628      	mov	r0, r5
 8001d0a:	f7fe ff28 	bl	8000b5e <PE_Reset_ZI>
 8001d0e:	4628      	mov	r0, r5
 8001d10:	f7fe ff5f 	bl	8000bd2 <PE_Reset_Counter>
 8001d14:	6828      	ldr	r0, [r5, #0]
 8001d16:	7903      	ldrb	r3, [r0, #4]
 8001d18:	7c28      	ldrb	r0, [r5, #16]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	f003 f93e 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8001d26:	6868      	ldr	r0, [r5, #4]
 8001d28:	6801      	ldr	r1, [r0, #0]
 8001d2a:	f021 0108 	bic.w	r1, r1, #8
 8001d2e:	6001      	str	r1, [r0, #0]
 8001d30:	6828      	ldr	r0, [r5, #0]
 8001d32:	6841      	ldr	r1, [r0, #4]
 8001d34:	6868      	ldr	r0, [r5, #4]
 8001d36:	6802      	ldr	r2, [r0, #0]
 8001d38:	f361 0201 	bfi	r2, r1, #0, #2
 8001d3c:	6002      	str	r2, [r0, #0]
 8001d3e:	2101      	movs	r1, #1
 8001d40:	7c28      	ldrb	r0, [r5, #16]
 8001d42:	f003 f985 	bl	8005050 <USBPD_PRL_SOPCapability>
 8001d46:	7c28      	ldrb	r0, [r5, #16]
 8001d48:	f003 fbf7 	bl	800553a <USBPD_PRL_Reset>
 8001d4c:	7ca9      	ldrb	r1, [r5, #18]
 8001d4e:	203e      	movs	r0, #62	@ 0x3e
 8001d50:	293e      	cmp	r1, #62	@ 0x3e
 8001d52:	7468      	strb	r0, [r5, #17]
 8001d54:	d005      	beq.n	8001d62 <USBPD_PE_StateMachine_SNK+0x72>
 8001d56:	74a8      	strb	r0, [r5, #18]
 8001d58:	f000 fd25 	bl	80027a6 <.text_12>
 8001d5c:	223e      	movs	r2, #62	@ 0x3e
 8001d5e:	2004      	movs	r0, #4
 8001d60:	47b8      	blx	r7
 8001d62:	6968      	ldr	r0, [r5, #20]
 8001d64:	f3c0 4080 	ubfx	r0, r0, #18, #1
 8001d68:	b130      	cbz	r0, 8001d78 <USBPD_PE_StateMachine_SNK+0x88>
 8001d6a:	6968      	ldr	r0, [r5, #20]
 8001d6c:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 8001d70:	6168      	str	r0, [r5, #20]
 8001d72:	2164      	movs	r1, #100	@ 0x64
 8001d74:	f000 fd3b 	bl	80027ee <.text_18>
 8001d78:	4628      	mov	r0, r5
 8001d7a:	f7fe fde3 	bl	8000944 <PE_Get_RxEvent>
 8001d7e:	2803      	cmp	r0, #3
 8001d80:	f88d 000c 	strb.w	r0, [sp, #12]
 8001d84:	d103      	bne.n	8001d8e <USBPD_PE_StateMachine_SNK+0x9e>
 8001d86:	2001      	movs	r0, #1
 8001d88:	b00d      	add	sp, #52	@ 0x34
 8001d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d8e:	f88d 400d 	strb.w	r4, [sp, #13]
 8001d92:	f44f 78fa 	mov.w	r8, #500	@ 0x1f4
 8001d96:	f248 19f4 	movw	r9, #33268	@ 0x81f4
 8001d9a:	f248 0b1b 	movw	fp, #32795	@ 0x801b
 8001d9e:	6868      	ldr	r0, [r5, #4]
 8001da0:	6801      	ldr	r1, [r0, #0]
 8001da2:	2402      	movs	r4, #2
 8001da4:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8001da8:	2800      	cmp	r0, #0
 8001daa:	f000 8110 	beq.w	8001fce <USBPD_PE_StateMachine_SNK+0x2de>
 8001dae:	6968      	ldr	r0, [r5, #20]
 8001db0:	f105 0630 	add.w	r6, r5, #48	@ 0x30
 8001db4:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8001db8:	b180      	cbz	r0, 8001ddc <USBPD_PE_StateMachine_SNK+0xec>
 8001dba:	20a7      	movs	r0, #167	@ 0xa7
 8001dbc:	6969      	ldr	r1, [r5, #20]
 8001dbe:	7468      	strb	r0, [r5, #17]
 8001dc0:	f421 3100 	bic.w	r1, r1, #131072	@ 0x20000
 8001dc4:	6169      	str	r1, [r5, #20]
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	70b0      	strb	r0, [r6, #2]
 8001dca:	7ca9      	ldrb	r1, [r5, #18]
 8001dcc:	29a7      	cmp	r1, #167	@ 0xa7
 8001dce:	d020      	beq.n	8001e12 <USBPD_PE_StateMachine_SNK+0x122>
 8001dd0:	20a7      	movs	r0, #167	@ 0xa7
 8001dd2:	f000 fcef 	bl	80027b4 <.text_13>
 8001dd6:	22a7      	movs	r2, #167	@ 0xa7
 8001dd8:	2004      	movs	r0, #4
 8001dda:	47e0      	blx	ip
 8001ddc:	78b0      	ldrb	r0, [r6, #2]
 8001dde:	280f      	cmp	r0, #15
 8001de0:	bf18      	it	ne
 8001de2:	2814      	cmpne	r0, #20
 8001de4:	d115      	bne.n	8001e12 <USBPD_PE_StateMachine_SNK+0x122>
 8001de6:	f000 fcce 	bl	8002786 <.text_9+0x2>
 8001dea:	d001      	beq.n	8001df0 <USBPD_PE_StateMachine_SNK+0x100>
 8001dec:	f000 fd06 	bl	80027fc <.text_20>
 8001df0:	78b2      	ldrb	r2, [r6, #2]
 8001df2:	746a      	strb	r2, [r5, #17]
 8001df4:	2000      	movs	r0, #0
 8001df6:	70b0      	strb	r0, [r6, #2]
 8001df8:	7ca9      	ldrb	r1, [r5, #18]
 8001dfa:	4291      	cmp	r1, r2
 8001dfc:	d009      	beq.n	8001e12 <USBPD_PE_StateMachine_SNK+0x122>
 8001dfe:	74aa      	strb	r2, [r5, #18]
 8001e00:	9000      	str	r0, [sp, #0]
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8df 7b20 	ldr.w	r7, [pc, #2848]	@ 8002928 <.text_23>
 8001e08:	7c29      	ldrb	r1, [r5, #16]
 8001e0a:	f8d7 c000 	ldr.w	ip, [r7]
 8001e0e:	2004      	movs	r0, #4
 8001e10:	47e0      	blx	ip
 8001e12:	f000 fcb3 	bl	800277c <.text_8>
 8001e16:	d117      	bne.n	8001e48 <USBPD_PE_StateMachine_SNK+0x158>
 8001e18:	6868      	ldr	r0, [r5, #4]
 8001e1a:	6801      	ldr	r1, [r0, #0]
 8001e1c:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001e20:	88b1      	ldrh	r1, [r6, #4]
 8001e22:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001e26:	4288      	cmp	r0, r1
 8001e28:	d10e      	bne.n	8001e48 <USBPD_PE_StateMachine_SNK+0x158>
 8001e2a:	f000 fca3 	bl	8002774 <.text_7>
 8001e2e:	f000 fce8 	bl	8002802 <.text_20+0x6>
 8001e32:	7ca9      	ldrb	r1, [r5, #18]
 8001e34:	2092      	movs	r0, #146	@ 0x92
 8001e36:	2992      	cmp	r1, #146	@ 0x92
 8001e38:	7468      	strb	r0, [r5, #17]
 8001e3a:	f000 80d4 	beq.w	8001fe6 <USBPD_PE_StateMachine_SNK+0x2f6>
 8001e3e:	f000 fcb9 	bl	80027b4 <.text_13>
 8001e42:	2292      	movs	r2, #146	@ 0x92
 8001e44:	2004      	movs	r0, #4
 8001e46:	47e0      	blx	ip
 8001e48:	7c68      	ldrb	r0, [r5, #17]
 8001e4a:	0001      	movs	r1, r0
 8001e4c:	f205 275e 	addw	r7, r5, #606	@ 0x25e
 8001e50:	f24f 0a1f 	movw	sl, #61471	@ 0xf01f
 8001e54:	f000 80bf 	beq.w	8001fd6 <USBPD_PE_StateMachine_SNK+0x2e6>
 8001e58:	1e41      	subs	r1, r0, #1
 8001e5a:	d070      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001e5c:	1e89      	subs	r1, r1, #2
 8001e5e:	2901      	cmp	r1, #1
 8001e60:	f240 82aa 	bls.w	80023b8 <USBPD_PE_StateMachine_SNK+0x6c8>
 8001e64:	1e89      	subs	r1, r1, #2
 8001e66:	f000 81bb 	beq.w	80021e0 <USBPD_PE_StateMachine_SNK+0x4f0>
 8001e6a:	390a      	subs	r1, #10
 8001e6c:	f000 81bd 	beq.w	80021ea <USBPD_PE_StateMachine_SNK+0x4fa>
 8001e70:	1e49      	subs	r1, r1, #1
 8001e72:	f000 8242 	beq.w	80022fa <USBPD_PE_StateMachine_SNK+0x60a>
 8001e76:	1e49      	subs	r1, r1, #1
 8001e78:	f000 8248 	beq.w	800230c <USBPD_PE_StateMachine_SNK+0x61c>
 8001e7c:	1ec9      	subs	r1, r1, #3
 8001e7e:	f000 81e0 	beq.w	8002242 <USBPD_PE_StateMachine_SNK+0x552>
 8001e82:	1f09      	subs	r1, r1, #4
 8001e84:	2901      	cmp	r1, #1
 8001e86:	d95a      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001e88:	1e89      	subs	r1, r1, #2
 8001e8a:	f000 826e 	beq.w	800236a <USBPD_PE_StateMachine_SNK+0x67a>
 8001e8e:	1ec9      	subs	r1, r1, #3
 8001e90:	d055      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001e92:	1e49      	subs	r1, r1, #1
 8001e94:	f000 8333 	beq.w	80024fe <USBPD_PE_StateMachine_SNK+0x80e>
 8001e98:	1f09      	subs	r1, r1, #4
 8001e9a:	f000 829b 	beq.w	80023d4 <USBPD_PE_StateMachine_SNK+0x6e4>
 8001e9e:	1f49      	subs	r1, r1, #5
 8001ea0:	2902      	cmp	r1, #2
 8001ea2:	d94c      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001ea4:	1ec9      	subs	r1, r1, #3
 8001ea6:	f000 8280 	beq.w	80023aa <USBPD_PE_StateMachine_SNK+0x6ba>
 8001eaa:	1e49      	subs	r1, r1, #1
 8001eac:	f000 838f 	beq.w	80025ce <USBPD_PE_StateMachine_SNK+0x8de>
 8001eb0:	1e49      	subs	r1, r1, #1
 8001eb2:	d044      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001eb4:	1e89      	subs	r1, r1, #2
 8001eb6:	f000 83cd 	beq.w	8002654 <USBPD_PE_StateMachine_SNK+0x964>
 8001eba:	1e49      	subs	r1, r1, #1
 8001ebc:	2901      	cmp	r1, #1
 8001ebe:	d93e      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001ec0:	1e89      	subs	r1, r1, #2
 8001ec2:	d001      	beq.n	8001ec8 <USBPD_PE_StateMachine_SNK+0x1d8>
 8001ec4:	1e89      	subs	r1, r1, #2
 8001ec6:	2905      	cmp	r1, #5
 8001ec8:	f240 83f3 	bls.w	80026b2 <USBPD_PE_StateMachine_SNK+0x9c2>
 8001ecc:	1f89      	subs	r1, r1, #6
 8001ece:	f000 83ce 	beq.w	800266e <USBPD_PE_StateMachine_SNK+0x97e>
 8001ed2:	1e49      	subs	r1, r1, #1
 8001ed4:	2903      	cmp	r1, #3
 8001ed6:	d932      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001ed8:	1f09      	subs	r1, r1, #4
 8001eda:	f000 808d 	beq.w	8001ff8 <USBPD_PE_StateMachine_SNK+0x308>
 8001ede:	1e89      	subs	r1, r1, #2
 8001ee0:	f000 81da 	beq.w	8002298 <USBPD_PE_StateMachine_SNK+0x5a8>
 8001ee4:	1ec9      	subs	r1, r1, #3
 8001ee6:	f000 80a0 	beq.w	800202a <USBPD_PE_StateMachine_SNK+0x33a>
 8001eea:	1e49      	subs	r1, r1, #1
 8001eec:	f000 80d7 	beq.w	800209e <USBPD_PE_StateMachine_SNK+0x3ae>
 8001ef0:	1e49      	subs	r1, r1, #1
 8001ef2:	f000 80e3 	beq.w	80020bc <USBPD_PE_StateMachine_SNK+0x3cc>
 8001ef6:	1e49      	subs	r1, r1, #1
 8001ef8:	f000 80fb 	beq.w	80020f2 <USBPD_PE_StateMachine_SNK+0x402>
 8001efc:	1e49      	subs	r1, r1, #1
 8001efe:	f000 8146 	beq.w	800218e <USBPD_PE_StateMachine_SNK+0x49e>
 8001f02:	1e89      	subs	r1, r1, #2
 8001f04:	d0ac      	beq.n	8001e60 <USBPD_PE_StateMachine_SNK+0x170>
 8001f06:	1e89      	subs	r1, r1, #2
 8001f08:	d019      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f0a:	1e49      	subs	r1, r1, #1
 8001f0c:	f000 8343 	beq.w	8002596 <USBPD_PE_StateMachine_SNK+0x8a6>
 8001f10:	1f09      	subs	r1, r1, #4
 8001f12:	f000 8212 	beq.w	800233a <USBPD_PE_StateMachine_SNK+0x64a>
 8001f16:	1ec9      	subs	r1, r1, #3
 8001f18:	f000 82b2 	beq.w	8002480 <USBPD_PE_StateMachine_SNK+0x790>
 8001f1c:	1f49      	subs	r1, r1, #5
 8001f1e:	f000 82fb 	beq.w	8002518 <USBPD_PE_StateMachine_SNK+0x828>
 8001f22:	1e49      	subs	r1, r1, #1
 8001f24:	f000 8283 	beq.w	800242e <USBPD_PE_StateMachine_SNK+0x73e>
 8001f28:	3909      	subs	r1, #9
 8001f2a:	2902      	cmp	r1, #2
 8001f2c:	d907      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f2e:	1ec9      	subs	r1, r1, #3
 8001f30:	f000 835e 	beq.w	80025f0 <USBPD_PE_StateMachine_SNK+0x900>
 8001f34:	1e49      	subs	r1, r1, #1
 8001f36:	f000 836b 	beq.w	8002610 <USBPD_PE_StateMachine_SNK+0x920>
 8001f3a:	1e49      	subs	r1, r1, #1
 8001f3c:	2901      	cmp	r1, #1
 8001f3e:	f240 83bc 	bls.w	80026ba <USBPD_PE_StateMachine_SNK+0x9ca>
 8001f42:	390d      	subs	r1, #13
 8001f44:	d0fb      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f46:	3912      	subs	r1, #18
 8001f48:	f000 83cc 	beq.w	80026e4 <USBPD_PE_StateMachine_SNK+0x9f4>
 8001f4c:	390c      	subs	r1, #12
 8001f4e:	d04a      	beq.n	8001fe6 <USBPD_PE_StateMachine_SNK+0x2f6>
 8001f50:	1e49      	subs	r1, r1, #1
 8001f52:	2902      	cmp	r1, #2
 8001f54:	d9f3      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f56:	1f49      	subs	r1, r1, #5
 8001f58:	f000 8213 	beq.w	8002382 <USBPD_PE_StateMachine_SNK+0x692>
 8001f5c:	1e49      	subs	r1, r1, #1
 8001f5e:	d0ee      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f60:	1e49      	subs	r1, r1, #1
 8001f62:	f000 813d 	beq.w	80021e0 <USBPD_PE_StateMachine_SNK+0x4f0>
 8001f66:	1e49      	subs	r1, r1, #1
 8001f68:	f000 817d 	beq.w	8002266 <USBPD_PE_StateMachine_SNK+0x576>
 8001f6c:	1e49      	subs	r1, r1, #1
 8001f6e:	2908      	cmp	r1, #8
 8001f70:	f240 83a8 	bls.w	80026c4 <USBPD_PE_StateMachine_SNK+0x9d4>
 8001f74:	390b      	subs	r1, #11
 8001f76:	f000 83bb 	beq.w	80026f0 <USBPD_PE_StateMachine_SNK+0xa00>
 8001f7a:	a903      	add	r1, sp, #12
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	f002 f859 	bl	8004034 <PE_StateMachine_VDM>
 8001f82:	4604      	mov	r4, r0
 8001f84:	7c6a      	ldrb	r2, [r5, #17]
 8001f86:	7ca8      	ldrb	r0, [r5, #18]
 8001f88:	4290      	cmp	r0, r2
 8001f8a:	d004      	beq.n	8001f96 <USBPD_PE_StateMachine_SNK+0x2a6>
 8001f8c:	74aa      	strb	r2, [r5, #18]
 8001f8e:	f000 fc0a 	bl	80027a6 <.text_12>
 8001f92:	2004      	movs	r0, #4
 8001f94:	47b8      	blx	r7
 8001f96:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001f9a:	f8df 698c 	ldr.w	r6, [pc, #2444]	@ 8002928 <.text_23>
 8001f9e:	2814      	cmp	r0, #20
 8001fa0:	f000 83b1 	beq.w	8002706 <USBPD_PE_StateMachine_SNK+0xa16>
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	f7fe fd42 	bl	8000a2e <PE_Check_AMSConflict>
 8001faa:	2815      	cmp	r0, #21
 8001fac:	d104      	bne.n	8001fb8 <USBPD_PE_StateMachine_SNK+0x2c8>
 8001fae:	f000 fbea 	bl	8002786 <.text_9+0x2>
 8001fb2:	d001      	beq.n	8001fb8 <USBPD_PE_StateMachine_SNK+0x2c8>
 8001fb4:	f000 fc22 	bl	80027fc <.text_20>
 8001fb8:	7c6a      	ldrb	r2, [r5, #17]
 8001fba:	7ca8      	ldrb	r0, [r5, #18]
 8001fbc:	4290      	cmp	r0, r2
 8001fbe:	d004      	beq.n	8001fca <USBPD_PE_StateMachine_SNK+0x2da>
 8001fc0:	74aa      	strb	r2, [r5, #18]
 8001fc2:	f000 fbea 	bl	800279a <.text_11>
 8001fc6:	2004      	movs	r0, #4
 8001fc8:	47a0      	blx	r4
 8001fca:	2400      	movs	r4, #0
 8001fcc:	e3b7      	b.n	800273e <USBPD_PE_StateMachine_SNK+0xa4e>
 8001fce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	e6d8      	b.n	8001d88 <USBPD_PE_StateMachine_SNK+0x98>
 8001fd6:	f000 fbfc 	bl	80027d2 <.text_15>
 8001fda:	215f      	movs	r1, #95	@ 0x5f
 8001fdc:	f000 fc07 	bl	80027ee <.text_18>
 8001fe0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001fe4:	e7ce      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 8001fe6:	f000 fbf4 	bl	80027d2 <.text_15>
 8001fea:	68a8      	ldr	r0, [r5, #8]
 8001fec:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8001fee:	2900      	cmp	r1, #0
 8001ff0:	d0f6      	beq.n	8001fe0 <USBPD_PE_StateMachine_SNK+0x2f0>
 8001ff2:	7c28      	ldrb	r0, [r5, #16]
 8001ff4:	4788      	blx	r1
 8001ff6:	e7f3      	b.n	8001fe0 <USBPD_PE_StateMachine_SNK+0x2f0>
 8001ff8:	6868      	ldr	r0, [r5, #4]
 8001ffa:	6801      	ldr	r1, [r0, #0]
 8001ffc:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8002000:	2800      	cmp	r0, #0
 8002002:	d0bf      	beq.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 8002004:	f001 0203 	and.w	r2, r1, #3
 8002008:	6868      	ldr	r0, [r5, #4]
 800200a:	2a01      	cmp	r2, #1
 800200c:	bf0c      	ite	eq
 800200e:	2200      	moveq	r2, #0
 8002010:	2220      	movne	r2, #32
 8002012:	f021 0120 	bic.w	r1, r1, #32
 8002016:	4311      	orrs	r1, r2
 8002018:	6001      	str	r1, [r0, #0]
 800201a:	2001      	movs	r0, #1
 800201c:	7728      	strb	r0, [r5, #28]
 800201e:	f8a5 901e 	strh.w	r9, [r5, #30]
 8002022:	4644      	mov	r4, r8
 8002024:	2143      	movs	r1, #67	@ 0x43
 8002026:	7469      	strb	r1, [r5, #17]
 8002028:	e7ac      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800202a:	f000 fba7 	bl	800277c <.text_8>
 800202e:	d12f      	bne.n	8002090 <USBPD_PE_StateMachine_SNK+0x3a0>
 8002030:	88b1      	ldrh	r1, [r6, #4]
 8002032:	0bc8      	lsrs	r0, r1, #15
 8002034:	d128      	bne.n	8002088 <USBPD_PE_StateMachine_SNK+0x398>
 8002036:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800203a:	b328      	cbz	r0, 8002088 <USBPD_PE_StateMachine_SNK+0x398>
 800203c:	4608      	mov	r0, r1
 800203e:	f000 011f 	and.w	r1, r0, #31
 8002042:	2901      	cmp	r1, #1
 8002044:	d120      	bne.n	8002088 <USBPD_PE_StateMachine_SNK+0x398>
 8002046:	2200      	movs	r2, #0
 8002048:	70ba      	strb	r2, [r7, #2]
 800204a:	6969      	ldr	r1, [r5, #20]
 800204c:	f041 0104 	orr.w	r1, r1, #4
 8002050:	6169      	str	r1, [r5, #20]
 8002052:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8002056:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800205a:	f7fe fdec 	bl	8000c36 <PE_ExtRevisionInteroperability>
 800205e:	88b0      	ldrh	r0, [r6, #4]
 8002060:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8002064:	68b0      	ldr	r0, [r6, #8]
 8002066:	68ae      	ldr	r6, [r5, #8]
 8002068:	69b7      	ldr	r7, [r6, #24]
 800206a:	1c82      	adds	r2, r0, #2
 800206c:	7c28      	ldrb	r0, [r5, #16]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	2104      	movs	r1, #4
 8002072:	47b8      	blx	r7
 8002074:	2001      	movs	r0, #1
 8002076:	7728      	strb	r0, [r5, #28]
 8002078:	f000 fbab 	bl	80027d2 <.text_15>
 800207c:	2044      	movs	r0, #68	@ 0x44
 800207e:	7468      	strb	r0, [r5, #17]
 8002080:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002084:	2914      	cmp	r1, #20
 8002086:	d003      	beq.n	8002090 <USBPD_PE_StateMachine_SNK+0x3a0>
 8002088:	f000 fb74 	bl	8002774 <.text_7>
 800208c:	f000 fbb9 	bl	8002802 <.text_20+0x6>
 8002090:	f000 fb6c 	bl	800276c <.text_6>
 8002094:	d102      	bne.n	800209c <USBPD_PE_StateMachine_SNK+0x3ac>
 8002096:	210f      	movs	r1, #15
 8002098:	7469      	strb	r1, [r5, #17]
 800209a:	2400      	movs	r4, #0
 800209c:	e772      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800209e:	68ab      	ldr	r3, [r5, #8]
 80020a0:	7c28      	ldrb	r0, [r5, #16]
 80020a2:	6a1c      	ldr	r4, [r3, #32]
 80020a4:	466a      	mov	r2, sp
 80020a6:	f105 0118 	add.w	r1, r5, #24
 80020aa:	47a0      	blx	r4
 80020ac:	9800      	ldr	r0, [sp, #0]
 80020ae:	6969      	ldr	r1, [r5, #20]
 80020b0:	f360 01c4 	bfi	r1, r0, #3, #2
 80020b4:	2045      	movs	r0, #69	@ 0x45
 80020b6:	6169      	str	r1, [r5, #20]
 80020b8:	7468      	strb	r0, [r5, #17]
 80020ba:	e7ee      	b.n	800209a <USBPD_PE_StateMachine_SNK+0x3aa>
 80020bc:	6968      	ldr	r0, [r5, #20]
 80020be:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80020c2:	b100      	cbz	r0, 80020c6 <USBPD_PE_StateMachine_SNK+0x3d6>
 80020c4:	2002      	movs	r0, #2
 80020c6:	9002      	str	r0, [sp, #8]
 80020c8:	2101      	movs	r1, #1
 80020ca:	2046      	movs	r0, #70	@ 0x46
 80020cc:	9001      	str	r0, [sp, #4]
 80020ce:	9100      	str	r1, [sp, #0]
 80020d0:	f105 0318 	add.w	r3, r5, #24
 80020d4:	2202      	movs	r2, #2
 80020d6:	2100      	movs	r1, #0
 80020d8:	4628      	mov	r0, r5
 80020da:	f7ff f9f2 	bl	80014c2 <PE_Send_DataMessage>
 80020de:	2800      	cmp	r0, #0
 80020e0:	d106      	bne.n	80020f0 <USBPD_PE_StateMachine_SNK+0x400>
 80020e2:	6968      	ldr	r0, [r5, #20]
 80020e4:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 80020e8:	6168      	str	r0, [r5, #20]
 80020ea:	f8a5 b01e 	strh.w	fp, [r5, #30]
 80020ee:	241b      	movs	r4, #27
 80020f0:	e748      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80020f2:	f000 fb43 	bl	800277c <.text_8>
 80020f6:	bf04      	itt	eq
 80020f8:	88b0      	ldrheq	r0, [r6, #4]
 80020fa:	f410 4f70 	tsteq.w	r0, #61440	@ 0xf000
 80020fe:	d142      	bne.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 8002100:	f000 001f 	and.w	r0, r0, #31
 8002104:	2802      	cmp	r0, #2
 8002106:	bf18      	it	ne
 8002108:	2803      	cmpne	r0, #3
 800210a:	d019      	beq.n	8002140 <USBPD_PE_StateMachine_SNK+0x450>
 800210c:	2804      	cmp	r0, #4
 800210e:	bf18      	it	ne
 8002110:	280c      	cmpne	r0, #12
 8002112:	d124      	bne.n	800215e <USBPD_PE_StateMachine_SNK+0x46e>
 8002114:	6868      	ldr	r0, [r5, #4]
 8002116:	6801      	ldr	r1, [r0, #0]
 8002118:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800211c:	2803      	cmp	r0, #3
 800211e:	d005      	beq.n	800212c <USBPD_PE_StateMachine_SNK+0x43c>
 8002120:	2043      	movs	r0, #67	@ 0x43
 8002122:	7468      	strb	r0, [r5, #17]
 8002124:	f8a5 901e 	strh.w	r9, [r5, #30]
 8002128:	4644      	mov	r4, r8
 800212a:	e014      	b.n	8002156 <USBPD_PE_StateMachine_SNK+0x466>
 800212c:	7930      	ldrb	r0, [r6, #4]
 800212e:	f000 001f 	and.w	r0, r0, #31
 8002132:	280c      	cmp	r0, #12
 8002134:	bf0c      	ite	eq
 8002136:	2049      	moveq	r0, #73	@ 0x49
 8002138:	2003      	movne	r0, #3
 800213a:	7468      	strb	r0, [r5, #17]
 800213c:	2400      	movs	r4, #0
 800213e:	e00a      	b.n	8002156 <USBPD_PE_StateMachine_SNK+0x466>
 8002140:	f8a5 901e 	strh.w	r9, [r5, #30]
 8002144:	f000 fb4f 	bl	80027e6 <.text_17>
 8002148:	2047      	movs	r0, #71	@ 0x47
 800214a:	7468      	strb	r0, [r5, #17]
 800214c:	4644      	mov	r4, r8
 800214e:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002152:	2914      	cmp	r1, #20
 8002154:	d003      	beq.n	800215e <USBPD_PE_StateMachine_SNK+0x46e>
 8002156:	f000 fb0d 	bl	8002774 <.text_7>
 800215a:	f000 fb52 	bl	8002802 <.text_20+0x6>
 800215e:	7930      	ldrb	r0, [r6, #4]
 8002160:	f000 001f 	and.w	r0, r0, #31
 8002164:	2802      	cmp	r0, #2
 8002166:	d009      	beq.n	800217c <USBPD_PE_StateMachine_SNK+0x48c>
 8002168:	2803      	cmp	r0, #3
 800216a:	d009      	beq.n	8002180 <USBPD_PE_StateMachine_SNK+0x490>
 800216c:	2804      	cmp	r0, #4
 800216e:	d003      	beq.n	8002178 <USBPD_PE_StateMachine_SNK+0x488>
 8002170:	280c      	cmp	r0, #12
 8002172:	d108      	bne.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 8002174:	2103      	movs	r1, #3
 8002176:	e004      	b.n	8002182 <USBPD_PE_StateMachine_SNK+0x492>
 8002178:	2102      	movs	r1, #2
 800217a:	e002      	b.n	8002182 <USBPD_PE_StateMachine_SNK+0x492>
 800217c:	2104      	movs	r1, #4
 800217e:	e000      	b.n	8002182 <USBPD_PE_StateMachine_SNK+0x492>
 8002180:	2101      	movs	r1, #1
 8002182:	f000 fb34 	bl	80027ee <.text_18>
 8002186:	f000 faf1 	bl	800276c <.text_6>
 800218a:	d1b1      	bne.n	80020f0 <USBPD_PE_StateMachine_SNK+0x400>
 800218c:	e783      	b.n	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 800218e:	f000 faf5 	bl	800277c <.text_8>
 8002192:	bf02      	ittt	eq
 8002194:	88b0      	ldrheq	r0, [r6, #4]
 8002196:	ea0a 0000 	andeq.w	r0, sl, r0
 800219a:	2806      	cmpeq	r0, #6
 800219c:	d1f3      	bne.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 800219e:	f000 fb2d 	bl	80027fc <.text_20>
 80021a2:	2103      	movs	r1, #3
 80021a4:	f000 fb20 	bl	80027e8 <.text_17+0x2>
 80021a8:	7c28      	ldrb	r0, [r5, #16]
 80021aa:	2110      	movs	r1, #16
 80021ac:	f7fe f9d3 	bl	8000556 <USBPD_PE_Notification>
 80021b0:	f000 fb09 	bl	80027c6 <.text_14>
 80021b4:	bf1a      	itte	ne
 80021b6:	6828      	ldrne	r0, [r5, #0]
 80021b8:	6801      	ldrne	r1, [r0, #0]
 80021ba:	2101      	moveq	r1, #1
 80021bc:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80021c0:	f002 ff46 	bl	8005050 <USBPD_PRL_SOPCapability>
 80021c4:	2000      	movs	r0, #0
 80021c6:	84a8      	strh	r0, [r5, #36]	@ 0x24
 80021c8:	6968      	ldr	r0, [r5, #20]
 80021ca:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80021ce:	2803      	cmp	r0, #3
 80021d0:	bf04      	itt	eq
 80021d2:	f24a 3028 	movweq	r0, #41768	@ 0xa328
 80021d6:	84a8      	strheq	r0, [r5, #36]	@ 0x24
 80021d8:	2103      	movs	r1, #3
 80021da:	7469      	strb	r1, [r5, #17]
 80021dc:	2400      	movs	r4, #0
 80021de:	e7d2      	b.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 80021e0:	a903      	add	r1, sp, #12
 80021e2:	4628      	mov	r0, r5
 80021e4:	f001 fadc 	bl	80037a0 <PE_StateMachine_VDMCable>
 80021e8:	e6cb      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80021ea:	f000 faec 	bl	80027c6 <.text_14>
 80021ee:	bf1e      	ittt	ne
 80021f0:	68a8      	ldrne	r0, [r5, #8]
 80021f2:	6b02      	ldrne	r2, [r0, #48]	@ 0x30
 80021f4:	2a00      	cmpne	r2, #0
 80021f6:	d002      	beq.n	80021fe <USBPD_PE_StateMachine_SNK+0x50e>
 80021f8:	7c28      	ldrb	r0, [r5, #16]
 80021fa:	2100      	movs	r1, #0
 80021fc:	4790      	blx	r2
 80021fe:	f000 fae8 	bl	80027d2 <.text_15>
 8002202:	4628      	mov	r0, r5
 8002204:	2101      	movs	r1, #1
 8002206:	f7ff f88d 	bl	8001324 <PE_SetPowerNegotiation>
 800220a:	78b8      	ldrb	r0, [r7, #2]
 800220c:	2803      	cmp	r0, #3
 800220e:	d30a      	bcc.n	8002226 <USBPD_PE_StateMachine_SNK+0x536>
 8002210:	6968      	ldr	r0, [r5, #20]
 8002212:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002216:	2800      	cmp	r0, #0
 8002218:	bf1e      	ittt	ne
 800221a:	68a9      	ldrne	r1, [r5, #8]
 800221c:	6b48      	ldrne	r0, [r1, #52]	@ 0x34
 800221e:	2800      	cmpne	r0, #0
 8002220:	d166      	bne.n	80022f0 <USBPD_PE_StateMachine_SNK+0x600>
 8002222:	2100      	movs	r1, #0
 8002224:	e6ff      	b.n	8002026 <USBPD_PE_StateMachine_SNK+0x336>
 8002226:	1c40      	adds	r0, r0, #1
 8002228:	70b8      	strb	r0, [r7, #2]
 800222a:	2105      	movs	r1, #5
 800222c:	4628      	mov	r0, r5
 800222e:	f7fe fb61 	bl	80008f4 <PE_Send_RESET>
 8002232:	f248 30e8 	movw	r0, #33768	@ 0x83e8
 8002236:	83e8      	strh	r0, [r5, #30]
 8002238:	2201      	movs	r2, #1
 800223a:	f000 fad0 	bl	80027de <.text_16>
 800223e:	209b      	movs	r0, #155	@ 0x9b
 8002240:	e73a      	b.n	80020b8 <USBPD_PE_StateMachine_SNK+0x3c8>
 8002242:	f000 fac0 	bl	80027c6 <.text_14>
 8002246:	bf1e      	ittt	ne
 8002248:	68a8      	ldrne	r0, [r5, #8]
 800224a:	6b02      	ldrne	r2, [r0, #48]	@ 0x30
 800224c:	2a00      	cmpne	r2, #0
 800224e:	d002      	beq.n	8002256 <USBPD_PE_StateMachine_SNK+0x566>
 8002250:	7c28      	ldrb	r0, [r5, #16]
 8002252:	2100      	movs	r1, #0
 8002254:	4790      	blx	r2
 8002256:	2200      	movs	r2, #0
 8002258:	f000 fac1 	bl	80027de <.text_16>
 800225c:	f248 30e8 	movw	r0, #33768	@ 0x83e8
 8002260:	83e8      	strh	r0, [r5, #30]
 8002262:	219b      	movs	r1, #155	@ 0x9b
 8002264:	e718      	b.n	8002098 <USBPD_PE_StateMachine_SNK+0x3a8>
 8002266:	68aa      	ldr	r2, [r5, #8]
 8002268:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800226c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800226e:	4798      	blx	r3
 8002270:	2801      	cmp	r0, #1
 8002272:	d10d      	bne.n	8002290 <USBPD_PE_StateMachine_SNK+0x5a0>
 8002274:	f648 00e3 	movw	r0, #35043	@ 0x88e3
 8002278:	83e8      	strh	r0, [r5, #30]
 800227a:	2169      	movs	r1, #105	@ 0x69
 800227c:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002280:	f7fe f969 	bl	8000556 <USBPD_PE_Notification>
 8002284:	2040      	movs	r0, #64	@ 0x40
 8002286:	7468      	strb	r0, [r5, #17]
 8002288:	2113      	movs	r1, #19
 800228a:	f000 fab0 	bl	80027ee <.text_18>
 800228e:	2400      	movs	r4, #0
 8002290:	f000 fa6c 	bl	800276c <.text_6>
 8002294:	d150      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 8002296:	e01b      	b.n	80022d0 <USBPD_PE_StateMachine_SNK+0x5e0>
 8002298:	68aa      	ldr	r2, [r5, #8]
 800229a:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800229e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80022a0:	2101      	movs	r1, #1
 80022a2:	4798      	blx	r3
 80022a4:	2801      	cmp	r0, #1
 80022a6:	d110      	bne.n	80022ca <USBPD_PE_StateMachine_SNK+0x5da>
 80022a8:	4628      	mov	r0, r5
 80022aa:	f7fe fc22 	bl	8000af2 <PE_Reset_HardReset>
 80022ae:	2205      	movs	r2, #5
 80022b0:	2100      	movs	r1, #0
 80022b2:	f000 fa95 	bl	80027e0 <.text_16+0x2>
 80022b6:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80022ba:	2168      	movs	r1, #104	@ 0x68
 80022bc:	f7fe f94b 	bl	8000556 <USBPD_PE_Notification>
 80022c0:	f8a5 901e 	strh.w	r9, [r5, #30]
 80022c4:	2043      	movs	r0, #67	@ 0x43
 80022c6:	4644      	mov	r4, r8
 80022c8:	7468      	strb	r0, [r5, #17]
 80022ca:	f000 fa4f 	bl	800276c <.text_6>
 80022ce:	d133      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 80022d0:	2206      	movs	r2, #6
 80022d2:	2100      	movs	r1, #0
 80022d4:	f000 fa84 	bl	80027e0 <.text_16+0x2>
 80022d8:	78b8      	ldrb	r0, [r7, #2]
 80022da:	2803      	cmp	r0, #3
 80022dc:	f4ff aedb 	bcc.w	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 80022e0:	6968      	ldr	r0, [r5, #20]
 80022e2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80022e6:	2800      	cmp	r0, #0
 80022e8:	bf1e      	ittt	ne
 80022ea:	68a9      	ldrne	r1, [r5, #8]
 80022ec:	6b48      	ldrne	r0, [r1, #52]	@ 0x34
 80022ee:	2800      	cmpne	r0, #0
 80022f0:	f040 80c4 	bne.w	800247c <USBPD_PE_StateMachine_SNK+0x78c>
 80022f4:	2100      	movs	r1, #0
 80022f6:	7469      	strb	r1, [r5, #17]
 80022f8:	e6cf      	b.n	800209a <USBPD_PE_StateMachine_SNK+0x3aa>
 80022fa:	2000      	movs	r0, #0
 80022fc:	9000      	str	r0, [sp, #0]
 80022fe:	2303      	movs	r3, #3
 8002300:	2203      	movs	r2, #3
 8002302:	f000 fa78 	bl	80027f6 <.text_19+0x2>
 8002306:	2800      	cmp	r0, #0
 8002308:	d116      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 800230a:	e686      	b.n	800201a <USBPD_PE_StateMachine_SNK+0x32a>
 800230c:	6868      	ldr	r0, [r5, #4]
 800230e:	6801      	ldr	r1, [r0, #0]
 8002310:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002314:	2804      	cmp	r0, #4
 8002316:	f43f aebe 	beq.w	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 800231a:	2000      	movs	r0, #0
 800231c:	9000      	str	r0, [sp, #0]
 800231e:	2350      	movs	r3, #80	@ 0x50
 8002320:	7871      	ldrb	r1, [r6, #1]
 8002322:	220d      	movs	r2, #13
 8002324:	f000 fa67 	bl	80027f6 <.text_19+0x2>
 8002328:	2800      	cmp	r0, #0
 800232a:	d105      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 800232c:	2003      	movs	r0, #3
 800232e:	f000 fa18 	bl	8002762 <.text_5>
 8002332:	2130      	movs	r1, #48	@ 0x30
 8002334:	f000 fa5b 	bl	80027ee <.text_18>
 8002338:	e624      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800233a:	f000 fa24 	bl	8002786 <.text_9+0x2>
 800233e:	d013      	beq.n	8002368 <USBPD_PE_StateMachine_SNK+0x678>
 8002340:	7831      	ldrb	r1, [r6, #0]
 8002342:	7870      	ldrb	r0, [r6, #1]
 8002344:	4281      	cmp	r1, r0
 8002346:	bf02      	ittt	eq
 8002348:	88b1      	ldrheq	r1, [r6, #4]
 800234a:	ea0a 0001 	andeq.w	r0, sl, r1
 800234e:	2803      	cmpeq	r0, #3
 8002350:	d10a      	bne.n	8002368 <USBPD_PE_StateMachine_SNK+0x678>
 8002352:	2001      	movs	r0, #1
 8002354:	7728      	strb	r0, [r5, #28]
 8002356:	f8a5 901e 	strh.w	r9, [r5, #30]
 800235a:	2143      	movs	r1, #67	@ 0x43
 800235c:	7469      	strb	r1, [r5, #17]
 800235e:	f000 fa09 	bl	8002774 <.text_7>
 8002362:	4644      	mov	r4, r8
 8002364:	f000 fa4d 	bl	8002802 <.text_20+0x6>
 8002368:	e70d      	b.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 800236a:	9400      	str	r4, [sp, #0]
 800236c:	2343      	movs	r3, #67	@ 0x43
 800236e:	2207      	movs	r2, #7
 8002370:	f000 fa40 	bl	80027f4 <.text_19>
 8002374:	2800      	cmp	r0, #0
 8002376:	d117      	bne.n	80023a8 <USBPD_PE_StateMachine_SNK+0x6b8>
 8002378:	2006      	movs	r0, #6
 800237a:	f000 f9f2 	bl	8002762 <.text_5>
 800237e:	210b      	movs	r1, #11
 8002380:	e7d8      	b.n	8002334 <USBPD_PE_StateMachine_SNK+0x644>
 8002382:	f000 f9fb 	bl	800277c <.text_8>
 8002386:	bf02      	ittt	eq
 8002388:	88b0      	ldrheq	r0, [r6, #4]
 800238a:	ea0a 0000 	andeq.w	r0, sl, r0
 800238e:	2806      	cmpeq	r0, #6
 8002390:	d10a      	bne.n	80023a8 <USBPD_PE_StateMachine_SNK+0x6b8>
 8002392:	7c28      	ldrb	r0, [r5, #16]
 8002394:	212c      	movs	r1, #44	@ 0x2c
 8002396:	f7fe f8de 	bl	8000556 <USBPD_PE_Notification>
 800239a:	2003      	movs	r0, #3
 800239c:	7468      	strb	r0, [r5, #17]
 800239e:	f000 f9f1 	bl	8002784 <.text_9>
 80023a2:	d001      	beq.n	80023a8 <USBPD_PE_StateMachine_SNK+0x6b8>
 80023a4:	f000 fa2a 	bl	80027fc <.text_20>
 80023a8:	e5ec      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80023aa:	2000      	movs	r0, #0
 80023ac:	9000      	str	r0, [sp, #0]
 80023ae:	2303      	movs	r3, #3
 80023b0:	2204      	movs	r2, #4
 80023b2:	f000 fa20 	bl	80027f6 <.text_19+0x2>
 80023b6:	e5e5      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80023b8:	2804      	cmp	r0, #4
 80023ba:	d006      	beq.n	80023ca <USBPD_PE_StateMachine_SNK+0x6da>
 80023bc:	2000      	movs	r0, #0
 80023be:	7728      	strb	r0, [r5, #28]
 80023c0:	2104      	movs	r1, #4
 80023c2:	7469      	strb	r1, [r5, #17]
 80023c4:	2120      	movs	r1, #32
 80023c6:	f000 fa12 	bl	80027ee <.text_18>
 80023ca:	a903      	add	r1, sp, #12
 80023cc:	4628      	mov	r0, r5
 80023ce:	f000 fa1b 	bl	8002808 <PE_StateMachine_SNK_ReadyWait>
 80023d2:	e5d6      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80023d4:	68a8      	ldr	r0, [r5, #8]
 80023d6:	6881      	ldr	r1, [r0, #8]
 80023d8:	b339      	cbz	r1, 800242a <USBPD_PE_StateMachine_SNK+0x73a>
 80023da:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80023de:	4788      	blx	r1
 80023e0:	280a      	cmp	r0, #10
 80023e2:	d002      	beq.n	80023ea <USBPD_PE_StateMachine_SNK+0x6fa>
 80023e4:	280d      	cmp	r0, #13
 80023e6:	d01a      	beq.n	800241e <USBPD_PE_StateMachine_SNK+0x72e>
 80023e8:	e01f      	b.n	800242a <USBPD_PE_StateMachine_SNK+0x73a>
 80023ea:	f000 f9b6 	bl	800275a <.text_4>
 80023ee:	2201      	movs	r2, #1
 80023f0:	2100      	movs	r1, #0
 80023f2:	47b0      	blx	r6
 80023f4:	2000      	movs	r0, #0
 80023f6:	9000      	str	r0, [sp, #0]
 80023f8:	2359      	movs	r3, #89	@ 0x59
 80023fa:	2203      	movs	r2, #3
 80023fc:	f000 f9fa 	bl	80027f4 <.text_19>
 8002400:	2800      	cmp	r0, #0
 8002402:	d10b      	bne.n	800241c <USBPD_PE_StateMachine_SNK+0x72c>
 8002404:	2008      	movs	r0, #8
 8002406:	7728      	strb	r0, [r5, #28]
 8002408:	2206      	movs	r2, #6
 800240a:	f000 f9c0 	bl	800278e <.text_10>
 800240e:	2100      	movs	r1, #0
 8002410:	68ab      	ldr	r3, [r5, #8]
 8002412:	7c28      	ldrb	r0, [r5, #16]
 8002414:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002416:	47a0      	blx	r4
 8002418:	f000 f999 	bl	800274e <.text_3>
 800241c:	e5b2      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800241e:	2000      	movs	r0, #0
 8002420:	9000      	str	r0, [sp, #0]
 8002422:	2303      	movs	r3, #3
 8002424:	220c      	movs	r2, #12
 8002426:	2100      	movs	r1, #0
 8002428:	e7c3      	b.n	80023b2 <USBPD_PE_StateMachine_SNK+0x6c2>
 800242a:	202a      	movs	r0, #42	@ 0x2a
 800242c:	e644      	b.n	80020b8 <USBPD_PE_StateMachine_SNK+0x3c8>
 800242e:	f000 f9a5 	bl	800277c <.text_8>
 8002432:	bf02      	ittt	eq
 8002434:	88b0      	ldrheq	r0, [r6, #4]
 8002436:	ea0a 0000 	andeq.w	r0, sl, r0
 800243a:	2806      	cmpeq	r0, #6
 800243c:	d110      	bne.n	8002460 <USBPD_PE_StateMachine_SNK+0x770>
 800243e:	7f28      	ldrb	r0, [r5, #28]
 8002440:	2809      	cmp	r0, #9
 8002442:	d003      	beq.n	800244c <USBPD_PE_StateMachine_SNK+0x75c>
 8002444:	f000 f989 	bl	800275a <.text_4>
 8002448:	2209      	movs	r2, #9
 800244a:	47b0      	blx	r6
 800244c:	2053      	movs	r0, #83	@ 0x53
 800244e:	7468      	strb	r0, [r5, #17]
 8002450:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002454:	2914      	cmp	r1, #20
 8002456:	d003      	beq.n	8002460 <USBPD_PE_StateMachine_SNK+0x770>
 8002458:	f000 f98c 	bl	8002774 <.text_7>
 800245c:	f000 f9d1 	bl	8002802 <.text_20+0x6>
 8002460:	f000 f984 	bl	800276c <.text_6>
 8002464:	d1da      	bne.n	800241c <USBPD_PE_StateMachine_SNK+0x72c>
 8002466:	68ab      	ldr	r3, [r5, #8]
 8002468:	7c28      	ldrb	r0, [r5, #16]
 800246a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800246c:	220f      	movs	r2, #15
 800246e:	2100      	movs	r1, #0
 8002470:	47a0      	blx	r4
 8002472:	68a9      	ldr	r1, [r5, #8]
 8002474:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8002476:	2800      	cmp	r0, #0
 8002478:	f43f ae0d 	beq.w	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 800247c:	2192      	movs	r1, #146	@ 0x92
 800247e:	e60b      	b.n	8002098 <USBPD_PE_StateMachine_SNK+0x3a8>
 8002480:	f000 f9b1 	bl	80027e6 <.text_17>
 8002484:	f000 f969 	bl	800275a <.text_4>
 8002488:	220a      	movs	r2, #10
 800248a:	2100      	movs	r1, #0
 800248c:	47b0      	blx	r6
 800248e:	6868      	ldr	r0, [r5, #4]
 8002490:	7801      	ldrb	r1, [r0, #0]
 8002492:	f001 0103 	and.w	r1, r1, #3
 8002496:	2902      	cmp	r1, #2
 8002498:	bf04      	itt	eq
 800249a:	7c28      	ldrbeq	r0, [r5, #16]
 800249c:	f002 fdc5 	bleq	800502a <USBPD_PRL_SRCSetSinkNG>
 80024a0:	2101      	movs	r1, #1
 80024a2:	4628      	mov	r0, r5
 80024a4:	f7fe fa46 	bl	8000934 <PE_ChangePowerRole>
 80024a8:	7f28      	ldrb	r0, [r5, #28]
 80024aa:	2809      	cmp	r0, #9
 80024ac:	d004      	beq.n	80024b8 <USBPD_PE_StateMachine_SNK+0x7c8>
 80024ae:	f000 f954 	bl	800275a <.text_4>
 80024b2:	220b      	movs	r2, #11
 80024b4:	2101      	movs	r1, #1
 80024b6:	47b0      	blx	r6
 80024b8:	2000      	movs	r0, #0
 80024ba:	9000      	str	r0, [sp, #0]
 80024bc:	235b      	movs	r3, #91	@ 0x5b
 80024be:	2206      	movs	r2, #6
 80024c0:	f000 f998 	bl	80027f4 <.text_19>
 80024c4:	b948      	cbnz	r0, 80024da <USBPD_PE_StateMachine_SNK+0x7ea>
 80024c6:	68ab      	ldr	r3, [r5, #8]
 80024c8:	7c28      	ldrb	r0, [r5, #16]
 80024ca:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80024cc:	220c      	movs	r2, #12
 80024ce:	2100      	movs	r1, #0
 80024d0:	47a0      	blx	r4
 80024d2:	f248 0014 	movw	r0, #32788	@ 0x8014
 80024d6:	83e8      	strh	r0, [r5, #30]
 80024d8:	2414      	movs	r4, #20
 80024da:	7c68      	ldrb	r0, [r5, #17]
 80024dc:	285b      	cmp	r0, #91	@ 0x5b
 80024de:	d00d      	beq.n	80024fc <USBPD_PE_StateMachine_SNK+0x80c>
 80024e0:	2100      	movs	r1, #0
 80024e2:	4628      	mov	r0, r5
 80024e4:	f7fe fa26 	bl	8000934 <PE_ChangePowerRole>
 80024e8:	f000 f937 	bl	800275a <.text_4>
 80024ec:	2206      	movs	r2, #6
 80024ee:	2101      	movs	r1, #1
 80024f0:	47b0      	blx	r6
 80024f2:	2207      	movs	r2, #7
 80024f4:	f000 f931 	bl	800275a <.text_4>
 80024f8:	2100      	movs	r1, #0
 80024fa:	47b0      	blx	r6
 80024fc:	e542      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80024fe:	9400      	str	r4, [sp, #0]
 8002500:	2358      	movs	r3, #88	@ 0x58
 8002502:	220a      	movs	r2, #10
 8002504:	f000 f977 	bl	80027f6 <.text_19+0x2>
 8002508:	b920      	cbnz	r0, 8002514 <USBPD_PE_StateMachine_SNK+0x824>
 800250a:	2008      	movs	r0, #8
 800250c:	f000 f929 	bl	8002762 <.text_5>
 8002510:	2202      	movs	r2, #2
 8002512:	e7ef      	b.n	80024f4 <USBPD_PE_StateMachine_SNK+0x804>
 8002514:	220f      	movs	r2, #15
 8002516:	e7ed      	b.n	80024f4 <USBPD_PE_StateMachine_SNK+0x804>
 8002518:	f000 f930 	bl	800277c <.text_8>
 800251c:	bf04      	itt	eq
 800251e:	88b0      	ldrheq	r0, [r6, #4]
 8002520:	f410 4f70 	tsteq.w	r0, #61440	@ 0xf000
 8002524:	d109      	bne.n	800253a <USBPD_PE_StateMachine_SNK+0x84a>
 8002526:	f000 001f 	and.w	r0, r0, #31
 800252a:	2803      	cmp	r0, #3
 800252c:	d006      	beq.n	800253c <USBPD_PE_StateMachine_SNK+0x84c>
 800252e:	2804      	cmp	r0, #4
 8002530:	d020      	beq.n	8002574 <USBPD_PE_StateMachine_SNK+0x884>
 8002532:	280c      	cmp	r0, #12
 8002534:	d01c      	beq.n	8002570 <USBPD_PE_StateMachine_SNK+0x880>
 8002536:	2810      	cmp	r0, #16
 8002538:	d023      	beq.n	8002582 <USBPD_PE_StateMachine_SNK+0x892>
 800253a:	e087      	b.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 800253c:	f000 f927 	bl	800278e <.text_10>
 8002540:	f000 f905 	bl	800274e <.text_3>
 8002544:	7f28      	ldrb	r0, [r5, #28]
 8002546:	2809      	cmp	r0, #9
 8002548:	d004      	beq.n	8002554 <USBPD_PE_StateMachine_SNK+0x864>
 800254a:	f000 f906 	bl	800275a <.text_4>
 800254e:	2206      	movs	r2, #6
 8002550:	2100      	movs	r1, #0
 8002552:	47b0      	blx	r6
 8002554:	f000 f947 	bl	80027e6 <.text_17>
 8002558:	7c28      	ldrb	r0, [r5, #16]
 800255a:	213a      	movs	r1, #58	@ 0x3a
 800255c:	f7fd fffb 	bl	8000556 <USBPD_PE_Notification>
 8002560:	f000 f911 	bl	8002786 <.text_9+0x2>
 8002564:	d001      	beq.n	800256a <USBPD_PE_StateMachine_SNK+0x87a>
 8002566:	f000 f949 	bl	80027fc <.text_20>
 800256a:	2059      	movs	r0, #89	@ 0x59
 800256c:	7468      	strb	r0, [r5, #17]
 800256e:	e06d      	b.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 8002570:	213b      	movs	r1, #59	@ 0x3b
 8002572:	e000      	b.n	8002576 <USBPD_PE_StateMachine_SNK+0x886>
 8002574:	2116      	movs	r1, #22
 8002576:	f000 f93a 	bl	80027ee <.text_18>
 800257a:	f000 f904 	bl	8002786 <.text_9+0x2>
 800257e:	d107      	bne.n	8002590 <USBPD_PE_StateMachine_SNK+0x8a0>
 8002580:	e061      	b.n	8002646 <USBPD_PE_StateMachine_SNK+0x956>
 8002582:	7c28      	ldrb	r0, [r5, #16]
 8002584:	2117      	movs	r1, #23
 8002586:	f7fd ffe6 	bl	8000556 <USBPD_PE_Notification>
 800258a:	f000 f8fc 	bl	8002786 <.text_9+0x2>
 800258e:	d05a      	beq.n	8002646 <USBPD_PE_StateMachine_SNK+0x956>
 8002590:	f000 f934 	bl	80027fc <.text_20>
 8002594:	e057      	b.n	8002646 <USBPD_PE_StateMachine_SNK+0x956>
 8002596:	9104      	str	r1, [sp, #16]
 8002598:	ab04      	add	r3, sp, #16
 800259a:	68ae      	ldr	r6, [r5, #8]
 800259c:	7c28      	ldrb	r0, [r5, #16]
 800259e:	6977      	ldr	r7, [r6, #20]
 80025a0:	aa05      	add	r2, sp, #20
 80025a2:	47b8      	blx	r7
 80025a4:	9804      	ldr	r0, [sp, #16]
 80025a6:	2104      	movs	r1, #4
 80025a8:	f7fe fefe 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80025ac:	b110      	cbz	r0, 80025b4 <USBPD_PE_StateMachine_SNK+0x8c4>
 80025ae:	2003      	movs	r0, #3
 80025b0:	7468      	strb	r0, [r5, #17]
 80025b2:	e4e7      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80025b4:	9a04      	ldr	r2, [sp, #16]
 80025b6:	2003      	movs	r0, #3
 80025b8:	0892      	lsrs	r2, r2, #2
 80025ba:	2100      	movs	r1, #0
 80025bc:	9001      	str	r0, [sp, #4]
 80025be:	9200      	str	r2, [sp, #0]
 80025c0:	9102      	str	r1, [sp, #8]
 80025c2:	ab05      	add	r3, sp, #20
 80025c4:	2201      	movs	r2, #1
 80025c6:	4628      	mov	r0, r5
 80025c8:	f7fe ff7b 	bl	80014c2 <PE_Send_DataMessage>
 80025cc:	e4da      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80025ce:	2000      	movs	r0, #0
 80025d0:	2103      	movs	r1, #3
 80025d2:	2201      	movs	r2, #1
 80025d4:	9002      	str	r0, [sp, #8]
 80025d6:	9101      	str	r1, [sp, #4]
 80025d8:	9200      	str	r2, [sp, #0]
 80025da:	f105 032c 	add.w	r3, r5, #44	@ 0x2c
 80025de:	2206      	movs	r2, #6
 80025e0:	2100      	movs	r1, #0
 80025e2:	4628      	mov	r0, r5
 80025e4:	f7fe ff6d 	bl	80014c2 <PE_Send_DataMessage>
 80025e8:	2800      	cmp	r0, #0
 80025ea:	d1ef      	bne.n	80025cc <USBPD_PE_StateMachine_SNK+0x8dc>
 80025ec:	215d      	movs	r1, #93	@ 0x5d
 80025ee:	e6a1      	b.n	8002334 <USBPD_PE_StateMachine_SNK+0x644>
 80025f0:	9400      	str	r4, [sp, #0]
 80025f2:	2366      	movs	r3, #102	@ 0x66
 80025f4:	2214      	movs	r2, #20
 80025f6:	f000 f8fe 	bl	80027f6 <.text_19+0x2>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d107      	bne.n	800260e <USBPD_PE_StateMachine_SNK+0x91e>
 80025fe:	f8a5 b01e 	strh.w	fp, [r5, #30]
 8002602:	214a      	movs	r1, #74	@ 0x4a
 8002604:	f000 f8f3 	bl	80027ee <.text_18>
 8002608:	200b      	movs	r0, #11
 800260a:	241b      	movs	r4, #27
 800260c:	7728      	strb	r0, [r5, #28]
 800260e:	e4b9      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 8002610:	f000 f8b4 	bl	800277c <.text_8>
 8002614:	d11a      	bne.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 8002616:	88b1      	ldrh	r1, [r6, #4]
 8002618:	0bc8      	lsrs	r0, r1, #15
 800261a:	d017      	beq.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 800261c:	f001 011f 	and.w	r1, r1, #31
 8002620:	290c      	cmp	r1, #12
 8002622:	d113      	bne.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 8002624:	68b0      	ldr	r0, [r6, #8]
 8002626:	68ac      	ldr	r4, [r5, #8]
 8002628:	69a6      	ldr	r6, [r4, #24]
 800262a:	1d02      	adds	r2, r0, #4
 800262c:	7c28      	ldrb	r0, [r5, #16]
 800262e:	2304      	movs	r3, #4
 8002630:	210a      	movs	r1, #10
 8002632:	47b0      	blx	r6
 8002634:	f000 f8a7 	bl	8002786 <.text_9+0x2>
 8002638:	d001      	beq.n	800263e <USBPD_PE_StateMachine_SNK+0x94e>
 800263a:	f000 f8df 	bl	80027fc <.text_20>
 800263e:	7c28      	ldrb	r0, [r5, #16]
 8002640:	214b      	movs	r1, #75	@ 0x4b
 8002642:	f7fd ff88 	bl	8000556 <USBPD_PE_Notification>
 8002646:	2003      	movs	r0, #3
 8002648:	7468      	strb	r0, [r5, #17]
 800264a:	2400      	movs	r4, #0
 800264c:	f000 f88e 	bl	800276c <.text_6>
 8002650:	d1dd      	bne.n	800260e <USBPD_PE_StateMachine_SNK+0x91e>
 8002652:	e02c      	b.n	80026ae <USBPD_PE_StateMachine_SNK+0x9be>
 8002654:	9400      	str	r4, [sp, #0]
 8002656:	2339      	movs	r3, #57	@ 0x39
 8002658:	783a      	ldrb	r2, [r7, #0]
 800265a:	f000 f8cb 	bl	80027f4 <.text_19>
 800265e:	2800      	cmp	r0, #0
 8002660:	d1d5      	bne.n	800260e <USBPD_PE_StateMachine_SNK+0x91e>
 8002662:	7878      	ldrb	r0, [r7, #1]
 8002664:	7728      	strb	r0, [r5, #28]
 8002666:	2144      	movs	r1, #68	@ 0x44
 8002668:	f000 f8c1 	bl	80027ee <.text_18>
 800266c:	e53d      	b.n	80020ea <USBPD_PE_StateMachine_SNK+0x3fa>
 800266e:	f000 f88a 	bl	8002786 <.text_9+0x2>
 8002672:	d019      	beq.n	80026a8 <USBPD_PE_StateMachine_SNK+0x9b8>
 8002674:	88b0      	ldrh	r0, [r6, #4]
 8002676:	0bc0      	lsrs	r0, r0, #15
 8002678:	d009      	beq.n	800268e <USBPD_PE_StateMachine_SNK+0x99e>
 800267a:	4628      	mov	r0, r5
 800267c:	f7fe ff5e 	bl	800153c <PE_Check_ExtendedMessage>
 8002680:	f000 f881 	bl	8002786 <.text_9+0x2>
 8002684:	d001      	beq.n	800268a <USBPD_PE_StateMachine_SNK+0x99a>
 8002686:	f000 f8b9 	bl	80027fc <.text_20>
 800268a:	2000      	movs	r0, #0
 800268c:	83e8      	strh	r0, [r5, #30]
 800268e:	88b0      	ldrh	r0, [r6, #4]
 8002690:	ea0a 0000 	and.w	r0, sl, r0
 8002694:	2810      	cmp	r0, #16
 8002696:	d107      	bne.n	80026a8 <USBPD_PE_StateMachine_SNK+0x9b8>
 8002698:	2103      	movs	r1, #3
 800269a:	7469      	strb	r1, [r5, #17]
 800269c:	f000 f872 	bl	8002784 <.text_9>
 80026a0:	d001      	beq.n	80026a6 <USBPD_PE_StateMachine_SNK+0x9b6>
 80026a2:	f000 f8ab 	bl	80027fc <.text_20>
 80026a6:	83ec      	strh	r4, [r5, #30]
 80026a8:	f000 f860 	bl	800276c <.text_6>
 80026ac:	d119      	bne.n	80026e2 <USBPD_PE_StateMachine_SNK+0x9f2>
 80026ae:	2103      	movs	r1, #3
 80026b0:	e4f2      	b.n	8002098 <USBPD_PE_StateMachine_SNK+0x3a8>
 80026b2:	4628      	mov	r0, r5
 80026b4:	f7ff f84b 	bl	800174e <PE_SubStateMachine_ExtendedMessages>
 80026b8:	e463      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80026ba:	a903      	add	r1, sp, #12
 80026bc:	4628      	mov	r0, r5
 80026be:	f7fe fb7b 	bl	8000db8 <PE_SubStateMachine_Generic>
 80026c2:	e45e      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80026c4:	a903      	add	r1, sp, #12
 80026c6:	4628      	mov	r0, r5
 80026c8:	f001 f98b 	bl	80039e2 <PE_SubStateMachine_VconnSwap>
 80026cc:	4604      	mov	r4, r0
 80026ce:	f000 f87a 	bl	80027c6 <.text_14>
 80026d2:	bf0e      	itee	eq
 80026d4:	2101      	moveq	r1, #1
 80026d6:	6828      	ldrne	r0, [r5, #0]
 80026d8:	6801      	ldrne	r1, [r0, #0]
 80026da:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80026de:	f002 fcb7 	bl	8005050 <USBPD_PRL_SOPCapability>
 80026e2:	e44f      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80026e4:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80026e8:	4628      	mov	r0, r5
 80026ea:	f002 fa6e 	bl	8004bca <PE_StateMachine_UVDM>
 80026ee:	e449      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80026f0:	2000      	movs	r0, #0
 80026f2:	9000      	str	r0, [sp, #0]
 80026f4:	2358      	movs	r3, #88	@ 0x58
 80026f6:	2213      	movs	r2, #19
 80026f8:	f000 f87d 	bl	80027f6 <.text_19+0x2>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d1f6      	bne.n	80026ee <USBPD_PE_StateMachine_SNK+0x9fe>
 8002700:	2009      	movs	r0, #9
 8002702:	7728      	strb	r0, [r5, #28]
 8002704:	e4f1      	b.n	80020ea <USBPD_PE_StateMachine_SNK+0x3fa>
 8002706:	6968      	ldr	r0, [r5, #20]
 8002708:	f3c0 3040 	ubfx	r0, r0, #13, #1
 800270c:	b1b8      	cbz	r0, 800273e <USBPD_PE_StateMachine_SNK+0xa4e>
 800270e:	6968      	ldr	r0, [r5, #20]
 8002710:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8002714:	b138      	cbz	r0, 8002726 <USBPD_PE_StateMachine_SNK+0xa36>
 8002716:	7c28      	ldrb	r0, [r5, #16]
 8002718:	215b      	movs	r1, #91	@ 0x5b
 800271a:	f7fd ff1c 	bl	8000556 <USBPD_PE_Notification>
 800271e:	6968      	ldr	r0, [r5, #20]
 8002720:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
 8002724:	6168      	str	r0, [r5, #20]
 8002726:	2003      	movs	r0, #3
 8002728:	7ca9      	ldrb	r1, [r5, #18]
 800272a:	7468      	strb	r0, [r5, #17]
 800272c:	2903      	cmp	r1, #3
 800272e:	d005      	beq.n	800273c <USBPD_PE_StateMachine_SNK+0xa4c>
 8002730:	74a8      	strb	r0, [r5, #18]
 8002732:	f000 f832 	bl	800279a <.text_11>
 8002736:	2203      	movs	r2, #3
 8002738:	2004      	movs	r0, #4
 800273a:	47a0      	blx	r4
 800273c:	2401      	movs	r4, #1
 800273e:	6968      	ldr	r0, [r5, #20]
 8002740:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
 8002744:	2c00      	cmp	r4, #0
 8002746:	6168      	str	r0, [r5, #20]
 8002748:	f43f ab29 	beq.w	8001d9e <USBPD_PE_StateMachine_SNK+0xae>
 800274c:	e441      	b.n	8001fd2 <USBPD_PE_StateMachine_SNK+0x2e2>

0800274e <.text_3>:
 800274e:	f248 3084 	movw	r0, #33668	@ 0x8384
 8002752:	83e8      	strh	r0, [r5, #30]
 8002754:	f44f 7461 	mov.w	r4, #900	@ 0x384
 8002758:	4770      	bx	lr

0800275a <.text_4>:
 800275a:	68ab      	ldr	r3, [r5, #8]
 800275c:	7c28      	ldrb	r0, [r5, #16]
 800275e:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8002760:	4770      	bx	lr

08002762 <.text_5>:
 8002762:	7728      	strb	r0, [r5, #28]
 8002764:	f8a5 b01e 	strh.w	fp, [r5, #30]
 8002768:	241b      	movs	r4, #27
 800276a:	4770      	bx	lr

0800276c <.text_6>:
 800276c:	8be8      	ldrh	r0, [r5, #30]
 800276e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002772:	4770      	bx	lr

08002774 <.text_7>:
 8002774:	2014      	movs	r0, #20
 8002776:	f88d 000c 	strb.w	r0, [sp, #12]
 800277a:	4770      	bx	lr

0800277c <.text_8>:
 800277c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002780:	2811      	cmp	r0, #17
 8002782:	4770      	bx	lr

08002784 <.text_9>:
 8002784:	2400      	movs	r4, #0
 8002786:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800278a:	2814      	cmp	r0, #20
 800278c:	4770      	bx	lr

0800278e <.text_10>:
 800278e:	6868      	ldr	r0, [r5, #4]
 8002790:	6801      	ldr	r1, [r0, #0]
 8002792:	f041 0110 	orr.w	r1, r1, #16
 8002796:	6001      	str	r1, [r0, #0]
 8002798:	4770      	bx	lr

0800279a <.text_11>:
 800279a:	2100      	movs	r1, #0
 800279c:	9100      	str	r1, [sp, #0]
 800279e:	2300      	movs	r3, #0
 80027a0:	7c29      	ldrb	r1, [r5, #16]
 80027a2:	6834      	ldr	r4, [r6, #0]
 80027a4:	4770      	bx	lr

080027a6 <.text_12>:
 80027a6:	2100      	movs	r1, #0
 80027a8:	9100      	str	r1, [sp, #0]
 80027aa:	2300      	movs	r3, #0
 80027ac:	4e5e      	ldr	r6, [pc, #376]	@ (8002928 <.text_23>)
 80027ae:	7c29      	ldrb	r1, [r5, #16]
 80027b0:	6837      	ldr	r7, [r6, #0]
 80027b2:	4770      	bx	lr

080027b4 <.text_13>:
 80027b4:	74a8      	strb	r0, [r5, #18]
 80027b6:	2100      	movs	r1, #0
 80027b8:	9100      	str	r1, [sp, #0]
 80027ba:	2300      	movs	r3, #0
 80027bc:	4f5a      	ldr	r7, [pc, #360]	@ (8002928 <.text_23>)
 80027be:	7c29      	ldrb	r1, [r5, #16]
 80027c0:	f8d7 c000 	ldr.w	ip, [r7]
 80027c4:	4770      	bx	lr

080027c6 <.text_14>:
 80027c6:	6868      	ldr	r0, [r5, #4]
 80027c8:	6801      	ldr	r1, [r0, #0]
 80027ca:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 80027ce:	2800      	cmp	r0, #0
 80027d0:	4770      	bx	lr

080027d2 <.text_15>:
 80027d2:	6868      	ldr	r0, [r5, #4]
 80027d4:	6801      	ldr	r1, [r0, #0]
 80027d6:	f021 0110 	bic.w	r1, r1, #16
 80027da:	6001      	str	r1, [r0, #0]
 80027dc:	4770      	bx	lr

080027de <.text_16>:
 80027de:	2101      	movs	r1, #1
 80027e0:	4628      	mov	r0, r5
 80027e2:	f7fe bd98 	b.w	8001316 <PE_CallHardResetCallback>

080027e6 <.text_17>:
 80027e6:	2104      	movs	r1, #4
 80027e8:	4628      	mov	r0, r5
 80027ea:	f7fe bd9b 	b.w	8001324 <PE_SetPowerNegotiation>

080027ee <.text_18>:
 80027ee:	7c28      	ldrb	r0, [r5, #16]
 80027f0:	f7fd beb1 	b.w	8000556 <USBPD_PE_Notification>

080027f4 <.text_19>:
 80027f4:	2100      	movs	r1, #0
 80027f6:	4628      	mov	r0, r5
 80027f8:	f7fe be36 	b.w	8001468 <PE_Send_CtrlMessage>

080027fc <.text_20>:
 80027fc:	2114      	movs	r1, #20
 80027fe:	f88d 100c 	strb.w	r1, [sp, #12]
 8002802:	4628      	mov	r0, r5
 8002804:	f7fe b8d2 	b.w	80009ac <PE_Clear_RxEvent>

08002808 <PE_StateMachine_SNK_ReadyWait>:
 8002808:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 800280a:	460e      	mov	r6, r1
 800280c:	4604      	mov	r4, r0
 800280e:	7830      	ldrb	r0, [r6, #0]
 8002810:	2502      	movs	r5, #2
 8002812:	2814      	cmp	r0, #20
 8002814:	d00b      	beq.n	800282e <PE_StateMachine_SNK_ReadyWait+0x26>
 8002816:	4620      	mov	r0, r4
 8002818:	f7ff f894 	bl	8001944 <PE_ManageRXEvent>
 800281c:	7830      	ldrb	r0, [r6, #0]
 800281e:	2814      	cmp	r0, #20
 8002820:	d07d      	beq.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 8002822:	2114      	movs	r1, #20
 8002824:	7031      	strb	r1, [r6, #0]
 8002826:	4620      	mov	r0, r4
 8002828:	f7fe f8c0 	bl	80009ac <PE_Clear_RxEvent>
 800282c:	e077      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 800282e:	6961      	ldr	r1, [r4, #20]
 8002830:	0cc8      	lsrs	r0, r1, #19
 8002832:	f504 7518 	add.w	r5, r4, #608	@ 0x260
 8002836:	d027      	beq.n	8002888 <PE_StateMachine_SNK_ReadyWait+0x80>
 8002838:	8c20      	ldrh	r0, [r4, #32]
 800283a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800283e:	d10e      	bne.n	800285e <PE_StateMachine_SNK_ReadyWait+0x56>
 8002840:	210f      	movs	r1, #15
 8002842:	7461      	strb	r1, [r4, #17]
 8002844:	2000      	movs	r0, #0
 8002846:	9000      	str	r0, [sp, #0]
 8002848:	2300      	movs	r3, #0
 800284a:	7c21      	ldrb	r1, [r4, #16]
 800284c:	4c36      	ldr	r4, [pc, #216]	@ (8002928 <.text_23>)
 800284e:	6826      	ldr	r6, [r4, #0]
 8002850:	2270      	movs	r2, #112	@ 0x70
 8002852:	2009      	movs	r0, #9
 8002854:	47b0      	blx	r6
 8002856:	7828      	ldrb	r0, [r5, #0]
 8002858:	1c40      	adds	r0, r0, #1
 800285a:	7028      	strb	r0, [r5, #0]
 800285c:	e054      	b.n	8002908 <PE_StateMachine_SNK_ReadyWait+0x100>
 800285e:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8002860:	6962      	ldr	r2, [r4, #20]
 8002862:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8002866:	2033      	movs	r0, #51	@ 0x33
 8002868:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 800286c:	fb11 f100 	smulbb	r1, r1, r0
 8002870:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002874:	8421      	strh	r1, [r4, #32]
 8002876:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8002878:	6962      	ldr	r2, [r4, #20]
 800287a:	f3c1 2142 	ubfx	r1, r1, #9, #3
 800287e:	eb01 45d2 	add.w	r5, r1, r2, lsr #19
 8002882:	4345      	muls	r5, r0
 8002884:	b2ad      	uxth	r5, r5
 8002886:	e04a      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 8002888:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 800288a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800288e:	d106      	bne.n	800289e <PE_StateMachine_SNK_ReadyWait+0x96>
 8002890:	2245      	movs	r2, #69	@ 0x45
 8002892:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002896:	7462      	strb	r2, [r4, #17]
 8002898:	2500      	movs	r5, #0
 800289a:	6161      	str	r1, [r4, #20]
 800289c:	e03f      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 800289e:	7c20      	ldrb	r0, [r4, #16]
 80028a0:	f7fe f8a9 	bl	80009f6 <PE_PRL_Control_RxEvent>
 80028a4:	f104 0631 	add.w	r6, r4, #49	@ 0x31
 80028a8:	bb18      	cbnz	r0, 80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028aa:	7870      	ldrb	r0, [r6, #1]
 80028ac:	b308      	cbz	r0, 80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028ae:	6860      	ldr	r0, [r4, #4]
 80028b0:	6800      	ldr	r0, [r0, #0]
 80028b2:	f000 0103 	and.w	r1, r0, #3
 80028b6:	2901      	cmp	r1, #1
 80028b8:	d008      	beq.n	80028cc <PE_StateMachine_SNK_ReadyWait+0xc4>
 80028ba:	f000 0003 	and.w	r0, r0, #3
 80028be:	2802      	cmp	r0, #2
 80028c0:	d117      	bne.n	80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028c2:	7c20      	ldrb	r0, [r4, #16]
 80028c4:	f002 fbbe 	bl	8005044 <USBPD_PRL_IsResistor_SinkTxOK>
 80028c8:	2801      	cmp	r0, #1
 80028ca:	d112      	bne.n	80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028cc:	78b0      	ldrb	r0, [r6, #2]
 80028ce:	7030      	strb	r0, [r6, #0]
 80028d0:	7870      	ldrb	r0, [r6, #1]
 80028d2:	7460      	strb	r0, [r4, #17]
 80028d4:	2845      	cmp	r0, #69	@ 0x45
 80028d6:	d103      	bne.n	80028e0 <PE_StateMachine_SNK_ReadyWait+0xd8>
 80028d8:	6960      	ldr	r0, [r4, #20]
 80028da:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 80028de:	6160      	str	r0, [r4, #20]
 80028e0:	2000      	movs	r0, #0
 80028e2:	7070      	strb	r0, [r6, #1]
 80028e4:	6960      	ldr	r0, [r4, #20]
 80028e6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80028e8:	62e1      	str	r1, [r4, #44]	@ 0x2c
 80028ea:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 80028ee:	6160      	str	r0, [r4, #20]
 80028f0:	e00a      	b.n	8002908 <PE_StateMachine_SNK_ReadyWait+0x100>
 80028f2:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 80028f4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80028f8:	d108      	bne.n	800290c <PE_StateMachine_SNK_ReadyWait+0x104>
 80028fa:	2100      	movs	r1, #0
 80028fc:	8461      	strh	r1, [r4, #34]	@ 0x22
 80028fe:	2105      	movs	r1, #5
 8002900:	78a8      	ldrb	r0, [r5, #2]
 8002902:	1c40      	adds	r0, r0, #1
 8002904:	70a8      	strb	r0, [r5, #2]
 8002906:	7461      	strb	r1, [r4, #17]
 8002908:	2500      	movs	r5, #0
 800290a:	e008      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 800290c:	4620      	mov	r0, r4
 800290e:	f7fe fd23 	bl	8001358 <PE_CalculateMinTiming>
 8002912:	4605      	mov	r5, r0
 8002914:	7870      	ldrb	r0, [r6, #1]
 8002916:	b110      	cbz	r0, 800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 8002918:	2d02      	cmp	r5, #2
 800291a:	bf28      	it	cs
 800291c:	2502      	movcs	r5, #2
 800291e:	4628      	mov	r0, r5
 8002920:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

08002924 <.text_22>:
 8002924:	200002d4 	.word	0x200002d4

08002928 <.text_23>:
 8002928:	20000000 	.word	0x20000000

0800292c <USBPD_PE_StateMachine_SRC>:
 800292c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002930:	4680      	mov	r8, r0
 8002932:	481a      	ldr	r0, [pc, #104]	@ (800299c <USBPD_PE_StateMachine_SRC+0x70>)
 8002934:	b086      	sub	sp, #24
 8002936:	4641      	mov	r1, r8
 8002938:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
 800293c:	7c70      	ldrb	r0, [r6, #17]
 800293e:	2848      	cmp	r0, #72	@ 0x48
 8002940:	d136      	bne.n	80029b0 <USBPD_PE_StateMachine_SRC+0x84>
 8002942:	4630      	mov	r0, r6
 8002944:	f7fe f90b 	bl	8000b5e <PE_Reset_ZI>
 8002948:	4630      	mov	r0, r6
 800294a:	f7fe f942 	bl	8000bd2 <PE_Reset_Counter>
 800294e:	6830      	ldr	r0, [r6, #0]
 8002950:	7903      	ldrb	r3, [r0, #4]
 8002952:	7c30      	ldrb	r0, [r6, #16]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2201      	movs	r2, #1
 800295a:	2101      	movs	r1, #1
 800295c:	f002 fb21 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8002960:	6870      	ldr	r0, [r6, #4]
 8002962:	6801      	ldr	r1, [r0, #0]
 8002964:	f041 0108 	orr.w	r1, r1, #8
 8002968:	6001      	str	r1, [r0, #0]
 800296a:	6830      	ldr	r0, [r6, #0]
 800296c:	6841      	ldr	r1, [r0, #4]
 800296e:	6870      	ldr	r0, [r6, #4]
 8002970:	6802      	ldr	r2, [r0, #0]
 8002972:	f361 0201 	bfi	r2, r1, #0, #2
 8002976:	6002      	str	r2, [r0, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	7c30      	ldrb	r0, [r6, #16]
 800297c:	f002 fb68 	bl	8005050 <USBPD_PRL_SOPCapability>
 8002980:	7c30      	ldrb	r0, [r6, #16]
 8002982:	f002 fdda 	bl	800553a <USBPD_PRL_Reset>
 8002986:	7cb1      	ldrb	r1, [r6, #18]
 8002988:	2002      	movs	r0, #2
 800298a:	2902      	cmp	r1, #2
 800298c:	7470      	strb	r0, [r6, #17]
 800298e:	d00f      	beq.n	80029b0 <USBPD_PE_StateMachine_SRC+0x84>
 8002990:	74b0      	strb	r0, [r6, #18]
 8002992:	2100      	movs	r1, #0
 8002994:	9100      	str	r1, [sp, #0]
 8002996:	2300      	movs	r3, #0
 8002998:	4c01      	ldr	r4, [pc, #4]	@ (80029a0 <USBPD_PE_StateMachine_SRC+0x74>)
 800299a:	e003      	b.n	80029a4 <USBPD_PE_StateMachine_SRC+0x78>
 800299c:	200002d4 	.word	0x200002d4
 80029a0:	20000000 	.word	0x20000000
 80029a4:	7c31      	ldrb	r1, [r6, #16]
 80029a6:	f8d4 9000 	ldr.w	r9, [r4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	2004      	movs	r0, #4
 80029ae:	47c8      	blx	r9
 80029b0:	6970      	ldr	r0, [r6, #20]
 80029b2:	f3c0 4080 	ubfx	r0, r0, #18, #1
 80029b6:	b130      	cbz	r0, 80029c6 <USBPD_PE_StateMachine_SRC+0x9a>
 80029b8:	6970      	ldr	r0, [r6, #20]
 80029ba:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 80029be:	6170      	str	r0, [r6, #20]
 80029c0:	2164      	movs	r1, #100	@ 0x64
 80029c2:	f000 feab 	bl	800371c <.text_17>
 80029c6:	4630      	mov	r0, r6
 80029c8:	f7fd ffbc 	bl	8000944 <PE_Get_RxEvent>
 80029cc:	2803      	cmp	r0, #3
 80029ce:	f88d 000c 	strb.w	r0, [sp, #12]
 80029d2:	f206 255e 	addw	r5, r6, #606	@ 0x25e
 80029d6:	f8df 9ca8 	ldr.w	r9, [pc, #3240]	@ 8003680 <.text_3>
 80029da:	f248 0a1b 	movw	sl, #32795	@ 0x801b
 80029de:	f248 0b1e 	movw	fp, #32798	@ 0x801e
 80029e2:	d103      	bne.n	80029ec <USBPD_PE_StateMachine_SRC+0xc0>
 80029e4:	2001      	movs	r0, #1
 80029e6:	b007      	add	sp, #28
 80029e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ec:	6870      	ldr	r0, [r6, #4]
 80029ee:	6801      	ldr	r1, [r0, #0]
 80029f0:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80029f4:	2800      	cmp	r0, #0
 80029f6:	f000 8117 	beq.w	8002c28 <USBPD_PE_StateMachine_SRC+0x2fc>
 80029fa:	6970      	ldr	r0, [r6, #20]
 80029fc:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8002a00:	2800      	cmp	r0, #0
 8002a02:	f106 0730 	add.w	r7, r6, #48	@ 0x30
 8002a06:	f000 8119 	beq.w	8002c3c <USBPD_PE_StateMachine_SRC+0x310>
 8002a0a:	4640      	mov	r0, r8
 8002a0c:	f002 fb1c 	bl	8005048 <USBPD_PRL_FastRoleSwapSignalling>
 8002a10:	20a6      	movs	r0, #166	@ 0xa6
 8002a12:	7470      	strb	r0, [r6, #17]
 8002a14:	2109      	movs	r1, #9
 8002a16:	7731      	strb	r1, [r6, #28]
 8002a18:	2000      	movs	r0, #0
 8002a1a:	70b8      	strb	r0, [r7, #2]
 8002a1c:	f248 0011 	movw	r0, #32785	@ 0x8011
 8002a20:	6971      	ldr	r1, [r6, #20]
 8002a22:	f421 3100 	bic.w	r1, r1, #131072	@ 0x20000
 8002a26:	6171      	str	r1, [r6, #20]
 8002a28:	84f0      	strh	r0, [r6, #38]	@ 0x26
 8002a2a:	7cb1      	ldrb	r1, [r6, #18]
 8002a2c:	29a6      	cmp	r1, #166	@ 0xa6
 8002a2e:	f040 80ff 	bne.w	8002c30 <USBPD_PE_StateMachine_SRC+0x304>
 8002a32:	2402      	movs	r4, #2
 8002a34:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002a38:	2811      	cmp	r0, #17
 8002a3a:	d11c      	bne.n	8002a76 <USBPD_PE_StateMachine_SRC+0x14a>
 8002a3c:	6870      	ldr	r0, [r6, #4]
 8002a3e:	6801      	ldr	r1, [r0, #0]
 8002a40:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8002a44:	88b9      	ldrh	r1, [r7, #4]
 8002a46:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8002a4a:	4288      	cmp	r0, r1
 8002a4c:	d113      	bne.n	8002a76 <USBPD_PE_StateMachine_SRC+0x14a>
 8002a4e:	f000 fe26 	bl	800369e <.text_7>
 8002a52:	f000 fe72 	bl	800373a <.text_20+0x6>
 8002a56:	7cb1      	ldrb	r1, [r6, #18]
 8002a58:	2092      	movs	r0, #146	@ 0x92
 8002a5a:	2992      	cmp	r1, #146	@ 0x92
 8002a5c:	7470      	strb	r0, [r6, #17]
 8002a5e:	f000 810e 	beq.w	8002c7e <USBPD_PE_StateMachine_SRC+0x352>
 8002a62:	74b0      	strb	r0, [r6, #18]
 8002a64:	2100      	movs	r1, #0
 8002a66:	9100      	str	r1, [sp, #0]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	7c31      	ldrb	r1, [r6, #16]
 8002a6c:	f8d9 c000 	ldr.w	ip, [r9]
 8002a70:	2292      	movs	r2, #146	@ 0x92
 8002a72:	2004      	movs	r0, #4
 8002a74:	47e0      	blx	ip
 8002a76:	7c71      	ldrb	r1, [r6, #17]
 8002a78:	000a      	movs	r2, r1
 8002a7a:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 8002a7e:	f000 80f6 	beq.w	8002c6e <USBPD_PE_StateMachine_SRC+0x342>
 8002a82:	1e4a      	subs	r2, r1, #1
 8002a84:	d06f      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002a86:	1e52      	subs	r2, r2, #1
 8002a88:	f000 8105 	beq.w	8002c96 <USBPD_PE_StateMachine_SRC+0x36a>
 8002a8c:	1e52      	subs	r2, r2, #1
 8002a8e:	2a01      	cmp	r2, #1
 8002a90:	f240 84b2 	bls.w	80033f8 <USBPD_PE_StateMachine_SRC+0xacc>
 8002a94:	1e92      	subs	r2, r2, #2
 8002a96:	f000 8143 	beq.w	8002d20 <USBPD_PE_StateMachine_SRC+0x3f4>
 8002a9a:	1e52      	subs	r2, r2, #1
 8002a9c:	f000 8145 	beq.w	8002d2a <USBPD_PE_StateMachine_SRC+0x3fe>
 8002aa0:	1e52      	subs	r2, r2, #1
 8002aa2:	f000 814a 	beq.w	8002d3a <USBPD_PE_StateMachine_SRC+0x40e>
 8002aa6:	1e52      	subs	r2, r2, #1
 8002aa8:	f000 819d 	beq.w	8002de6 <USBPD_PE_StateMachine_SRC+0x4ba>
 8002aac:	1e52      	subs	r2, r2, #1
 8002aae:	f000 81e3 	beq.w	8002e78 <USBPD_PE_StateMachine_SRC+0x54c>
 8002ab2:	1ed2      	subs	r2, r2, #3
 8002ab4:	f000 8226 	beq.w	8002f04 <USBPD_PE_StateMachine_SRC+0x5d8>
 8002ab8:	1e52      	subs	r2, r2, #1
 8002aba:	f000 8234 	beq.w	8002f26 <USBPD_PE_StateMachine_SRC+0x5fa>
 8002abe:	1e52      	subs	r2, r2, #1
 8002ac0:	f000 80da 	beq.w	8002c78 <USBPD_PE_StateMachine_SRC+0x34c>
 8002ac4:	1e52      	subs	r2, r2, #1
 8002ac6:	f000 82a3 	beq.w	8003010 <USBPD_PE_StateMachine_SRC+0x6e4>
 8002aca:	1e52      	subs	r2, r2, #1
 8002acc:	f000 826a 	beq.w	8002fa4 <USBPD_PE_StateMachine_SRC+0x678>
 8002ad0:	1e52      	subs	r2, r2, #1
 8002ad2:	f000 826c 	beq.w	8002fae <USBPD_PE_StateMachine_SRC+0x682>
 8002ad6:	1e52      	subs	r2, r2, #1
 8002ad8:	f000 8277 	beq.w	8002fca <USBPD_PE_StateMachine_SRC+0x69e>
 8002adc:	1e52      	subs	r2, r2, #1
 8002ade:	f000 8303 	beq.w	80030e8 <USBPD_PE_StateMachine_SRC+0x7bc>
 8002ae2:	1e52      	subs	r2, r2, #1
 8002ae4:	f000 82bb 	beq.w	800305e <USBPD_PE_StateMachine_SRC+0x732>
 8002ae8:	1e52      	subs	r2, r2, #1
 8002aea:	f000 82c2 	beq.w	8003072 <USBPD_PE_StateMachine_SRC+0x746>
 8002aee:	1e52      	subs	r2, r2, #1
 8002af0:	f000 8192 	beq.w	8002e18 <USBPD_PE_StateMachine_SRC+0x4ec>
 8002af4:	1e52      	subs	r2, r2, #1
 8002af6:	f000 82d9 	beq.w	80030ac <USBPD_PE_StateMachine_SRC+0x780>
 8002afa:	1e52      	subs	r2, r2, #1
 8002afc:	2a01      	cmp	r2, #1
 8002afe:	d932      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b00:	1e92      	subs	r2, r2, #2
 8002b02:	f000 8314 	beq.w	800312e <USBPD_PE_StateMachine_SRC+0x802>
 8002b06:	1e52      	subs	r2, r2, #1
 8002b08:	f000 831f 	beq.w	800314a <USBPD_PE_StateMachine_SRC+0x81e>
 8002b0c:	1e92      	subs	r2, r2, #2
 8002b0e:	d02a      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b10:	1e52      	subs	r2, r2, #1
 8002b12:	f000 83ce 	beq.w	80032b2 <USBPD_PE_StateMachine_SRC+0x986>
 8002b16:	1e52      	subs	r2, r2, #1
 8002b18:	f000 83dc 	beq.w	80032d4 <USBPD_PE_StateMachine_SRC+0x9a8>
 8002b1c:	1e52      	subs	r2, r2, #1
 8002b1e:	f000 841a 	beq.w	8003356 <USBPD_PE_StateMachine_SRC+0xa2a>
 8002b22:	1e52      	subs	r2, r2, #1
 8002b24:	f000 843a 	beq.w	800339c <USBPD_PE_StateMachine_SRC+0xa70>
 8002b28:	1e52      	subs	r2, r2, #1
 8002b2a:	f000 834a 	beq.w	80031c2 <USBPD_PE_StateMachine_SRC+0x896>
 8002b2e:	1e92      	subs	r2, r2, #2
 8002b30:	f000 8369 	beq.w	8003206 <USBPD_PE_StateMachine_SRC+0x8da>
 8002b34:	1e52      	subs	r2, r2, #1
 8002b36:	f000 8380 	beq.w	800323a <USBPD_PE_StateMachine_SRC+0x90e>
 8002b3a:	1e52      	subs	r2, r2, #1
 8002b3c:	f000 839a 	beq.w	8003274 <USBPD_PE_StateMachine_SRC+0x948>
 8002b40:	1e52      	subs	r2, r2, #1
 8002b42:	2a02      	cmp	r2, #2
 8002b44:	d90f      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b46:	1ed2      	subs	r2, r2, #3
 8002b48:	f000 8359 	beq.w	80031fe <USBPD_PE_StateMachine_SRC+0x8d2>
 8002b4c:	1e52      	subs	r2, r2, #1
 8002b4e:	f000 84c5 	beq.w	80034dc <USBPD_PE_StateMachine_SRC+0xbb0>
 8002b52:	1e52      	subs	r2, r2, #1
 8002b54:	d007      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b56:	1e52      	subs	r2, r2, #1
 8002b58:	f000 84d1 	beq.w	80034fe <USBPD_PE_StateMachine_SRC+0xbd2>
 8002b5c:	1e52      	subs	r2, r2, #1
 8002b5e:	f000 8500 	beq.w	8003562 <USBPD_PE_StateMachine_SRC+0xc36>
 8002b62:	1e52      	subs	r2, r2, #1
 8002b64:	2a01      	cmp	r2, #1
 8002b66:	f240 8535 	bls.w	80035d4 <USBPD_PE_StateMachine_SRC+0xca8>
 8002b6a:	1e92      	subs	r2, r2, #2
 8002b6c:	d001      	beq.n	8002b72 <USBPD_PE_StateMachine_SRC+0x246>
 8002b6e:	1e92      	subs	r2, r2, #2
 8002b70:	2a05      	cmp	r2, #5
 8002b72:	f240 852b 	bls.w	80035cc <USBPD_PE_StateMachine_SRC+0xca0>
 8002b76:	1f92      	subs	r2, r2, #6
 8002b78:	f000 8503 	beq.w	8003582 <USBPD_PE_StateMachine_SRC+0xc56>
 8002b7c:	1e52      	subs	r2, r2, #1
 8002b7e:	2a03      	cmp	r2, #3
 8002b80:	d9f1      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b82:	3a11      	subs	r2, #17
 8002b84:	d0ef      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b86:	1e52      	subs	r2, r2, #1
 8002b88:	f000 811b 	beq.w	8002dc2 <USBPD_PE_StateMachine_SRC+0x496>
 8002b8c:	3a0f      	subs	r2, #15
 8002b8e:	f000 841c 	beq.w	80033ca <USBPD_PE_StateMachine_SRC+0xa9e>
 8002b92:	1fd2      	subs	r2, r2, #7
 8002b94:	2a01      	cmp	r2, #1
 8002b96:	bf84      	itt	hi
 8002b98:	1f52      	subhi	r2, r2, #5
 8002b9a:	2a01      	cmphi	r2, #1
 8002b9c:	d9e3      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b9e:	3a0d      	subs	r2, #13
 8002ba0:	d0e1      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002ba2:	3a12      	subs	r2, #18
 8002ba4:	f000 8542 	beq.w	800362c <USBPD_PE_StateMachine_SRC+0xd00>
 8002ba8:	3a0c      	subs	r2, #12
 8002baa:	d068      	beq.n	8002c7e <USBPD_PE_StateMachine_SRC+0x352>
 8002bac:	1e52      	subs	r2, r2, #1
 8002bae:	2a02      	cmp	r2, #2
 8002bb0:	d9d9      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002bb2:	1ed2      	subs	r2, r2, #3
 8002bb4:	f000 81d1 	beq.w	8002f5a <USBPD_PE_StateMachine_SRC+0x62e>
 8002bb8:	1e52      	subs	r2, r2, #1
 8002bba:	f000 81e1 	beq.w	8002f80 <USBPD_PE_StateMachine_SRC+0x654>
 8002bbe:	1e92      	subs	r2, r2, #2
 8002bc0:	d0d1      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002bc2:	1e52      	subs	r2, r2, #1
 8002bc4:	f000 80ac 	beq.w	8002d20 <USBPD_PE_StateMachine_SRC+0x3f4>
 8002bc8:	1e92      	subs	r2, r2, #2
 8002bca:	2a08      	cmp	r2, #8
 8002bcc:	f240 8508 	bls.w	80035e0 <USBPD_PE_StateMachine_SRC+0xcb4>
 8002bd0:	3a0a      	subs	r2, #10
 8002bd2:	f000 8514 	beq.w	80035fe <USBPD_PE_StateMachine_SRC+0xcd2>
 8002bd6:	a903      	add	r1, sp, #12
 8002bd8:	4630      	mov	r0, r6
 8002bda:	f001 fa2b 	bl	8004034 <PE_StateMachine_VDM>
 8002bde:	4604      	mov	r4, r0
 8002be0:	7c72      	ldrb	r2, [r6, #17]
 8002be2:	7cb0      	ldrb	r0, [r6, #18]
 8002be4:	4290      	cmp	r0, r2
 8002be6:	d003      	beq.n	8002bf0 <USBPD_PE_StateMachine_SRC+0x2c4>
 8002be8:	74b2      	strb	r2, [r6, #18]
 8002bea:	2100      	movs	r1, #0
 8002bec:	f000 fd62 	bl	80036b4 <.text_9>
 8002bf0:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002bf4:	2814      	cmp	r0, #20
 8002bf6:	f000 851f 	beq.w	8003638 <USBPD_PE_StateMachine_SRC+0xd0c>
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	f7fd ff17 	bl	8000a2e <PE_Check_AMSConflict>
 8002c00:	2815      	cmp	r0, #21
 8002c02:	d105      	bne.n	8002c10 <USBPD_PE_StateMachine_SRC+0x2e4>
 8002c04:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002c08:	2814      	cmp	r0, #20
 8002c0a:	d001      	beq.n	8002c10 <USBPD_PE_StateMachine_SRC+0x2e4>
 8002c0c:	f000 fd92 	bl	8003734 <.text_20>
 8002c10:	7c72      	ldrb	r2, [r6, #17]
 8002c12:	7cb0      	ldrb	r0, [r6, #18]
 8002c14:	4290      	cmp	r0, r2
 8002c16:	d004      	beq.n	8002c22 <USBPD_PE_StateMachine_SRC+0x2f6>
 8002c18:	74b2      	strb	r2, [r6, #18]
 8002c1a:	f000 fd53 	bl	80036c4 <.text_10+0x2>
 8002c1e:	2004      	movs	r0, #4
 8002c20:	47a0      	blx	r4
 8002c22:	2400      	movs	r4, #0
 8002c24:	f000 bd23 	b.w	800366e <USBPD_PE_StateMachine_SRC+0xd42>
 8002c28:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	e6da      	b.n	80029e6 <USBPD_PE_StateMachine_SRC+0xba>
 8002c30:	20a6      	movs	r0, #166	@ 0xa6
 8002c32:	f000 fd46 	bl	80036c2 <.text_10>
 8002c36:	22a6      	movs	r2, #166	@ 0xa6
 8002c38:	2004      	movs	r0, #4
 8002c3a:	47a0      	blx	r4
 8002c3c:	78b8      	ldrb	r0, [r7, #2]
 8002c3e:	2402      	movs	r4, #2
 8002c40:	280f      	cmp	r0, #15
 8002c42:	bf18      	it	ne
 8002c44:	2814      	cmpne	r0, #20
 8002c46:	d111      	bne.n	8002c6c <USBPD_PE_StateMachine_SRC+0x340>
 8002c48:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002c4c:	2814      	cmp	r0, #20
 8002c4e:	d001      	beq.n	8002c54 <USBPD_PE_StateMachine_SRC+0x328>
 8002c50:	f000 fd70 	bl	8003734 <.text_20>
 8002c54:	78ba      	ldrb	r2, [r7, #2]
 8002c56:	7472      	strb	r2, [r6, #17]
 8002c58:	2000      	movs	r0, #0
 8002c5a:	70b8      	strb	r0, [r7, #2]
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	7cb0      	ldrb	r0, [r6, #18]
 8002c60:	62f1      	str	r1, [r6, #44]	@ 0x2c
 8002c62:	4290      	cmp	r0, r2
 8002c64:	d002      	beq.n	8002c6c <USBPD_PE_StateMachine_SRC+0x340>
 8002c66:	74b2      	strb	r2, [r6, #18]
 8002c68:	f000 fd24 	bl	80036b4 <.text_9>
 8002c6c:	e6e2      	b.n	8002a34 <USBPD_PE_StateMachine_SRC+0x108>
 8002c6e:	f000 fd3c 	bl	80036ea <.text_13>
 8002c72:	215f      	movs	r1, #95	@ 0x5f
 8002c74:	f000 fd52 	bl	800371c <.text_17>
 8002c78:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002c7c:	e7b0      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002c7e:	6870      	ldr	r0, [r6, #4]
 8002c80:	6801      	ldr	r1, [r0, #0]
 8002c82:	f021 0110 	bic.w	r1, r1, #16
 8002c86:	6001      	str	r1, [r0, #0]
 8002c88:	68b0      	ldr	r0, [r6, #8]
 8002c8a:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	d0f3      	beq.n	8002c78 <USBPD_PE_StateMachine_SRC+0x34c>
 8002c90:	7c30      	ldrb	r0, [r6, #16]
 8002c92:	4788      	blx	r1
 8002c94:	e7f0      	b.n	8002c78 <USBPD_PE_StateMachine_SRC+0x34c>
 8002c96:	f000 fd22 	bl	80036de <.text_12>
 8002c9a:	bf1a      	itte	ne
 8002c9c:	6830      	ldrne	r0, [r6, #0]
 8002c9e:	6801      	ldrne	r1, [r0, #0]
 8002ca0:	2101      	moveq	r1, #1
 8002ca2:	4640      	mov	r0, r8
 8002ca4:	f002 f9d4 	bl	8005050 <USBPD_PRL_SOPCapability>
 8002ca8:	6870      	ldr	r0, [r6, #4]
 8002caa:	6801      	ldr	r1, [r0, #0]
 8002cac:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8002cb0:	b388      	cbz	r0, 8002d16 <USBPD_PE_StateMachine_SRC+0x3ea>
 8002cb2:	f001 0203 	and.w	r2, r1, #3
 8002cb6:	6870      	ldr	r0, [r6, #4]
 8002cb8:	2a01      	cmp	r2, #1
 8002cba:	bf0c      	ite	eq
 8002cbc:	2200      	moveq	r2, #0
 8002cbe:	2220      	movne	r2, #32
 8002cc0:	f021 0120 	bic.w	r1, r1, #32
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	6001      	str	r1, [r0, #0]
 8002cc8:	2000      	movs	r0, #0
 8002cca:	70e8      	strb	r0, [r5, #3]
 8002ccc:	2101      	movs	r1, #1
 8002cce:	f000 fd29 	bl	8003724 <.text_18+0x2>
 8002cd2:	6870      	ldr	r0, [r6, #4]
 8002cd4:	6801      	ldr	r1, [r0, #0]
 8002cd6:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8002cda:	b130      	cbz	r0, 8002cea <USBPD_PE_StateMachine_SRC+0x3be>
 8002cdc:	f248 0014 	movw	r0, #32788	@ 0x8014
 8002ce0:	83f0      	strh	r0, [r6, #30]
 8002ce2:	2414      	movs	r4, #20
 8002ce4:	2106      	movs	r1, #6
 8002ce6:	7471      	strb	r1, [r6, #17]
 8002ce8:	e77a      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002cea:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	d00a      	beq.n	8002d08 <USBPD_PE_StateMachine_SRC+0x3dc>
 8002cf2:	6830      	ldr	r0, [r6, #0]
 8002cf4:	7801      	ldrb	r1, [r0, #0]
 8002cf6:	078a      	lsls	r2, r1, #30
 8002cf8:	f140 808c 	bpl.w	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002cfc:	7929      	ldrb	r1, [r5, #4]
 8002cfe:	2914      	cmp	r1, #20
 8002d00:	f080 8088 	bcs.w	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002d04:	68f0      	ldr	r0, [r6, #12]
 8002d06:	2800      	cmp	r0, #0
 8002d08:	f000 8084 	beq.w	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002d0c:	1c49      	adds	r1, r1, #1
 8002d0e:	7129      	strb	r1, [r5, #4]
 8002d10:	2005      	movs	r0, #5
 8002d12:	7470      	strb	r0, [r6, #17]
 8002d14:	e764      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d16:	7c30      	ldrb	r0, [r6, #16]
 8002d18:	2121      	movs	r1, #33	@ 0x21
 8002d1a:	f7fd fc1c 	bl	8000556 <USBPD_PE_Notification>
 8002d1e:	e1e1      	b.n	80030e4 <USBPD_PE_StateMachine_SRC+0x7b8>
 8002d20:	a903      	add	r1, sp, #12
 8002d22:	4630      	mov	r0, r6
 8002d24:	f000 fd3c 	bl	80037a0 <PE_StateMachine_VDMCable>
 8002d28:	e759      	b.n	8002bde <USBPD_PE_StateMachine_SRC+0x2b2>
 8002d2a:	8bf0      	ldrh	r0, [r6, #30]
 8002d2c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002d30:	d102      	bne.n	8002d38 <USBPD_PE_StateMachine_SRC+0x40c>
 8002d32:	2107      	movs	r1, #7
 8002d34:	7471      	strb	r1, [r6, #17]
 8002d36:	2400      	movs	r4, #0
 8002d38:	e752      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d3a:	6971      	ldr	r1, [r6, #20]
 8002d3c:	0889      	lsrs	r1, r1, #2
 8002d3e:	f001 0101 	and.w	r1, r1, #1
 8002d42:	4630      	mov	r0, r6
 8002d44:	f000 fd01 	bl	800374a <PE_Send_SRCCapabilities>
 8002d48:	2805      	cmp	r0, #5
 8002d4a:	d002      	beq.n	8002d52 <USBPD_PE_StateMachine_SRC+0x426>
 8002d4c:	2809      	cmp	r0, #9
 8002d4e:	d0f3      	beq.n	8002d38 <USBPD_PE_StateMachine_SRC+0x40c>
 8002d50:	e011      	b.n	8002d76 <USBPD_PE_StateMachine_SRC+0x44a>
 8002d52:	2001      	movs	r0, #1
 8002d54:	6971      	ldr	r1, [r6, #20]
 8002d56:	7730      	strb	r0, [r6, #28]
 8002d58:	f041 0104 	orr.w	r1, r1, #4
 8002d5c:	6171      	str	r1, [r6, #20]
 8002d5e:	2000      	movs	r0, #0
 8002d60:	70e8      	strb	r0, [r5, #3]
 8002d62:	70a8      	strb	r0, [r5, #2]
 8002d64:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8002d68:	2016      	movs	r0, #22
 8002d6a:	241b      	movs	r4, #27
 8002d6c:	7470      	strb	r0, [r6, #17]
 8002d6e:	210f      	movs	r1, #15
 8002d70:	f000 fcd4 	bl	800371c <.text_17>
 8002d74:	e734      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d76:	6970      	ldr	r0, [r6, #20]
 8002d78:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002d7c:	b978      	cbnz	r0, 8002d9e <USBPD_PE_StateMachine_SRC+0x472>
 8002d7e:	78e8      	ldrb	r0, [r5, #3]
 8002d80:	2833      	cmp	r0, #51	@ 0x33
 8002d82:	d218      	bcs.n	8002db6 <USBPD_PE_StateMachine_SRC+0x48a>
 8002d84:	f248 0196 	movw	r1, #32918	@ 0x8096
 8002d88:	83f1      	strh	r1, [r6, #30]
 8002d8a:	2008      	movs	r0, #8
 8002d8c:	7470      	strb	r0, [r6, #17]
 8002d8e:	2496      	movs	r4, #150	@ 0x96
 8002d90:	8c71      	ldrh	r1, [r6, #34]	@ 0x22
 8002d92:	0448      	lsls	r0, r1, #17
 8002d94:	d002      	beq.n	8002d9c <USBPD_PE_StateMachine_SRC+0x470>
 8002d96:	8c74      	ldrh	r4, [r6, #34]	@ 0x22
 8002d98:	f3c4 040e 	ubfx	r4, r4, #0, #15
 8002d9c:	e720      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d9e:	6870      	ldr	r0, [r6, #4]
 8002da0:	7801      	ldrb	r1, [r0, #0]
 8002da2:	f001 0103 	and.w	r1, r1, #3
 8002da6:	2902      	cmp	r1, #2
 8002da8:	bf04      	itt	eq
 8002daa:	7c30      	ldrbeq	r0, [r6, #16]
 8002dac:	f002 f93f 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8002db0:	2011      	movs	r0, #17
 8002db2:	7470      	strb	r0, [r6, #17]
 8002db4:	e7bf      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 8002db6:	7c30      	ldrb	r0, [r6, #16]
 8002db8:	2121      	movs	r1, #33	@ 0x21
 8002dba:	f7fd fbcc 	bl	8000556 <USBPD_PE_Notification>
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	e7a7      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4630      	mov	r0, r6
 8002dc6:	f000 fcc0 	bl	800374a <PE_Send_SRCCapabilities>
 8002dca:	2805      	cmp	r0, #5
 8002dcc:	d107      	bne.n	8002dde <USBPD_PE_StateMachine_SRC+0x4b2>
 8002dce:	f000 fca8 	bl	8003722 <.text_18>
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f000 fc5f 	bl	8003696 <.text_6>
 8002dd8:	2116      	movs	r1, #22
 8002dda:	7471      	strb	r1, [r6, #17]
 8002ddc:	e7c7      	b.n	8002d6e <USBPD_PE_StateMachine_SRC+0x442>
 8002dde:	2000      	movs	r0, #0
 8002de0:	7730      	strb	r0, [r6, #28]
 8002de2:	2111      	movs	r1, #17
 8002de4:	e77f      	b.n	8002ce6 <USBPD_PE_StateMachine_SRC+0x3ba>
 8002de6:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
 8002de8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002dec:	d106      	bne.n	8002dfc <USBPD_PE_StateMachine_SRC+0x4d0>
 8002dee:	2100      	movs	r1, #0
 8002df0:	8471      	strh	r1, [r6, #34]	@ 0x22
 8002df2:	2105      	movs	r1, #5
 8002df4:	7928      	ldrb	r0, [r5, #4]
 8002df6:	1c40      	adds	r0, r0, #1
 8002df8:	7128      	strb	r0, [r5, #4]
 8002dfa:	7471      	strb	r1, [r6, #17]
 8002dfc:	8bf0      	ldrh	r0, [r6, #30]
 8002dfe:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002e02:	d1cb      	bne.n	8002d9c <USBPD_PE_StateMachine_SRC+0x470>
 8002e04:	6830      	ldr	r0, [r6, #0]
 8002e06:	6841      	ldr	r1, [r0, #4]
 8002e08:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8002e0c:	b110      	cbz	r0, 8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002e0e:	78e8      	ldrb	r0, [r5, #3]
 8002e10:	1c40      	adds	r0, r0, #1
 8002e12:	70e8      	strb	r0, [r5, #3]
 8002e14:	2007      	movs	r0, #7
 8002e16:	e77c      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002e18:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002e1c:	2811      	cmp	r0, #17
 8002e1e:	d10b      	bne.n	8002e38 <USBPD_PE_StateMachine_SRC+0x50c>
 8002e20:	88b9      	ldrh	r1, [r7, #4]
 8002e22:	0bc8      	lsrs	r0, r1, #15
 8002e24:	d108      	bne.n	8002e38 <USBPD_PE_StateMachine_SRC+0x50c>
 8002e26:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	f000 80eb 	beq.w	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002e30:	7938      	ldrb	r0, [r7, #4]
 8002e32:	f000 001f 	and.w	r0, r0, #31
 8002e36:	2802      	cmp	r0, #2
 8002e38:	f040 80e5 	bne.w	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002e3c:	68b8      	ldr	r0, [r7, #8]
 8002e3e:	7881      	ldrb	r1, [r0, #2]
 8002e40:	78c2      	ldrb	r2, [r0, #3]
 8002e42:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 8002e46:	7901      	ldrb	r1, [r0, #4]
 8002e48:	7940      	ldrb	r0, [r0, #5]
 8002e4a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8002e4e:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	88b8      	ldrh	r0, [r7, #4]
 8002e56:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8002e5a:	7c30      	ldrb	r0, [r6, #16]
 8002e5c:	f7fd feeb 	bl	8000c36 <PE_ExtRevisionInteroperability>
 8002e60:	68b4      	ldr	r4, [r6, #8]
 8002e62:	7c30      	ldrb	r0, [r6, #16]
 8002e64:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8002e68:	2304      	movs	r3, #4
 8002e6a:	466a      	mov	r2, sp
 8002e6c:	2106      	movs	r1, #6
 8002e6e:	47e0      	blx	ip
 8002e70:	2009      	movs	r0, #9
 8002e72:	7470      	strb	r0, [r6, #17]
 8002e74:	2400      	movs	r4, #0
 8002e76:	e0c0      	b.n	8002ffa <USBPD_PE_StateMachine_SRC+0x6ce>
 8002e78:	68b2      	ldr	r2, [r6, #8]
 8002e7a:	7c30      	ldrb	r0, [r6, #16]
 8002e7c:	69d3      	ldr	r3, [r2, #28]
 8002e7e:	a901      	add	r1, sp, #4
 8002e80:	4798      	blx	r3
 8002e82:	280a      	cmp	r0, #10
 8002e84:	d011      	beq.n	8002eaa <USBPD_PE_StateMachine_SRC+0x57e>
 8002e86:	280b      	cmp	r0, #11
 8002e88:	d02f      	beq.n	8002eea <USBPD_PE_StateMachine_SRC+0x5be>
 8002e8a:	280d      	cmp	r0, #13
 8002e8c:	6870      	ldr	r0, [r6, #4]
 8002e8e:	6801      	ldr	r1, [r0, #0]
 8002e90:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002e94:	d12e      	bne.n	8002ef4 <USBPD_PE_StateMachine_SRC+0x5c8>
 8002e96:	2803      	cmp	r0, #3
 8002e98:	bf0c      	ite	eq
 8002e9a:	2303      	moveq	r3, #3
 8002e9c:	230e      	movne	r3, #14
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	9000      	str	r0, [sp, #0]
 8002ea2:	220c      	movs	r2, #12
 8002ea4:	f000 fc4d 	bl	8003742 <.text_21+0x2>
 8002ea8:	e69a      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002eaa:	f8a6 b01e 	strh.w	fp, [r6, #30]
 8002eae:	241e      	movs	r4, #30
 8002eb0:	6870      	ldr	r0, [r6, #4]
 8002eb2:	6801      	ldr	r1, [r0, #0]
 8002eb4:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002eb8:	2801      	cmp	r0, #1
 8002eba:	d00b      	beq.n	8002ed4 <USBPD_PE_StateMachine_SRC+0x5a8>
 8002ebc:	9801      	ldr	r0, [sp, #4]
 8002ebe:	2803      	cmp	r0, #3
 8002ec0:	bf02      	ittt	eq
 8002ec2:	6970      	ldreq	r0, [r6, #20]
 8002ec4:	f3c0 00c1 	ubfxeq	r0, r0, #3, #2
 8002ec8:	2803      	cmpeq	r0, #3
 8002eca:	d103      	bne.n	8002ed4 <USBPD_PE_StateMachine_SRC+0x5a8>
 8002ecc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002ed0:	83f0      	strh	r0, [r6, #30]
 8002ed2:	2400      	movs	r4, #0
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	9000      	str	r0, [sp, #0]
 8002ed8:	230c      	movs	r3, #12
 8002eda:	f000 fc31 	bl	8003740 <.text_21>
 8002ede:	9801      	ldr	r0, [sp, #4]
 8002ee0:	6971      	ldr	r1, [r6, #20]
 8002ee2:	f360 01c4 	bfi	r1, r0, #3, #2
 8002ee6:	6171      	str	r1, [r6, #20]
 8002ee8:	e67a      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002eea:	2000      	movs	r0, #0
 8002eec:	9000      	str	r0, [sp, #0]
 8002eee:	230c      	movs	r3, #12
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	e7d7      	b.n	8002ea4 <USBPD_PE_StateMachine_SRC+0x578>
 8002ef4:	2803      	cmp	r0, #3
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2303      	moveq	r3, #3
 8002efa:	230e      	movne	r3, #14
 8002efc:	2000      	movs	r0, #0
 8002efe:	9000      	str	r0, [sp, #0]
 8002f00:	2204      	movs	r2, #4
 8002f02:	e7cf      	b.n	8002ea4 <USBPD_PE_StateMachine_SRC+0x578>
 8002f04:	8bf0      	ldrh	r0, [r6, #30]
 8002f06:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002f0a:	d1ed      	bne.n	8002ee8 <USBPD_PE_StateMachine_SRC+0x5bc>
 8002f0c:	f000 fc09 	bl	8003722 <.text_18>
 8002f10:	68b0      	ldr	r0, [r6, #8]
 8002f12:	6801      	ldr	r1, [r0, #0]
 8002f14:	2900      	cmp	r1, #0
 8002f16:	d0e7      	beq.n	8002ee8 <USBPD_PE_StateMachine_SRC+0x5bc>
 8002f18:	7c30      	ldrb	r0, [r6, #16]
 8002f1a:	4788      	blx	r1
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	f040 8252 	bne.w	80033c6 <USBPD_PE_StateMachine_SRC+0xa9a>
 8002f22:	200d      	movs	r0, #13
 8002f24:	e6f5      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002f26:	2100      	movs	r1, #0
 8002f28:	9100      	str	r1, [sp, #0]
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	2206      	movs	r2, #6
 8002f2e:	f000 fc09 	bl	8003744 <.text_21+0x4>
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d110      	bne.n	8002f58 <USBPD_PE_StateMachine_SRC+0x62c>
 8002f36:	2103      	movs	r1, #3
 8002f38:	f000 fbf4 	bl	8003724 <.text_18+0x2>
 8002f3c:	7c30      	ldrb	r0, [r6, #16]
 8002f3e:	2110      	movs	r1, #16
 8002f40:	f7fd fb09 	bl	8000556 <USBPD_PE_Notification>
 8002f44:	2000      	movs	r0, #0
 8002f46:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8002f48:	6970      	ldr	r0, [r6, #20]
 8002f4a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8002f4e:	2803      	cmp	r0, #3
 8002f50:	d102      	bne.n	8002f58 <USBPD_PE_StateMachine_SRC+0x62c>
 8002f52:	f24b 60b0 	movw	r0, #46768	@ 0xb6b0
 8002f56:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8002f58:	e642      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	9100      	str	r1, [sp, #0]
 8002f5e:	2397      	movs	r3, #151	@ 0x97
 8002f60:	2202      	movs	r2, #2
 8002f62:	f000 fbee 	bl	8003742 <.text_21+0x2>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d1f6      	bne.n	8002f58 <USBPD_PE_StateMachine_SRC+0x62c>
 8002f6a:	7c30      	ldrb	r0, [r6, #16]
 8002f6c:	7734      	strb	r4, [r6, #28]
 8002f6e:	2129      	movs	r1, #41	@ 0x29
 8002f70:	f7fd faf1 	bl	8000556 <USBPD_PE_Notification>
 8002f74:	f248 2026 	movw	r0, #33318	@ 0x8226
 8002f78:	83f0      	strh	r0, [r6, #30]
 8002f7a:	f240 2426 	movw	r4, #550	@ 0x226
 8002f7e:	e62f      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002f80:	8bf0      	ldrh	r0, [r6, #30]
 8002f82:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002f86:	d1fa      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 8002f88:	7c30      	ldrb	r0, [r6, #16]
 8002f8a:	212a      	movs	r1, #42	@ 0x2a
 8002f8c:	f7fd fae3 	bl	8000556 <USBPD_PE_Notification>
 8002f90:	2000      	movs	r0, #0
 8002f92:	9000      	str	r0, [sp, #0]
 8002f94:	2303      	movs	r3, #3
 8002f96:	2206      	movs	r2, #6
 8002f98:	f000 fbd3 	bl	8003742 <.text_21+0x2>
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	d1ee      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 8002fa0:	212e      	movs	r1, #46	@ 0x2e
 8002fa2:	e6e5      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	9000      	str	r0, [sp, #0]
 8002fa8:	2307      	movs	r3, #7
 8002faa:	2203      	movs	r2, #3
 8002fac:	e77a      	b.n	8002ea4 <USBPD_PE_StateMachine_SRC+0x578>
 8002fae:	2000      	movs	r0, #0
 8002fb0:	9000      	str	r0, [sp, #0]
 8002fb2:	2312      	movs	r3, #18
 8002fb4:	7879      	ldrb	r1, [r7, #1]
 8002fb6:	220d      	movs	r2, #13
 8002fb8:	f000 fbc4 	bl	8003744 <.text_21+0x4>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d1de      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 8002fc0:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8002fc4:	241b      	movs	r4, #27
 8002fc6:	2130      	movs	r1, #48	@ 0x30
 8002fc8:	e6d2      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 8002fca:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002fce:	2914      	cmp	r1, #20
 8002fd0:	d019      	beq.n	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002fd2:	783a      	ldrb	r2, [r7, #0]
 8002fd4:	7879      	ldrb	r1, [r7, #1]
 8002fd6:	428a      	cmp	r2, r1
 8002fd8:	bf02      	ittt	eq
 8002fda:	88ba      	ldrheq	r2, [r7, #4]
 8002fdc:	4010      	andeq	r0, r2
 8002fde:	2803      	cmpeq	r0, #3
 8002fe0:	d111      	bne.n	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002fe2:	7c30      	ldrb	r0, [r6, #16]
 8002fe4:	2131      	movs	r1, #49	@ 0x31
 8002fe6:	f7fd fab6 	bl	8000556 <USBPD_PE_Notification>
 8002fea:	7838      	ldrb	r0, [r7, #0]
 8002fec:	b910      	cbnz	r0, 8002ff4 <USBPD_PE_StateMachine_SRC+0x6c8>
 8002fee:	2107      	movs	r1, #7
 8002ff0:	7471      	strb	r1, [r6, #17]
 8002ff2:	e002      	b.n	8002ffa <USBPD_PE_StateMachine_SRC+0x6ce>
 8002ff4:	2003      	movs	r0, #3
 8002ff6:	7470      	strb	r0, [r6, #17]
 8002ff8:	2400      	movs	r4, #0
 8002ffa:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002ffe:	2814      	cmp	r0, #20
 8003000:	d001      	beq.n	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8003002:	f000 fb97 	bl	8003734 <.text_20>
 8003006:	8bf0      	ldrh	r0, [r6, #30]
 8003008:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800300c:	d1b7      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 800300e:	e1da      	b.n	80033c6 <USBPD_PE_StateMachine_SRC+0xa9a>
 8003010:	6870      	ldr	r0, [r6, #4]
 8003012:	7801      	ldrb	r1, [r0, #0]
 8003014:	f001 0103 	and.w	r1, r1, #3
 8003018:	2902      	cmp	r1, #2
 800301a:	bf04      	itt	eq
 800301c:	7c30      	ldrbeq	r0, [r6, #16]
 800301e:	f002 f806 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8003022:	2105      	movs	r1, #5
 8003024:	4630      	mov	r0, r6
 8003026:	f7fd fc65 	bl	80008f4 <PE_Send_RESET>
 800302a:	f000 fb5e 	bl	80036ea <.text_13>
 800302e:	2100      	movs	r1, #0
 8003030:	78a8      	ldrb	r0, [r5, #2]
 8003032:	1c40      	adds	r0, r0, #1
 8003034:	70a8      	strb	r0, [r5, #2]
 8003036:	2202      	movs	r2, #2
 8003038:	6970      	ldr	r0, [r6, #20]
 800303a:	f420 60c0 	bic.w	r0, r0, #1536	@ 0x600
 800303e:	6170      	str	r0, [r6, #20]
 8003040:	70b9      	strb	r1, [r7, #2]
 8003042:	f420 70e0 	bic.w	r0, r0, #448	@ 0x1c0
 8003046:	6170      	str	r0, [r6, #20]
 8003048:	f000 fb70 	bl	800372c <.text_19+0x2>
 800304c:	2169      	movs	r1, #105	@ 0x69
 800304e:	4640      	mov	r0, r8
 8003050:	f7fd fa81 	bl	8000556 <USBPD_PE_Notification>
 8003054:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8003058:	241b      	movs	r4, #27
 800305a:	2015      	movs	r0, #21
 800305c:	e659      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 800305e:	6870      	ldr	r0, [r6, #4]
 8003060:	7801      	ldrb	r1, [r0, #0]
 8003062:	f001 0103 	and.w	r1, r1, #3
 8003066:	2902      	cmp	r1, #2
 8003068:	bf04      	itt	eq
 800306a:	7c30      	ldrbeq	r0, [r6, #16]
 800306c:	f001 ffdf 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8003070:	e7ec      	b.n	800304c <USBPD_PE_StateMachine_SRC+0x720>
 8003072:	8bf0      	ldrh	r0, [r6, #30]
 8003074:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003078:	d117      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 800307a:	78a9      	ldrb	r1, [r5, #2]
 800307c:	6970      	ldr	r0, [r6, #20]
 800307e:	2903      	cmp	r1, #3
 8003080:	d303      	bcc.n	800308a <USBPD_PE_StateMachine_SRC+0x75e>
 8003082:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8003086:	bb48      	cbnz	r0, 80030dc <USBPD_PE_StateMachine_SRC+0x7b0>
 8003088:	e02c      	b.n	80030e4 <USBPD_PE_StateMachine_SRC+0x7b8>
 800308a:	f248 218a 	movw	r1, #33418	@ 0x828a
 800308e:	83f1      	strh	r1, [r6, #30]
 8003090:	2217      	movs	r2, #23
 8003092:	7472      	strb	r2, [r6, #17]
 8003094:	2400      	movs	r4, #0
 8003096:	f3c0 2041 	ubfx	r0, r0, #9, #2
 800309a:	1e42      	subs	r2, r0, #1
 800309c:	4192      	sbcs	r2, r2
 800309e:	0fd2      	lsrs	r2, r2, #31
 80030a0:	f000 fb44 	bl	800372c <.text_19+0x2>
 80030a4:	2203      	movs	r2, #3
 80030a6:	f000 fb41 	bl	800372c <.text_19+0x2>
 80030aa:	e599      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 80030ac:	68b2      	ldr	r2, [r6, #8]
 80030ae:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80030b0:	2100      	movs	r1, #0
 80030b2:	4640      	mov	r0, r8
 80030b4:	4798      	blx	r3
 80030b6:	2801      	cmp	r0, #1
 80030b8:	d106      	bne.n	80030c8 <USBPD_PE_StateMachine_SRC+0x79c>
 80030ba:	f248 3020 	movw	r0, #33568	@ 0x8320
 80030be:	83f0      	strh	r0, [r6, #30]
 80030c0:	2113      	movs	r1, #19
 80030c2:	f44f 7448 	mov.w	r4, #800	@ 0x320
 80030c6:	7471      	strb	r1, [r6, #17]
 80030c8:	8bf0      	ldrh	r0, [r6, #30]
 80030ca:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80030ce:	d1ec      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 80030d0:	f000 fb2b 	bl	800372a <.text_19>
 80030d4:	6970      	ldr	r0, [r6, #20]
 80030d6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80030da:	b118      	cbz	r0, 80030e4 <USBPD_PE_StateMachine_SRC+0x7b8>
 80030dc:	68b1      	ldr	r1, [r6, #8]
 80030de:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d11f      	bne.n	8003124 <USBPD_PE_StateMachine_SRC+0x7f8>
 80030e4:	2100      	movs	r1, #0
 80030e6:	e5fe      	b.n	8002ce6 <USBPD_PE_StateMachine_SRC+0x3ba>
 80030e8:	8bf0      	ldrh	r0, [r6, #30]
 80030ea:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80030ee:	d1dc      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 80030f0:	2204      	movs	r2, #4
 80030f2:	f000 fb1b 	bl	800372c <.text_19+0x2>
 80030f6:	68b2      	ldr	r2, [r6, #8]
 80030f8:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80030fa:	2101      	movs	r1, #1
 80030fc:	4640      	mov	r0, r8
 80030fe:	4798      	blx	r3
 8003100:	2801      	cmp	r0, #1
 8003102:	d10a      	bne.n	800311a <USBPD_PE_StateMachine_SRC+0x7ee>
 8003104:	4630      	mov	r0, r6
 8003106:	f7fd fcf4 	bl	8000af2 <PE_Reset_HardReset>
 800310a:	2168      	movs	r1, #104	@ 0x68
 800310c:	4640      	mov	r0, r8
 800310e:	f7fd fa22 	bl	8000556 <USBPD_PE_Notification>
 8003112:	2205      	movs	r2, #5
 8003114:	f000 fb0a 	bl	800372c <.text_19+0x2>
 8003118:	e67c      	b.n	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 800311a:	f000 fb06 	bl	800372a <.text_19>
 800311e:	68b1      	ldr	r1, [r6, #8]
 8003120:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8003122:	2800      	cmp	r0, #0
 8003124:	f040 8280 	bne.w	8003628 <USBPD_PE_StateMachine_SRC+0xcfc>
 8003128:	2100      	movs	r1, #0
 800312a:	7471      	strb	r1, [r6, #17]
 800312c:	e603      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 800312e:	2001      	movs	r0, #1
 8003130:	9000      	str	r0, [sp, #0]
 8003132:	231b      	movs	r3, #27
 8003134:	2207      	movs	r2, #7
 8003136:	f000 fb04 	bl	8003742 <.text_21+0x2>
 800313a:	2800      	cmp	r0, #0
 800313c:	d1b5      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 800313e:	2006      	movs	r0, #6
 8003140:	f000 faa9 	bl	8003696 <.text_6>
 8003144:	241b      	movs	r4, #27
 8003146:	210b      	movs	r1, #11
 8003148:	e612      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 800314a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800314e:	2811      	cmp	r0, #17
 8003150:	d131      	bne.n	80031b6 <USBPD_PE_StateMachine_SRC+0x88a>
 8003152:	88b9      	ldrh	r1, [r7, #4]
 8003154:	0bc8      	lsrs	r0, r1, #15
 8003156:	d11b      	bne.n	8003190 <USBPD_PE_StateMachine_SRC+0x864>
 8003158:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800315c:	b1c0      	cbz	r0, 8003190 <USBPD_PE_StateMachine_SRC+0x864>
 800315e:	4608      	mov	r0, r1
 8003160:	f000 011f 	and.w	r1, r0, #31
 8003164:	2901      	cmp	r1, #1
 8003166:	d113      	bne.n	8003190 <USBPD_PE_StateMachine_SRC+0x864>
 8003168:	68b4      	ldr	r4, [r6, #8]
 800316a:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800316e:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8003172:	68b8      	ldr	r0, [r7, #8]
 8003174:	1c82      	adds	r2, r0, #2
 8003176:	7c30      	ldrb	r0, [r6, #16]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	2104      	movs	r1, #4
 800317c:	47e0      	blx	ip
 800317e:	f000 fa92 	bl	80036a6 <.text_8>
 8003182:	d001      	beq.n	8003188 <USBPD_PE_StateMachine_SRC+0x85c>
 8003184:	f000 fad6 	bl	8003734 <.text_20>
 8003188:	7c30      	ldrb	r0, [r6, #16]
 800318a:	210d      	movs	r1, #13
 800318c:	f7fd f9e3 	bl	8000556 <USBPD_PE_Notification>
 8003190:	88b8      	ldrh	r0, [r7, #4]
 8003192:	f410 4f70 	tst.w	r0, #61440	@ 0xf000
 8003196:	d10e      	bne.n	80031b6 <USBPD_PE_StateMachine_SRC+0x88a>
 8003198:	f000 001f 	and.w	r0, r0, #31
 800319c:	2804      	cmp	r0, #4
 800319e:	bf18      	it	ne
 80031a0:	2810      	cmpne	r0, #16
 80031a2:	d108      	bne.n	80031b6 <USBPD_PE_StateMachine_SRC+0x88a>
 80031a4:	f000 fa7f 	bl	80036a6 <.text_8>
 80031a8:	d001      	beq.n	80031ae <USBPD_PE_StateMachine_SRC+0x882>
 80031aa:	f000 fac3 	bl	8003734 <.text_20>
 80031ae:	7c30      	ldrb	r0, [r6, #16]
 80031b0:	210e      	movs	r1, #14
 80031b2:	f7fd f9d0 	bl	8000556 <USBPD_PE_Notification>
 80031b6:	8bf0      	ldrh	r0, [r6, #30]
 80031b8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80031bc:	d11a      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 80031be:	2103      	movs	r1, #3
 80031c0:	e5b8      	b.n	8002d34 <USBPD_PE_StateMachine_SRC+0x408>
 80031c2:	68b0      	ldr	r0, [r6, #8]
 80031c4:	6881      	ldr	r1, [r0, #8]
 80031c6:	b1d1      	cbz	r1, 80031fe <USBPD_PE_StateMachine_SRC+0x8d2>
 80031c8:	7c30      	ldrb	r0, [r6, #16]
 80031ca:	4788      	blx	r1
 80031cc:	280a      	cmp	r0, #10
 80031ce:	d002      	beq.n	80031d6 <USBPD_PE_StateMachine_SRC+0x8aa>
 80031d0:	280d      	cmp	r0, #13
 80031d2:	d010      	beq.n	80031f6 <USBPD_PE_StateMachine_SRC+0x8ca>
 80031d4:	e013      	b.n	80031fe <USBPD_PE_StateMachine_SRC+0x8d2>
 80031d6:	f8a6 b01e 	strh.w	fp, [r6, #30]
 80031da:	2000      	movs	r0, #0
 80031dc:	9000      	str	r0, [sp, #0]
 80031de:	2324      	movs	r3, #36	@ 0x24
 80031e0:	f000 faae 	bl	8003740 <.text_21>
 80031e4:	241e      	movs	r4, #30
 80031e6:	2800      	cmp	r0, #0
 80031e8:	d104      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 80031ea:	f000 fa4f 	bl	800368c <.text_5>
 80031ee:	2201      	movs	r2, #1
 80031f0:	2101      	movs	r1, #1
 80031f2:	47e0      	blx	ip
 80031f4:	e4f4      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 80031f6:	2000      	movs	r0, #0
 80031f8:	9000      	str	r0, [sp, #0]
 80031fa:	2303      	movs	r3, #3
 80031fc:	e651      	b.n	8002ea2 <USBPD_PE_StateMachine_SRC+0x576>
 80031fe:	2000      	movs	r0, #0
 8003200:	9000      	str	r0, [sp, #0]
 8003202:	2303      	movs	r3, #3
 8003204:	e67c      	b.n	8002f00 <USBPD_PE_StateMachine_SRC+0x5d4>
 8003206:	8bf0      	ldrh	r0, [r6, #30]
 8003208:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800320c:	d1f2      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 800320e:	f000 fa88 	bl	8003722 <.text_18>
 8003212:	f000 fa5e 	bl	80036d2 <.text_11>
 8003216:	2206      	movs	r2, #6
 8003218:	f000 fa73 	bl	8003702 <.text_15>
 800321c:	f000 fa77 	bl	800370e <.text_16>
 8003220:	7c30      	ldrb	r0, [r6, #16]
 8003222:	2100      	movs	r1, #0
 8003224:	f001 fed3 	bl	8004fce <USBPD_PRL_SetHeaderPowerRole>
 8003228:	2000      	movs	r0, #0
 800322a:	9000      	str	r0, [sp, #0]
 800322c:	2325      	movs	r3, #37	@ 0x25
 800322e:	2206      	movs	r2, #6
 8003230:	f000 fa87 	bl	8003742 <.text_21+0x2>
 8003234:	2800      	cmp	r0, #0
 8003236:	d1dd      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 8003238:	e0a5      	b.n	8003386 <USBPD_PE_StateMachine_SRC+0xa5a>
 800323a:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800323e:	2911      	cmp	r1, #17
 8003240:	bf02      	ittt	eq
 8003242:	88b9      	ldrheq	r1, [r7, #4]
 8003244:	4008      	andeq	r0, r1
 8003246:	2806      	cmpeq	r0, #6
 8003248:	d105      	bne.n	8003256 <USBPD_PE_StateMachine_SRC+0x92a>
 800324a:	f000 fa28 	bl	800369e <.text_7>
 800324e:	f000 fa74 	bl	800373a <.text_20+0x6>
 8003252:	2026      	movs	r0, #38	@ 0x26
 8003254:	7470      	strb	r0, [r6, #17]
 8003256:	8bf0      	ldrh	r0, [r6, #30]
 8003258:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800325c:	d1ca      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 800325e:	68b3      	ldr	r3, [r6, #8]
 8003260:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003262:	2800      	cmp	r0, #0
 8003264:	f040 81e0 	bne.w	8003628 <USBPD_PE_StateMachine_SRC+0xcfc>
 8003268:	7c30      	ldrb	r0, [r6, #16]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	220a      	movs	r2, #10
 800326e:	2101      	movs	r1, #1
 8003270:	4798      	blx	r3
 8003272:	e0a8      	b.n	80033c6 <USBPD_PE_StateMachine_SRC+0xa9a>
 8003274:	2100      	movs	r1, #0
 8003276:	4630      	mov	r0, r6
 8003278:	f7fd fb5c 	bl	8000934 <PE_ChangePowerRole>
 800327c:	f000 fa02 	bl	8003684 <.text_4>
 8003280:	220d      	movs	r2, #13
 8003282:	2100      	movs	r1, #0
 8003284:	47a0      	blx	r4
 8003286:	7c30      	ldrb	r0, [r6, #16]
 8003288:	2114      	movs	r1, #20
 800328a:	f7fd f964 	bl	8000556 <USBPD_PE_Notification>
 800328e:	f000 f9f9 	bl	8003684 <.text_4>
 8003292:	220e      	movs	r2, #14
 8003294:	2100      	movs	r1, #0
 8003296:	47a0      	blx	r4
 8003298:	6870      	ldr	r0, [r6, #4]
 800329a:	7801      	ldrb	r1, [r0, #0]
 800329c:	f001 0103 	and.w	r1, r1, #3
 80032a0:	2901      	cmp	r1, #1
 80032a2:	bf04      	itt	eq
 80032a4:	4640      	moveq	r0, r8
 80032a6:	f001 fed3 	bleq	8005050 <USBPD_PRL_SOPCapability>
 80032aa:	4630      	mov	r0, r6
 80032ac:	f7fd fc96 	bl	8000bdc <PE_Reset_StateMachine>
 80032b0:	e541      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 80032b2:	2001      	movs	r0, #1
 80032b4:	9000      	str	r0, [sp, #0]
 80032b6:	231f      	movs	r3, #31
 80032b8:	220a      	movs	r2, #10
 80032ba:	f000 fa42 	bl	8003742 <.text_21+0x2>
 80032be:	2800      	cmp	r0, #0
 80032c0:	d198      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 80032c2:	2008      	movs	r0, #8
 80032c4:	f000 f9e7 	bl	8003696 <.text_6>
 80032c8:	2202      	movs	r2, #2
 80032ca:	f000 fa1a 	bl	8003702 <.text_15>
 80032ce:	241b      	movs	r4, #27
 80032d0:	2139      	movs	r1, #57	@ 0x39
 80032d2:	e54d      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 80032d4:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80032d8:	2811      	cmp	r0, #17
 80032da:	bf04      	itt	eq
 80032dc:	88b8      	ldrheq	r0, [r7, #4]
 80032de:	f410 4f70 	tsteq.w	r0, #61440	@ 0xf000
 80032e2:	d133      	bne.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 80032e4:	f000 001f 	and.w	r0, r0, #31
 80032e8:	2803      	cmp	r0, #3
 80032ea:	d006      	beq.n	80032fa <USBPD_PE_StateMachine_SRC+0x9ce>
 80032ec:	2804      	cmp	r0, #4
 80032ee:	d011      	beq.n	8003314 <USBPD_PE_StateMachine_SRC+0x9e8>
 80032f0:	280c      	cmp	r0, #12
 80032f2:	d008      	beq.n	8003306 <USBPD_PE_StateMachine_SRC+0x9da>
 80032f4:	2810      	cmp	r0, #16
 80032f6:	d01a      	beq.n	800332e <USBPD_PE_StateMachine_SRC+0xa02>
 80032f8:	e028      	b.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 80032fa:	7c30      	ldrb	r0, [r6, #16]
 80032fc:	213a      	movs	r1, #58	@ 0x3a
 80032fe:	f7fd f92a 	bl	8000556 <USBPD_PE_Notification>
 8003302:	2020      	movs	r0, #32
 8003304:	e00c      	b.n	8003320 <USBPD_PE_StateMachine_SRC+0x9f4>
 8003306:	f000 f9bd 	bl	8003684 <.text_4>
 800330a:	2205      	movs	r2, #5
 800330c:	2101      	movs	r1, #1
 800330e:	47a0      	blx	r4
 8003310:	213b      	movs	r1, #59	@ 0x3b
 8003312:	e002      	b.n	800331a <USBPD_PE_StateMachine_SRC+0x9ee>
 8003314:	f000 f9ef 	bl	80036f6 <.text_14>
 8003318:	2116      	movs	r1, #22
 800331a:	f000 f9ff 	bl	800371c <.text_17>
 800331e:	2003      	movs	r0, #3
 8003320:	7470      	strb	r0, [r6, #17]
 8003322:	2400      	movs	r4, #0
 8003324:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003328:	2814      	cmp	r0, #20
 800332a:	d10d      	bne.n	8003348 <USBPD_PE_StateMachine_SRC+0xa1c>
 800332c:	e00e      	b.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 800332e:	f000 f9e2 	bl	80036f6 <.text_14>
 8003332:	7c30      	ldrb	r0, [r6, #16]
 8003334:	2117      	movs	r1, #23
 8003336:	f7fd f90e 	bl	8000556 <USBPD_PE_Notification>
 800333a:	2003      	movs	r0, #3
 800333c:	7470      	strb	r0, [r6, #17]
 800333e:	2400      	movs	r4, #0
 8003340:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003344:	2814      	cmp	r0, #20
 8003346:	d001      	beq.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 8003348:	f000 f9f4 	bl	8003734 <.text_20>
 800334c:	8bf0      	ldrh	r0, [r6, #30]
 800334e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003352:	d122      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003354:	e733      	b.n	80031be <USBPD_PE_StateMachine_SRC+0x892>
 8003356:	f000 f9bc 	bl	80036d2 <.text_11>
 800335a:	7f30      	ldrb	r0, [r6, #28]
 800335c:	2809      	cmp	r0, #9
 800335e:	d004      	beq.n	800336a <USBPD_PE_StateMachine_SRC+0xa3e>
 8003360:	f000 f994 	bl	800368c <.text_5>
 8003364:	2206      	movs	r2, #6
 8003366:	2101      	movs	r1, #1
 8003368:	47e0      	blx	ip
 800336a:	f000 f9d0 	bl	800370e <.text_16>
 800336e:	7c30      	ldrb	r0, [r6, #16]
 8003370:	2100      	movs	r1, #0
 8003372:	f001 fe2c 	bl	8004fce <USBPD_PRL_SetHeaderPowerRole>
 8003376:	2000      	movs	r0, #0
 8003378:	9000      	str	r0, [sp, #0]
 800337a:	2321      	movs	r3, #33	@ 0x21
 800337c:	2206      	movs	r2, #6
 800337e:	f000 f9e0 	bl	8003742 <.text_21+0x2>
 8003382:	2800      	cmp	r0, #0
 8003384:	d109      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003386:	f000 f97d 	bl	8003684 <.text_4>
 800338a:	2208      	movs	r2, #8
 800338c:	2101      	movs	r1, #1
 800338e:	47a0      	blx	r4
 8003390:	f248 10d6 	movw	r0, #33238	@ 0x81d6
 8003394:	83f0      	strh	r0, [r6, #30]
 8003396:	f44f 74eb 	mov.w	r4, #470	@ 0x1d6
 800339a:	e421      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 800339c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80033a0:	2911      	cmp	r1, #17
 80033a2:	bf02      	ittt	eq
 80033a4:	88b9      	ldrheq	r1, [r7, #4]
 80033a6:	4008      	andeq	r0, r1
 80033a8:	2806      	cmpeq	r0, #6
 80033aa:	d103      	bne.n	80033b4 <USBPD_PE_StateMachine_SRC+0xa88>
 80033ac:	2026      	movs	r0, #38	@ 0x26
 80033ae:	7470      	strb	r0, [r6, #17]
 80033b0:	f000 f9c0 	bl	8003734 <.text_20>
 80033b4:	8bf0      	ldrh	r0, [r6, #30]
 80033b6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80033ba:	d1ee      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 80033bc:	68b1      	ldr	r1, [r6, #8]
 80033be:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80033c0:	2800      	cmp	r0, #0
 80033c2:	f040 8131 	bne.w	8003628 <USBPD_PE_StateMachine_SRC+0xcfc>
 80033c6:	210f      	movs	r1, #15
 80033c8:	e4b4      	b.n	8002d34 <USBPD_PE_StateMachine_SRC+0x408>
 80033ca:	8bf0      	ldrh	r0, [r6, #30]
 80033cc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80033d0:	d1e3      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 80033d2:	f000 f95b 	bl	800368c <.text_5>
 80033d6:	220e      	movs	r2, #14
 80033d8:	2101      	movs	r1, #1
 80033da:	47e0      	blx	ip
 80033dc:	6870      	ldr	r0, [r6, #4]
 80033de:	7801      	ldrb	r1, [r0, #0]
 80033e0:	f001 0103 	and.w	r1, r1, #3
 80033e4:	2902      	cmp	r1, #2
 80033e6:	bf04      	itt	eq
 80033e8:	7c30      	ldrbeq	r0, [r6, #16]
 80033ea:	f001 fe20 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 80033ee:	4630      	mov	r0, r6
 80033f0:	f7fd fbf4 	bl	8000bdc <PE_Reset_StateMachine>
 80033f4:	2115      	movs	r1, #21
 80033f6:	e4bb      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 80033f8:	2903      	cmp	r1, #3
 80033fa:	d10f      	bne.n	800341c <USBPD_PE_StateMachine_SRC+0xaf0>
 80033fc:	2000      	movs	r0, #0
 80033fe:	6871      	ldr	r1, [r6, #4]
 8003400:	7730      	strb	r0, [r6, #28]
 8003402:	7808      	ldrb	r0, [r1, #0]
 8003404:	f000 0003 	and.w	r0, r0, #3
 8003408:	2802      	cmp	r0, #2
 800340a:	bf04      	itt	eq
 800340c:	7c30      	ldrbeq	r0, [r6, #16]
 800340e:	f001 fe0e 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8003412:	2004      	movs	r0, #4
 8003414:	7470      	strb	r0, [r6, #17]
 8003416:	2167      	movs	r1, #103	@ 0x67
 8003418:	f000 f980 	bl	800371c <.text_17>
 800341c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003420:	2814      	cmp	r0, #20
 8003422:	d009      	beq.n	8003438 <USBPD_PE_StateMachine_SRC+0xb0c>
 8003424:	4630      	mov	r0, r6
 8003426:	f7fe fa8d 	bl	8001944 <PE_ManageRXEvent>
 800342a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800342e:	2814      	cmp	r0, #20
 8003430:	d0b3      	beq.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003432:	f000 f97f 	bl	8003734 <.text_20>
 8003436:	e7b0      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003438:	6970      	ldr	r0, [r6, #20]
 800343a:	0cc0      	lsrs	r0, r0, #19
 800343c:	d027      	beq.n	800348e <USBPD_PE_StateMachine_SRC+0xb62>
 800343e:	8c30      	ldrh	r0, [r6, #32]
 8003440:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003444:	d10e      	bne.n	8003464 <USBPD_PE_StateMachine_SRC+0xb38>
 8003446:	210f      	movs	r1, #15
 8003448:	7471      	strb	r1, [r6, #17]
 800344a:	2000      	movs	r0, #0
 800344c:	9000      	str	r0, [sp, #0]
 800344e:	7c31      	ldrb	r1, [r6, #16]
 8003450:	f8d9 4000 	ldr.w	r4, [r9]
 8003454:	2300      	movs	r3, #0
 8003456:	2270      	movs	r2, #112	@ 0x70
 8003458:	2009      	movs	r0, #9
 800345a:	47a0      	blx	r4
 800345c:	78a8      	ldrb	r0, [r5, #2]
 800345e:	1c40      	adds	r0, r0, #1
 8003460:	70a8      	strb	r0, [r5, #2]
 8003462:	e468      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 8003464:	88b9      	ldrh	r1, [r7, #4]
 8003466:	6972      	ldr	r2, [r6, #20]
 8003468:	f3c1 2142 	ubfx	r1, r1, #9, #3
 800346c:	2033      	movs	r0, #51	@ 0x33
 800346e:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 8003472:	fb11 f100 	smulbb	r1, r1, r0
 8003476:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800347a:	8431      	strh	r1, [r6, #32]
 800347c:	88b9      	ldrh	r1, [r7, #4]
 800347e:	6972      	ldr	r2, [r6, #20]
 8003480:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8003484:	eb01 44d2 	add.w	r4, r1, r2, lsr #19
 8003488:	4344      	muls	r4, r0
 800348a:	b2a4      	uxth	r4, r4
 800348c:	e785      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 800348e:	8cb0      	ldrh	r0, [r6, #36]	@ 0x24
 8003490:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003494:	bf08      	it	eq
 8003496:	210f      	moveq	r1, #15
 8003498:	d01b      	beq.n	80034d2 <USBPD_PE_StateMachine_SRC+0xba6>
 800349a:	7c30      	ldrb	r0, [r6, #16]
 800349c:	f7fd faab 	bl	80009f6 <PE_PRL_Control_RxEvent>
 80034a0:	b968      	cbnz	r0, 80034be <USBPD_PE_StateMachine_SRC+0xb92>
 80034a2:	78b8      	ldrb	r0, [r7, #2]
 80034a4:	b158      	cbz	r0, 80034be <USBPD_PE_StateMachine_SRC+0xb92>
 80034a6:	78f9      	ldrb	r1, [r7, #3]
 80034a8:	7079      	strb	r1, [r7, #1]
 80034aa:	7470      	strb	r0, [r6, #17]
 80034ac:	2000      	movs	r0, #0
 80034ae:	70b8      	strb	r0, [r7, #2]
 80034b0:	6970      	ldr	r0, [r6, #20]
 80034b2:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 80034b4:	62f1      	str	r1, [r6, #44]	@ 0x2c
 80034b6:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 80034ba:	6170      	str	r0, [r6, #20]
 80034bc:	e43b      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 80034be:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
 80034c0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80034c4:	d106      	bne.n	80034d4 <USBPD_PE_StateMachine_SRC+0xba8>
 80034c6:	2100      	movs	r1, #0
 80034c8:	8471      	strh	r1, [r6, #34]	@ 0x22
 80034ca:	2105      	movs	r1, #5
 80034cc:	7928      	ldrb	r0, [r5, #4]
 80034ce:	1c40      	adds	r0, r0, #1
 80034d0:	7128      	strb	r0, [r5, #4]
 80034d2:	e42f      	b.n	8002d34 <USBPD_PE_StateMachine_SRC+0x408>
 80034d4:	4630      	mov	r0, r6
 80034d6:	f7fd ff3f 	bl	8001358 <PE_CalculateMinTiming>
 80034da:	e425      	b.n	8002d28 <USBPD_PE_StateMachine_SRC+0x3fc>
 80034dc:	2000      	movs	r0, #0
 80034de:	2103      	movs	r1, #3
 80034e0:	2201      	movs	r2, #1
 80034e2:	9002      	str	r0, [sp, #8]
 80034e4:	9101      	str	r1, [sp, #4]
 80034e6:	9200      	str	r2, [sp, #0]
 80034e8:	f106 032c 	add.w	r3, r6, #44	@ 0x2c
 80034ec:	2206      	movs	r2, #6
 80034ee:	2100      	movs	r1, #0
 80034f0:	4630      	mov	r0, r6
 80034f2:	f7fd ffe6 	bl	80014c2 <PE_Send_DataMessage>
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d13b      	bne.n	8003572 <USBPD_PE_StateMachine_SRC+0xc46>
 80034fa:	215d      	movs	r1, #93	@ 0x5d
 80034fc:	e438      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 80034fe:	2000      	movs	r0, #0
 8003500:	9004      	str	r0, [sp, #16]
 8003502:	ab04      	add	r3, sp, #16
 8003504:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8003508:	f8dc 7014 	ldr.w	r7, [ip, #20]
 800350c:	aa05      	add	r2, sp, #20
 800350e:	210a      	movs	r1, #10
 8003510:	4640      	mov	r0, r8
 8003512:	47b8      	blx	r7
 8003514:	9804      	ldr	r0, [sp, #16]
 8003516:	2104      	movs	r1, #4
 8003518:	f7fd ff46 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 800351c:	b9f8      	cbnz	r0, 800355e <USBPD_PE_StateMachine_SRC+0xc32>
 800351e:	71e8      	strb	r0, [r5, #7]
 8003520:	2100      	movs	r1, #0
 8003522:	7229      	strb	r1, [r5, #8]
 8003524:	7c30      	ldrb	r0, [r6, #16]
 8003526:	f7fd fc36 	bl	8000d96 <PE_Get_UnchunkedSupport>
 800352a:	b918      	cbnz	r0, 8003534 <USBPD_PE_StateMachine_SRC+0xc08>
 800352c:	7a28      	ldrb	r0, [r5, #8]
 800352e:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8003532:	7228      	strb	r0, [r5, #8]
 8003534:	a905      	add	r1, sp, #20
 8003536:	9a04      	ldr	r2, [sp, #16]
 8003538:	f206 2067 	addw	r0, r6, #615	@ 0x267
 800353c:	f013 fe87 	bl	801724e <__aeabi_memcpy>
 8003540:	2000      	movs	r0, #0
 8003542:	2103      	movs	r1, #3
 8003544:	2208      	movs	r2, #8
 8003546:	9002      	str	r0, [sp, #8]
 8003548:	9101      	str	r1, [sp, #4]
 800354a:	9200      	str	r2, [sp, #0]
 800354c:	f206 2363 	addw	r3, r6, #611	@ 0x263
 8003550:	220c      	movs	r2, #12
 8003552:	2100      	movs	r1, #0
 8003554:	4630      	mov	r0, r6
 8003556:	f7fe f8d3 	bl	8001700 <PE_Send_ExtendedMessage>
 800355a:	214c      	movs	r1, #76	@ 0x4c
 800355c:	e7ce      	b.n	80034fc <USBPD_PE_StateMachine_SRC+0xbd0>
 800355e:	2001      	movs	r0, #1
 8003560:	e57c      	b.n	800305c <USBPD_PE_StateMachine_SRC+0x730>
 8003562:	2101      	movs	r1, #1
 8003564:	9100      	str	r1, [sp, #0]
 8003566:	2339      	movs	r3, #57	@ 0x39
 8003568:	782a      	ldrb	r2, [r5, #0]
 800356a:	78f9      	ldrb	r1, [r7, #3]
 800356c:	f000 f8ea 	bl	8003744 <.text_21+0x4>
 8003570:	2800      	cmp	r0, #0
 8003572:	f47f ab35 	bne.w	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8003576:	7868      	ldrb	r0, [r5, #1]
 8003578:	f000 f88d 	bl	8003696 <.text_6>
 800357c:	241b      	movs	r4, #27
 800357e:	2144      	movs	r1, #68	@ 0x44
 8003580:	e7bc      	b.n	80034fc <USBPD_PE_StateMachine_SRC+0xbd0>
 8003582:	8bf0      	ldrh	r0, [r6, #30]
 8003584:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003588:	bf04      	itt	eq
 800358a:	f89d 000c 	ldrbeq.w	r0, [sp, #12]
 800358e:	2814      	cmpeq	r0, #20
 8003590:	f43f ae15 	beq.w	80031be <USBPD_PE_StateMachine_SRC+0x892>
 8003594:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003598:	2814      	cmp	r0, #20
 800359a:	f43f ab21 	beq.w	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 800359e:	88b9      	ldrh	r1, [r7, #4]
 80035a0:	0bc8      	lsrs	r0, r1, #15
 80035a2:	d003      	beq.n	80035ac <USBPD_PE_StateMachine_SRC+0xc80>
 80035a4:	4630      	mov	r0, r6
 80035a6:	f7fd ffc9 	bl	800153c <PE_Check_ExtendedMessage>
 80035aa:	e73e      	b.n	800342a <USBPD_PE_StateMachine_SRC+0xafe>
 80035ac:	f001 011f 	and.w	r1, r1, #31
 80035b0:	2910      	cmp	r1, #16
 80035b2:	f47f ae04 	bne.w	80031be <USBPD_PE_StateMachine_SRC+0x892>
 80035b6:	f000 f872 	bl	800369e <.text_7>
 80035ba:	2400      	movs	r4, #0
 80035bc:	f000 f8bd 	bl	800373a <.text_20+0x6>
 80035c0:	2000      	movs	r0, #0
 80035c2:	83f0      	strh	r0, [r6, #30]
 80035c4:	2103      	movs	r1, #3
 80035c6:	7471      	strb	r1, [r6, #17]
 80035c8:	2159      	movs	r1, #89	@ 0x59
 80035ca:	e797      	b.n	80034fc <USBPD_PE_StateMachine_SRC+0xbd0>
 80035cc:	4630      	mov	r0, r6
 80035ce:	f7fe f8be 	bl	800174e <PE_SubStateMachine_ExtendedMessages>
 80035d2:	e003      	b.n	80035dc <USBPD_PE_StateMachine_SRC+0xcb0>
 80035d4:	a903      	add	r1, sp, #12
 80035d6:	4630      	mov	r0, r6
 80035d8:	f7fd fbee 	bl	8000db8 <PE_SubStateMachine_Generic>
 80035dc:	f7ff baff 	b.w	8002bde <USBPD_PE_StateMachine_SRC+0x2b2>
 80035e0:	a903      	add	r1, sp, #12
 80035e2:	4630      	mov	r0, r6
 80035e4:	f000 f9fd 	bl	80039e2 <PE_SubStateMachine_VconnSwap>
 80035e8:	4604      	mov	r4, r0
 80035ea:	f000 f878 	bl	80036de <.text_12>
 80035ee:	bf0e      	itee	eq
 80035f0:	2101      	moveq	r1, #1
 80035f2:	6830      	ldrne	r0, [r6, #0]
 80035f4:	6801      	ldrne	r1, [r0, #0]
 80035f6:	4640      	mov	r0, r8
 80035f8:	f001 fd2a 	bl	8005050 <USBPD_PRL_SOPCapability>
 80035fc:	e6cd      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 80035fe:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003602:	2911      	cmp	r1, #17
 8003604:	bf02      	ittt	eq
 8003606:	88b9      	ldrheq	r1, [r7, #4]
 8003608:	4008      	andeq	r0, r1
 800360a:	2813      	cmpeq	r0, #19
 800360c:	d108      	bne.n	8003620 <USBPD_PE_StateMachine_SRC+0xcf4>
 800360e:	f000 f846 	bl	800369e <.text_7>
 8003612:	f000 f892 	bl	800373a <.text_20+0x6>
 8003616:	2000      	movs	r0, #0
 8003618:	9000      	str	r0, [sp, #0]
 800361a:	2320      	movs	r3, #32
 800361c:	f000 f890 	bl	8003740 <.text_21>
 8003620:	8cf0      	ldrh	r0, [r6, #38]	@ 0x26
 8003622:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003626:	d1a4      	bne.n	8003572 <USBPD_PE_StateMachine_SRC+0xc46>
 8003628:	2192      	movs	r1, #146	@ 0x92
 800362a:	e752      	b.n	80034d2 <USBPD_PE_StateMachine_SRC+0xba6>
 800362c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003630:	4630      	mov	r0, r6
 8003632:	f001 faca 	bl	8004bca <PE_StateMachine_UVDM>
 8003636:	e6b0      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003638:	6970      	ldr	r0, [r6, #20]
 800363a:	f3c0 3040 	ubfx	r0, r0, #13, #1
 800363e:	b1b0      	cbz	r0, 800366e <USBPD_PE_StateMachine_SRC+0xd42>
 8003640:	6970      	ldr	r0, [r6, #20]
 8003642:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8003646:	b138      	cbz	r0, 8003658 <USBPD_PE_StateMachine_SRC+0xd2c>
 8003648:	7c30      	ldrb	r0, [r6, #16]
 800364a:	215b      	movs	r1, #91	@ 0x5b
 800364c:	f7fc ff83 	bl	8000556 <USBPD_PE_Notification>
 8003650:	6970      	ldr	r0, [r6, #20]
 8003652:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
 8003656:	6170      	str	r0, [r6, #20]
 8003658:	2003      	movs	r0, #3
 800365a:	7cb1      	ldrb	r1, [r6, #18]
 800365c:	7470      	strb	r0, [r6, #17]
 800365e:	2903      	cmp	r1, #3
 8003660:	d004      	beq.n	800366c <USBPD_PE_StateMachine_SRC+0xd40>
 8003662:	f000 f82e 	bl	80036c2 <.text_10>
 8003666:	2203      	movs	r2, #3
 8003668:	2004      	movs	r0, #4
 800366a:	47a0      	blx	r4
 800366c:	2401      	movs	r4, #1
 800366e:	6970      	ldr	r0, [r6, #20]
 8003670:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
 8003674:	2c00      	cmp	r4, #0
 8003676:	6170      	str	r0, [r6, #20]
 8003678:	f43f a9b8 	beq.w	80029ec <USBPD_PE_StateMachine_SRC+0xc0>
 800367c:	f7ff bad6 	b.w	8002c2c <USBPD_PE_StateMachine_SRC+0x300>

08003680 <.text_3>:
 8003680:	20000000 	.word	0x20000000

08003684 <.text_4>:
 8003684:	68b3      	ldr	r3, [r6, #8]
 8003686:	7c30      	ldrb	r0, [r6, #16]
 8003688:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800368a:	4770      	bx	lr

0800368c <.text_5>:
 800368c:	68b3      	ldr	r3, [r6, #8]
 800368e:	7c30      	ldrb	r0, [r6, #16]
 8003690:	f8d3 c024 	ldr.w	ip, [r3, #36]	@ 0x24
 8003694:	4770      	bx	lr

08003696 <.text_6>:
 8003696:	7730      	strb	r0, [r6, #28]
 8003698:	f8a6 a01e 	strh.w	sl, [r6, #30]
 800369c:	4770      	bx	lr

0800369e <.text_7>:
 800369e:	2014      	movs	r0, #20
 80036a0:	f88d 000c 	strb.w	r0, [sp, #12]
 80036a4:	4770      	bx	lr

080036a6 <.text_8>:
 80036a6:	2003      	movs	r0, #3
 80036a8:	7470      	strb	r0, [r6, #17]
 80036aa:	2400      	movs	r4, #0
 80036ac:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80036b0:	2814      	cmp	r0, #20
 80036b2:	4770      	bx	lr

080036b4 <.text_9>:
 80036b4:	9100      	str	r1, [sp, #0]
 80036b6:	2300      	movs	r3, #0
 80036b8:	7c31      	ldrb	r1, [r6, #16]
 80036ba:	f8d9 c000 	ldr.w	ip, [r9]
 80036be:	2004      	movs	r0, #4

080036c0 <__iar_annotation$$tailcall>:
 80036c0:	4760      	bx	ip

080036c2 <.text_10>:
 80036c2:	74b0      	strb	r0, [r6, #18]
 80036c4:	2100      	movs	r1, #0
 80036c6:	9100      	str	r1, [sp, #0]
 80036c8:	2300      	movs	r3, #0
 80036ca:	7c31      	ldrb	r1, [r6, #16]
 80036cc:	f8d9 4000 	ldr.w	r4, [r9]
 80036d0:	4770      	bx	lr

080036d2 <.text_11>:
 80036d2:	6870      	ldr	r0, [r6, #4]
 80036d4:	6801      	ldr	r1, [r0, #0]
 80036d6:	f041 0110 	orr.w	r1, r1, #16
 80036da:	6001      	str	r1, [r0, #0]
 80036dc:	4770      	bx	lr

080036de <.text_12>:
 80036de:	6870      	ldr	r0, [r6, #4]
 80036e0:	6801      	ldr	r1, [r0, #0]
 80036e2:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 80036e6:	2800      	cmp	r0, #0
 80036e8:	4770      	bx	lr

080036ea <.text_13>:
 80036ea:	6870      	ldr	r0, [r6, #4]
 80036ec:	6801      	ldr	r1, [r0, #0]
 80036ee:	f021 0110 	bic.w	r1, r1, #16
 80036f2:	6001      	str	r1, [r0, #0]
 80036f4:	4770      	bx	lr

080036f6 <.text_14>:
 80036f6:	68b3      	ldr	r3, [r6, #8]
 80036f8:	7c30      	ldrb	r0, [r6, #16]
 80036fa:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80036fc:	2204      	movs	r2, #4
 80036fe:	2101      	movs	r1, #1

08003700 <__iar_annotation$$tailcall>:
 8003700:	4720      	bx	r4

08003702 <.text_15>:
 8003702:	68b3      	ldr	r3, [r6, #8]
 8003704:	7c30      	ldrb	r0, [r6, #16]
 8003706:	f8d3 c024 	ldr.w	ip, [r3, #36]	@ 0x24
 800370a:	2101      	movs	r1, #1

0800370c <__iar_annotation$$tailcall>:
 800370c:	4760      	bx	ip

0800370e <.text_16>:
 800370e:	68b3      	ldr	r3, [r6, #8]
 8003710:	7c30      	ldrb	r0, [r6, #16]
 8003712:	f8d3 c024 	ldr.w	ip, [r3, #36]	@ 0x24
 8003716:	2207      	movs	r2, #7
 8003718:	2101      	movs	r1, #1

0800371a <__iar_annotation$$tailcall>:
 800371a:	4760      	bx	ip

0800371c <.text_17>:
 800371c:	7c30      	ldrb	r0, [r6, #16]
 800371e:	f7fc bf1a 	b.w	8000556 <USBPD_PE_Notification>

08003722 <.text_18>:
 8003722:	2104      	movs	r1, #4
 8003724:	4630      	mov	r0, r6
 8003726:	f7fd bdfd 	b.w	8001324 <PE_SetPowerNegotiation>

0800372a <.text_19>:
 800372a:	2206      	movs	r2, #6
 800372c:	2101      	movs	r1, #1
 800372e:	4630      	mov	r0, r6
 8003730:	f7fd bdf1 	b.w	8001316 <PE_CallHardResetCallback>

08003734 <.text_20>:
 8003734:	2114      	movs	r1, #20
 8003736:	f88d 100c 	strb.w	r1, [sp, #12]
 800373a:	4630      	mov	r0, r6
 800373c:	f7fd b936 	b.w	80009ac <PE_Clear_RxEvent>

08003740 <.text_21>:
 8003740:	2203      	movs	r2, #3
 8003742:	2100      	movs	r1, #0
 8003744:	4630      	mov	r0, r6
 8003746:	f7fd be8f 	b.w	8001468 <PE_Send_CtrlMessage>

0800374a <PE_Send_SRCCapabilities>:
 800374a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800374c:	4604      	mov	r4, r0
 800374e:	2000      	movs	r0, #0
 8003750:	9002      	str	r0, [sp, #8]
 8003752:	460d      	mov	r5, r1
 8003754:	68a6      	ldr	r6, [r4, #8]
 8003756:	7c20      	ldrb	r0, [r4, #16]
 8003758:	6977      	ldr	r7, [r6, #20]
 800375a:	ab02      	add	r3, sp, #8
 800375c:	f204 2265 	addw	r2, r4, #613	@ 0x265
 8003760:	2100      	movs	r1, #0
 8003762:	47b8      	blx	r7
 8003764:	9802      	ldr	r0, [sp, #8]
 8003766:	1c80      	adds	r0, r0, #2
 8003768:	9002      	str	r0, [sp, #8]
 800376a:	9802      	ldr	r0, [sp, #8]
 800376c:	2104      	movs	r1, #4
 800376e:	f7fd fe1b 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8003772:	b998      	cbnz	r0, 800379c <PE_Send_SRCCapabilities+0x52>
 8003774:	6860      	ldr	r0, [r4, #4]
 8003776:	6801      	ldr	r1, [r0, #0]
 8003778:	f3c1 3000 	ubfx	r0, r1, #12, #1
 800377c:	2800      	cmp	r0, #0
 800377e:	d00d      	beq.n	800379c <PE_Send_SRCCapabilities+0x52>
 8003780:	9802      	ldr	r0, [sp, #8]
 8003782:	9501      	str	r5, [sp, #4]
 8003784:	b280      	uxth	r0, r0
 8003786:	9000      	str	r0, [sp, #0]
 8003788:	f204 2363 	addw	r3, r4, #611	@ 0x263
 800378c:	7c20      	ldrb	r0, [r4, #16]
 800378e:	2201      	movs	r2, #1
 8003790:	2100      	movs	r1, #0
 8003792:	f001 fc5f 	bl	8005054 <USBPD_PRL_SendMessage>
 8003796:	2803      	cmp	r0, #3
 8003798:	d0e7      	beq.n	800376a <PE_Send_SRCCapabilities+0x20>
 800379a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800379c:	2010      	movs	r0, #16
 800379e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080037a0 <PE_StateMachine_VDMCable>:
 80037a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037a4:	b08c      	sub	sp, #48	@ 0x30
 80037a6:	2602      	movs	r6, #2
 80037a8:	4605      	mov	r5, r0
 80037aa:	4688      	mov	r8, r1
 80037ac:	7c68      	ldrb	r0, [r5, #17]
 80037ae:	2805      	cmp	r0, #5
 80037b0:	f505 7414 	add.w	r4, r5, #592	@ 0x250
 80037b4:	f248 072d 	movw	r7, #32813	@ 0x802d
 80037b8:	d002      	beq.n	80037c0 <PE_StateMachine_VDMCable+0x20>
 80037ba:	289a      	cmp	r0, #154	@ 0x9a
 80037bc:	d061      	beq.n	8003882 <PE_StateMachine_VDMCable+0xe2>
 80037be:	e0f1      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 80037c0:	686a      	ldr	r2, [r5, #4]
 80037c2:	7811      	ldrb	r1, [r2, #0]
 80037c4:	f001 0103 	and.w	r1, r1, #3
 80037c8:	4628      	mov	r0, r5
 80037ca:	f000 fa36 	bl	8003c3a <PE_ExtRevisionInteroperability_Cable>
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	0952      	lsrs	r2, r2, #5
 80037d2:	0152      	lsls	r2, r2, #5
 80037d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	6022      	str	r2, [r4, #0]
 80037de:	4623      	mov	r3, r4
 80037e0:	6868      	ldr	r0, [r5, #4]
 80037e2:	6801      	ldr	r1, [r0, #0]
 80037e4:	f649 003f 	movw	r0, #38975	@ 0x983f
 80037e8:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80037ec:	4002      	ands	r2, r0
 80037ee:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80037f2:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 80037f6:	6022      	str	r2, [r4, #0]
 80037f8:	6868      	ldr	r0, [r5, #4]
 80037fa:	6801      	ldr	r1, [r0, #0]
 80037fc:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8003800:	2800      	cmp	r0, #0
 8003802:	bf1d      	ittte	ne
 8003804:	6968      	ldrne	r0, [r5, #20]
 8003806:	0880      	lsrne	r0, r0, #2
 8003808:	f000 0001 	andne.w	r0, r0, #1
 800380c:	2002      	moveq	r0, #2
 800380e:	9002      	str	r0, [sp, #8]
 8003810:	2101      	movs	r1, #1
 8003812:	209a      	movs	r0, #154	@ 0x9a
 8003814:	9001      	str	r0, [sp, #4]
 8003816:	9100      	str	r1, [sp, #0]
 8003818:	220f      	movs	r2, #15
 800381a:	4628      	mov	r0, r5
 800381c:	f7fd fe51 	bl	80014c2 <PE_Send_DataMessage>
 8003820:	b950      	cbnz	r0, 8003838 <PE_StateMachine_VDMCable+0x98>
 8003822:	6968      	ldr	r0, [r5, #20]
 8003824:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8003828:	6168      	str	r0, [r5, #20]
 800382a:	2151      	movs	r1, #81	@ 0x51
 800382c:	7729      	strb	r1, [r5, #28]
 800382e:	f248 001e 	movw	r0, #32798	@ 0x801e
 8003832:	8468      	strh	r0, [r5, #34]	@ 0x22
 8003834:	261e      	movs	r6, #30
 8003836:	e0b5      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003838:	2809      	cmp	r0, #9
 800383a:	d0fc      	beq.n	8003836 <PE_StateMachine_VDMCable+0x96>
 800383c:	7ca0      	ldrb	r0, [r4, #18]
 800383e:	2815      	cmp	r0, #21
 8003840:	bf38      	it	cc
 8003842:	846f      	strhcc	r7, [r5, #34]	@ 0x22
 8003844:	d307      	bcc.n	8003856 <PE_StateMachine_VDMCable+0xb6>
 8003846:	68e8      	ldr	r0, [r5, #12]
 8003848:	6944      	ldr	r4, [r0, #20]
 800384a:	b124      	cbz	r4, 8003856 <PE_StateMachine_VDMCable+0xb6>
 800384c:	7c28      	ldrb	r0, [r5, #16]
 800384e:	2300      	movs	r3, #0
 8003850:	2205      	movs	r2, #5
 8003852:	2101      	movs	r1, #1
 8003854:	47a0      	blx	r4
 8003856:	f000 f8ae 	bl	80039b6 <.text_4>
 800385a:	f000 8080 	beq.w	800395e <PE_StateMachine_VDMCable+0x1be>
 800385e:	8be8      	ldrh	r0, [r5, #30]
 8003860:	0441      	lsls	r1, r0, #17
 8003862:	d00b      	beq.n	800387c <PE_StateMachine_VDMCable+0xdc>
 8003864:	2008      	movs	r0, #8
 8003866:	7468      	strb	r0, [r5, #17]
 8003868:	8be9      	ldrh	r1, [r5, #30]
 800386a:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800386e:	292d      	cmp	r1, #45	@ 0x2d
 8003870:	bf2e      	itee	cs
 8003872:	262d      	movcs	r6, #45	@ 0x2d
 8003874:	8bee      	ldrhcc	r6, [r5, #30]
 8003876:	f3c6 060e 	ubfxcc	r6, r6, #0, #15
 800387a:	e093      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 800387c:	2007      	movs	r0, #7
 800387e:	7468      	strb	r0, [r5, #17]
 8003880:	e090      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003882:	2001      	movs	r0, #1
 8003884:	f7fd f8c6 	bl	8000a14 <PE_Convert_SOPRxEvent>
 8003888:	f898 2000 	ldrb.w	r2, [r8]
 800388c:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 800388e:	4282      	cmp	r2, r0
 8003890:	d142      	bne.n	8003918 <PE_StateMachine_VDMCable+0x178>
 8003892:	0bc8      	lsrs	r0, r1, #15
 8003894:	d140      	bne.n	8003918 <PE_StateMachine_VDMCable+0x178>
 8003896:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800389a:	2800      	cmp	r0, #0
 800389c:	d03c      	beq.n	8003918 <PE_StateMachine_VDMCable+0x178>
 800389e:	f895 0034 	ldrb.w	r0, [r5, #52]	@ 0x34
 80038a2:	f000 001f 	and.w	r0, r0, #31
 80038a6:	280f      	cmp	r0, #15
 80038a8:	d136      	bne.n	8003918 <PE_StateMachine_VDMCable+0x178>
 80038aa:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80038ac:	7887      	ldrb	r7, [r0, #2]
 80038ae:	f007 011f 	and.w	r1, r7, #31
 80038b2:	2901      	cmp	r1, #1
 80038b4:	d12b      	bne.n	800390e <PE_StateMachine_VDMCable+0x16e>
 80038b6:	f3c7 1081 	ubfx	r0, r7, #6, #2
 80038ba:	b340      	cbz	r0, 800390e <PE_StateMachine_VDMCable+0x16e>
 80038bc:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80038be:	f3c0 1181 	ubfx	r1, r0, #6, #2
 80038c2:	4628      	mov	r0, r5
 80038c4:	f000 f9b9 	bl	8003c3a <PE_ExtRevisionInteroperability_Cable>
 80038c8:	68e9      	ldr	r1, [r5, #12]
 80038ca:	6948      	ldr	r0, [r1, #20]
 80038cc:	b1e8      	cbz	r0, 800390a <PE_StateMachine_VDMCable+0x16a>
 80038ce:	f3c7 1081 	ubfx	r0, r7, #6, #2
 80038d2:	2801      	cmp	r0, #1
 80038d4:	d119      	bne.n	800390a <PE_StateMachine_VDMCable+0x16a>
 80038d6:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80038d8:	1d81      	adds	r1, r0, #6
 80038da:	7c28      	ldrb	r0, [r5, #16]
 80038dc:	aa03      	add	r2, sp, #12
 80038de:	f001 fa25 	bl	8004d2c <PE_SVDM_CheckIdentity>
 80038e2:	b970      	cbnz	r0, 8003902 <PE_StateMachine_VDMCable+0x162>
 80038e4:	68ee      	ldr	r6, [r5, #12]
 80038e6:	7c28      	ldrb	r0, [r5, #16]
 80038e8:	f3c7 1281 	ubfx	r2, r7, #6, #2
 80038ec:	6977      	ldr	r7, [r6, #20]
 80038ee:	ab03      	add	r3, sp, #12
 80038f0:	2101      	movs	r1, #1
 80038f2:	47b8      	blx	r7
 80038f4:	7c28      	ldrb	r0, [r5, #16]
 80038f6:	2152      	movs	r1, #82	@ 0x52
 80038f8:	f7fc fe2d 	bl	8000556 <USBPD_PE_Notification>
 80038fc:	2014      	movs	r0, #20
 80038fe:	74a0      	strb	r0, [r4, #18]
 8003900:	e003      	b.n	800390a <PE_StateMachine_VDMCable+0x16a>
 8003902:	7c28      	ldrb	r0, [r5, #16]
 8003904:	211b      	movs	r1, #27
 8003906:	f7fc fe26 	bl	8000556 <USBPD_PE_Notification>
 800390a:	f000 f85a 	bl	80039c2 <.text_5>
 800390e:	f898 0000 	ldrb.w	r0, [r8]
 8003912:	2814      	cmp	r0, #20
 8003914:	d10e      	bne.n	8003934 <PE_StateMachine_VDMCable+0x194>
 8003916:	e045      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003918:	f001 011f 	and.w	r1, r1, #31
 800391c:	2910      	cmp	r1, #16
 800391e:	d110      	bne.n	8003942 <PE_StateMachine_VDMCable+0x1a2>
 8003920:	f000 f84f 	bl	80039c2 <.text_5>
 8003924:	2159      	movs	r1, #89	@ 0x59
 8003926:	7c28      	ldrb	r0, [r5, #16]
 8003928:	f7fc fe15 	bl	8000556 <USBPD_PE_Notification>
 800392c:	f898 0000 	ldrb.w	r0, [r8]
 8003930:	2814      	cmp	r0, #20
 8003932:	d037      	beq.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003934:	2114      	movs	r1, #20
 8003936:	f888 1000 	strb.w	r1, [r8]
 800393a:	4628      	mov	r0, r5
 800393c:	f7fd f836 	bl	80009ac <PE_Clear_RxEvent>
 8003940:	e030      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003942:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8003944:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003948:	d12c      	bne.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 800394a:	2100      	movs	r1, #0
 800394c:	8469      	strh	r1, [r5, #34]	@ 0x22
 800394e:	f000 f832 	bl	80039b6 <.text_4>
 8003952:	d108      	bne.n	8003966 <PE_StateMachine_VDMCable+0x1c6>
 8003954:	68e8      	ldr	r0, [r5, #12]
 8003956:	6944      	ldr	r4, [r0, #20]
 8003958:	b10c      	cbz	r4, 800395e <PE_StateMachine_VDMCable+0x1be>
 800395a:	f000 f827 	bl	80039ac <.text_3>
 800395e:	2003      	movs	r0, #3
 8003960:	7468      	strb	r0, [r5, #17]
 8003962:	2600      	movs	r6, #0
 8003964:	e01e      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003966:	6868      	ldr	r0, [r5, #4]
 8003968:	6801      	ldr	r1, [r0, #0]
 800396a:	f3c1 6081 	ubfx	r0, r1, #26, #2
 800396e:	2802      	cmp	r0, #2
 8003970:	d10e      	bne.n	8003990 <PE_StateMachine_VDMCable+0x1f0>
 8003972:	6869      	ldr	r1, [r5, #4]
 8003974:	680a      	ldr	r2, [r1, #0]
 8003976:	2001      	movs	r0, #1
 8003978:	f360 629b 	bfi	r2, r0, #26, #2
 800397c:	600a      	str	r2, [r1, #0]
 800397e:	2101      	movs	r1, #1
 8003980:	7c28      	ldrb	r0, [r5, #16]
 8003982:	f001 fb3f 	bl	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
 8003986:	846f      	strh	r7, [r5, #34]	@ 0x22
 8003988:	2008      	movs	r0, #8
 800398a:	262d      	movs	r6, #45	@ 0x2d
 800398c:	7468      	strb	r0, [r5, #17]
 800398e:	e007      	b.n	80039a0 <PE_StateMachine_VDMCable+0x200>
 8003990:	68e8      	ldr	r0, [r5, #12]
 8003992:	6944      	ldr	r4, [r0, #20]
 8003994:	b10c      	cbz	r4, 800399a <PE_StateMachine_VDMCable+0x1fa>
 8003996:	f000 f809 	bl	80039ac <.text_3>
 800399a:	2007      	movs	r0, #7
 800399c:	7468      	strb	r0, [r5, #17]
 800399e:	2600      	movs	r6, #0
 80039a0:	2000      	movs	r0, #0
 80039a2:	7728      	strb	r0, [r5, #28]
 80039a4:	4630      	mov	r0, r6
 80039a6:	b00c      	add	sp, #48	@ 0x30
 80039a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080039ac <.text_3>:
 80039ac:	7c28      	ldrb	r0, [r5, #16]
 80039ae:	2300      	movs	r3, #0
 80039b0:	2204      	movs	r2, #4
 80039b2:	2101      	movs	r1, #1

080039b4 <__iar_annotation$$tailcall>:
 80039b4:	4720      	bx	r4

080039b6 <.text_4>:
 80039b6:	6868      	ldr	r0, [r5, #4]
 80039b8:	6801      	ldr	r1, [r0, #0]
 80039ba:	f3c1 2002 	ubfx	r0, r1, #8, #3
 80039be:	2803      	cmp	r0, #3
 80039c0:	4770      	bx	lr

080039c2 <.text_5>:
 80039c2:	2000      	movs	r0, #0
 80039c4:	8468      	strh	r0, [r5, #34]	@ 0x22
 80039c6:	6868      	ldr	r0, [r5, #4]
 80039c8:	6801      	ldr	r1, [r0, #0]
 80039ca:	f3c1 2002 	ubfx	r0, r1, #8, #3
 80039ce:	2803      	cmp	r0, #3
 80039d0:	d102      	bne.n	80039d8 <.text_5+0x16>
 80039d2:	7468      	strb	r0, [r5, #17]
 80039d4:	2600      	movs	r6, #0
 80039d6:	4770      	bx	lr
 80039d8:	2007      	movs	r0, #7
 80039da:	2600      	movs	r6, #0
 80039dc:	7468      	strb	r0, [r5, #17]
 80039de:	772e      	strb	r6, [r5, #28]
 80039e0:	4770      	bx	lr

080039e2 <PE_SubStateMachine_VconnSwap>:
 80039e2:	b538      	push	{r3, r4, r5, lr}
 80039e4:	4604      	mov	r4, r0
 80039e6:	2502      	movs	r5, #2
 80039e8:	7c60      	ldrb	r0, [r4, #17]
 80039ea:	289d      	cmp	r0, #157	@ 0x9d
 80039ec:	d010      	beq.n	8003a10 <PE_SubStateMachine_VconnSwap+0x2e>
 80039ee:	d30e      	bcc.n	8003a0e <PE_SubStateMachine_VconnSwap+0x2c>
 80039f0:	289f      	cmp	r0, #159	@ 0x9f
 80039f2:	d054      	beq.n	8003a9e <PE_SubStateMachine_VconnSwap+0xbc>
 80039f4:	d33b      	bcc.n	8003a6e <PE_SubStateMachine_VconnSwap+0x8c>
 80039f6:	28a1      	cmp	r0, #161	@ 0xa1
 80039f8:	f000 807e 	beq.w	8003af8 <PE_SubStateMachine_VconnSwap+0x116>
 80039fc:	d370      	bcc.n	8003ae0 <PE_SubStateMachine_VconnSwap+0xfe>
 80039fe:	28a3      	cmp	r0, #163	@ 0xa3
 8003a00:	f000 809a 	beq.w	8003b38 <PE_SubStateMachine_VconnSwap+0x156>
 8003a04:	f0c0 8086 	bcc.w	8003b14 <PE_SubStateMachine_VconnSwap+0x132>
 8003a08:	28a4      	cmp	r0, #164	@ 0xa4
 8003a0a:	f000 80ee 	beq.w	8003bea <PE_SubStateMachine_VconnSwap+0x208>
 8003a0e:	e0f8      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a10:	6861      	ldr	r1, [r4, #4]
 8003a12:	6808      	ldr	r0, [r1, #0]
 8003a14:	f400 50b8 	and.w	r0, r0, #5888	@ 0x1700
 8003a18:	f5b0 5f98 	cmp.w	r0, #4864	@ 0x1300
 8003a1c:	d11f      	bne.n	8003a5e <PE_SubStateMachine_VconnSwap+0x7c>
 8003a1e:	68a1      	ldr	r1, [r4, #8]
 8003a20:	7c20      	ldrb	r0, [r4, #16]
 8003a22:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8003a24:	4790      	blx	r2
 8003a26:	280a      	cmp	r0, #10
 8003a28:	d002      	beq.n	8003a30 <PE_SubStateMachine_VconnSwap+0x4e>
 8003a2a:	280d      	cmp	r0, #13
 8003a2c:	d007      	beq.n	8003a3e <PE_SubStateMachine_VconnSwap+0x5c>
 8003a2e:	e00d      	b.n	8003a4c <PE_SubStateMachine_VconnSwap+0x6a>
 8003a30:	6961      	ldr	r1, [r4, #20]
 8003a32:	209e      	movs	r0, #158	@ 0x9e
 8003a34:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8003a38:	7460      	strb	r0, [r4, #17]
 8003a3a:	6161      	str	r1, [r4, #20]
 8003a3c:	e0e1      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a3e:	2000      	movs	r0, #0
 8003a40:	9000      	str	r0, [sp, #0]
 8003a42:	2303      	movs	r3, #3
 8003a44:	220c      	movs	r2, #12
 8003a46:	f000 f8f4 	bl	8003c32 <.text_10>
 8003a4a:	e0da      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	9000      	str	r0, [sp, #0]
 8003a50:	2303      	movs	r3, #3
 8003a52:	2204      	movs	r2, #4
 8003a54:	f000 f8ed 	bl	8003c32 <.text_10>
 8003a58:	2003      	movs	r0, #3
 8003a5a:	7460      	strb	r0, [r4, #17]
 8003a5c:	e005      	b.n	8003a6a <PE_SubStateMachine_VconnSwap+0x88>
 8003a5e:	6960      	ldr	r0, [r4, #20]
 8003a60:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003a64:	2103      	movs	r1, #3
 8003a66:	6160      	str	r0, [r4, #20]
 8003a68:	7461      	strb	r1, [r4, #17]
 8003a6a:	2500      	movs	r5, #0
 8003a6c:	e0c9      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a6e:	2000      	movs	r0, #0
 8003a70:	9000      	str	r0, [sp, #0]
 8003a72:	239e      	movs	r3, #158	@ 0x9e
 8003a74:	2203      	movs	r2, #3
 8003a76:	f000 f8dc 	bl	8003c32 <.text_10>
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d1f6      	bne.n	8003a6c <PE_SubStateMachine_VconnSwap+0x8a>
 8003a7e:	6860      	ldr	r0, [r4, #4]
 8003a80:	6801      	ldr	r1, [r0, #0]
 8003a82:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8003a86:	b130      	cbz	r0, 8003a96 <PE_SubStateMachine_VconnSwap+0xb4>
 8003a88:	209f      	movs	r0, #159	@ 0x9f
 8003a8a:	7460      	strb	r0, [r4, #17]
 8003a8c:	f248 0196 	movw	r1, #32918	@ 0x8096
 8003a90:	83e1      	strh	r1, [r4, #30]
 8003a92:	2596      	movs	r5, #150	@ 0x96
 8003a94:	e001      	b.n	8003a9a <PE_SubStateMachine_VconnSwap+0xb8>
 8003a96:	20a0      	movs	r0, #160	@ 0xa0
 8003a98:	7460      	strb	r0, [r4, #17]
 8003a9a:	213f      	movs	r1, #63	@ 0x3f
 8003a9c:	e0a1      	b.n	8003be2 <PE_SubStateMachine_VconnSwap+0x200>
 8003a9e:	8be0      	ldrh	r0, [r4, #30]
 8003aa0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003aa4:	f000 8095 	beq.w	8003bd2 <PE_SubStateMachine_VconnSwap+0x1f0>
 8003aa8:	780a      	ldrb	r2, [r1, #0]
 8003aaa:	2a11      	cmp	r2, #17
 8003aac:	bf01      	itttt	eq
 8003aae:	8ea2      	ldrheq	r2, [r4, #52]	@ 0x34
 8003ab0:	f24f 001f 	movweq	r0, #61471	@ 0xf01f
 8003ab4:	4002      	andeq	r2, r0
 8003ab6:	2a06      	cmpeq	r2, #6
 8003ab8:	d111      	bne.n	8003ade <PE_SubStateMachine_VconnSwap+0xfc>
 8003aba:	f000 f8ab 	bl	8003c14 <.text_8>
 8003abe:	68a0      	ldr	r0, [r4, #8]
 8003ac0:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003ac2:	b112      	cbz	r2, 8003aca <PE_SubStateMachine_VconnSwap+0xe8>
 8003ac4:	7c20      	ldrb	r0, [r4, #16]
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4790      	blx	r2
 8003aca:	f000 f89c 	bl	8003c06 <.text_7>
 8003ace:	2142      	movs	r1, #66	@ 0x42
 8003ad0:	7c20      	ldrb	r0, [r4, #16]
 8003ad2:	f7fc fd40 	bl	8000556 <USBPD_PE_Notification>
 8003ad6:	2500      	movs	r5, #0
 8003ad8:	8465      	strh	r5, [r4, #34]	@ 0x22
 8003ada:	f884 5262 	strb.w	r5, [r4, #610]	@ 0x262
 8003ade:	e090      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003ae0:	68a0      	ldr	r0, [r4, #8]
 8003ae2:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003ae4:	b112      	cbz	r2, 8003aec <PE_SubStateMachine_VconnSwap+0x10a>
 8003ae6:	7c20      	ldrb	r0, [r4, #16]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4790      	blx	r2
 8003aec:	20a1      	movs	r0, #161	@ 0xa1
 8003aee:	2100      	movs	r1, #0
 8003af0:	7460      	strb	r0, [r4, #17]
 8003af2:	f884 1262 	strb.w	r1, [r4, #610]	@ 0x262
 8003af6:	e084      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003af8:	2000      	movs	r0, #0
 8003afa:	9000      	str	r0, [sp, #0]
 8003afc:	2303      	movs	r3, #3
 8003afe:	2206      	movs	r2, #6
 8003b00:	f000 f897 	bl	8003c32 <.text_10>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d17c      	bne.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003b08:	6960      	ldr	r0, [r4, #20]
 8003b0a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003b0e:	6160      	str	r0, [r4, #20]
 8003b10:	2142      	movs	r1, #66	@ 0x42
 8003b12:	e066      	b.n	8003be2 <PE_SubStateMachine_VconnSwap+0x200>
 8003b14:	2000      	movs	r0, #0
 8003b16:	9000      	str	r0, [sp, #0]
 8003b18:	23a3      	movs	r3, #163	@ 0xa3
 8003b1a:	220b      	movs	r2, #11
 8003b1c:	f000 f889 	bl	8003c32 <.text_10>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	d16e      	bne.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003b24:	6960      	ldr	r0, [r4, #20]
 8003b26:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8003b2a:	6160      	str	r0, [r4, #20]
 8003b2c:	f248 011b 	movw	r1, #32795	@ 0x801b
 8003b30:	83e1      	strh	r1, [r4, #30]
 8003b32:	251b      	movs	r5, #27
 8003b34:	213e      	movs	r1, #62	@ 0x3e
 8003b36:	e054      	b.n	8003be2 <PE_SubStateMachine_VconnSwap+0x200>
 8003b38:	7808      	ldrb	r0, [r1, #0]
 8003b3a:	2811      	cmp	r0, #17
 8003b3c:	bf04      	itt	eq
 8003b3e:	8ea0      	ldrheq	r0, [r4, #52]	@ 0x34
 8003b40:	f410 4f70 	tsteq.w	r0, #61440	@ 0xf000
 8003b44:	d141      	bne.n	8003bca <PE_SubStateMachine_VconnSwap+0x1e8>
 8003b46:	f000 001f 	and.w	r0, r0, #31
 8003b4a:	2803      	cmp	r0, #3
 8003b4c:	d006      	beq.n	8003b5c <PE_SubStateMachine_VconnSwap+0x17a>
 8003b4e:	2804      	cmp	r0, #4
 8003b50:	d01c      	beq.n	8003b8c <PE_SubStateMachine_VconnSwap+0x1aa>
 8003b52:	280c      	cmp	r0, #12
 8003b54:	d013      	beq.n	8003b7e <PE_SubStateMachine_VconnSwap+0x19c>
 8003b56:	2810      	cmp	r0, #16
 8003b58:	d01f      	beq.n	8003b9a <PE_SubStateMachine_VconnSwap+0x1b8>
 8003b5a:	e036      	b.n	8003bca <PE_SubStateMachine_VconnSwap+0x1e8>
 8003b5c:	6860      	ldr	r0, [r4, #4]
 8003b5e:	6802      	ldr	r2, [r0, #0]
 8003b60:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8003b64:	2800      	cmp	r0, #0
 8003b66:	bf19      	ittee	ne
 8003b68:	209f      	movne	r0, #159	@ 0x9f
 8003b6a:	7460      	strbne	r0, [r4, #17]
 8003b6c:	22a0      	moveq	r2, #160	@ 0xa0
 8003b6e:	7462      	strbeq	r2, [r4, #17]
 8003b70:	7808      	ldrb	r0, [r1, #0]
 8003b72:	2814      	cmp	r0, #20
 8003b74:	d001      	beq.n	8003b7a <PE_SubStateMachine_VconnSwap+0x198>
 8003b76:	f000 f84d 	bl	8003c14 <.text_8>
 8003b7a:	213f      	movs	r1, #63	@ 0x3f
 8003b7c:	e022      	b.n	8003bc4 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b7e:	f000 f84e 	bl	8003c1e <.text_9>
 8003b82:	d001      	beq.n	8003b88 <PE_SubStateMachine_VconnSwap+0x1a6>
 8003b84:	f000 f846 	bl	8003c14 <.text_8>
 8003b88:	2140      	movs	r1, #64	@ 0x40
 8003b8a:	e01b      	b.n	8003bc4 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b8c:	f000 f847 	bl	8003c1e <.text_9>
 8003b90:	d001      	beq.n	8003b96 <PE_SubStateMachine_VconnSwap+0x1b4>
 8003b92:	f000 f83f 	bl	8003c14 <.text_8>
 8003b96:	2141      	movs	r1, #65	@ 0x41
 8003b98:	e014      	b.n	8003bc4 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b9a:	6860      	ldr	r0, [r4, #4]
 8003b9c:	6802      	ldr	r2, [r0, #0]
 8003b9e:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8003ba2:	b910      	cbnz	r0, 8003baa <PE_SubStateMachine_VconnSwap+0x1c8>
 8003ba4:	20a4      	movs	r0, #164	@ 0xa4
 8003ba6:	7460      	strb	r0, [r4, #17]
 8003ba8:	e006      	b.n	8003bb8 <PE_SubStateMachine_VconnSwap+0x1d6>
 8003baa:	6960      	ldr	r0, [r4, #20]
 8003bac:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	6160      	str	r0, [r4, #20]
 8003bb4:	7462      	strb	r2, [r4, #17]
 8003bb6:	2500      	movs	r5, #0
 8003bb8:	7808      	ldrb	r0, [r1, #0]
 8003bba:	2814      	cmp	r0, #20
 8003bbc:	d001      	beq.n	8003bc2 <PE_SubStateMachine_VconnSwap+0x1e0>
 8003bbe:	f000 f829 	bl	8003c14 <.text_8>
 8003bc2:	2143      	movs	r1, #67	@ 0x43
 8003bc4:	7c20      	ldrb	r0, [r4, #16]
 8003bc6:	f7fc fcc6 	bl	8000556 <USBPD_PE_Notification>
 8003bca:	8be0      	ldrh	r0, [r4, #30]
 8003bcc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003bd0:	d117      	bne.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003bd2:	6960      	ldr	r0, [r4, #20]
 8003bd4:	2103      	movs	r1, #3
 8003bd6:	7461      	strb	r1, [r4, #17]
 8003bd8:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003bdc:	6160      	str	r0, [r4, #20]
 8003bde:	2500      	movs	r5, #0
 8003be0:	211c      	movs	r1, #28
 8003be2:	7c20      	ldrb	r0, [r4, #16]
 8003be4:	f7fc fcb7 	bl	8000556 <USBPD_PE_Notification>
 8003be8:	e00b      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003bea:	68a0      	ldr	r0, [r4, #8]
 8003bec:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003bee:	b112      	cbz	r2, 8003bf6 <PE_SubStateMachine_VconnSwap+0x214>
 8003bf0:	7c20      	ldrb	r0, [r4, #16]
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	4790      	blx	r2
 8003bf6:	f000 f806 	bl	8003c06 <.text_7>
 8003bfa:	f248 002d 	movw	r0, #32813	@ 0x802d
 8003bfe:	2500      	movs	r5, #0
 8003c00:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003c02:	4628      	mov	r0, r5
 8003c04:	bd32      	pop	{r1, r4, r5, pc}

08003c06 <.text_7>:
 8003c06:	6960      	ldr	r0, [r4, #20]
 8003c08:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003c0c:	6160      	str	r0, [r4, #20]
 8003c0e:	2103      	movs	r1, #3
 8003c10:	7461      	strb	r1, [r4, #17]
 8003c12:	4770      	bx	lr

08003c14 <.text_8>:
 8003c14:	2214      	movs	r2, #20
 8003c16:	700a      	strb	r2, [r1, #0]
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7fc bec7 	b.w	80009ac <PE_Clear_RxEvent>

08003c1e <.text_9>:
 8003c1e:	6960      	ldr	r0, [r4, #20]
 8003c20:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003c24:	6160      	str	r0, [r4, #20]
 8003c26:	2203      	movs	r2, #3
 8003c28:	7462      	strb	r2, [r4, #17]
 8003c2a:	2500      	movs	r5, #0
 8003c2c:	7808      	ldrb	r0, [r1, #0]
 8003c2e:	2814      	cmp	r0, #20
 8003c30:	4770      	bx	lr

08003c32 <.text_10>:
 8003c32:	2100      	movs	r1, #0
 8003c34:	4620      	mov	r0, r4
 8003c36:	f7fd bc17 	b.w	8001468 <PE_Send_CtrlMessage>

08003c3a <PE_ExtRevisionInteroperability_Cable>:
 8003c3a:	6842      	ldr	r2, [r0, #4]
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	f002 0303 	and.w	r3, r2, #3
 8003c42:	4299      	cmp	r1, r3
 8003c44:	bf28      	it	cs
 8003c46:	4619      	movcs	r1, r3
 8003c48:	f361 629b 	bfi	r2, r1, #26, #2
 8003c4c:	6841      	ldr	r1, [r0, #4]
 8003c4e:	600a      	str	r2, [r1, #0]
 8003c50:	f3c2 6181 	ubfx	r1, r2, #26, #2
 8003c54:	7c00      	ldrb	r0, [r0, #16]
 8003c56:	f001 b9d5 	b.w	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
	...

08003c5c <USBPD_PE_SVDM_RequestIdentity>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4ab4      	ldr	r2, [pc, #720]	@ (8003f30 <.text_16>)
 8003c60:	4603      	mov	r3, r0
 8003c62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	685d      	ldr	r5, [r3, #4]
 8003c6a:	2210      	movs	r2, #16
 8003c6c:	f3c5 2340 	ubfx	r3, r5, #9, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf1e      	ittt	ne
 8003c74:	68e3      	ldrne	r3, [r4, #12]
 8003c76:	2b00      	cmpne	r3, #0
 8003c78:	2902      	cmpne	r1, #2
 8003c7a:	d101      	bne.n	8003c80 <USBPD_PE_SVDM_RequestIdentity+0x24>
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	e027      	b.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003c80:	f104 0532 	add.w	r5, r4, #50	@ 0x32
 8003c84:	782b      	ldrb	r3, [r5, #0]
 8003c86:	b913      	cbnz	r3, 8003c8e <USBPD_PE_SVDM_RequestIdentity+0x32>
 8003c88:	f000 f849 	bl	8003d1e <.text_4>
 8003c8c:	b90b      	cbnz	r3, 8003c92 <USBPD_PE_SVDM_RequestIdentity+0x36>
 8003c8e:	2203      	movs	r2, #3
 8003c90:	e01e      	b.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003c92:	7069      	strb	r1, [r5, #1]
 8003c94:	b111      	cbz	r1, 8003c9c <USBPD_PE_SVDM_RequestIdentity+0x40>
 8003c96:	2901      	cmp	r1, #1
 8003c98:	d008      	beq.n	8003cac <USBPD_PE_SVDM_RequestIdentity+0x50>
 8003c9a:	e019      	b.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003c9c:	6861      	ldr	r1, [r4, #4]
 8003c9e:	680b      	ldr	r3, [r1, #0]
 8003ca0:	f3c3 2102 	ubfx	r1, r3, #8, #3
 8003ca4:	2903      	cmp	r1, #3
 8003ca6:	d113      	bne.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003ca8:	217d      	movs	r1, #125	@ 0x7d
 8003caa:	e00c      	b.n	8003cc6 <USBPD_PE_SVDM_RequestIdentity+0x6a>
 8003cac:	6861      	ldr	r1, [r4, #4]
 8003cae:	6809      	ldr	r1, [r1, #0]
 8003cb0:	f240 7304 	movw	r3, #1796	@ 0x704
 8003cb4:	400b      	ands	r3, r1
 8003cb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cba:	bf1c      	itt	ne
 8003cbc:	f3c1 2102 	ubfxne	r1, r1, #8, #3
 8003cc0:	2903      	cmpne	r1, #3
 8003cc2:	d105      	bne.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003cc4:	2105      	movs	r1, #5
 8003cc6:	7029      	strb	r1, [r5, #0]
 8003cc8:	68a2      	ldr	r2, [r4, #8]
 8003cca:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003ccc:	4788      	blx	r1
 8003cce:	2200      	movs	r2, #0
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}

08003cd4 <USBPD_PE_SVDM_RequestSVID>:
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	f000 f923 	bl	8003f20 <.text_15>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bf14      	ite	ne
 8003cde:	2902      	cmpne	r1, #2
 8003ce0:	2202      	moveq	r2, #2
 8003ce2:	d01a      	beq.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003ce4:	f104 0532 	add.w	r5, r4, #50	@ 0x32
 8003ce8:	782b      	ldrb	r3, [r5, #0]
 8003cea:	b913      	cbnz	r3, 8003cf2 <USBPD_PE_SVDM_RequestSVID+0x1e>
 8003cec:	f000 f817 	bl	8003d1e <.text_4>
 8003cf0:	b90b      	cbnz	r3, 8003cf6 <USBPD_PE_SVDM_RequestSVID+0x22>
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	e011      	b.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003cf6:	f3c6 2302 	ubfx	r3, r6, #8, #3
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d10d      	bne.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003cfe:	237f      	movs	r3, #127	@ 0x7f
 8003d00:	7069      	strb	r1, [r5, #1]
 8003d02:	702b      	strb	r3, [r5, #0]
 8003d04:	b129      	cbz	r1, 8003d12 <USBPD_PE_SVDM_RequestSVID+0x3e>
 8003d06:	2901      	cmp	r1, #1
 8003d08:	d107      	bne.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003d0a:	6961      	ldr	r1, [r4, #20]
 8003d0c:	f3c1 4100 	ubfx	r1, r1, #16, #1
 8003d10:	b119      	cbz	r1, 8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003d12:	68a1      	ldr	r1, [r4, #8]
 8003d14:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003d16:	4790      	blx	r2
 8003d18:	2200      	movs	r2, #0
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	bd70      	pop	{r4, r5, r6, pc}

08003d1e <.text_4>:
 8003d1e:	6863      	ldr	r3, [r4, #4]
 8003d20:	681e      	ldr	r6, [r3, #0]
 8003d22:	f3c6 3300 	ubfx	r3, r6, #12, #1
 8003d26:	4770      	bx	lr

08003d28 <USBPD_PE_SVDM_RequestMode>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	f000 f8d3 	bl	8003ed4 <.text_13>
 8003d2e:	68ec      	ldr	r4, [r5, #12]
 8003d30:	2310      	movs	r3, #16
 8003d32:	2c00      	cmp	r4, #0
 8003d34:	bf14      	ite	ne
 8003d36:	2902      	cmpne	r1, #2
 8003d38:	2302      	moveq	r3, #2
 8003d3a:	d01e      	beq.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d3c:	f105 0632 	add.w	r6, r5, #50	@ 0x32
 8003d40:	7834      	ldrb	r4, [r6, #0]
 8003d42:	b924      	cbnz	r4, 8003d4e <USBPD_PE_SVDM_RequestMode+0x26>
 8003d44:	686c      	ldr	r4, [r5, #4]
 8003d46:	6827      	ldr	r7, [r4, #0]
 8003d48:	f3c7 3400 	ubfx	r4, r7, #12, #1
 8003d4c:	b90c      	cbnz	r4, 8003d52 <USBPD_PE_SVDM_RequestMode+0x2a>
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e013      	b.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d52:	f3c7 2402 	ubfx	r4, r7, #8, #3
 8003d56:	2c03      	cmp	r4, #3
 8003d58:	d10f      	bne.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d5a:	2481      	movs	r4, #129	@ 0x81
 8003d5c:	7071      	strb	r1, [r6, #1]
 8003d5e:	7034      	strb	r4, [r6, #0]
 8003d60:	f8a5 2258 	strh.w	r2, [r5, #600]	@ 0x258
 8003d64:	b129      	cbz	r1, 8003d72 <USBPD_PE_SVDM_RequestMode+0x4a>
 8003d66:	2901      	cmp	r1, #1
 8003d68:	d107      	bne.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d6a:	6969      	ldr	r1, [r5, #20]
 8003d6c:	f3c1 4100 	ubfx	r1, r1, #16, #1
 8003d70:	b119      	cbz	r1, 8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d72:	68a9      	ldr	r1, [r5, #8]
 8003d74:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003d76:	4790      	blx	r2
 8003d78:	2300      	movs	r3, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003d7e <USBPD_PE_SVDM_RequestModeEnter>:
 8003d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d80:	f000 f854 	bl	8003e2c <.text_10>
 8003d84:	b90d      	cbnz	r5, 8003d8a <USBPD_PE_SVDM_RequestModeEnter+0xc>
 8003d86:	2402      	movs	r4, #2
 8003d88:	e01b      	b.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003d8a:	f106 0732 	add.w	r7, r6, #50	@ 0x32
 8003d8e:	783d      	ldrb	r5, [r7, #0]
 8003d90:	b915      	cbnz	r5, 8003d98 <USBPD_PE_SVDM_RequestModeEnter+0x1a>
 8003d92:	f000 f845 	bl	8003e20 <.text_9>
 8003d96:	b90d      	cbnz	r5, 8003d9c <USBPD_PE_SVDM_RequestModeEnter+0x1e>
 8003d98:	2403      	movs	r4, #3
 8003d9a:	e012      	b.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003d9c:	f40c 65e1 	and.w	r5, ip, #1800	@ 0x708
 8003da0:	f5b5 7f42 	cmp.w	r5, #776	@ 0x308
 8003da4:	d10d      	bne.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003da6:	2582      	movs	r5, #130	@ 0x82
 8003da8:	f000 f831 	bl	8003e0e <.text_8>
 8003dac:	b129      	cbz	r1, 8003dba <USBPD_PE_SVDM_RequestModeEnter+0x3c>
 8003dae:	2902      	cmp	r1, #2
 8003db0:	d000      	beq.n	8003db4 <USBPD_PE_SVDM_RequestModeEnter+0x36>
 8003db2:	d206      	bcs.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003db4:	f3c2 4100 	ubfx	r1, r2, #16, #1
 8003db8:	b119      	cbz	r1, 8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003dba:	68b1      	ldr	r1, [r6, #8]
 8003dbc:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003dbe:	4790      	blx	r2
 8003dc0:	2400      	movs	r4, #0
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003dc6 <USBPD_PE_SVDM_RequestModeExit>:
 8003dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc8:	f000 f830 	bl	8003e2c <.text_10>
 8003dcc:	b90d      	cbnz	r5, 8003dd2 <USBPD_PE_SVDM_RequestModeExit+0xc>
 8003dce:	2402      	movs	r4, #2
 8003dd0:	e01b      	b.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dd2:	f106 0732 	add.w	r7, r6, #50	@ 0x32
 8003dd6:	783d      	ldrb	r5, [r7, #0]
 8003dd8:	b915      	cbnz	r5, 8003de0 <USBPD_PE_SVDM_RequestModeExit+0x1a>
 8003dda:	f000 f821 	bl	8003e20 <.text_9>
 8003dde:	b90d      	cbnz	r5, 8003de4 <USBPD_PE_SVDM_RequestModeExit+0x1e>
 8003de0:	2403      	movs	r4, #3
 8003de2:	e012      	b.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003de4:	f40c 65e1 	and.w	r5, ip, #1800	@ 0x708
 8003de8:	f5b5 7f42 	cmp.w	r5, #776	@ 0x308
 8003dec:	d10d      	bne.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dee:	2583      	movs	r5, #131	@ 0x83
 8003df0:	f000 f80d 	bl	8003e0e <.text_8>
 8003df4:	b129      	cbz	r1, 8003e02 <USBPD_PE_SVDM_RequestModeExit+0x3c>
 8003df6:	2902      	cmp	r1, #2
 8003df8:	d000      	beq.n	8003dfc <USBPD_PE_SVDM_RequestModeExit+0x36>
 8003dfa:	d206      	bcs.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dfc:	f3c2 4100 	ubfx	r1, r2, #16, #1
 8003e00:	b119      	cbz	r1, 8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003e02:	68b1      	ldr	r1, [r6, #8]
 8003e04:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003e06:	4790      	blx	r2
 8003e08:	2400      	movs	r4, #0
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003e0e <.text_8>:
 8003e0e:	7079      	strb	r1, [r7, #1]
 8003e10:	703d      	strb	r5, [r7, #0]
 8003e12:	f8a6 2258 	strh.w	r2, [r6, #600]	@ 0x258
 8003e16:	6972      	ldr	r2, [r6, #20]
 8003e18:	f363 1288 	bfi	r2, r3, #6, #3
 8003e1c:	6172      	str	r2, [r6, #20]
 8003e1e:	4770      	bx	lr

08003e20 <.text_9>:
 8003e20:	6875      	ldr	r5, [r6, #4]
 8003e22:	f8d5 c000 	ldr.w	ip, [r5]
 8003e26:	f3cc 3500 	ubfx	r5, ip, #12, #1
 8003e2a:	4770      	bx	lr

08003e2c <.text_10>:
 8003e2c:	4c40      	ldr	r4, [pc, #256]	@ (8003f30 <.text_16>)
 8003e2e:	4605      	mov	r5, r0
 8003e30:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
 8003e34:	68f5      	ldr	r5, [r6, #12]
 8003e36:	2410      	movs	r4, #16
 8003e38:	4770      	bx	lr

08003e3a <USBPD_PE_SVDM_RequestSpecific>:
 8003e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3c:	f7ff fff6 	bl	8003e2c <.text_10>
 8003e40:	b90d      	cbnz	r5, 8003e46 <USBPD_PE_SVDM_RequestSpecific+0xc>
 8003e42:	2402      	movs	r4, #2
 8003e44:	e01d      	b.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e46:	f106 0732 	add.w	r7, r6, #50	@ 0x32
 8003e4a:	783d      	ldrb	r5, [r7, #0]
 8003e4c:	b915      	cbnz	r5, 8003e54 <USBPD_PE_SVDM_RequestSpecific+0x1a>
 8003e4e:	f7ff ffe7 	bl	8003e20 <.text_9>
 8003e52:	b90d      	cbnz	r5, 8003e58 <USBPD_PE_SVDM_RequestSpecific+0x1e>
 8003e54:	2403      	movs	r4, #3
 8003e56:	e014      	b.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e58:	6975      	ldr	r5, [r6, #20]
 8003e5a:	f3c5 4500 	ubfx	r5, r5, #16, #1
 8003e5e:	b90d      	cbnz	r5, 8003e64 <USBPD_PE_SVDM_RequestSpecific+0x2a>
 8003e60:	000d      	movs	r5, r1
 8003e62:	d10e      	bne.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e64:	f3cc 2502 	ubfx	r5, ip, #8, #3
 8003e68:	2d03      	cmp	r5, #3
 8003e6a:	d10a      	bne.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e6c:	7079      	strb	r1, [r7, #1]
 8003e6e:	2400      	movs	r4, #0
 8003e70:	2185      	movs	r1, #133	@ 0x85
 8003e72:	7039      	strb	r1, [r7, #0]
 8003e74:	f506 7115 	add.w	r1, r6, #596	@ 0x254
 8003e78:	600a      	str	r2, [r1, #0]
 8003e7a:	808b      	strh	r3, [r1, #4]
 8003e7c:	68b1      	ldr	r1, [r6, #8]
 8003e7e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003e80:	4790      	blx	r2
 8003e82:	4620      	mov	r0, r4
 8003e84:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003e86 <USBPD_PE_SVDM_RequestAttention>:
 8003e86:	b570      	push	{r4, r5, r6, lr}
 8003e88:	f000 f824 	bl	8003ed4 <.text_13>
 8003e8c:	68eb      	ldr	r3, [r5, #12]
 8003e8e:	2410      	movs	r4, #16
 8003e90:	b103      	cbz	r3, 8003e94 <USBPD_PE_SVDM_RequestAttention+0xe>
 8003e92:	b109      	cbz	r1, 8003e98 <USBPD_PE_SVDM_RequestAttention+0x12>
 8003e94:	2402      	movs	r4, #2
 8003e96:	e01b      	b.n	8003ed0 <USBPD_PE_SVDM_RequestAttention+0x4a>
 8003e98:	f105 0332 	add.w	r3, r5, #50	@ 0x32
 8003e9c:	7819      	ldrb	r1, [r3, #0]
 8003e9e:	b921      	cbnz	r1, 8003eaa <USBPD_PE_SVDM_RequestAttention+0x24>
 8003ea0:	6869      	ldr	r1, [r5, #4]
 8003ea2:	680e      	ldr	r6, [r1, #0]
 8003ea4:	f3c6 3100 	ubfx	r1, r6, #12, #1
 8003ea8:	b909      	cbnz	r1, 8003eae <USBPD_PE_SVDM_RequestAttention+0x28>
 8003eaa:	2403      	movs	r4, #3
 8003eac:	e010      	b.n	8003ed0 <USBPD_PE_SVDM_RequestAttention+0x4a>
 8003eae:	f3c6 2102 	ubfx	r1, r6, #8, #3
 8003eb2:	2903      	cmp	r1, #3
 8003eb4:	d10c      	bne.n	8003ed0 <USBPD_PE_SVDM_RequestAttention+0x4a>
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	7059      	strb	r1, [r3, #1]
 8003eba:	2484      	movs	r4, #132	@ 0x84
 8003ebc:	701c      	strb	r4, [r3, #0]
 8003ebe:	f505 7115 	add.w	r1, r5, #596	@ 0x254
 8003ec2:	2306      	movs	r3, #6
 8003ec4:	600b      	str	r3, [r1, #0]
 8003ec6:	808a      	strh	r2, [r1, #4]
 8003ec8:	2400      	movs	r4, #0
 8003eca:	68a9      	ldr	r1, [r5, #8]
 8003ecc:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003ece:	4790      	blx	r2
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}

08003ed4 <.text_13>:
 8003ed4:	4b16      	ldr	r3, [pc, #88]	@ (8003f30 <.text_16>)
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8003edc:	4770      	bx	lr

08003ede <USBPD_PE_UVDM_RequestMessage>:
 8003ede:	b570      	push	{r4, r5, r6, lr}
 8003ee0:	f000 f81e 	bl	8003f20 <.text_15>
 8003ee4:	b90b      	cbnz	r3, 8003eea <USBPD_PE_UVDM_RequestMessage+0xc>
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	e018      	b.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003eea:	f104 0532 	add.w	r5, r4, #50	@ 0x32
 8003eee:	782b      	ldrb	r3, [r5, #0]
 8003ef0:	b913      	cbnz	r3, 8003ef8 <USBPD_PE_UVDM_RequestMessage+0x1a>
 8003ef2:	f7ff ff14 	bl	8003d1e <.text_4>
 8003ef6:	b90b      	cbnz	r3, 8003efc <USBPD_PE_UVDM_RequestMessage+0x1e>
 8003ef8:	2203      	movs	r2, #3
 8003efa:	e00f      	b.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003efc:	f3c6 33c0 	ubfx	r3, r6, #15, #1
 8003f00:	b90b      	cbnz	r3, 8003f06 <USBPD_PE_UVDM_RequestMessage+0x28>
 8003f02:	000b      	movs	r3, r1
 8003f04:	d10a      	bne.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003f06:	f3c6 2302 	ubfx	r3, r6, #8, #3
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d106      	bne.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003f0e:	7069      	strb	r1, [r5, #1]
 8003f10:	2186      	movs	r1, #134	@ 0x86
 8003f12:	7029      	strb	r1, [r5, #0]
 8003f14:	68a2      	ldr	r2, [r4, #8]
 8003f16:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f18:	4788      	blx	r1
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}

08003f20 <.text_15>:
 8003f20:	4a03      	ldr	r2, [pc, #12]	@ (8003f30 <.text_16>)
 8003f22:	4603      	mov	r3, r0
 8003f24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003f28:	68e3      	ldr	r3, [r4, #12]
 8003f2a:	2210      	movs	r2, #16
 8003f2c:	4770      	bx	lr
	...

08003f30 <.text_16>:
 8003f30:	200002d4 	.word	0x200002d4

08003f34 <PE_Receive_SVDM>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	4604      	mov	r4, r0
 8003f38:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 8003f3c:	f204 4294 	addw	r2, r4, #1172	@ 0x494
 8003f40:	8808      	ldrh	r0, [r1, #0]
 8003f42:	0b00      	lsrs	r0, r0, #12
 8003f44:	f000 0007 	and.w	r0, r0, #7
 8003f48:	1e43      	subs	r3, r0, #1
 8003f4a:	7613      	strb	r3, [r2, #24]
 8003f4c:	f894 0031 	ldrb.w	r0, [r4, #49]	@ 0x31
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d16e      	bne.n	8004032 <PE_Receive_SVDM+0xfe>
 8003f54:	e010      	b.n	8003f78 <PE_Receive_SVDM+0x44>
 8003f56:	684b      	ldr	r3, [r1, #4]
 8003f58:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003f5c:	799d      	ldrb	r5, [r3, #6]
 8003f5e:	79de      	ldrb	r6, [r3, #7]
 8003f60:	eb05 2706 	add.w	r7, r5, r6, lsl #8
 8003f64:	7a1d      	ldrb	r5, [r3, #8]
 8003f66:	7a5b      	ldrb	r3, [r3, #9]
 8003f68:	eb07 4705 	add.w	r7, r7, r5, lsl #16
 8003f6c:	eb07 6703 	add.w	r7, r7, r3, lsl #24
 8003f70:	f842 7020 	str.w	r7, [r2, r0, lsl #2]
 8003f74:	1c40      	adds	r0, r0, #1
 8003f76:	b2c0      	uxtb	r0, r0
 8003f78:	7e15      	ldrb	r5, [r2, #24]
 8003f7a:	42a8      	cmp	r0, r5
 8003f7c:	dbeb      	blt.n	8003f56 <PE_Receive_SVDM+0x22>
 8003f7e:	f894 3250 	ldrb.w	r3, [r4, #592]	@ 0x250
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	1e5b      	subs	r3, r3, #1
 8003f88:	f248 0119 	movw	r1, #32793	@ 0x8019
 8003f8c:	f248 000f 	movw	r0, #32783	@ 0x800f
 8003f90:	d00d      	beq.n	8003fae <PE_Receive_SVDM+0x7a>
 8003f92:	1e5b      	subs	r3, r3, #1
 8003f94:	d028      	beq.n	8003fe8 <PE_Receive_SVDM+0xb4>
 8003f96:	1e5b      	subs	r3, r3, #1
 8003f98:	d02b      	beq.n	8003ff2 <PE_Receive_SVDM+0xbe>
 8003f9a:	1e5b      	subs	r3, r3, #1
 8003f9c:	d02e      	beq.n	8003ffc <PE_Receive_SVDM+0xc8>
 8003f9e:	1e5b      	subs	r3, r3, #1
 8003fa0:	d031      	beq.n	8004006 <PE_Receive_SVDM+0xd2>
 8003fa2:	1e5b      	subs	r3, r3, #1
 8003fa4:	d034      	beq.n	8004010 <PE_Receive_SVDM+0xdc>
 8003fa6:	3b0a      	subs	r3, #10
 8003fa8:	2b0f      	cmp	r3, #15
 8003faa:	d93d      	bls.n	8004028 <PE_Receive_SVDM+0xf4>
 8003fac:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8003fae:	2150      	movs	r1, #80	@ 0x50
 8003fb0:	6862      	ldr	r2, [r4, #4]
 8003fb2:	7721      	strb	r1, [r4, #28]
 8003fb4:	6813      	ldr	r3, [r2, #0]
 8003fb6:	f8d4 1250 	ldr.w	r1, [r4, #592]	@ 0x250
 8003fba:	f3c1 3141 	ubfx	r1, r1, #13, #2
 8003fbe:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8003fc2:	4291      	cmp	r1, r2
 8003fc4:	da04      	bge.n	8003fd0 <PE_Receive_SVDM+0x9c>
 8003fc6:	f8d4 1250 	ldr.w	r1, [r4, #592]	@ 0x250
 8003fca:	f3c1 3141 	ubfx	r1, r1, #13, #2
 8003fce:	e003      	b.n	8003fd8 <PE_Receive_SVDM+0xa4>
 8003fd0:	6861      	ldr	r1, [r4, #4]
 8003fd2:	680a      	ldr	r2, [r1, #0]
 8003fd4:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8003fd8:	6862      	ldr	r2, [r4, #4]
 8003fda:	6813      	ldr	r3, [r2, #0]
 8003fdc:	f361 1345 	bfi	r3, r1, #5, #1
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	83e0      	strh	r0, [r4, #30]
 8003fe4:	2075      	movs	r0, #117	@ 0x75
 8003fe6:	e023      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8003fe8:	2152      	movs	r1, #82	@ 0x52
 8003fea:	7721      	strb	r1, [r4, #28]
 8003fec:	83e0      	strh	r0, [r4, #30]
 8003fee:	2076      	movs	r0, #118	@ 0x76
 8003ff0:	e01e      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8003ff2:	2153      	movs	r1, #83	@ 0x53
 8003ff4:	7721      	strb	r1, [r4, #28]
 8003ff6:	83e0      	strh	r0, [r4, #30]
 8003ff8:	2078      	movs	r0, #120	@ 0x78
 8003ffa:	e019      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8003ffc:	2254      	movs	r2, #84	@ 0x54
 8003ffe:	7722      	strb	r2, [r4, #28]
 8004000:	83e1      	strh	r1, [r4, #30]
 8004002:	2079      	movs	r0, #121	@ 0x79
 8004004:	e014      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8004006:	2255      	movs	r2, #85	@ 0x55
 8004008:	7722      	strb	r2, [r4, #28]
 800400a:	83e1      	strh	r1, [r4, #30]
 800400c:	207a      	movs	r0, #122	@ 0x7a
 800400e:	e00f      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8004010:	68e0      	ldr	r0, [r4, #12]
 8004012:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004014:	b12b      	cbz	r3, 8004022 <PE_Receive_SVDM+0xee>
 8004016:	0029      	movs	r1, r5
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	7c20      	ldrb	r0, [r4, #16]
 800401c:	bf18      	it	ne
 800401e:	2101      	movne	r1, #1
 8004020:	4798      	blx	r3
 8004022:	2103      	movs	r1, #3
 8004024:	7461      	strb	r1, [r4, #17]
 8004026:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8004028:	225a      	movs	r2, #90	@ 0x5a
 800402a:	7722      	strb	r2, [r4, #28]
 800402c:	83e0      	strh	r0, [r4, #30]
 800402e:	207b      	movs	r0, #123	@ 0x7b
 8004030:	7460      	strb	r0, [r4, #17]
 8004032:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08004034 <PE_StateMachine_VDM>:
 8004034:	e92d 47fb 	stmdb	sp!, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004038:	4604      	mov	r4, r0
 800403a:	b099      	sub	sp, #100	@ 0x64
 800403c:	f894 c011 	ldrb.w	ip, [r4, #17]
 8004040:	f1ac 0075 	sub.w	r0, ip, #117	@ 0x75
 8004044:	2807      	cmp	r0, #7
 8004046:	f04f 0802 	mov.w	r8, #2
 800404a:	d203      	bcs.n	8004054 <PE_StateMachine_VDM+0x20>
 800404c:	7809      	ldrb	r1, [r1, #0]
 800404e:	2914      	cmp	r1, #20
 8004050:	f040 84ea 	bne.w	8004a28 <PE_StateMachine_VDM+0x9f4>
 8004054:	2305      	movs	r3, #5
 8004056:	2003      	movs	r0, #3
 8004058:	2204      	movs	r2, #4
 800405a:	f1bc 0f75 	cmp.w	ip, #117	@ 0x75
 800405e:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 8004062:	f104 0731 	add.w	r7, r4, #49	@ 0x31
 8004066:	f504 7614 	add.w	r6, r4, #592	@ 0x250
 800406a:	f04f 0a01 	mov.w	sl, #1
 800406e:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8004072:	f248 091e 	movw	r9, #32798	@ 0x801e
 8004076:	d04c      	beq.n	8004112 <PE_StateMachine_VDM+0xde>
 8004078:	f1bc 0f76 	cmp.w	ip, #118	@ 0x76
 800407c:	f000 80a4 	beq.w	80041c8 <PE_StateMachine_VDM+0x194>
 8004080:	f1bc 0f77 	cmp.w	ip, #119	@ 0x77
 8004084:	f000 811c 	beq.w	80042c0 <PE_StateMachine_VDM+0x28c>
 8004088:	f1bc 0f78 	cmp.w	ip, #120	@ 0x78
 800408c:	f000 8172 	beq.w	8004374 <PE_StateMachine_VDM+0x340>
 8004090:	f1bc 0f79 	cmp.w	ip, #121	@ 0x79
 8004094:	f000 81b3 	beq.w	80043fe <PE_StateMachine_VDM+0x3ca>
 8004098:	f1bc 0f7a 	cmp.w	ip, #122	@ 0x7a
 800409c:	f000 81cf 	beq.w	800443e <PE_StateMachine_VDM+0x40a>
 80040a0:	f1bc 0f7b 	cmp.w	ip, #123	@ 0x7b
 80040a4:	f000 81f9 	beq.w	800449a <PE_StateMachine_VDM+0x466>
 80040a8:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80040ac:	f000 8231 	beq.w	8004512 <PE_StateMachine_VDM+0x4de>
 80040b0:	f1bc 0f7f 	cmp.w	ip, #127	@ 0x7f
 80040b4:	f000 8293 	beq.w	80045de <PE_StateMachine_VDM+0x5aa>
 80040b8:	f1bc 0f81 	cmp.w	ip, #129	@ 0x81
 80040bc:	f000 82da 	beq.w	8004674 <PE_StateMachine_VDM+0x640>
 80040c0:	f1bc 0f82 	cmp.w	ip, #130	@ 0x82
 80040c4:	f000 8331 	beq.w	800472a <PE_StateMachine_VDM+0x6f6>
 80040c8:	f1bc 0f83 	cmp.w	ip, #131	@ 0x83
 80040cc:	f000 8393 	beq.w	80047f6 <PE_StateMachine_VDM+0x7c2>
 80040d0:	f1bc 0f84 	cmp.w	ip, #132	@ 0x84
 80040d4:	f000 848c 	beq.w	80049f0 <PE_StateMachine_VDM+0x9bc>
 80040d8:	f1bc 0f85 	cmp.w	ip, #133	@ 0x85
 80040dc:	f000 83f9 	beq.w	80048d2 <PE_StateMachine_VDM+0x89e>
 80040e0:	f1bc 0f87 	cmp.w	ip, #135	@ 0x87
 80040e4:	f000 8241 	beq.w	800456a <PE_StateMachine_VDM+0x536>
 80040e8:	f1bc 0f89 	cmp.w	ip, #137	@ 0x89
 80040ec:	f000 828f 	beq.w	800460e <PE_StateMachine_VDM+0x5da>
 80040f0:	f1bc 0f8b 	cmp.w	ip, #139	@ 0x8b
 80040f4:	f000 82de 	beq.w	80046b4 <PE_StateMachine_VDM+0x680>
 80040f8:	f1bc 0f8c 	cmp.w	ip, #140	@ 0x8c
 80040fc:	f000 832d 	beq.w	800475a <PE_StateMachine_VDM+0x726>
 8004100:	f1bc 0f8d 	cmp.w	ip, #141	@ 0x8d
 8004104:	f000 839a 	beq.w	800483c <PE_StateMachine_VDM+0x808>
 8004108:	f1bc 0f8f 	cmp.w	ip, #143	@ 0x8f
 800410c:	f000 8403 	beq.w	8004916 <PE_StateMachine_VDM+0x8e2>
 8004110:	e125      	b.n	800435e <PE_StateMachine_VDM+0x32a>
 8004112:	f000 fd12 	bl	8004b3a <.text_34>
 8004116:	f000 8466 	beq.w	80049e6 <PE_StateMachine_VDM+0x9b2>
 800411a:	6830      	ldr	r0, [r6, #0]
 800411c:	f36a 0004 	bfi	r0, sl, #0, #5
 8004120:	f000 fcca 	bl	8004ab8 <.text_28+0x4>
 8004124:	f000 fc9e 	bl	8004a64 <.text_25>
 8004128:	bf1f      	itttt	ne
 800412a:	68e0      	ldrne	r0, [r4, #12]
 800412c:	2800      	cmpne	r0, #0
 800412e:	6802      	ldrne	r2, [r0, #0]
 8004130:	2a00      	cmpne	r2, #0
 8004132:	d03d      	beq.n	80041b0 <PE_StateMachine_VDM+0x17c>
 8004134:	0c09      	lsrs	r1, r1, #16
 8004136:	f5b1 4f7f 	cmp.w	r1, #65280	@ 0xff00
 800413a:	d139      	bne.n	80041b0 <PE_StateMachine_VDM+0x17c>
 800413c:	7c20      	ldrb	r0, [r4, #16]
 800413e:	a908      	add	r1, sp, #32
 8004140:	4790      	blx	r2
 8004142:	2803      	cmp	r0, #3
 8004144:	d002      	beq.n	800414c <PE_StateMachine_VDM+0x118>
 8004146:	280f      	cmp	r0, #15
 8004148:	d003      	beq.n	8004152 <PE_StateMachine_VDM+0x11e>
 800414a:	e031      	b.n	80041b0 <PE_StateMachine_VDM+0x17c>
 800414c:	f000 fce9 	bl	8004b22 <.text_31>
 8004150:	e030      	b.n	80041b4 <PE_StateMachine_VDM+0x180>
 8004152:	f000 fcf7 	bl	8004b44 <.text_35>
 8004156:	a811      	add	r0, sp, #68	@ 0x44
 8004158:	9908      	ldr	r1, [sp, #32]
 800415a:	6041      	str	r1, [r0, #4]
 800415c:	2504      	movs	r5, #4
 800415e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004160:	6081      	str	r1, [r0, #8]
 8004162:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004164:	60c1      	str	r1, [r0, #12]
 8004166:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 800416a:	f3c1 0140 	ubfx	r1, r1, #1, #1
 800416e:	b111      	cbz	r1, 8004176 <PE_StateMachine_VDM+0x142>
 8004170:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004172:	6101      	str	r1, [r0, #16]
 8004174:	2505      	movs	r5, #5
 8004176:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 800417a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800417e:	b121      	cbz	r1, 800418a <PE_StateMachine_VDM+0x156>
 8004180:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004182:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8004186:	1c6d      	adds	r5, r5, #1
 8004188:	b2ed      	uxtb	r5, r5
 800418a:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 800418e:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8004192:	b181      	cbz	r1, 80041b6 <PE_StateMachine_VDM+0x182>
 8004194:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 8004198:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800419c:	b119      	cbz	r1, 80041a6 <PE_StateMachine_VDM+0x172>
 800419e:	2100      	movs	r1, #0
 80041a0:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80041a4:	1c6d      	adds	r5, r5, #1
 80041a6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80041a8:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80041ac:	1c6d      	adds	r5, r5, #1
 80041ae:	e002      	b.n	80041b6 <PE_StateMachine_VDM+0x182>
 80041b0:	f000 fcbb 	bl	8004b2a <.text_32>
 80041b4:	6030      	str	r0, [r6, #0]
 80041b6:	6831      	ldr	r1, [r6, #0]
 80041b8:	2000      	movs	r0, #0
 80041ba:	2203      	movs	r2, #3
 80041bc:	9111      	str	r1, [sp, #68]	@ 0x44
 80041be:	9002      	str	r0, [sp, #8]
 80041c0:	9201      	str	r2, [sp, #4]
 80041c2:	9500      	str	r5, [sp, #0]
 80041c4:	ab11      	add	r3, sp, #68	@ 0x44
 80041c6:	e19f      	b.n	8004508 <PE_StateMachine_VDM+0x4d4>
 80041c8:	f000 fcb7 	bl	8004b3a <.text_34>
 80041cc:	d07a      	beq.n	80042c4 <PE_StateMachine_VDM+0x290>
 80041ce:	6830      	ldr	r0, [r6, #0]
 80041d0:	f368 0004 	bfi	r0, r8, #0, #5
 80041d4:	6030      	str	r0, [r6, #0]
 80041d6:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 80041da:	6030      	str	r0, [r6, #0]
 80041dc:	6860      	ldr	r0, [r4, #4]
 80041de:	6801      	ldr	r1, [r0, #0]
 80041e0:	6830      	ldr	r0, [r6, #0]
 80041e2:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80041e6:	f420 40c0 	bic.w	r0, r0, #24576	@ 0x6000
 80041ea:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
 80041ee:	6030      	str	r0, [r6, #0]
 80041f0:	6861      	ldr	r1, [r4, #4]
 80041f2:	780a      	ldrb	r2, [r1, #0]
 80041f4:	f002 020b 	and.w	r2, r2, #11
 80041f8:	2a09      	cmp	r2, #9
 80041fa:	bf1e      	ittt	ne
 80041fc:	68e1      	ldrne	r1, [r4, #12]
 80041fe:	684b      	ldrne	r3, [r1, #4]
 8004200:	2b00      	cmpne	r3, #0
 8004202:	d051      	beq.n	80042a8 <PE_StateMachine_VDM+0x274>
 8004204:	0c00      	lsrs	r0, r0, #16
 8004206:	f5b0 4f7f 	cmp.w	r0, #65280	@ 0xff00
 800420a:	d14d      	bne.n	80042a8 <PE_StateMachine_VDM+0x274>
 800420c:	7c20      	ldrb	r0, [r4, #16]
 800420e:	f204 42ad 	addw	r2, r4, #1197	@ 0x4ad
 8004212:	a903      	add	r1, sp, #12
 8004214:	4798      	blx	r3
 8004216:	2803      	cmp	r0, #3
 8004218:	d043      	beq.n	80042a2 <PE_StateMachine_VDM+0x26e>
 800421a:	280f      	cmp	r0, #15
 800421c:	d144      	bne.n	80042a8 <PE_StateMachine_VDM+0x274>
 800421e:	f000 fc91 	bl	8004b44 <.text_35>
 8004222:	211c      	movs	r1, #28
 8004224:	a804      	add	r0, sp, #16
 8004226:	f013 f801 	bl	801722c <__aeabi_memclr>
 800422a:	2500      	movs	r5, #0
 800422c:	2300      	movs	r3, #0
 800422e:	f204 42ac 	addw	r2, r4, #1196	@ 0x4ac
 8004232:	e01b      	b.n	800426c <PE_StateMachine_VDM+0x238>
 8004234:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8004238:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800423c:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8004240:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8004244:	f841 c020 	str.w	ip, [r1, r0, lsl #2]
 8004248:	e00f      	b.n	800426a <PE_StateMachine_VDM+0x236>
 800424a:	1c6d      	adds	r5, r5, #1
 800424c:	0858      	lsrs	r0, r3, #1
 800424e:	ea5f 7cc3 	movs.w	ip, r3, lsl #31
 8004252:	a905      	add	r1, sp, #20
 8004254:	d5ee      	bpl.n	8004234 <PE_StateMachine_VDM+0x200>
 8004256:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800425a:	f851 e020 	ldr.w	lr, [r1, r0, lsl #2]
 800425e:	f83c 9013 	ldrh.w	r9, [ip, r3, lsl #1]
 8004262:	ea49 0e0e 	orr.w	lr, r9, lr
 8004266:	f841 e020 	str.w	lr, [r1, r0, lsl #2]
 800426a:	1c5b      	adds	r3, r3, #1
 800426c:	7850      	ldrb	r0, [r2, #1]
 800426e:	4283      	cmp	r3, r0
 8004270:	bf38      	it	cc
 8004272:	2b0c      	cmpcc	r3, #12
 8004274:	d3e9      	bcc.n	800424a <PE_StateMachine_VDM+0x216>
 8004276:	f204 41ac 	addw	r1, r4, #1196	@ 0x4ac
 800427a:	1b40      	subs	r0, r0, r5
 800427c:	7048      	strb	r0, [r1, #1]
 800427e:	b2e8      	uxtb	r0, r5
 8004280:	280c      	cmp	r0, #12
 8004282:	d109      	bne.n	8004298 <PE_StateMachine_VDM+0x264>
 8004284:	6831      	ldr	r1, [r6, #0]
 8004286:	9104      	str	r1, [sp, #16]
 8004288:	2000      	movs	r0, #0
 800428a:	2277      	movs	r2, #119	@ 0x77
 800428c:	2107      	movs	r1, #7
 800428e:	9002      	str	r0, [sp, #8]
 8004290:	9201      	str	r2, [sp, #4]
 8004292:	9100      	str	r1, [sp, #0]
 8004294:	ab04      	add	r3, sp, #16
 8004296:	e05b      	b.n	8004350 <PE_StateMachine_VDM+0x31c>
 8004298:	062d      	lsls	r5, r5, #24
 800429a:	0e6d      	lsrs	r5, r5, #25
 800429c:	6830      	ldr	r0, [r6, #0]
 800429e:	1cad      	adds	r5, r5, #2
 80042a0:	e005      	b.n	80042ae <PE_StateMachine_VDM+0x27a>
 80042a2:	f000 fc3e 	bl	8004b22 <.text_31>
 80042a6:	e001      	b.n	80042ac <PE_StateMachine_VDM+0x278>
 80042a8:	f000 fc3f 	bl	8004b2a <.text_32>
 80042ac:	6030      	str	r0, [r6, #0]
 80042ae:	9004      	str	r0, [sp, #16]
 80042b0:	2103      	movs	r1, #3
 80042b2:	2000      	movs	r0, #0
 80042b4:	b2ed      	uxtb	r5, r5
 80042b6:	9002      	str	r0, [sp, #8]
 80042b8:	9101      	str	r1, [sp, #4]
 80042ba:	9500      	str	r5, [sp, #0]
 80042bc:	ab04      	add	r3, sp, #16
 80042be:	e123      	b.n	8004508 <PE_StateMachine_VDM+0x4d4>
 80042c0:	f000 fc37 	bl	8004b32 <.text_33>
 80042c4:	f000 838f 	beq.w	80049e6 <PE_StateMachine_VDM+0x9b2>
 80042c8:	6830      	ldr	r0, [r6, #0]
 80042ca:	f368 0004 	bfi	r0, r8, #0, #5
 80042ce:	6030      	str	r0, [r6, #0]
 80042d0:	aa03      	add	r2, sp, #12
 80042d2:	f000 fbef 	bl	8004ab4 <.text_28>
 80042d6:	f36a 1187 	bfi	r1, sl, #6, #2
 80042da:	6031      	str	r1, [r6, #0]
 80042dc:	a904      	add	r1, sp, #16
 80042de:	68e3      	ldr	r3, [r4, #12]
 80042e0:	7c20      	ldrb	r0, [r4, #16]
 80042e2:	685d      	ldr	r5, [r3, #4]
 80042e4:	47a8      	blx	r5
 80042e6:	211c      	movs	r1, #28
 80042e8:	a805      	add	r0, sp, #20
 80042ea:	f012 ff9f 	bl	801722c <__aeabi_memclr>
 80042ee:	2300      	movs	r3, #0
 80042f0:	2500      	movs	r5, #0
 80042f2:	f204 42ac 	addw	r2, r4, #1196	@ 0x4ac
 80042f6:	e018      	b.n	800432a <PE_StateMachine_VDM+0x2f6>
 80042f8:	f8dd e010 	ldr.w	lr, [sp, #16]
 80042fc:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8004300:	f83e 6015 	ldrh.w	r6, [lr, r5, lsl #1]
 8004304:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
 8004308:	e00c      	b.n	8004324 <PE_StateMachine_VDM+0x2f0>
 800430a:	1c5b      	adds	r3, r3, #1
 800430c:	0868      	lsrs	r0, r5, #1
 800430e:	07ee      	lsls	r6, r5, #31
 8004310:	a906      	add	r1, sp, #24
 8004312:	d5f1      	bpl.n	80042f8 <PE_StateMachine_VDM+0x2c4>
 8004314:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004318:	f851 e020 	ldr.w	lr, [r1, r0, lsl #2]
 800431c:	f83c 6015 	ldrh.w	r6, [ip, r5, lsl #1]
 8004320:	ea46 060e 	orr.w	r6, r6, lr
 8004324:	f841 6020 	str.w	r6, [r1, r0, lsl #2]
 8004328:	1c6d      	adds	r5, r5, #1
 800432a:	7850      	ldrb	r0, [r2, #1]
 800432c:	4285      	cmp	r5, r0
 800432e:	bf38      	it	cc
 8004330:	2d0c      	cmpcc	r5, #12
 8004332:	d3ea      	bcc.n	800430a <PE_StateMachine_VDM+0x2d6>
 8004334:	f204 41ac 	addw	r1, r4, #1196	@ 0x4ac
 8004338:	1ac0      	subs	r0, r0, r3
 800433a:	7048      	strb	r0, [r1, #1]
 800433c:	b2d8      	uxtb	r0, r3
 800433e:	280c      	cmp	r0, #12
 8004340:	d10e      	bne.n	8004360 <PE_StateMachine_VDM+0x32c>
 8004342:	2100      	movs	r1, #0
 8004344:	2077      	movs	r0, #119	@ 0x77
 8004346:	2207      	movs	r2, #7
 8004348:	9102      	str	r1, [sp, #8]
 800434a:	9001      	str	r0, [sp, #4]
 800434c:	9200      	str	r2, [sp, #0]
 800434e:	ab05      	add	r3, sp, #20
 8004350:	7839      	ldrb	r1, [r7, #0]
 8004352:	220f      	movs	r2, #15
 8004354:	f000 fc84 	bl	8004c60 <.text_44>
 8004358:	f248 000f 	movw	r0, #32783	@ 0x800f
 800435c:	83e0      	strh	r0, [r4, #30]
 800435e:	e363      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 8004360:	061b      	lsls	r3, r3, #24
 8004362:	0e5b      	lsrs	r3, r3, #25
 8004364:	1c9b      	adds	r3, r3, #2
 8004366:	b2db      	uxtb	r3, r3
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	2100      	movs	r1, #0
 800436c:	2003      	movs	r0, #3
 800436e:	9102      	str	r1, [sp, #8]
 8004370:	9001      	str	r0, [sp, #4]
 8004372:	e042      	b.n	80043fa <PE_StateMachine_VDM+0x3c6>
 8004374:	8be1      	ldrh	r1, [r4, #30]
 8004376:	2501      	movs	r5, #1
 8004378:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800437c:	d061      	beq.n	8004442 <PE_StateMachine_VDM+0x40e>
 800437e:	6831      	ldr	r1, [r6, #0]
 8004380:	f360 0104 	bfi	r1, r0, #0, #5
 8004384:	f000 fb74 	bl	8004a70 <.text_26>
 8004388:	f000 fb6c 	bl	8004a64 <.text_25>
 800438c:	bf1e      	ittt	ne
 800438e:	68e0      	ldrne	r0, [r4, #12]
 8004390:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 8004394:	f1bc 0f00 	cmpne.w	ip, #0
 8004398:	d025      	beq.n	80043e6 <PE_StateMachine_VDM+0x3b2>
 800439a:	7c20      	ldrb	r0, [r4, #16]
 800439c:	ab03      	add	r3, sp, #12
 800439e:	aa04      	add	r2, sp, #16
 80043a0:	0c09      	lsrs	r1, r1, #16
 80043a2:	47e0      	blx	ip
 80043a4:	2803      	cmp	r0, #3
 80043a6:	d002      	beq.n	80043ae <PE_StateMachine_VDM+0x37a>
 80043a8:	280f      	cmp	r0, #15
 80043aa:	d005      	beq.n	80043b8 <PE_StateMachine_VDM+0x384>
 80043ac:	e01b      	b.n	80043e6 <PE_StateMachine_VDM+0x3b2>
 80043ae:	6832      	ldr	r2, [r6, #0]
 80043b0:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80043b4:	6032      	str	r2, [r6, #0]
 80043b6:	e019      	b.n	80043ec <PE_StateMachine_VDM+0x3b8>
 80043b8:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80043bc:	b198      	cbz	r0, 80043e6 <PE_StateMachine_VDM+0x3b2>
 80043be:	2807      	cmp	r0, #7
 80043c0:	d211      	bcs.n	80043e6 <PE_StateMachine_VDM+0x3b2>
 80043c2:	f000 fbbf 	bl	8004b44 <.text_35>
 80043c6:	ab06      	add	r3, sp, #24
 80043c8:	2000      	movs	r0, #0
 80043ca:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80043ce:	4288      	cmp	r0, r1
 80043d0:	d20c      	bcs.n	80043ec <PE_StateMachine_VDM+0x3b8>
 80043d2:	9a04      	ldr	r2, [sp, #16]
 80043d4:	6811      	ldr	r1, [r2, #0]
 80043d6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80043da:	1c6d      	adds	r5, r5, #1
 80043dc:	9904      	ldr	r1, [sp, #16]
 80043de:	1d0a      	adds	r2, r1, #4
 80043e0:	9204      	str	r2, [sp, #16]
 80043e2:	1c40      	adds	r0, r0, #1
 80043e4:	e7f1      	b.n	80043ca <PE_StateMachine_VDM+0x396>
 80043e6:	f000 fba0 	bl	8004b2a <.text_32>
 80043ea:	6030      	str	r0, [r6, #0]
 80043ec:	2000      	movs	r0, #0
 80043ee:	6831      	ldr	r1, [r6, #0]
 80043f0:	9105      	str	r1, [sp, #20]
 80043f2:	2203      	movs	r2, #3
 80043f4:	9002      	str	r0, [sp, #8]
 80043f6:	9201      	str	r2, [sp, #4]
 80043f8:	9500      	str	r5, [sp, #0]
 80043fa:	ab05      	add	r3, sp, #20
 80043fc:	e084      	b.n	8004508 <PE_StateMachine_VDM+0x4d4>
 80043fe:	f000 fb98 	bl	8004b32 <.text_33>
 8004402:	d01e      	beq.n	8004442 <PE_StateMachine_VDM+0x40e>
 8004404:	6830      	ldr	r0, [r6, #0]
 8004406:	f362 0004 	bfi	r0, r2, #0, #5
 800440a:	f000 fb40 	bl	8004a8e <.text_27>
 800440e:	2800      	cmp	r0, #0
 8004410:	d134      	bne.n	800447c <PE_StateMachine_VDM+0x448>
 8004412:	68e1      	ldr	r1, [r4, #12]
 8004414:	68c8      	ldr	r0, [r1, #12]
 8004416:	2800      	cmp	r0, #0
 8004418:	d030      	beq.n	800447c <PE_StateMachine_VDM+0x448>
 800441a:	f000 fbcf 	bl	8004bbc <.text_40>
 800441e:	68dd      	ldr	r5, [r3, #12]
 8004420:	47a8      	blx	r5
 8004422:	2803      	cmp	r0, #3
 8004424:	d027      	beq.n	8004476 <PE_StateMachine_VDM+0x442>
 8004426:	280f      	cmp	r0, #15
 8004428:	d128      	bne.n	800447c <PE_StateMachine_VDM+0x448>
 800442a:	f000 fb8b 	bl	8004b44 <.text_35>
 800442e:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004432:	6961      	ldr	r1, [r4, #20]
 8004434:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8004438:	ea41 1180 	orr.w	r1, r1, r0, lsl #6
 800443c:	e019      	b.n	8004472 <PE_StateMachine_VDM+0x43e>
 800443e:	f000 fb78 	bl	8004b32 <.text_33>
 8004442:	f000 82d0 	beq.w	80049e6 <PE_StateMachine_VDM+0x9b2>
 8004446:	6830      	ldr	r0, [r6, #0]
 8004448:	f363 0004 	bfi	r0, r3, #0, #5
 800444c:	f000 fb1f 	bl	8004a8e <.text_27>
 8004450:	b9a0      	cbnz	r0, 800447c <PE_StateMachine_VDM+0x448>
 8004452:	68e1      	ldr	r1, [r4, #12]
 8004454:	6908      	ldr	r0, [r1, #16]
 8004456:	b188      	cbz	r0, 800447c <PE_StateMachine_VDM+0x448>
 8004458:	f000 fbb0 	bl	8004bbc <.text_40>
 800445c:	691d      	ldr	r5, [r3, #16]
 800445e:	47a8      	blx	r5
 8004460:	2803      	cmp	r0, #3
 8004462:	d008      	beq.n	8004476 <PE_StateMachine_VDM+0x442>
 8004464:	280f      	cmp	r0, #15
 8004466:	d109      	bne.n	800447c <PE_StateMachine_VDM+0x448>
 8004468:	f000 fb6c 	bl	8004b44 <.text_35>
 800446c:	6961      	ldr	r1, [r4, #20]
 800446e:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8004472:	6161      	str	r1, [r4, #20]
 8004474:	e005      	b.n	8004482 <PE_StateMachine_VDM+0x44e>
 8004476:	f000 fb54 	bl	8004b22 <.text_31>
 800447a:	e001      	b.n	8004480 <PE_StateMachine_VDM+0x44c>
 800447c:	f000 fb55 	bl	8004b2a <.text_32>
 8004480:	6030      	str	r0, [r6, #0]
 8004482:	2100      	movs	r1, #0
 8004484:	9102      	str	r1, [sp, #8]
 8004486:	2203      	movs	r2, #3
 8004488:	9201      	str	r2, [sp, #4]
 800448a:	f8cd a000 	str.w	sl, [sp]
 800448e:	4633      	mov	r3, r6
 8004490:	7839      	ldrb	r1, [r7, #0]
 8004492:	220f      	movs	r2, #15
 8004494:	f000 fb89 	bl	8004baa <.text_38+0x6>
 8004498:	e2c6      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 800449a:	f000 fb4e 	bl	8004b3a <.text_34>
 800449e:	d0d0      	beq.n	8004442 <PE_StateMachine_VDM+0x40e>
 80044a0:	68e0      	ldr	r0, [r4, #12]
 80044a2:	f8d0 c034 	ldr.w	ip, [r0, #52]	@ 0x34
 80044a6:	f1bc 0f00 	cmp.w	ip, #0
 80044aa:	d021      	beq.n	80044f0 <PE_StateMachine_VDM+0x4bc>
 80044ac:	7831      	ldrb	r1, [r6, #0]
 80044ae:	7c20      	ldrb	r0, [r4, #16]
 80044b0:	f204 49ac 	addw	r9, r4, #1196	@ 0x4ac
 80044b4:	f204 4394 	addw	r3, r4, #1172	@ 0x494
 80044b8:	464a      	mov	r2, r9
 80044ba:	f001 011f 	and.w	r1, r1, #31
 80044be:	47e0      	blx	ip
 80044c0:	2803      	cmp	r0, #3
 80044c2:	d012      	beq.n	80044ea <PE_StateMachine_VDM+0x4b6>
 80044c4:	280f      	cmp	r0, #15
 80044c6:	d113      	bne.n	80044f0 <PE_StateMachine_VDM+0x4bc>
 80044c8:	f000 fb3c 	bl	8004b44 <.text_35>
 80044cc:	2000      	movs	r0, #0
 80044ce:	f899 1000 	ldrb.w	r1, [r9]
 80044d2:	4288      	cmp	r0, r1
 80044d4:	d20f      	bcs.n	80044f6 <PE_StateMachine_VDM+0x4c2>
 80044d6:	f204 4294 	addw	r2, r4, #1172	@ 0x494
 80044da:	1c6d      	adds	r5, r5, #1
 80044dc:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 80044e0:	aa04      	add	r2, sp, #16
 80044e2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 80044e6:	1c40      	adds	r0, r0, #1
 80044e8:	e7f1      	b.n	80044ce <PE_StateMachine_VDM+0x49a>
 80044ea:	f000 fb1a 	bl	8004b22 <.text_31>
 80044ee:	e001      	b.n	80044f4 <PE_StateMachine_VDM+0x4c0>
 80044f0:	f000 fb1b 	bl	8004b2a <.text_32>
 80044f4:	6030      	str	r0, [r6, #0]
 80044f6:	6831      	ldr	r1, [r6, #0]
 80044f8:	2000      	movs	r0, #0
 80044fa:	2203      	movs	r2, #3
 80044fc:	b2ed      	uxtb	r5, r5
 80044fe:	9103      	str	r1, [sp, #12]
 8004500:	9002      	str	r0, [sp, #8]
 8004502:	9201      	str	r2, [sp, #4]
 8004504:	9500      	str	r5, [sp, #0]
 8004506:	ab03      	add	r3, sp, #12
 8004508:	7839      	ldrb	r1, [r7, #0]
 800450a:	220f      	movs	r2, #15
 800450c:	f000 fba8 	bl	8004c60 <.text_44>
 8004510:	e28a      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 8004512:	6830      	ldr	r0, [r6, #0]
 8004514:	f36a 0004 	bfi	r0, sl, #0, #5
 8004518:	6030      	str	r0, [r6, #0]
 800451a:	4633      	mov	r3, r6
 800451c:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8004520:	6030      	str	r0, [r6, #0]
 8004522:	6860      	ldr	r0, [r4, #4]
 8004524:	6802      	ldr	r2, [r0, #0]
 8004526:	f3c2 1040 	ubfx	r0, r2, #5, #1
 800452a:	6832      	ldr	r2, [r6, #0]
 800452c:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8004530:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8004534:	6032      	str	r2, [r6, #0]
 8004536:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800453a:	6032      	str	r2, [r6, #0]
 800453c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8004540:	6032      	str	r2, [r6, #0]
 8004542:	f361 421f 	bfi	r2, r1, #16, #16
 8004546:	6032      	str	r2, [r6, #0]
 8004548:	f000 fb7e 	bl	8004c48 <.text_42+0x6>
 800454c:	bf1d      	ittte	ne
 800454e:	6960      	ldrne	r0, [r4, #20]
 8004550:	0880      	lsrne	r0, r0, #2
 8004552:	f000 0001 	andne.w	r0, r0, #1
 8004556:	2002      	moveq	r0, #2
 8004558:	f000 fa80 	bl	8004a5c <.text_24>
 800455c:	2087      	movs	r0, #135	@ 0x87
 800455e:	f000 fb21 	bl	8004ba4 <.text_38>
 8004562:	2800      	cmp	r0, #0
 8004564:	d1d4      	bne.n	8004510 <PE_StateMachine_VDM+0x4dc>
 8004566:	2050      	movs	r0, #80	@ 0x50
 8004568:	e0a1      	b.n	80046ae <PE_StateMachine_VDM+0x67a>
 800456a:	f000 fa6f 	bl	8004a4c <.text_22>
 800456e:	f000 fa69 	bl	8004a44 <.text_21>
 8004572:	d163      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 8004574:	8829      	ldrh	r1, [r5, #0]
 8004576:	0bc8      	lsrs	r0, r1, #15
 8004578:	d160      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800457a:	f000 fa5f 	bl	8004a3c <.text_20>
 800457e:	d062      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 8004580:	f000 fa67 	bl	8004a52 <.text_23>
 8004584:	d15a      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 8004586:	2a14      	cmp	r2, #20
 8004588:	d001      	beq.n	800458e <PE_StateMachine_VDM+0x55a>
 800458a:	f000 fb11 	bl	8004bb0 <.text_39>
 800458e:	6868      	ldr	r0, [r5, #4]
 8004590:	7887      	ldrb	r7, [r0, #2]
 8004592:	f007 011f 	and.w	r1, r7, #31
 8004596:	2901      	cmp	r1, #1
 8004598:	d150      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800459a:	f3c7 1081 	ubfx	r0, r7, #6, #2
 800459e:	2800      	cmp	r0, #0
 80045a0:	d051      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 80045a2:	68e1      	ldr	r1, [r4, #12]
 80045a4:	6948      	ldr	r0, [r1, #20]
 80045a6:	2800      	cmp	r0, #0
 80045a8:	f000 8202 	beq.w	80049b0 <PE_StateMachine_VDM+0x97c>
 80045ac:	f3c7 1081 	ubfx	r0, r7, #6, #2
 80045b0:	2801      	cmp	r0, #1
 80045b2:	f040 81fd 	bne.w	80049b0 <PE_StateMachine_VDM+0x97c>
 80045b6:	6868      	ldr	r0, [r5, #4]
 80045b8:	1d81      	adds	r1, r0, #6
 80045ba:	7c20      	ldrb	r0, [r4, #16]
 80045bc:	aa08      	add	r2, sp, #32
 80045be:	f000 fbb5 	bl	8004d2c <PE_SVDM_CheckIdentity>
 80045c2:	b950      	cbnz	r0, 80045da <PE_StateMachine_VDM+0x5a6>
 80045c4:	68e5      	ldr	r5, [r4, #12]
 80045c6:	7c20      	ldrb	r0, [r4, #16]
 80045c8:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80045cc:	ab08      	add	r3, sp, #32
 80045ce:	f3c7 1281 	ubfx	r2, r7, #6, #2
 80045d2:	2100      	movs	r1, #0
 80045d4:	47c0      	blx	r8
 80045d6:	2151      	movs	r1, #81	@ 0x51
 80045d8:	e0a3      	b.n	8004722 <PE_StateMachine_VDM+0x6ee>
 80045da:	211b      	movs	r1, #27
 80045dc:	e0a1      	b.n	8004722 <PE_StateMachine_VDM+0x6ee>
 80045de:	f000 fa9a 	bl	8004b16 <.text_30>
 80045e2:	f368 0004 	bfi	r0, r8, #0, #5
 80045e6:	6030      	str	r0, [r6, #0]
 80045e8:	f000 fa64 	bl	8004ab4 <.text_28>
 80045ec:	f000 fb29 	bl	8004c42 <.text_42>
 80045f0:	bf1d      	ittte	ne
 80045f2:	6960      	ldrne	r0, [r4, #20]
 80045f4:	0880      	lsrne	r0, r0, #2
 80045f6:	f000 0001 	andne.w	r0, r0, #1
 80045fa:	2002      	moveq	r0, #2
 80045fc:	f000 fa2e 	bl	8004a5c <.text_24>
 8004600:	2089      	movs	r0, #137	@ 0x89
 8004602:	f000 facf 	bl	8004ba4 <.text_38>
 8004606:	2800      	cmp	r0, #0
 8004608:	d153      	bne.n	80046b2 <PE_StateMachine_VDM+0x67e>
 800460a:	2052      	movs	r0, #82	@ 0x52
 800460c:	e04f      	b.n	80046ae <PE_StateMachine_VDM+0x67a>
 800460e:	f000 fa1d 	bl	8004a4c <.text_22>
 8004612:	f000 fa17 	bl	8004a44 <.text_21>
 8004616:	d111      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 8004618:	8829      	ldrh	r1, [r5, #0]
 800461a:	0bc8      	lsrs	r0, r1, #15
 800461c:	d10e      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800461e:	f000 fa0d 	bl	8004a3c <.text_20>
 8004622:	d010      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 8004624:	f000 fa15 	bl	8004a52 <.text_23>
 8004628:	d108      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800462a:	2a14      	cmp	r2, #20
 800462c:	d001      	beq.n	8004632 <PE_StateMachine_VDM+0x5fe>
 800462e:	f000 fabf 	bl	8004bb0 <.text_39>
 8004632:	6868      	ldr	r0, [r5, #4]
 8004634:	7886      	ldrb	r6, [r0, #2]
 8004636:	f006 011f 	and.w	r1, r6, #31
 800463a:	2902      	cmp	r1, #2
 800463c:	f040 8140 	bne.w	80048c0 <PE_StateMachine_VDM+0x88c>
 8004640:	f3c6 1081 	ubfx	r0, r6, #6, #2
 8004644:	2800      	cmp	r0, #0
 8004646:	f000 813b 	beq.w	80048c0 <PE_StateMachine_VDM+0x88c>
 800464a:	68e1      	ldr	r1, [r4, #12]
 800464c:	6988      	ldr	r0, [r1, #24]
 800464e:	2800      	cmp	r0, #0
 8004650:	d06a      	beq.n	8004728 <PE_StateMachine_VDM+0x6f4>
 8004652:	6868      	ldr	r0, [r5, #4]
 8004654:	1d81      	adds	r1, r0, #6
 8004656:	7c20      	ldrb	r0, [r4, #16]
 8004658:	aa08      	add	r2, sp, #32
 800465a:	f000 fc05 	bl	8004e68 <PE_SVDM_CheckSVIDs>
 800465e:	68e5      	ldr	r5, [r4, #12]
 8004660:	7839      	ldrb	r1, [r7, #0]
 8004662:	7c20      	ldrb	r0, [r4, #16]
 8004664:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8004668:	ab08      	add	r3, sp, #32
 800466a:	f3c6 1281 	ubfx	r2, r6, #6, #2
 800466e:	47c0      	blx	r8
 8004670:	2153      	movs	r1, #83	@ 0x53
 8004672:	e056      	b.n	8004722 <PE_StateMachine_VDM+0x6ee>
 8004674:	6831      	ldr	r1, [r6, #0]
 8004676:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 800467a:	6031      	str	r1, [r6, #0]
 800467c:	4633      	mov	r3, r6
 800467e:	f360 0104 	bfi	r1, r0, #0, #5
 8004682:	6031      	str	r1, [r6, #0]
 8004684:	8930      	ldrh	r0, [r6, #8]
 8004686:	f360 411f 	bfi	r1, r0, #16, #16
 800468a:	f000 f9f1 	bl	8004a70 <.text_26>
 800468e:	f000 fad8 	bl	8004c42 <.text_42>
 8004692:	bf1d      	ittte	ne
 8004694:	6960      	ldrne	r0, [r4, #20]
 8004696:	0880      	lsrne	r0, r0, #2
 8004698:	f000 0001 	andne.w	r0, r0, #1
 800469c:	2002      	moveq	r0, #2
 800469e:	f000 f9dd 	bl	8004a5c <.text_24>
 80046a2:	208b      	movs	r0, #139	@ 0x8b
 80046a4:	f000 fa7e 	bl	8004ba4 <.text_38>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	d102      	bne.n	80046b2 <PE_StateMachine_VDM+0x67e>
 80046ac:	2053      	movs	r0, #83	@ 0x53
 80046ae:	f000 f9bf 	bl	8004a30 <.text_19>
 80046b2:	e1b9      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80046b4:	f000 f9ca 	bl	8004a4c <.text_22>
 80046b8:	f000 f9c4 	bl	8004a44 <.text_21>
 80046bc:	d1be      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046be:	8829      	ldrh	r1, [r5, #0]
 80046c0:	0bc8      	lsrs	r0, r1, #15
 80046c2:	d1bb      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046c4:	f000 f9ba 	bl	8004a3c <.text_20>
 80046c8:	d0bd      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 80046ca:	f000 f9c2 	bl	8004a52 <.text_23>
 80046ce:	d1b5      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046d0:	2a14      	cmp	r2, #20
 80046d2:	d001      	beq.n	80046d8 <PE_StateMachine_VDM+0x6a4>
 80046d4:	f000 fa6c 	bl	8004bb0 <.text_39>
 80046d8:	6868      	ldr	r0, [r5, #4]
 80046da:	f890 9002 	ldrb.w	r9, [r0, #2]
 80046de:	f009 011f 	and.w	r1, r9, #31
 80046e2:	2903      	cmp	r1, #3
 80046e4:	d1aa      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046e6:	f3c9 1081 	ubfx	r0, r9, #6, #2
 80046ea:	2800      	cmp	r0, #0
 80046ec:	d0ab      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 80046ee:	68e1      	ldr	r1, [r4, #12]
 80046f0:	69c8      	ldr	r0, [r1, #28]
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d018      	beq.n	8004728 <PE_StateMachine_VDM+0x6f4>
 80046f6:	6868      	ldr	r0, [r5, #4]
 80046f8:	6831      	ldr	r1, [r6, #0]
 80046fa:	1d82      	adds	r2, r0, #6
 80046fc:	7c20      	ldrb	r0, [r4, #16]
 80046fe:	ab08      	add	r3, sp, #32
 8004700:	0c09      	lsrs	r1, r1, #16
 8004702:	f000 fbe5 	bl	8004ed0 <PE_SVDM_CheckModes>
 8004706:	68e5      	ldr	r5, [r4, #12]
 8004708:	7839      	ldrb	r1, [r7, #0]
 800470a:	7c20      	ldrb	r0, [r4, #16]
 800470c:	f8d5 801c 	ldr.w	r8, [r5, #28]
 8004710:	ab08      	add	r3, sp, #32
 8004712:	f3c9 1281 	ubfx	r2, r9, #6, #2
 8004716:	47c0      	blx	r8
 8004718:	f3c9 1081 	ubfx	r0, r9, #6, #2
 800471c:	2801      	cmp	r0, #1
 800471e:	d103      	bne.n	8004728 <PE_StateMachine_VDM+0x6f4>
 8004720:	2154      	movs	r1, #84	@ 0x54
 8004722:	7c20      	ldrb	r0, [r4, #16]
 8004724:	f7fb ff17 	bl	8000556 <USBPD_PE_Notification>
 8004728:	e142      	b.n	80049b0 <PE_StateMachine_VDM+0x97c>
 800472a:	f000 f9f4 	bl	8004b16 <.text_30>
 800472e:	f362 0004 	bfi	r0, r2, #0, #5
 8004732:	6030      	str	r0, [r6, #0]
 8004734:	f000 f9cf 	bl	8004ad6 <.text_29>
 8004738:	bf1d      	ittte	ne
 800473a:	6960      	ldrne	r0, [r4, #20]
 800473c:	0880      	lsrne	r0, r0, #2
 800473e:	f000 0001 	andne.w	r0, r0, #1
 8004742:	2002      	moveq	r0, #2
 8004744:	f000 f98a 	bl	8004a5c <.text_24>
 8004748:	208c      	movs	r0, #140	@ 0x8c
 800474a:	f000 fa2b 	bl	8004ba4 <.text_38>
 800474e:	2800      	cmp	r0, #0
 8004750:	d1af      	bne.n	80046b2 <PE_StateMachine_VDM+0x67e>
 8004752:	2054      	movs	r0, #84	@ 0x54
 8004754:	7720      	strb	r0, [r4, #28]
 8004756:	2134      	movs	r1, #52	@ 0x34
 8004758:	e067      	b.n	800482a <PE_StateMachine_VDM+0x7f6>
 800475a:	f000 f977 	bl	8004a4c <.text_22>
 800475e:	f000 f971 	bl	8004a44 <.text_21>
 8004762:	f04f 0934 	mov.w	r9, #52	@ 0x34
 8004766:	d16d      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 8004768:	8829      	ldrh	r1, [r5, #0]
 800476a:	0bc8      	lsrs	r0, r1, #15
 800476c:	d16a      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 800476e:	f000 f965 	bl	8004a3c <.text_20>
 8004772:	d06d      	beq.n	8004850 <PE_StateMachine_VDM+0x81c>
 8004774:	f000 f96d 	bl	8004a52 <.text_23>
 8004778:	d164      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 800477a:	2a14      	cmp	r2, #20
 800477c:	d001      	beq.n	8004782 <PE_StateMachine_VDM+0x74e>
 800477e:	f000 fa17 	bl	8004bb0 <.text_39>
 8004782:	2000      	movs	r0, #0
 8004784:	7720      	strb	r0, [r4, #28]
 8004786:	6869      	ldr	r1, [r5, #4]
 8004788:	f891 a002 	ldrb.w	sl, [r1, #2]
 800478c:	f00a 001f 	and.w	r0, sl, #31
 8004790:	2804      	cmp	r0, #4
 8004792:	d157      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 8004794:	f3ca 1081 	ubfx	r0, sl, #6, #2
 8004798:	2800      	cmp	r0, #0
 800479a:	d059      	beq.n	8004850 <PE_StateMachine_VDM+0x81c>
 800479c:	2801      	cmp	r0, #1
 800479e:	d00a      	beq.n	80047b6 <PE_StateMachine_VDM+0x782>
 80047a0:	d312      	bcc.n	80047c8 <PE_StateMachine_VDM+0x794>
 80047a2:	2803      	cmp	r0, #3
 80047a4:	d00a      	beq.n	80047bc <PE_StateMachine_VDM+0x788>
 80047a6:	bf3f      	itttt	cc
 80047a8:	6960      	ldrcc	r0, [r4, #20]
 80047aa:	f420 70e0 	biccc.w	r0, r0, #448	@ 0x1c0
 80047ae:	6160      	strcc	r0, [r4, #20]
 80047b0:	f04f 0936 	movcc.w	r9, #54	@ 0x36
 80047b4:	e008      	b.n	80047c8 <PE_StateMachine_VDM+0x794>
 80047b6:	f04f 0935 	mov.w	r9, #53	@ 0x35
 80047ba:	e005      	b.n	80047c8 <PE_StateMachine_VDM+0x794>
 80047bc:	6960      	ldr	r0, [r4, #20]
 80047be:	f420 70e0 	bic.w	r0, r0, #448	@ 0x1c0
 80047c2:	6160      	str	r0, [r4, #20]
 80047c4:	f04f 0937 	mov.w	r9, #55	@ 0x37
 80047c8:	7c20      	ldrb	r0, [r4, #16]
 80047ca:	4649      	mov	r1, r9
 80047cc:	f7fb fec3 	bl	8000556 <USBPD_PE_Notification>
 80047d0:	68e1      	ldr	r1, [r4, #12]
 80047d2:	6a08      	ldr	r0, [r1, #32]
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d00d      	beq.n	80047f4 <PE_StateMachine_VDM+0x7c0>
 80047d8:	6830      	ldr	r0, [r6, #0]
 80047da:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80047de:	9000      	str	r0, [sp, #0]
 80047e0:	f3ca 1281 	ubfx	r2, sl, #6, #2
 80047e4:	68e5      	ldr	r5, [r4, #12]
 80047e6:	6833      	ldr	r3, [r6, #0]
 80047e8:	7839      	ldrb	r1, [r7, #0]
 80047ea:	7c20      	ldrb	r0, [r4, #16]
 80047ec:	f8d5 8020 	ldr.w	r8, [r5, #32]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	47c0      	blx	r8
 80047f4:	e0dc      	b.n	80049b0 <PE_StateMachine_VDM+0x97c>
 80047f6:	6830      	ldr	r0, [r6, #0]
 80047f8:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 80047fc:	6030      	str	r0, [r6, #0]
 80047fe:	f363 0004 	bfi	r0, r3, #0, #5
 8004802:	6030      	str	r0, [r6, #0]
 8004804:	4633      	mov	r3, r6
 8004806:	f000 f966 	bl	8004ad6 <.text_29>
 800480a:	bf1d      	ittte	ne
 800480c:	6960      	ldrne	r0, [r4, #20]
 800480e:	0880      	lsrne	r0, r0, #2
 8004810:	f000 0001 	andne.w	r0, r0, #1
 8004814:	2002      	moveq	r0, #2
 8004816:	f000 f921 	bl	8004a5c <.text_24>
 800481a:	208d      	movs	r0, #141	@ 0x8d
 800481c:	f000 f9c2 	bl	8004ba4 <.text_38>
 8004820:	2800      	cmp	r0, #0
 8004822:	d10a      	bne.n	800483a <PE_StateMachine_VDM+0x806>
 8004824:	2055      	movs	r0, #85	@ 0x55
 8004826:	7720      	strb	r0, [r4, #28]
 8004828:	2155      	movs	r1, #85	@ 0x55
 800482a:	7c20      	ldrb	r0, [r4, #16]
 800482c:	f7fb fe93 	bl	8000556 <USBPD_PE_Notification>
 8004830:	f248 0032 	movw	r0, #32818	@ 0x8032
 8004834:	83e0      	strh	r0, [r4, #30]
 8004836:	f04f 0832 	mov.w	r8, #50	@ 0x32
 800483a:	e0f5      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 800483c:	f000 f906 	bl	8004a4c <.text_22>
 8004840:	f000 f900 	bl	8004a44 <.text_21>
 8004844:	d13c      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004846:	8829      	ldrh	r1, [r5, #0]
 8004848:	0bc8      	lsrs	r0, r1, #15
 800484a:	d139      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 800484c:	f000 f8f6 	bl	8004a3c <.text_20>
 8004850:	d036      	beq.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004852:	f000 f8fe 	bl	8004a52 <.text_23>
 8004856:	d133      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004858:	2a14      	cmp	r2, #20
 800485a:	d001      	beq.n	8004860 <PE_StateMachine_VDM+0x82c>
 800485c:	f000 f9a8 	bl	8004bb0 <.text_39>
 8004860:	2000      	movs	r0, #0
 8004862:	7720      	strb	r0, [r4, #28]
 8004864:	6869      	ldr	r1, [r5, #4]
 8004866:	f891 9002 	ldrb.w	r9, [r1, #2]
 800486a:	f009 001f 	and.w	r0, r9, #31
 800486e:	2805      	cmp	r0, #5
 8004870:	d126      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004872:	f3c9 1081 	ubfx	r0, r9, #6, #2
 8004876:	b318      	cbz	r0, 80048c0 <PE_StateMachine_VDM+0x88c>
 8004878:	2801      	cmp	r0, #1
 800487a:	d004      	beq.n	8004886 <PE_StateMachine_VDM+0x852>
 800487c:	d309      	bcc.n	8004892 <PE_StateMachine_VDM+0x85e>
 800487e:	2803      	cmp	r0, #3
 8004880:	d005      	beq.n	800488e <PE_StateMachine_VDM+0x85a>
 8004882:	d302      	bcc.n	800488a <PE_StateMachine_VDM+0x856>
 8004884:	e005      	b.n	8004892 <PE_StateMachine_VDM+0x85e>
 8004886:	2156      	movs	r1, #86	@ 0x56
 8004888:	e004      	b.n	8004894 <PE_StateMachine_VDM+0x860>
 800488a:	2157      	movs	r1, #87	@ 0x57
 800488c:	e002      	b.n	8004894 <PE_StateMachine_VDM+0x860>
 800488e:	2158      	movs	r1, #88	@ 0x58
 8004890:	e000      	b.n	8004894 <PE_StateMachine_VDM+0x860>
 8004892:	2155      	movs	r1, #85	@ 0x55
 8004894:	7c20      	ldrb	r0, [r4, #16]
 8004896:	f7fb fe5e 	bl	8000556 <USBPD_PE_Notification>
 800489a:	68e1      	ldr	r1, [r4, #12]
 800489c:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 800489e:	2800      	cmp	r0, #0
 80048a0:	d00d      	beq.n	80048be <PE_StateMachine_VDM+0x88a>
 80048a2:	6830      	ldr	r0, [r6, #0]
 80048a4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80048a8:	9000      	str	r0, [sp, #0]
 80048aa:	f3c9 1281 	ubfx	r2, r9, #6, #2
 80048ae:	68e5      	ldr	r5, [r4, #12]
 80048b0:	6833      	ldr	r3, [r6, #0]
 80048b2:	7839      	ldrb	r1, [r7, #0]
 80048b4:	7c20      	ldrb	r0, [r4, #16]
 80048b6:	f8d5 8024 	ldr.w	r8, [r5, #36]	@ 0x24
 80048ba:	0c1b      	lsrs	r3, r3, #16
 80048bc:	47c0      	blx	r8
 80048be:	e077      	b.n	80049b0 <PE_StateMachine_VDM+0x97c>
 80048c0:	7828      	ldrb	r0, [r5, #0]
 80048c2:	f000 001f 	and.w	r0, r0, #31
 80048c6:	2810      	cmp	r0, #16
 80048c8:	d07a      	beq.n	80049c0 <PE_StateMachine_VDM+0x98c>
 80048ca:	f000 f932 	bl	8004b32 <.text_33>
 80048ce:	d1b4      	bne.n	800483a <PE_StateMachine_VDM+0x806>
 80048d0:	e089      	b.n	80049e6 <PE_StateMachine_VDM+0x9b2>
 80048d2:	2100      	movs	r1, #0
 80048d4:	f88d 100c 	strb.w	r1, [sp, #12]
 80048d8:	f000 f939 	bl	8004b4e <.text_36>
 80048dc:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 80048de:	b145      	cbz	r5, 80048f2 <PE_StateMachine_VDM+0x8be>
 80048e0:	a805      	add	r0, sp, #20
 80048e2:	9000      	str	r0, [sp, #0]
 80048e4:	ab03      	add	r3, sp, #12
 80048e6:	7832      	ldrb	r2, [r6, #0]
 80048e8:	7839      	ldrb	r1, [r7, #0]
 80048ea:	7c20      	ldrb	r0, [r4, #16]
 80048ec:	f002 021f 	and.w	r2, r2, #31
 80048f0:	47a8      	blx	r5
 80048f2:	f000 f94b 	bl	8004b8c <.text_37>
 80048f6:	bf1d      	ittte	ne
 80048f8:	6960      	ldrne	r0, [r4, #20]
 80048fa:	0880      	lsrne	r0, r0, #2
 80048fc:	f000 0001 	andne.w	r0, r0, #1
 8004900:	2002      	moveq	r0, #2
 8004902:	9002      	str	r0, [sp, #8]
 8004904:	208f      	movs	r0, #143	@ 0x8f
 8004906:	f000 f9a5 	bl	8004c54 <.text_43>
 800490a:	2800      	cmp	r0, #0
 800490c:	d102      	bne.n	8004914 <PE_StateMachine_VDM+0x8e0>
 800490e:	205a      	movs	r0, #90	@ 0x5a
 8004910:	f000 f88e 	bl	8004a30 <.text_19>
 8004914:	e086      	b.n	8004a24 <PE_StateMachine_VDM+0x9f0>
 8004916:	8828      	ldrh	r0, [r5, #0]
 8004918:	0b00      	lsrs	r0, r0, #12
 800491a:	f000 0007 	and.w	r0, r0, #7
 800491e:	1e41      	subs	r1, r0, #1
 8004920:	f88d 1004 	strb.w	r1, [sp, #4]
 8004924:	f000 f892 	bl	8004a4c <.text_22>
 8004928:	f000 f88c 	bl	8004a44 <.text_21>
 800492c:	d143      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 800492e:	8829      	ldrh	r1, [r5, #0]
 8004930:	0bc8      	lsrs	r0, r1, #15
 8004932:	d140      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 8004934:	f000 f882 	bl	8004a3c <.text_20>
 8004938:	d03d      	beq.n	80049b6 <PE_StateMachine_VDM+0x982>
 800493a:	f000 f88a 	bl	8004a52 <.text_23>
 800493e:	d13a      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 8004940:	2a14      	cmp	r2, #20
 8004942:	d001      	beq.n	8004948 <PE_StateMachine_VDM+0x914>
 8004944:	f000 f934 	bl	8004bb0 <.text_39>
 8004948:	6868      	ldr	r0, [r5, #4]
 800494a:	7882      	ldrb	r2, [r0, #2]
 800494c:	6870      	ldr	r0, [r6, #4]
 800494e:	f002 011f 	and.w	r1, r2, #31
 8004952:	4281      	cmp	r1, r0
 8004954:	d12f      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 8004956:	f3c2 1081 	ubfx	r0, r2, #6, #2
 800495a:	b360      	cbz	r0, 80049b6 <PE_StateMachine_VDM+0x982>
 800495c:	68e1      	ldr	r1, [r4, #12]
 800495e:	6b88      	ldr	r0, [r1, #56]	@ 0x38
 8004960:	b330      	cbz	r0, 80049b0 <PE_StateMachine_VDM+0x97c>
 8004962:	2000      	movs	r0, #0
 8004964:	e015      	b.n	8004992 <PE_StateMachine_VDM+0x95e>
 8004966:	6869      	ldr	r1, [r5, #4]
 8004968:	0083      	lsls	r3, r0, #2
 800496a:	eb01 0803 	add.w	r8, r1, r3
 800496e:	3108      	adds	r1, #8
 8004970:	f898 c006 	ldrb.w	ip, [r8, #6]
 8004974:	f898 e007 	ldrb.w	lr, [r8, #7]
 8004978:	5ccb      	ldrb	r3, [r1, r3]
 800497a:	f898 1009 	ldrb.w	r1, [r8, #9]
 800497e:	eb0c 260e 	add.w	r6, ip, lr, lsl #8
 8004982:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 8004986:	ab02      	add	r3, sp, #8
 8004988:	eb06 6601 	add.w	r6, r6, r1, lsl #24
 800498c:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8004990:	1c40      	adds	r0, r0, #1
 8004992:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004996:	4288      	cmp	r0, r1
 8004998:	d3e5      	bcc.n	8004966 <PE_StateMachine_VDM+0x932>
 800499a:	a802      	add	r0, sp, #8
 800499c:	9000      	str	r0, [sp, #0]
 800499e:	ab01      	add	r3, sp, #4
 80049a0:	68e5      	ldr	r5, [r4, #12]
 80049a2:	7839      	ldrb	r1, [r7, #0]
 80049a4:	7c20      	ldrb	r0, [r4, #16]
 80049a6:	f8d5 8038 	ldr.w	r8, [r5, #56]	@ 0x38
 80049aa:	f002 021f 	and.w	r2, r2, #31
 80049ae:	47c0      	blx	r8
 80049b0:	2000      	movs	r0, #0
 80049b2:	83e0      	strh	r0, [r4, #30]
 80049b4:	e017      	b.n	80049e6 <PE_StateMachine_VDM+0x9b2>
 80049b6:	7829      	ldrb	r1, [r5, #0]
 80049b8:	f001 011f 	and.w	r1, r1, #31
 80049bc:	2910      	cmp	r1, #16
 80049be:	d10f      	bne.n	80049e0 <PE_StateMachine_VDM+0x9ac>
 80049c0:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80049c2:	7801      	ldrb	r1, [r0, #0]
 80049c4:	2914      	cmp	r1, #20
 80049c6:	d001      	beq.n	80049cc <PE_StateMachine_VDM+0x998>
 80049c8:	f000 f8f2 	bl	8004bb0 <.text_39>
 80049cc:	2000      	movs	r0, #0
 80049ce:	83e0      	strh	r0, [r4, #30]
 80049d0:	2103      	movs	r1, #3
 80049d2:	7461      	strb	r1, [r4, #17]
 80049d4:	4680      	mov	r8, r0
 80049d6:	7c20      	ldrb	r0, [r4, #16]
 80049d8:	2159      	movs	r1, #89	@ 0x59
 80049da:	f7fb fdbc 	bl	8000556 <USBPD_PE_Notification>
 80049de:	e023      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80049e0:	f000 f8a7 	bl	8004b32 <.text_33>
 80049e4:	d120      	bne.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80049e6:	2103      	movs	r1, #3
 80049e8:	7461      	strb	r1, [r4, #17]
 80049ea:	f04f 0800 	mov.w	r8, #0
 80049ee:	e01b      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80049f0:	2000      	movs	r0, #0
 80049f2:	f88d 000c 	strb.w	r0, [sp, #12]
 80049f6:	f000 f8aa 	bl	8004b4e <.text_36>
 80049fa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80049fc:	b11b      	cbz	r3, 8004a06 <PE_StateMachine_VDM+0x9d2>
 80049fe:	7c20      	ldrb	r0, [r4, #16]
 8004a00:	aa05      	add	r2, sp, #20
 8004a02:	a903      	add	r1, sp, #12
 8004a04:	4798      	blx	r3
 8004a06:	f000 f8c1 	bl	8004b8c <.text_37>
 8004a0a:	bf1d      	ittte	ne
 8004a0c:	6960      	ldrne	r0, [r4, #20]
 8004a0e:	0880      	lsrne	r0, r0, #2
 8004a10:	f000 0001 	andne.w	r0, r0, #1
 8004a14:	2002      	moveq	r0, #2
 8004a16:	9002      	str	r0, [sp, #8]
 8004a18:	2003      	movs	r0, #3
 8004a1a:	f000 f91b 	bl	8004c54 <.text_43>
 8004a1e:	b908      	cbnz	r0, 8004a24 <PE_StateMachine_VDM+0x9f0>
 8004a20:	205a      	movs	r0, #90	@ 0x5a
 8004a22:	7720      	strb	r0, [r4, #28]
 8004a24:	2100      	movs	r1, #0
 8004a26:	7079      	strb	r1, [r7, #1]
 8004a28:	4640      	mov	r0, r8
 8004a2a:	b01c      	add	sp, #112	@ 0x70
 8004a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004a30 <.text_19>:
 8004a30:	7720      	strb	r0, [r4, #28]
 8004a32:	f8a4 901e 	strh.w	r9, [r4, #30]
 8004a36:	f04f 081e 	mov.w	r8, #30
 8004a3a:	4770      	bx	lr

08004a3c <.text_20>:
 8004a3c:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8004a40:	2800      	cmp	r0, #0
 8004a42:	4770      	bx	lr

08004a44 <.text_21>:
 8004a44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004a46:	780a      	ldrb	r2, [r1, #0]
 8004a48:	4282      	cmp	r2, r0
 8004a4a:	4770      	bx	lr

08004a4c <.text_22>:
 8004a4c:	7838      	ldrb	r0, [r7, #0]
 8004a4e:	f7fb bfe1 	b.w	8000a14 <PE_Convert_SOPRxEvent>

08004a52 <.text_23>:
 8004a52:	7828      	ldrb	r0, [r5, #0]
 8004a54:	f000 001f 	and.w	r0, r0, #31
 8004a58:	280f      	cmp	r0, #15
 8004a5a:	4770      	bx	lr

08004a5c <.text_24>:
 8004a5c:	9002      	str	r0, [sp, #8]
 8004a5e:	f8cd a000 	str.w	sl, [sp]
 8004a62:	4770      	bx	lr

08004a64 <.text_25>:
 8004a64:	6860      	ldr	r0, [r4, #4]
 8004a66:	7802      	ldrb	r2, [r0, #0]
 8004a68:	f002 020b 	and.w	r2, r2, #11
 8004a6c:	2a09      	cmp	r2, #9
 8004a6e:	4770      	bx	lr

08004a70 <.text_26>:
 8004a70:	6031      	str	r1, [r6, #0]
 8004a72:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004a76:	6031      	str	r1, [r6, #0]
 8004a78:	6860      	ldr	r0, [r4, #4]
 8004a7a:	6801      	ldr	r1, [r0, #0]
 8004a7c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004a80:	6831      	ldr	r1, [r6, #0]
 8004a82:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 8004a86:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004a8a:	6031      	str	r1, [r6, #0]
 8004a8c:	4770      	bx	lr

08004a8e <.text_27>:
 8004a8e:	6030      	str	r0, [r6, #0]
 8004a90:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8004a94:	6030      	str	r0, [r6, #0]
 8004a96:	6860      	ldr	r0, [r4, #4]
 8004a98:	6832      	ldr	r2, [r6, #0]
 8004a9a:	6801      	ldr	r1, [r0, #0]
 8004a9c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004aa0:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8004aa4:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8004aa8:	6032      	str	r2, [r6, #0]
 8004aaa:	6860      	ldr	r0, [r4, #4]
 8004aac:	6801      	ldr	r1, [r0, #0]
 8004aae:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8004ab2:	4770      	bx	lr

08004ab4 <.text_28>:
 8004ab4:	f361 401f 	bfi	r0, r1, #16, #16
 8004ab8:	6030      	str	r0, [r6, #0]
 8004aba:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8004abe:	6030      	str	r0, [r6, #0]
 8004ac0:	6860      	ldr	r0, [r4, #4]
 8004ac2:	6801      	ldr	r1, [r0, #0]
 8004ac4:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004ac8:	6831      	ldr	r1, [r6, #0]
 8004aca:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 8004ace:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004ad2:	6031      	str	r1, [r6, #0]
 8004ad4:	4770      	bx	lr

08004ad6 <.text_29>:
 8004ad6:	8931      	ldrh	r1, [r6, #8]
 8004ad8:	f361 401f 	bfi	r0, r1, #16, #16
 8004adc:	6030      	str	r0, [r6, #0]
 8004ade:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8004ae2:	6030      	str	r0, [r6, #0]
 8004ae4:	6860      	ldr	r0, [r4, #4]
 8004ae6:	6832      	ldr	r2, [r6, #0]
 8004ae8:	6801      	ldr	r1, [r0, #0]
 8004aea:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004aee:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8004af2:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8004af6:	6032      	str	r2, [r6, #0]
 8004af8:	6960      	ldr	r0, [r4, #20]
 8004afa:	6831      	ldr	r1, [r6, #0]
 8004afc:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8004b00:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8004b04:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8004b08:	6031      	str	r1, [r6, #0]
 8004b0a:	6860      	ldr	r0, [r4, #4]
 8004b0c:	6801      	ldr	r1, [r0, #0]
 8004b0e:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004b12:	2800      	cmp	r0, #0
 8004b14:	4770      	bx	lr

08004b16 <.text_30>:
 8004b16:	6830      	ldr	r0, [r6, #0]
 8004b18:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 8004b1c:	6030      	str	r0, [r6, #0]
 8004b1e:	4633      	mov	r3, r6
 8004b20:	4770      	bx	lr

08004b22 <.text_31>:
 8004b22:	6830      	ldr	r0, [r6, #0]
 8004b24:	f040 00c0 	orr.w	r0, r0, #192	@ 0xc0
 8004b28:	4770      	bx	lr

08004b2a <.text_32>:
 8004b2a:	6830      	ldr	r0, [r6, #0]
 8004b2c:	f368 1087 	bfi	r0, r8, #6, #2
 8004b30:	4770      	bx	lr

08004b32 <.text_33>:
 8004b32:	8be0      	ldrh	r0, [r4, #30]
 8004b34:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004b38:	4770      	bx	lr

08004b3a <.text_34>:
 8004b3a:	8be0      	ldrh	r0, [r4, #30]
 8004b3c:	2501      	movs	r5, #1
 8004b3e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004b42:	4770      	bx	lr

08004b44 <.text_35>:
 8004b44:	6830      	ldr	r0, [r6, #0]
 8004b46:	f36a 1087 	bfi	r0, sl, #6, #2
 8004b4a:	6030      	str	r0, [r6, #0]
 8004b4c:	4770      	bx	lr

08004b4e <.text_36>:
 8004b4e:	6830      	ldr	r0, [r6, #0]
 8004b50:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 8004b54:	6030      	str	r0, [r6, #0]
 8004b56:	6871      	ldr	r1, [r6, #4]
 8004b58:	f361 0004 	bfi	r0, r1, #0, #5
 8004b5c:	6030      	str	r0, [r6, #0]
 8004b5e:	8931      	ldrh	r1, [r6, #8]
 8004b60:	f361 401f 	bfi	r0, r1, #16, #16
 8004b64:	6030      	str	r0, [r6, #0]
 8004b66:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8004b6a:	6030      	str	r0, [r6, #0]
 8004b6c:	6860      	ldr	r0, [r4, #4]
 8004b6e:	6801      	ldr	r1, [r0, #0]
 8004b70:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004b74:	6831      	ldr	r1, [r6, #0]
 8004b76:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 8004b7a:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004b7e:	6031      	str	r1, [r6, #0]
 8004b80:	f36a 210a 	bfi	r1, sl, #8, #3
 8004b84:	6031      	str	r1, [r6, #0]
 8004b86:	9104      	str	r1, [sp, #16]
 8004b88:	68e0      	ldr	r0, [r4, #12]
 8004b8a:	4770      	bx	lr

08004b8c <.text_37>:
 8004b8c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004b90:	1c40      	adds	r0, r0, #1
 8004b92:	f88d 000c 	strb.w	r0, [sp, #12]
 8004b96:	ab04      	add	r3, sp, #16
 8004b98:	6860      	ldr	r0, [r4, #4]
 8004b9a:	6801      	ldr	r1, [r0, #0]
 8004b9c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	4770      	bx	lr

08004ba4 <.text_38>:
 8004ba4:	9001      	str	r0, [sp, #4]
 8004ba6:	220f      	movs	r2, #15
 8004ba8:	7839      	ldrb	r1, [r7, #0]
 8004baa:	4620      	mov	r0, r4
 8004bac:	f7fc bc89 	b.w	80014c2 <PE_Send_DataMessage>

08004bb0 <.text_39>:
 8004bb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004bb2:	2014      	movs	r0, #20
 8004bb4:	7008      	strb	r0, [r1, #0]
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7fb bef8 	b.w	80009ac <PE_Clear_RxEvent>

08004bbc <.text_40>:
 8004bbc:	6830      	ldr	r0, [r6, #0]
 8004bbe:	68e3      	ldr	r3, [r4, #12]
 8004bc0:	f3c0 2202 	ubfx	r2, r0, #8, #3
 8004bc4:	0c01      	lsrs	r1, r0, #16
 8004bc6:	7c20      	ldrb	r0, [r4, #16]
 8004bc8:	4770      	bx	lr

08004bca <PE_StateMachine_UVDM>:
 8004bca:	b570      	push	{r4, r5, r6, lr}
 8004bcc:	2914      	cmp	r1, #20
 8004bce:	b08c      	sub	sp, #48	@ 0x30
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	d134      	bne.n	8004c3e <PE_StateMachine_UVDM+0x74>
 8004bd4:	68e0      	ldr	r0, [r4, #12]
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	bf1c      	itt	ne
 8004bda:	6bc0      	ldrne	r0, [r0, #60]	@ 0x3c
 8004bdc:	2800      	cmpne	r0, #0
 8004bde:	d02e      	beq.n	8004c3e <PE_StateMachine_UVDM+0x74>
 8004be0:	2100      	movs	r1, #0
 8004be2:	f88d 100c 	strb.w	r1, [sp, #12]
 8004be6:	ab06      	add	r3, sp, #24
 8004be8:	68e5      	ldr	r5, [r4, #12]
 8004bea:	7c20      	ldrb	r0, [r4, #16]
 8004bec:	6bee      	ldr	r6, [r5, #60]	@ 0x3c
 8004bee:	aa03      	add	r2, sp, #12
 8004bf0:	a904      	add	r1, sp, #16
 8004bf2:	47b0      	blx	r6
 8004bf4:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004bf8:	9804      	ldr	r0, [sp, #16]
 8004bfa:	1c49      	adds	r1, r1, #1
 8004bfc:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8004c00:	f88d 100c 	strb.w	r1, [sp, #12]
 8004c04:	9004      	str	r0, [sp, #16]
 8004c06:	f104 0531 	add.w	r5, r4, #49	@ 0x31
 8004c0a:	9904      	ldr	r1, [sp, #16]
 8004c0c:	9105      	str	r1, [sp, #20]
 8004c0e:	ab05      	add	r3, sp, #20
 8004c10:	f000 f81a 	bl	8004c48 <.text_42+0x6>
 8004c14:	bf1d      	ittte	ne
 8004c16:	6960      	ldrne	r0, [r4, #20]
 8004c18:	0880      	lsrne	r0, r0, #2
 8004c1a:	f000 0001 	andne.w	r0, r0, #1
 8004c1e:	2002      	moveq	r0, #2
 8004c20:	9002      	str	r0, [sp, #8]
 8004c22:	2003      	movs	r0, #3
 8004c24:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004c28:	9100      	str	r1, [sp, #0]
 8004c2a:	9001      	str	r0, [sp, #4]
 8004c2c:	220f      	movs	r2, #15
 8004c2e:	7829      	ldrb	r1, [r5, #0]
 8004c30:	f000 f816 	bl	8004c60 <.text_44>
 8004c34:	b908      	cbnz	r0, 8004c3a <PE_StateMachine_UVDM+0x70>
 8004c36:	2059      	movs	r0, #89	@ 0x59
 8004c38:	7720      	strb	r0, [r4, #28]
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	7069      	strb	r1, [r5, #1]
 8004c3e:	b00c      	add	sp, #48	@ 0x30
 8004c40:	bd70      	pop	{r4, r5, r6, pc}

08004c42 <.text_42>:
 8004c42:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8004c46:	6031      	str	r1, [r6, #0]
 8004c48:	6860      	ldr	r0, [r4, #4]
 8004c4a:	6801      	ldr	r1, [r0, #0]
 8004c4c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004c50:	2800      	cmp	r0, #0
 8004c52:	4770      	bx	lr

08004c54 <.text_43>:
 8004c54:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004c58:	9100      	str	r1, [sp, #0]
 8004c5a:	9001      	str	r0, [sp, #4]
 8004c5c:	220f      	movs	r2, #15
 8004c5e:	7839      	ldrb	r1, [r7, #0]

08004c60 <.text_44>:
 8004c60:	4620      	mov	r0, r4
 8004c62:	f7fc bc2e 	b.w	80014c2 <PE_Send_DataMessage>

08004c66 <PE_Check_DataMessageVDM>:
 8004c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c68:	4605      	mov	r5, r0
 8004c6a:	6828      	ldr	r0, [r5, #0]
 8004c6c:	6841      	ldr	r1, [r0, #4]
 8004c6e:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004c72:	2800      	cmp	r0, #0
 8004c74:	bf1c      	itt	ne
 8004c76:	68e8      	ldrne	r0, [r5, #12]
 8004c78:	2800      	cmpne	r0, #0
 8004c7a:	d04e      	beq.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004c7c:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8004c7e:	7888      	ldrb	r0, [r1, #2]
 8004c80:	78ca      	ldrb	r2, [r1, #3]
 8004c82:	790b      	ldrb	r3, [r1, #4]
 8004c84:	7949      	ldrb	r1, [r1, #5]
 8004c86:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8004c8a:	eb00 4003 	add.w	r0, r0, r3, lsl #16
 8004c8e:	eb00 6001 	add.w	r0, r0, r1, lsl #24
 8004c92:	4601      	mov	r1, r0
 8004c94:	0bca      	lsrs	r2, r1, #15
 8004c96:	f012 0201 	ands.w	r2, r2, #1
 8004c9a:	d012      	beq.n	8004cc2 <PE_Check_DataMessageVDM+0x5c>
 8004c9c:	2a01      	cmp	r2, #1
 8004c9e:	bf02      	ittt	eq
 8004ca0:	f8c5 1250 	streq.w	r1, [r5, #592]	@ 0x250
 8004ca4:	f3c0 1081 	ubfxeq	r0, r0, #6, #2
 8004ca8:	2800      	cmpeq	r0, #0
 8004caa:	d136      	bne.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004cac:	6828      	ldr	r0, [r5, #0]
 8004cae:	6841      	ldr	r1, [r0, #4]
 8004cb0:	f3c1 2000 	ubfx	r0, r1, #8, #1
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d030      	beq.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004cb8:	4628      	mov	r0, r5
 8004cba:	e8bd 40f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, lr}
 8004cbe:	f7ff b939 	b.w	8003f34 <PE_Receive_SVDM>
 8004cc2:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004cc4:	0b00      	lsrs	r0, r0, #12
 8004cc6:	f000 0007 	and.w	r0, r0, #7
 8004cca:	1e42      	subs	r2, r0, #1
 8004ccc:	f885 24ac 	strb.w	r2, [r5, #1196]	@ 0x4ac
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f205 4394 	addw	r3, r5, #1172	@ 0x494
 8004cd6:	e00f      	b.n	8004cf8 <PE_Check_DataMessageVDM+0x92>
 8004cd8:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8004cda:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8004cde:	7994      	ldrb	r4, [r2, #6]
 8004ce0:	79d6      	ldrb	r6, [r2, #7]
 8004ce2:	eb04 2706 	add.w	r7, r4, r6, lsl #8
 8004ce6:	7a14      	ldrb	r4, [r2, #8]
 8004ce8:	7a52      	ldrb	r2, [r2, #9]
 8004cea:	eb07 4704 	add.w	r7, r7, r4, lsl #16
 8004cee:	eb07 6702 	add.w	r7, r7, r2, lsl #24
 8004cf2:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 8004cf6:	1c40      	adds	r0, r0, #1
 8004cf8:	f895 24ac 	ldrb.w	r2, [r5, #1196]	@ 0x4ac
 8004cfc:	4290      	cmp	r0, r2
 8004cfe:	d3eb      	bcc.n	8004cd8 <PE_Check_DataMessageVDM+0x72>
 8004d00:	68e8      	ldr	r0, [r5, #12]
 8004d02:	2800      	cmp	r0, #0
 8004d04:	bf1c      	itt	ne
 8004d06:	6c04      	ldrne	r4, [r0, #64]	@ 0x40
 8004d08:	2c00      	cmpne	r4, #0
 8004d0a:	d006      	beq.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004d0c:	7c28      	ldrb	r0, [r5, #16]
 8004d0e:	f205 42ac 	addw	r2, r5, #1196	@ 0x4ac
 8004d12:	47a0      	blx	r4
 8004d14:	b908      	cbnz	r0, 8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004d16:	2003      	movs	r0, #3
 8004d18:	e006      	b.n	8004d28 <PE_Check_DataMessageVDM+0xc2>
 8004d1a:	6868      	ldr	r0, [r5, #4]
 8004d1c:	7801      	ldrb	r1, [r0, #0]
 8004d1e:	f001 0103 	and.w	r1, r1, #3
 8004d22:	2902      	cmp	r1, #2
 8004d24:	d101      	bne.n	8004d2a <PE_Check_DataMessageVDM+0xc4>
 8004d26:	2001      	movs	r0, #1
 8004d28:	7468      	strb	r0, [r5, #17]
 8004d2a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08004d2c <PE_SVDM_CheckIdentity>:
 8004d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d2e:	f000 f8f3 	bl	8004f18 <.text_51>
 8004d32:	0b24      	lsrs	r4, r4, #12
 8004d34:	f004 0407 	and.w	r4, r4, #7
 8004d38:	1e65      	subs	r5, r4, #1
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	b2ee      	uxtb	r6, r5
 8004d3e:	2e03      	cmp	r6, #3
 8004d40:	f0c0 8081 	bcc.w	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004d44:	780c      	ldrb	r4, [r1, #0]
 8004d46:	784e      	ldrb	r6, [r1, #1]
 8004d48:	788f      	ldrb	r7, [r1, #2]
 8004d4a:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8004d4e:	78ce      	ldrb	r6, [r1, #3]
 8004d50:	eb04 4407 	add.w	r4, r4, r7, lsl #16
 8004d54:	eb04 6406 	add.w	r4, r4, r6, lsl #24
 8004d58:	6014      	str	r4, [r2, #0]
 8004d5a:	790f      	ldrb	r7, [r1, #4]
 8004d5c:	794e      	ldrb	r6, [r1, #5]
 8004d5e:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8004d62:	798f      	ldrb	r7, [r1, #6]
 8004d64:	eb06 4707 	add.w	r7, r6, r7, lsl #16
 8004d68:	79ce      	ldrb	r6, [r1, #7]
 8004d6a:	eb07 6606 	add.w	r6, r7, r6, lsl #24
 8004d6e:	6056      	str	r6, [r2, #4]
 8004d70:	7a0f      	ldrb	r7, [r1, #8]
 8004d72:	f891 c009 	ldrb.w	ip, [r1, #9]
 8004d76:	eb07 2e0c 	add.w	lr, r7, ip, lsl #8
 8004d7a:	7a8f      	ldrb	r7, [r1, #10]
 8004d7c:	f891 c00b 	ldrb.w	ip, [r1, #11]
 8004d80:	eb0e 4707 	add.w	r7, lr, r7, lsl #16
 8004d84:	eb07 670c 	add.w	r7, r7, ip, lsl #24
 8004d88:	6097      	str	r7, [r2, #8]
 8004d8a:	2608      	movs	r6, #8
 8004d8c:	1eef      	subs	r7, r5, #3
 8004d8e:	f892 5020 	ldrb.w	r5, [r2, #32]
 8004d92:	f005 0ee0 	and.w	lr, r5, #224	@ 0xe0
 8004d96:	b2fd      	uxtb	r5, r7
 8004d98:	2d00      	cmp	r5, #0
 8004d9a:	f882 e020 	strb.w	lr, [r2, #32]
 8004d9e:	d053      	beq.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004da0:	0ee4      	lsrs	r4, r4, #27
 8004da2:	1e7d      	subs	r5, r7, #1
 8004da4:	f004 0407 	and.w	r4, r4, #7
 8004da8:	2c05      	cmp	r4, #5
 8004daa:	d84c      	bhi.n	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004dac:	e8df f004 	tbb	[pc, r4]
 8004db0:	2303030c 	.word	0x2303030c
 8004db4:	2f29      	.short	0x2f29
 8004db6:	f04e 0408 	orr.w	r4, lr, #8
 8004dba:	f000 f847 	bl	8004e4c <.text_47>
 8004dbe:	6194      	str	r4, [r2, #24]
 8004dc0:	462f      	mov	r7, r5
 8004dc2:	b2fc      	uxtb	r4, r7
 8004dc4:	2c00      	cmp	r4, #0
 8004dc6:	d03f      	beq.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004dc8:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 8004dca:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8004dce:	2802      	cmp	r0, #2
 8004dd0:	d33a      	bcc.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004dd2:	6810      	ldr	r0, [r2, #0]
 8004dd4:	0dc0      	lsrs	r0, r0, #23
 8004dd6:	f010 0007 	ands.w	r0, r0, #7
 8004dda:	d035      	beq.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004ddc:	1e40      	subs	r0, r0, #1
 8004dde:	2802      	cmp	r0, #2
 8004de0:	d831      	bhi.n	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004de2:	f892 0020 	ldrb.w	r0, [r2, #32]
 8004de6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8004dea:	2800      	cmp	r0, #0
 8004dec:	bf1a      	itte	ne
 8004dee:	3608      	addne	r6, #8
 8004df0:	1e7f      	subne	r7, r7, #1
 8004df2:	1d36      	addeq	r6, r6, #4
 8004df4:	e011      	b.n	8004e1a <PE_SVDM_CheckIdentity+0xee>
 8004df6:	f04e 0401 	orr.w	r4, lr, #1
 8004dfa:	f000 f827 	bl	8004e4c <.text_47>
 8004dfe:	60d4      	str	r4, [r2, #12]
 8004e00:	e7de      	b.n	8004dc0 <PE_SVDM_CheckIdentity+0x94>
 8004e02:	f04e 0404 	orr.w	r4, lr, #4
 8004e06:	f000 f821 	bl	8004e4c <.text_47>
 8004e0a:	6154      	str	r4, [r2, #20]
 8004e0c:	e7d8      	b.n	8004dc0 <PE_SVDM_CheckIdentity+0x94>
 8004e0e:	f04e 0402 	orr.w	r4, lr, #2
 8004e12:	f000 f81b 	bl	8004e4c <.text_47>
 8004e16:	6114      	str	r4, [r2, #16]
 8004e18:	e7d2      	b.n	8004dc0 <PE_SVDM_CheckIdentity+0x94>
 8004e1a:	b2ff      	uxtb	r7, r7
 8004e1c:	2f01      	cmp	r7, #1
 8004e1e:	d112      	bne.n	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004e20:	f892 0020 	ldrb.w	r0, [r2, #32]
 8004e24:	f040 0010 	orr.w	r0, r0, #16
 8004e28:	f882 0020 	strb.w	r0, [r2, #32]
 8004e2c:	1988      	adds	r0, r1, r6
 8004e2e:	7801      	ldrb	r1, [r0, #0]
 8004e30:	7844      	ldrb	r4, [r0, #1]
 8004e32:	eb01 2504 	add.w	r5, r1, r4, lsl #8
 8004e36:	7881      	ldrb	r1, [r0, #2]
 8004e38:	78c0      	ldrb	r0, [r0, #3]
 8004e3a:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 8004e3e:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 8004e42:	61d5      	str	r5, [r2, #28]
 8004e44:	e000      	b.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004e46:	2302      	movs	r3, #2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e4c <.text_47>:
 8004e4c:	f882 4020 	strb.w	r4, [r2, #32]
 8004e50:	260c      	movs	r6, #12
 8004e52:	7b0c      	ldrb	r4, [r1, #12]
 8004e54:	7b4f      	ldrb	r7, [r1, #13]
 8004e56:	eb04 2707 	add.w	r7, r4, r7, lsl #8
 8004e5a:	7b8c      	ldrb	r4, [r1, #14]
 8004e5c:	eb07 4404 	add.w	r4, r7, r4, lsl #16
 8004e60:	7bcf      	ldrb	r7, [r1, #15]
 8004e62:	eb04 6407 	add.w	r4, r4, r7, lsl #24
 8004e66:	4770      	bx	lr

08004e68 <PE_SVDM_CheckSVIDs>:
 8004e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8004f24 <.text_52>)
 8004e6c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004e70:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 8004e72:	0b1b      	lsrs	r3, r3, #12
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	1e5b      	subs	r3, r3, #1
 8004e7a:	2400      	movs	r4, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2500      	movs	r5, #0
 8004e80:	7614      	strb	r4, [r2, #24]
 8004e82:	7654      	strb	r4, [r2, #25]
 8004e84:	f000 f816 	bl	8004eb4 <.text_49>
 8004e88:	bf19      	ittee	ne
 8004e8a:	1c76      	addne	r6, r6, #1
 8004e8c:	7616      	strbne	r6, [r2, #24]
 8004e8e:	2501      	moveq	r5, #1
 8004e90:	7655      	strbeq	r5, [r2, #25]
 8004e92:	1ca4      	adds	r4, r4, #2
 8004e94:	b2e4      	uxtb	r4, r4
 8004e96:	f000 f80d 	bl	8004eb4 <.text_49>
 8004e9a:	bf19      	ittee	ne
 8004e9c:	1c76      	addne	r6, r6, #1
 8004e9e:	7616      	strbne	r6, [r2, #24]
 8004ea0:	2501      	moveq	r5, #1
 8004ea2:	7655      	strbeq	r5, [r2, #25]
 8004ea4:	1ca4      	adds	r4, r4, #2
 8004ea6:	b2e4      	uxtb	r4, r4
 8004ea8:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8004eac:	d201      	bcs.n	8004eb2 <PE_SVDM_CheckSVIDs+0x4a>
 8004eae:	0028      	movs	r0, r5
 8004eb0:	d0e8      	beq.n	8004e84 <PE_SVDM_CheckSVIDs+0x1c>
 8004eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004eb4 <.text_49>:
 8004eb4:	1c4e      	adds	r6, r1, #1
 8004eb6:	5d08      	ldrb	r0, [r1, r4]
 8004eb8:	5d37      	ldrb	r7, [r6, r4]
 8004eba:	eb00 2607 	add.w	r6, r0, r7, lsl #8
 8004ebe:	7e10      	ldrb	r0, [r2, #24]
 8004ec0:	f822 6010 	strh.w	r6, [r2, r0, lsl #1]
 8004ec4:	7e16      	ldrb	r6, [r2, #24]
 8004ec6:	4637      	mov	r7, r6
 8004ec8:	f832 0017 	ldrh.w	r0, [r2, r7, lsl #1]
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	4770      	bx	lr

08004ed0 <PE_SVDM_CheckModes>:
 8004ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed2:	f000 f821 	bl	8004f18 <.text_51>
 8004ed6:	8399      	strh	r1, [r3, #28]
 8004ed8:	0b24      	lsrs	r4, r4, #12
 8004eda:	f004 0407 	and.w	r4, r4, #7
 8004ede:	1e60      	subs	r0, r4, #1
 8004ee0:	2400      	movs	r4, #0
 8004ee2:	b2c0      	uxtb	r0, r0
 8004ee4:	601c      	str	r4, [r3, #0]
 8004ee6:	1916      	adds	r6, r2, r4
 8004ee8:	5d15      	ldrb	r5, [r2, r4]
 8004eea:	7871      	ldrb	r1, [r6, #1]
 8004eec:	eb05 2701 	add.w	r7, r5, r1, lsl #8
 8004ef0:	1911      	adds	r1, r2, r4
 8004ef2:	1d24      	adds	r4, r4, #4
 8004ef4:	788d      	ldrb	r5, [r1, #2]
 8004ef6:	78ce      	ldrb	r6, [r1, #3]
 8004ef8:	6819      	ldr	r1, [r3, #0]
 8004efa:	eb07 4705 	add.w	r7, r7, r5, lsl #16
 8004efe:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8004f02:	eb07 6706 	add.w	r7, r7, r6, lsl #24
 8004f06:	606f      	str	r7, [r5, #4]
 8004f08:	b2e4      	uxtb	r4, r4
 8004f0a:	681e      	ldr	r6, [r3, #0]
 8004f0c:	1c76      	adds	r6, r6, #1
 8004f0e:	ebb4 0f80 	cmp.w	r4, r0, lsl #2
 8004f12:	601e      	str	r6, [r3, #0]
 8004f14:	d3e7      	bcc.n	8004ee6 <PE_SVDM_CheckModes+0x16>
 8004f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f18 <.text_51>:
 8004f18:	4c02      	ldr	r4, [pc, #8]	@ (8004f24 <.text_52>)
 8004f1a:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004f1e:	8e84      	ldrh	r4, [r0, #52]	@ 0x34
 8004f20:	4770      	bx	lr
	...

08004f24 <.text_52>:
 8004f24:	200002d4 	.word	0x200002d4

08004f28 <USBPD_PRL_TimerCounter>:
 8004f28:	b510      	push	{r4, lr}
 8004f2a:	f000 f879 	bl	8005020 <.text_12>
 8004f2e:	7919      	ldrb	r1, [r3, #4]
 8004f30:	b111      	cbz	r1, 8004f38 <USBPD_PRL_TimerCounter+0x10>
 8004f32:	7919      	ldrb	r1, [r3, #4]
 8004f34:	1e4c      	subs	r4, r1, #1
 8004f36:	711c      	strb	r4, [r3, #4]
 8004f38:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 8004f3c:	7848      	ldrb	r0, [r1, #1]
 8004f3e:	b108      	cbz	r0, 8004f44 <USBPD_PRL_TimerCounter+0x1c>
 8004f40:	1e40      	subs	r0, r0, #1
 8004f42:	7048      	strb	r0, [r1, #1]
 8004f44:	bd10      	pop	{r4, pc}

08004f46 <USBPD_PRL_Init>:
 8004f46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f4a:	4680      	mov	r8, r0
 8004f4c:	460e      	mov	r6, r1
 8004f4e:	4617      	mov	r7, r2
 8004f50:	461d      	mov	r5, r3
 8004f52:	f44f 709c 	mov.w	r0, #312	@ 0x138
 8004f56:	f012 f819 	bl	8016f8c <malloc>
 8004f5a:	0004      	movs	r4, r0
 8004f5c:	f04f 0916 	mov.w	r9, #22
 8004f60:	d019      	beq.n	8004f96 <USBPD_PRL_Init+0x50>
 8004f62:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8004f66:	f012 f961 	bl	801722c <__aeabi_memclr>
 8004f6a:	f000 fca8 	bl	80058be <.text_34>
 8004f6e:	f8df 0a48 	ldr.w	r0, [pc, #2632]	@ 80059b8 <.text_40>
 8004f72:	4641      	mov	r1, r8
 8004f74:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8004f78:	62a7      	str	r7, [r4, #40]	@ 0x28
 8004f7a:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	9000      	str	r0, [sp, #0]
 8004f80:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 8004f84:	6870      	ldr	r0, [r6, #4]
 8004f86:	f60f 21a4 	addw	r1, pc, #2724	@ 0xaa4
 8004f8a:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8004f8e:	4640      	mov	r0, r8
 8004f90:	f00a fdb8 	bl	800fb04 <USBPD_PHY_Init>
 8004f94:	4681      	mov	r9, r0
 8004f96:	4648      	mov	r0, r9
 8004f98:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08004f9c <USBPD_PRL_GetMemoryConsumption>:
 8004f9c:	f44f 706a 	mov.w	r0, #936	@ 0x3a8
 8004fa0:	4770      	bx	lr

08004fa2 <USBPD_PRL_SetHeader>:
 8004fa2:	b530      	push	{r4, r5, lr}
 8004fa4:	f8df 4a10 	ldr.w	r4, [pc, #2576]	@ 80059b8 <.text_40>
 8004fa8:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8004fac:	8a6d      	ldrh	r5, [r5, #18]
 8004fae:	f361 2508 	bfi	r5, r1, #8, #1
 8004fb2:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8004fb6:	824d      	strh	r5, [r1, #18]
 8004fb8:	f362 1545 	bfi	r5, r2, #5, #1
 8004fbc:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8004fc0:	824d      	strh	r5, [r1, #18]
 8004fc2:	f363 1587 	bfi	r5, r3, #6, #2
 8004fc6:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004fca:	8245      	strh	r5, [r0, #18]
 8004fcc:	bd30      	pop	{r4, r5, pc}

08004fce <USBPD_PRL_SetHeaderPowerRole>:
 8004fce:	b510      	push	{r4, lr}
 8004fd0:	f000 f80b 	bl	8004fea <.text_9>
 8004fd4:	f361 2408 	bfi	r4, r1, #8, #1
 8004fd8:	825c      	strh	r4, [r3, #18]
 8004fda:	bd10      	pop	{r4, pc}

08004fdc <USBPD_PRL_SetHeaderDataRole>:
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	f000 f804 	bl	8004fea <.text_9>
 8004fe2:	f361 1445 	bfi	r4, r1, #5, #1
 8004fe6:	825c      	strh	r4, [r3, #18]
 8004fe8:	bd10      	pop	{r4, pc}

08004fea <.text_9>:
 8004fea:	f8df 29cc 	ldr.w	r2, [pc, #2508]	@ 80059b8 <.text_40>
 8004fee:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8004ff2:	8a5c      	ldrh	r4, [r3, #18]
 8004ff4:	4770      	bx	lr

08004ff6 <USBPD_PRL_SetHeaderSpecification>:
 8004ff6:	b510      	push	{r4, lr}
 8004ff8:	f7ff fff7 	bl	8004fea <.text_9>
 8004ffc:	f361 1487 	bfi	r4, r1, #6, #2
 8005000:	825c      	strh	r4, [r3, #18]
 8005002:	bd10      	pop	{r4, pc}

08005004 <USBPD_PRL_CBL_SetHeaderSpecification>:
 8005004:	b540      	push	{r6, lr}
 8005006:	f000 f80b 	bl	8005020 <.text_12>
 800500a:	8a9e      	ldrh	r6, [r3, #20]
 800500c:	f361 1687 	bfi	r6, r1, #6, #2
 8005010:	829e      	strh	r6, [r3, #20]
 8005012:	8adb      	ldrh	r3, [r3, #22]
 8005014:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005018:	f361 1387 	bfi	r3, r1, #6, #2
 800501c:	82c3      	strh	r3, [r0, #22]
 800501e:	bd40      	pop	{r6, pc}

08005020 <.text_12>:
 8005020:	f8df 2994 	ldr.w	r2, [pc, #2452]	@ 80059b8 <.text_40>
 8005024:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8005028:	4770      	bx	lr

0800502a <USBPD_PRL_SRCSetSinkNG>:
 800502a:	f00a be46 	b.w	800fcba <USBPD_PHY_SetResistor_SinkTxNG>

0800502e <USBPD_PRL_SRCReleaseSinkNG>:
 800502e:	b510      	push	{r4, lr}
 8005030:	4604      	mov	r4, r0
 8005032:	f00a fe4f 	bl	800fcd4 <USBPD_PHY_SetResistor_SinkTxOK>
 8005036:	f8df 1980 	ldr.w	r1, [pc, #2432]	@ 80059b8 <.text_40>
 800503a:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 800503e:	2000      	movs	r0, #0
 8005040:	7150      	strb	r0, [r2, #5]
 8005042:	bd10      	pop	{r4, pc}

08005044 <USBPD_PRL_IsResistor_SinkTxOK>:
 8005044:	f00a be68 	b.w	800fd18 <USBPD_PHY_IsResistor_SinkTxOk>

08005048 <USBPD_PRL_FastRoleSwapSignalling>:
 8005048:	f00a be74 	b.w	800fd34 <USBPD_PHY_FastRoleSwapSignalling>

0800504c <PRL_FastRoleSwapReception>:
 800504c:	f7fb be1a 	b.w	8000c84 <PE_PRL_FastRoleSwapReception>

08005050 <USBPD_PRL_SOPCapability>:
 8005050:	f00a be4e 	b.w	800fcf0 <USBPD_PHY_SOPSupported>

08005054 <USBPD_PRL_SendMessage>:
 8005054:	e92d 4dfd 	stmdb	sp!, {r0, r2, r3, r4, r5, r6, r7, r8, sl, fp, lr}
 8005058:	f8df a95c 	ldr.w	sl, [pc, #2396]	@ 80059b8 <.text_40>
 800505c:	b083      	sub	sp, #12
 800505e:	4680      	mov	r8, r0
 8005060:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8005064:	4694      	mov	ip, r2
 8005066:	f10c 0701 	add.w	r7, ip, #1
 800506a:	2403      	movs	r4, #3
 800506c:	7938      	ldrb	r0, [r7, #4]
 800506e:	b118      	cbz	r0, 8005078 <USBPD_PRL_SendMessage+0x24>
 8005070:	7a38      	ldrb	r0, [r7, #8]
 8005072:	b908      	cbnz	r0, 8005078 <USBPD_PRL_SendMessage+0x24>
 8005074:	200f      	movs	r0, #15
 8005076:	7150      	strb	r0, [r2, #5]
 8005078:	ea4f 0048 	mov.w	r0, r8, lsl #1
 800507c:	1c40      	adds	r0, r0, #1
 800507e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8005080:	f88d 0005 	strb.w	r0, [sp, #5]
 8005084:	f88d 1004 	strb.w	r1, [sp, #4]
 8005088:	9302      	str	r3, [sp, #8]
 800508a:	eb0c 0e01 	add.w	lr, ip, r1
 800508e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8005090:	f897 b004 	ldrb.w	fp, [r7, #4]
 8005094:	f1bb 0f10 	cmp.w	fp, #16
 8005098:	f10c 050e 	add.w	r5, ip, #14
 800509c:	f200 81fb 	bhi.w	8005496 <USBPD_PRL_SendMessage+0x442>
 80050a0:	e8df f01b 	tbh	[pc, fp, lsl #1]
 80050a4:	00250011 	.word	0x00250011
 80050a8:	01f90030 	.word	0x01f90030
 80050ac:	00550037 	.word	0x00550037
 80050b0:	00b60045 	.word	0x00b60045
 80050b4:	01f901f9 	.word	0x01f901f9
 80050b8:	0182016d 	.word	0x0182016d
 80050bc:	01b1019b 	.word	0x01b1019b
 80050c0:	01f501f9 	.word	0x01f501f9
 80050c4:	01e0      	.short	0x01e0
 80050c6:	f3ef 8510 	mrs	r5, PRIMASK
 80050ca:	b672      	cpsid	i
 80050cc:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80050d0:	f7fb fc91 	bl	80009f6 <PE_PRL_Control_RxEvent>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	bf04      	itt	eq
 80050d8:	7a78      	ldrbeq	r0, [r7, #9]
 80050da:	2800      	cmpeq	r0, #0
 80050dc:	bf07      	ittee	eq
 80050de:	21ff      	moveq	r1, #255	@ 0xff
 80050e0:	7239      	strbeq	r1, [r7, #8]
 80050e2:	2000      	movne	r0, #0
 80050e4:	7238      	strbne	r0, [r7, #8]
 80050e6:	f385 8810 	msr	PRIMASK, r5
 80050ea:	2106      	movs	r1, #6
 80050ec:	e1a9      	b.n	8005442 <USBPD_PRL_SendMessage+0x3ee>
 80050ee:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80050f2:	f00a fde2 	bl	800fcba <USBPD_PHY_SetResistor_SinkTxNG>
 80050f6:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 80050fa:	2002      	movs	r0, #2
 80050fc:	7148      	strb	r0, [r1, #5]
 80050fe:	2013      	movs	r0, #19
 8005100:	7038      	strb	r0, [r7, #0]
 8005102:	e1cb      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005104:	2801      	cmp	r0, #1
 8005106:	d110      	bne.n	800512a <USBPD_PRL_SendMessage+0xd6>
 8005108:	7838      	ldrb	r0, [r7, #0]
 800510a:	b960      	cbnz	r0, 8005126 <USBPD_PRL_SendMessage+0xd2>
 800510c:	2105      	movs	r1, #5
 800510e:	7151      	strb	r1, [r2, #5]
 8005110:	e1c4      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005112:	2802      	cmp	r0, #2
 8005114:	d109      	bne.n	800512a <USBPD_PRL_SendMessage+0xd6>
 8005116:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800511a:	f00a fdfd 	bl	800fd18 <USBPD_PHY_IsResistor_SinkTxOk>
 800511e:	2801      	cmp	r0, #1
 8005120:	bf08      	it	eq
 8005122:	2005      	moveq	r0, #5
 8005124:	d070      	beq.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 8005126:	2409      	movs	r4, #9
 8005128:	e1b8      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800512a:	2006      	movs	r0, #6
 800512c:	e153      	b.n	80053d6 <USBPD_PRL_SendMessage+0x382>
 800512e:	f10c 0212 	add.w	r2, ip, #18
 8005132:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8005136:	f3c1 1181 	ubfx	r1, r1, #6, #2
 800513a:	2902      	cmp	r1, #2
 800513c:	d105      	bne.n	800514a <USBPD_PRL_SendMessage+0xf6>
 800513e:	2801      	cmp	r0, #1
 8005140:	d062      	beq.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 8005142:	2802      	cmp	r0, #2
 8005144:	bf08      	it	eq
 8005146:	2004      	moveq	r0, #4
 8005148:	d05e      	beq.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 800514a:	2005      	movs	r0, #5
 800514c:	e05c      	b.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 800514e:	f10c 0012 	add.w	r0, ip, #18
 8005152:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8005156:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 800515a:	f10c 0312 	add.w	r3, ip, #18
 800515e:	f362 0004 	bfi	r0, r2, #0, #5
 8005162:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8005166:	ea4f 1bd2 	mov.w	fp, r2, lsr #7
 800516a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800516e:	ea40 30cb 	orr.w	r0, r0, fp, lsl #15
 8005172:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8005176:	2000      	movs	r0, #0
 8005178:	7078      	strb	r0, [r7, #1]
 800517a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800517e:	0bd8      	lsrs	r0, r3, #15
 8005180:	d025      	beq.n	80051ce <USBPD_PRL_SendMessage+0x17a>
 8005182:	9802      	ldr	r0, [sp, #8]
 8005184:	7883      	ldrb	r3, [r0, #2]
 8005186:	78c7      	ldrb	r7, [r0, #3]
 8005188:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800518c:	81eb      	strh	r3, [r5, #14]
 800518e:	89e8      	ldrh	r0, [r5, #14]
 8005190:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8005194:	b968      	cbnz	r0, 80051b2 <USBPD_PRL_SendMessage+0x15e>
 8005196:	89e8      	ldrh	r0, [r5, #14]
 8005198:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 800519c:	bb08      	cbnz	r0, 80051e2 <USBPD_PRL_SendMessage+0x18e>
 800519e:	1f30      	subs	r0, r6, #4
 80051a0:	82a8      	strh	r0, [r5, #20]
 80051a2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80051a6:	89eb      	ldrh	r3, [r5, #14]
 80051a8:	f403 437e 	and.w	r3, r3, #65024	@ 0xfe00
 80051ac:	4318      	orrs	r0, r3
 80051ae:	81e8      	strh	r0, [r5, #14]
 80051b0:	e017      	b.n	80051e2 <USBPD_PRL_SendMessage+0x18e>
 80051b2:	2000      	movs	r0, #0
 80051b4:	f10c 0312 	add.w	r3, ip, #18
 80051b8:	82a8      	strh	r0, [r5, #20]
 80051ba:	2001      	movs	r0, #1
 80051bc:	f833 7011 	ldrh.w	r7, [r3, r1, lsl #1]
 80051c0:	f360 370e 	bfi	r7, r0, #12, #3
 80051c4:	f10c 0012 	add.w	r0, ip, #18
 80051c8:	f820 7011 	strh.w	r7, [r0, r1, lsl #1]
 80051cc:	e009      	b.n	80051e2 <USBPD_PRL_SendMessage+0x18e>
 80051ce:	1eb0      	subs	r0, r6, #2
 80051d0:	0880      	lsrs	r0, r0, #2
 80051d2:	f360 330e 	bfi	r3, r0, #12, #3
 80051d6:	f10c 0012 	add.w	r0, ip, #18
 80051da:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80051de:	2300      	movs	r3, #0
 80051e0:	82ab      	strh	r3, [r5, #20]
 80051e2:	2a0d      	cmp	r2, #13
 80051e4:	bf02      	ittt	eq
 80051e6:	f10c 0012 	addeq.w	r0, ip, #18
 80051ea:	f830 1011 	ldrheq.w	r1, [r0, r1, lsl #1]
 80051ee:	f411 4f70 	tsteq.w	r1, #61440	@ 0xf000
 80051f2:	d108      	bne.n	8005206 <USBPD_PRL_SendMessage+0x1b2>
 80051f4:	2000      	movs	r0, #0
 80051f6:	f88e 000b 	strb.w	r0, [lr, #11]
 80051fa:	220f      	movs	r2, #15
 80051fc:	2103      	movs	r1, #3
 80051fe:	f10c 0006 	add.w	r0, ip, #6
 8005202:	f000 fc20 	bl	8005a46 <__aeabi_memset>
 8005206:	2007      	movs	r0, #7
 8005208:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 800520c:	7148      	strb	r0, [r1, #5]
 800520e:	e145      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005210:	f102 0312 	add.w	r3, r2, #18
 8005214:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005218:	0bc0      	lsrs	r0, r0, #15
 800521a:	d07c      	beq.n	8005316 <USBPD_PRL_SendMessage+0x2c2>
 800521c:	8b90      	ldrh	r0, [r2, #28]
 800521e:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8005222:	2800      	cmp	r0, #0
 8005224:	d16c      	bne.n	8005300 <USBPD_PRL_SendMessage+0x2ac>
 8005226:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 800522a:	8c57      	ldrh	r7, [r2, #34]	@ 0x22
 800522c:	8b93      	ldrh	r3, [r2, #28]
 800522e:	2f1b      	cmp	r7, #27
 8005230:	d30f      	bcc.n	8005252 <USBPD_PRL_SendMessage+0x1fe>
 8005232:	0bd8      	lsrs	r0, r3, #15
 8005234:	d00d      	beq.n	8005252 <USBPD_PRL_SendMessage+0x1fe>
 8005236:	f102 0312 	add.w	r3, r2, #18
 800523a:	261e      	movs	r6, #30
 800523c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005240:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
 8005244:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8005248:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
 800524a:	f1a0 031a 	sub.w	r3, r0, #26
 800524e:	8453      	strh	r3, [r2, #34]	@ 0x22
 8005250:	e056      	b.n	8005300 <USBPD_PRL_SendMessage+0x2ac>
 8005252:	f3c3 20c3 	ubfx	r0, r3, #11, #4
 8005256:	b918      	cbnz	r0, 8005260 <USBPD_PRL_SendMessage+0x20c>
 8005258:	4618      	mov	r0, r3
 800525a:	f367 0008 	bfi	r0, r7, #0, #9
 800525e:	8390      	strh	r0, [r2, #28]
 8005260:	f648 70ff 	movw	r0, #36863	@ 0x8fff
 8005264:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8005268:	f102 0312 	add.w	r3, r2, #18
 800526c:	f102 0712 	add.w	r7, r2, #18
 8005270:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005274:	4003      	ands	r3, r0
 8005276:	f827 3011 	strh.w	r3, [r7, r1, lsl #1]
 800527a:	8b90      	ldrh	r0, [r2, #28]
 800527c:	0bc0      	lsrs	r0, r0, #15
 800527e:	d03b      	beq.n	80052f8 <USBPD_PRL_SendMessage+0x2a4>
 8005280:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
 8005282:	1c80      	adds	r0, r0, #2
 8005284:	0880      	lsrs	r0, r0, #2
 8005286:	0307      	lsls	r7, r0, #12
 8005288:	f407 47e0 	and.w	r7, r7, #28672	@ 0x7000
 800528c:	f102 0012 	add.w	r0, r2, #18
 8005290:	433b      	orrs	r3, r7
 8005292:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005296:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8005298:	1c92      	adds	r2, r2, #2
 800529a:	f012 0203 	ands.w	r2, r2, #3
 800529e:	d021      	beq.n	80052e4 <USBPD_PRL_SendMessage+0x290>
 80052a0:	9802      	ldr	r0, [sp, #8]
 80052a2:	2300      	movs	r3, #0
 80052a4:	e005      	b.n	80052b2 <USBPD_PRL_SendMessage+0x25e>
 80052a6:	8c7f      	ldrh	r7, [r7, #34]	@ 0x22
 80052a8:	442f      	add	r7, r5
 80052aa:	4407      	add	r7, r0
 80052ac:	2500      	movs	r5, #0
 80052ae:	713d      	strb	r5, [r7, #4]
 80052b0:	1c5b      	adds	r3, r3, #1
 80052b2:	b2dd      	uxtb	r5, r3
 80052b4:	f1c2 0e04 	rsb	lr, r2, #4
 80052b8:	f85a 7028 	ldr.w	r7, [sl, r8, lsl #2]
 80052bc:	4575      	cmp	r5, lr
 80052be:	d3f2      	bcc.n	80052a6 <USBPD_PRL_SendMessage+0x252>
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	f648 72ff 	movw	r2, #36863	@ 0x8fff
 80052c6:	f107 0012 	add.w	r0, r7, #18
 80052ca:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 80052ce:	4002      	ands	r2, r0
 80052d0:	0b00      	lsrs	r0, r0, #12
 80052d2:	1c40      	adds	r0, r0, #1
 80052d4:	0300      	lsls	r0, r0, #12
 80052d6:	f400 40e0 	and.w	r0, r0, #28672	@ 0x7000
 80052da:	4310      	orrs	r0, r2
 80052dc:	f107 0212 	add.w	r2, r7, #18
 80052e0:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 80052e4:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 80052e8:	f100 0212 	add.w	r2, r0, #18
 80052ec:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80052f0:	f3c3 3602 	ubfx	r6, r3, #12, #3
 80052f4:	00b6      	lsls	r6, r6, #2
 80052f6:	1cb6      	adds	r6, r6, #2
 80052f8:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 80052fc:	2000      	movs	r0, #0
 80052fe:	8450      	strh	r0, [r2, #34]	@ 0x22
 8005300:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005304:	8b82      	ldrh	r2, [r0, #28]
 8005306:	9802      	ldr	r0, [sp, #8]
 8005308:	7082      	strb	r2, [r0, #2]
 800530a:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 800530e:	8b90      	ldrh	r0, [r2, #28]
 8005310:	9a02      	ldr	r2, [sp, #8]
 8005312:	0a00      	lsrs	r0, r0, #8
 8005314:	70d0      	strb	r0, [r2, #3]
 8005316:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 800531a:	f8df 56a0 	ldr.w	r5, [pc, #1696]	@ 80059bc <.text_41>
 800531e:	f100 020b 	add.w	r2, r0, #11
 8005322:	3012      	adds	r0, #18
 8005324:	5c53      	ldrb	r3, [r2, r1]
 8005326:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 800532a:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 800532e:	f363 204b 	bfi	r0, r3, #9, #3
 8005332:	f102 0312 	add.w	r3, r2, #18
 8005336:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 800533a:	9a02      	ldr	r2, [sp, #8]
 800533c:	7010      	strb	r0, [r2, #0]
 800533e:	2202      	movs	r2, #2
 8005340:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005344:	f100 0312 	add.w	r3, r0, #18
 8005348:	9802      	ldr	r0, [sp, #8]
 800534a:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800534e:	0a09      	lsrs	r1, r1, #8
 8005350:	7041      	strb	r1, [r0, #1]
 8005352:	210a      	movs	r1, #10
 8005354:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005358:	81c6      	strh	r6, [r0, #14]
 800535a:	7141      	strb	r1, [r0, #5]
 800535c:	7402      	strb	r2, [r0, #16]
 800535e:	b2b0      	uxth	r0, r6
 8005360:	9000      	str	r0, [sp, #0]
 8005362:	f000 f8a5 	bl	80054b0 <.text_21>
 8005366:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800536a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800536e:	f00b ff8d 	bl	801128c <USBPD_TIM_Start>
 8005372:	f000 f897 	bl	80054a4 <.text_20>
 8005376:	b2b3      	uxth	r3, r6
 8005378:	f00a fc67 	bl	800fc4a <USBPD_PHY_SendMessage>
 800537c:	e08e      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800537e:	f3ef 8710 	mrs	r7, PRIMASK
 8005382:	b672      	cpsid	i
 8005384:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005388:	7941      	ldrb	r1, [r0, #5]
 800538a:	290a      	cmp	r1, #10
 800538c:	d109      	bne.n	80053a2 <USBPD_PRL_SendMessage+0x34e>
 800538e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005392:	f00b ffed 	bl	8011370 <USBPD_TIM_IsExpired>
 8005396:	2801      	cmp	r0, #1
 8005398:	d103      	bne.n	80053a2 <USBPD_PRL_SendMessage+0x34e>
 800539a:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 800539e:	200d      	movs	r0, #13
 80053a0:	7148      	strb	r0, [r1, #5]
 80053a2:	f387 8810 	msr	PRIMASK, r7
 80053a6:	e079      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 80053a8:	89a8      	ldrh	r0, [r5, #12]
 80053aa:	f89e 100b 	ldrb.w	r1, [lr, #11]
 80053ae:	0a43      	lsrs	r3, r0, #9
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	4299      	cmp	r1, r3
 80053b6:	bf04      	itt	eq
 80053b8:	f000 001f 	andeq.w	r0, r0, #31
 80053bc:	2801      	cmpeq	r0, #1
 80053be:	d109      	bne.n	80053d4 <USBPD_PRL_SendMessage+0x380>
 80053c0:	1c49      	adds	r1, r1, #1
 80053c2:	f001 0107 	and.w	r1, r1, #7
 80053c6:	f88e 100b 	strb.w	r1, [lr, #11]
 80053ca:	2000      	movs	r0, #0
 80053cc:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 80053d0:	7148      	strb	r0, [r1, #5]
 80053d2:	e016      	b.n	8005402 <USBPD_PRL_SendMessage+0x3ae>
 80053d4:	200d      	movs	r0, #13
 80053d6:	7150      	strb	r0, [r2, #5]
 80053d8:	e060      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 80053da:	f89e 000b 	ldrb.w	r0, [lr, #11]
 80053de:	1c40      	adds	r0, r0, #1
 80053e0:	f000 0007 	and.w	r0, r0, #7
 80053e4:	f88e 000b 	strb.w	r0, [lr, #11]
 80053e8:	2000      	movs	r0, #0
 80053ea:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 80053ee:	7148      	strb	r0, [r1, #5]
 80053f0:	f248 71ff 	movw	r1, #34815	@ 0x87ff
 80053f4:	89ea      	ldrh	r2, [r5, #14]
 80053f6:	400a      	ands	r2, r1
 80053f8:	81ea      	strh	r2, [r5, #14]
 80053fa:	f64f 30ff 	movw	r0, #64511	@ 0xfbff
 80053fe:	4002      	ands	r2, r0
 8005400:	81ea      	strh	r2, [r5, #14]
 8005402:	2405      	movs	r4, #5
 8005404:	e04a      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005406:	7878      	ldrb	r0, [r7, #1]
 8005408:	1c40      	adds	r0, r0, #1
 800540a:	7078      	strb	r0, [r7, #1]
 800540c:	f10c 0312 	add.w	r3, ip, #18
 8005410:	f10c 0012 	add.w	r0, ip, #18
 8005414:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 8005418:	f3c2 1081 	ubfx	r0, r2, #6, #2
 800541c:	2801      	cmp	r0, #1
 800541e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005422:	bf0c      	ite	eq
 8005424:	2203      	moveq	r2, #3
 8005426:	2202      	movne	r2, #2
 8005428:	0bc0      	lsrs	r0, r0, #15
 800542a:	d006      	beq.n	800543a <USBPD_PRL_SendMessage+0x3e6>
 800542c:	89e9      	ldrh	r1, [r5, #14]
 800542e:	0bc8      	lsrs	r0, r1, #15
 8005430:	d103      	bne.n	800543a <USBPD_PRL_SendMessage+0x3e6>
 8005432:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005436:	291b      	cmp	r1, #27
 8005438:	d207      	bcs.n	800544a <USBPD_PRL_SendMessage+0x3f6>
 800543a:	7878      	ldrb	r0, [r7, #1]
 800543c:	4282      	cmp	r2, r0
 800543e:	d304      	bcc.n	800544a <USBPD_PRL_SendMessage+0x3f6>
 8005440:	2110      	movs	r1, #16
 8005442:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005446:	7141      	strb	r1, [r0, #5]
 8005448:	e028      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800544a:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 800544e:	2100      	movs	r1, #0
 8005450:	7141      	strb	r1, [r0, #5]
 8005452:	2407      	movs	r4, #7
 8005454:	f89e 100b 	ldrb.w	r1, [lr, #11]
 8005458:	1c49      	adds	r1, r1, #1
 800545a:	f001 0107 	and.w	r1, r1, #7
 800545e:	f88e 100b 	strb.w	r1, [lr, #11]
 8005462:	e01b      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005464:	200a      	movs	r0, #10
 8005466:	7150      	strb	r0, [r2, #5]
 8005468:	2102      	movs	r1, #2
 800546a:	70a9      	strb	r1, [r5, #2]
 800546c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8005470:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005474:	f00b ff0a 	bl	801128c <USBPD_TIM_Start>
 8005478:	882b      	ldrh	r3, [r5, #0]
 800547a:	f000 f813 	bl	80054a4 <.text_20>
 800547e:	f8df 553c 	ldr.w	r5, [pc, #1340]	@ 80059bc <.text_41>
 8005482:	f00a fbe2 	bl	800fc4a <USBPD_PHY_SendMessage>
 8005486:	9600      	str	r6, [sp, #0]
 8005488:	f000 f812 	bl	80054b0 <.text_21>
 800548c:	e006      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800548e:	2000      	movs	r0, #0
 8005490:	7150      	strb	r0, [r2, #5]
 8005492:	2406      	movs	r4, #6
 8005494:	e002      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005496:	2000      	movs	r0, #0
 8005498:	7150      	strb	r0, [r2, #5]
 800549a:	2410      	movs	r4, #16
 800549c:	4620      	mov	r0, r4
 800549e:	b006      	add	sp, #24
 80054a0:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

080054a4 <.text_20>:
 80054a4:	9a02      	ldr	r2, [sp, #8]
 80054a6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80054aa:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80054ae:	4770      	bx	lr

080054b0 <.text_21>:
 80054b0:	9b02      	ldr	r3, [sp, #8]
 80054b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80054b6:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80054ba:	f8d5 a000 	ldr.w	sl, [r5]
 80054be:	2002      	movs	r0, #2

080054c0 <__iar_annotation$$tailcall>:
 80054c0:	4750      	bx	sl

080054c2 <USBPD_PRL_ResetRequestProcess>:
 80054c2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 80054c6:	4605      	mov	r5, r0
 80054c8:	f8df 84ec 	ldr.w	r8, [pc, #1260]	@ 80059b8 <.text_40>
 80054cc:	462f      	mov	r7, r5
 80054ce:	f858 4027 	ldr.w	r4, [r8, r7, lsl #2]
 80054d2:	2000      	movs	r0, #0
 80054d4:	70e0      	strb	r0, [r4, #3]
 80054d6:	72e0      	strb	r0, [r4, #11]
 80054d8:	7320      	strb	r0, [r4, #12]
 80054da:	7360      	strb	r0, [r4, #13]
 80054dc:	460e      	mov	r6, r1
 80054de:	f000 f9ee 	bl	80058be <.text_34>
 80054e2:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 80054e6:	f8df 74d4 	ldr.w	r7, [pc, #1236]	@ 80059bc <.text_41>
 80054ea:	2200      	movs	r2, #0
 80054ec:	7142      	strb	r2, [r0, #5]
 80054ee:	9200      	str	r2, [sp, #0]
 80054f0:	2300      	movs	r3, #0
 80054f2:	f8d7 c000 	ldr.w	ip, [r7]
 80054f6:	4632      	mov	r2, r6
 80054f8:	4629      	mov	r1, r5
 80054fa:	2002      	movs	r0, #2
 80054fc:	47e0      	blx	ip
 80054fe:	4628      	mov	r0, r5
 8005500:	f000 f83c 	bl	800557c <PRL_DisableRX>
 8005504:	4631      	mov	r1, r6
 8005506:	4628      	mov	r0, r5
 8005508:	f00a fb8c 	bl	800fc24 <USBPD_PHY_ResetRequest>
 800550c:	2005      	movs	r0, #5
 800550e:	7120      	strb	r0, [r4, #4]
 8005510:	78e0      	ldrb	r0, [r4, #3]
 8005512:	2801      	cmp	r0, #1
 8005514:	bf1c      	itt	ne
 8005516:	7920      	ldrbne	r0, [r4, #4]
 8005518:	2800      	cmpne	r0, #0
 800551a:	d1f9      	bne.n	8005510 <USBPD_PRL_ResetRequestProcess+0x4e>
 800551c:	e8bd 81f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, pc}

08005520 <USBDPD_PRL_BistCarrierEyeMode>:
 8005520:	2905      	cmp	r1, #5
 8005522:	bf08      	it	eq
 8005524:	f00a bba7 	beq.w	800fc76 <USBPD_PHY_Send_BIST_Pattern>
 8005528:	2010      	movs	r0, #16
 800552a:	4770      	bx	lr

0800552c <USBDPD_PRL_BistCarrierEyeModeExit>:
 800552c:	2905      	cmp	r1, #5
 800552e:	bf04      	itt	eq
 8005530:	2107      	moveq	r1, #7
 8005532:	f00a bbae 	beq.w	800fc92 <USBPD_PHY_ExitTransmit>
 8005536:	2010      	movs	r0, #16
 8005538:	4770      	bx	lr

0800553a <USBPD_PRL_Reset>:
 800553a:	b538      	push	{r3, r4, r5, lr}
 800553c:	4604      	mov	r4, r0
 800553e:	f8df 0478 	ldr.w	r0, [pc, #1144]	@ 80059b8 <.text_40>
 8005542:	4621      	mov	r1, r4
 8005544:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8005548:	2200      	movs	r2, #0
 800554a:	716a      	strb	r2, [r5, #5]
 800554c:	702a      	strb	r2, [r5, #0]
 800554e:	712a      	strb	r2, [r5, #4]
 8005550:	72ea      	strb	r2, [r5, #11]
 8005552:	732a      	strb	r2, [r5, #12]
 8005554:	736a      	strb	r2, [r5, #13]
 8005556:	2103      	movs	r1, #3
 8005558:	220f      	movs	r2, #15
 800555a:	1da8      	adds	r0, r5, #6
 800555c:	f000 fa73 	bl	8005a46 <__aeabi_memset>
 8005560:	2200      	movs	r2, #0
 8005562:	f885 2025 	strb.w	r2, [r5, #37]	@ 0x25
 8005566:	4620      	mov	r0, r4
 8005568:	f00a fb51 	bl	800fc0e <USBPD_PHY_Reset>
 800556c:	4620      	mov	r0, r4
 800556e:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 8005572:	f00a bbec 	b.w	800fd4e <USBPD_PHY_EnableRX>

08005576 <USBPD_PRL_Stop>:
 8005576:	f00a bbf7 	b.w	800fd68 <USBPD_PHY_DisableRX>

0800557a <USBPD_PRL_DeInit>:
 800557a:	4770      	bx	lr

0800557c <PRL_DisableRX>:
 800557c:	f00a bbf4 	b.w	800fd68 <USBPD_PHY_DisableRX>

08005580 <PRL_Received>:
 8005580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005584:	4682      	mov	sl, r0
 8005586:	f8df 9430 	ldr.w	r9, [pc, #1072]	@ 80059b8 <.text_40>
 800558a:	b084      	sub	sp, #16
 800558c:	4655      	mov	r5, sl
 800558e:	f859 4025 	ldr.w	r4, [r9, r5, lsl #2]
 8005592:	f8df b428 	ldr.w	fp, [pc, #1064]	@ 80059bc <.text_41>
 8005596:	4688      	mov	r8, r1
 8005598:	f00a fb2d 	bl	800fbf6 <USBPD_PHY_GetMinGOODCRCTimerValue>
 800559c:	4601      	mov	r1, r0
 800559e:	ea4f 004a 	mov.w	r0, sl, lsl #1
 80055a2:	b2c0      	uxtb	r0, r0
 80055a4:	f00b fe72 	bl	801128c <USBPD_TIM_Start>
 80055a8:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 80055ac:	7a30      	ldrb	r0, [r6, #8]
 80055ae:	7a71      	ldrb	r1, [r6, #9]
 80055b0:	eb00 2701 	add.w	r7, r0, r1, lsl #8
 80055b4:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 80055b8:	4038      	ands	r0, r7
 80055ba:	2801      	cmp	r0, #1
 80055bc:	d113      	bne.n	80055e6 <PRL_Received+0x66>
 80055be:	0069      	lsls	r1, r5, #1
 80055c0:	1c49      	adds	r1, r1, #1
 80055c2:	b2c8      	uxtb	r0, r1
 80055c4:	f00b fed4 	bl	8011370 <USBPD_TIM_IsExpired>
 80055c8:	2801      	cmp	r0, #1
 80055ca:	d040      	beq.n	800564e <PRL_Received+0xce>
 80055cc:	f859 1025 	ldr.w	r1, [r9, r5, lsl #2]
 80055d0:	200b      	movs	r0, #11
 80055d2:	7148      	strb	r0, [r1, #5]
 80055d4:	8367      	strh	r7, [r4, #26]
 80055d6:	f000 f96c 	bl	80058b2 <.text_33>
 80055da:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 80055de:	4642      	mov	r2, r8
 80055e0:	4651      	mov	r1, sl
 80055e2:	2001      	movs	r0, #1
 80055e4:	e14d      	b.n	8005882 <PRL_Received+0x302>
 80055e6:	f20f 405c 	addw	r0, pc, #1116	@ 0x45c
 80055ea:	8805      	ldrh	r5, [r0, #0]
 80055ec:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 80055f0:	2101      	movs	r1, #1
 80055f2:	4038      	ands	r0, r7
 80055f4:	72a1      	strb	r1, [r4, #10]
 80055f6:	eb04 0208 	add.w	r2, r4, r8
 80055fa:	280d      	cmp	r0, #13
 80055fc:	9202      	str	r2, [sp, #8]
 80055fe:	d103      	bne.n	8005608 <PRL_Received+0x88>
 8005600:	2100      	movs	r1, #0
 8005602:	72d1      	strb	r1, [r2, #11]
 8005604:	f000 f95b 	bl	80058be <.text_34>
 8005608:	ea5f 0008 	movs.w	r0, r8
 800560c:	d10c      	bne.n	8005628 <PRL_Received+0xa8>
 800560e:	8a60      	ldrh	r0, [r4, #18]
 8005610:	f3c0 1140 	ubfx	r1, r0, #5, #1
 8005614:	f3c0 2200 	ubfx	r2, r0, #8, #1
 8005618:	f64f 60df 	movw	r0, #65247	@ 0xfedf
 800561c:	4005      	ands	r5, r0
 800561e:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
 8005622:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8005626:	e002      	b.n	800562e <PRL_Received+0xae>
 8005628:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800562c:	4015      	ands	r5, r2
 800562e:	f24f 113f 	movw	r1, #61759	@ 0xf13f
 8005632:	400d      	ands	r5, r1
 8005634:	f407 6060 	and.w	r0, r7, #3584	@ 0xe00
 8005638:	4305      	orrs	r5, r0
 800563a:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
 800563e:	7625      	strb	r5, [r4, #24]
 8005640:	4641      	mov	r1, r8
 8005642:	0a2d      	lsrs	r5, r5, #8
 8005644:	7665      	strb	r5, [r4, #25]
 8005646:	4650      	mov	r0, sl
 8005648:	f7fb fb2b 	bl	8000ca2 <PE_PRL_PostReceiveEvent>
 800564c:	2800      	cmp	r0, #0
 800564e:	f000 811b 	beq.w	8005888 <PRL_Received+0x308>
 8005652:	2001      	movs	r0, #1
 8005654:	7420      	strb	r0, [r4, #16]
 8005656:	ea4f 004a 	mov.w	r0, sl, lsl #1
 800565a:	b2c0      	uxtb	r0, r0
 800565c:	f00b fe88 	bl	8011370 <USBPD_TIM_IsExpired>
 8005660:	2800      	cmp	r0, #0
 8005662:	d0f8      	beq.n	8005656 <PRL_Received+0xd6>
 8005664:	2302      	movs	r3, #2
 8005666:	f104 0218 	add.w	r2, r4, #24
 800566a:	4641      	mov	r1, r8
 800566c:	4650      	mov	r0, sl
 800566e:	f00a faec 	bl	800fc4a <USBPD_PHY_SendMessage>
 8005672:	9003      	str	r0, [sp, #12]
 8005674:	f884 8009 	strb.w	r8, [r4, #9]
 8005678:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800567c:	4650      	mov	r0, sl
 800567e:	f7fb fb46 	bl	8000d0e <PE_PRL_PostReceiveEventCopy>
 8005682:	7ab0      	ldrb	r0, [r6, #10]
 8005684:	7af1      	ldrb	r1, [r6, #11]
 8005686:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 800568a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800568e:	0438      	lsls	r0, r7, #16
 8005690:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005694:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8005698:	0bc9      	lsrs	r1, r1, #15
 800569a:	0fc0      	lsrs	r0, r0, #31
 800569c:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80056a0:	f8ad 1006 	strh.w	r1, [sp, #6]
 80056a4:	d004      	beq.n	80056b0 <PRL_Received+0x130>
 80056a6:	0008      	movs	r0, r1
 80056a8:	d102      	bne.n	80056b0 <PRL_Received+0x130>
 80056aa:	1d29      	adds	r1, r5, #4
 80056ac:	9100      	str	r1, [sp, #0]
 80056ae:	e019      	b.n	80056e4 <PRL_Received+0x164>
 80056b0:	7821      	ldrb	r1, [r4, #0]
 80056b2:	b9a9      	cbnz	r1, 80056e0 <PRL_Received+0x160>
 80056b4:	f3c7 3002 	ubfx	r0, r7, #12, #3
 80056b8:	b190      	cbz	r0, 80056e0 <PRL_Received+0x160>
 80056ba:	f007 001f 	and.w	r0, r7, #31
 80056be:	2803      	cmp	r0, #3
 80056c0:	d10e      	bne.n	80056e0 <PRL_Received+0x160>
 80056c2:	7ab0      	ldrb	r0, [r6, #10]
 80056c4:	7af1      	ldrb	r1, [r6, #11]
 80056c6:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 80056ca:	7b30      	ldrb	r0, [r6, #12]
 80056cc:	7b71      	ldrb	r1, [r6, #13]
 80056ce:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 80056d2:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 80056d6:	0f12      	lsrs	r2, r2, #28
 80056d8:	2a08      	cmp	r2, #8
 80056da:	bf04      	itt	eq
 80056dc:	2001      	moveq	r0, #1
 80056de:	7020      	strbeq	r0, [r4, #0]
 80056e0:	f000 f8e7 	bl	80058b2 <.text_33>
 80056e4:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 80056e8:	f8db c000 	ldr.w	ip, [fp]
 80056ec:	4642      	mov	r2, r8
 80056ee:	4651      	mov	r1, sl
 80056f0:	2001      	movs	r0, #1
 80056f2:	47e0      	blx	ip
 80056f4:	9803      	ldr	r0, [sp, #12]
 80056f6:	b948      	cbnz	r0, 800570c <PRL_Received+0x18c>
 80056f8:	2102      	movs	r1, #2
 80056fa:	9100      	str	r1, [sp, #0]
 80056fc:	f104 0318 	add.w	r3, r4, #24
 8005700:	f8db c000 	ldr.w	ip, [fp]
 8005704:	4642      	mov	r2, r8
 8005706:	4651      	mov	r1, sl
 8005708:	2002      	movs	r0, #2
 800570a:	47e0      	blx	ip
 800570c:	9802      	ldr	r0, [sp, #8]
 800570e:	7981      	ldrb	r1, [r0, #6]
 8005710:	f3c7 2042 	ubfx	r0, r7, #9, #3
 8005714:	4281      	cmp	r1, r0
 8005716:	bf04      	itt	eq
 8005718:	9803      	ldreq	r0, [sp, #12]
 800571a:	2800      	cmpeq	r0, #0
 800571c:	f000 80a2 	beq.w	8005864 <PRL_Received+0x2e4>
 8005720:	0439      	lsls	r1, r7, #16
 8005722:	9a02      	ldr	r2, [sp, #8]
 8005724:	0e49      	lsrs	r1, r1, #25
 8005726:	f001 0107 	and.w	r1, r1, #7
 800572a:	7191      	strb	r1, [r2, #6]
 800572c:	0438      	lsls	r0, r7, #16
 800572e:	8427      	strh	r7, [r4, #32]
 8005730:	0fc0      	lsrs	r0, r0, #31
 8005732:	bf1c      	itt	ne
 8005734:	f8bd 0006 	ldrhne.w	r0, [sp, #6]
 8005738:	2800      	cmpne	r0, #0
 800573a:	d06e      	beq.n	800581a <PRL_Received+0x29a>
 800573c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8005740:	83e0      	strh	r0, [r4, #30]
 8005742:	201a      	movs	r0, #26
 8005744:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005748:	f411 4ff8 	tst.w	r1, #31744	@ 0x7c00
 800574c:	d13c      	bne.n	80057c8 <PRL_Received+0x248>
 800574e:	f3c7 3102 	ubfx	r1, r7, #12, #3
 8005752:	2907      	cmp	r1, #7
 8005754:	d301      	bcc.n	800575a <PRL_Received+0x1da>
 8005756:	2d1a      	cmp	r5, #26
 8005758:	d820      	bhi.n	800579c <PRL_Received+0x21c>
 800575a:	2100      	movs	r1, #0
 800575c:	3434      	adds	r4, #52	@ 0x34
 800575e:	e00c      	b.n	800577a <PRL_Received+0x1fa>
 8005760:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005764:	6832      	ldr	r2, [r6, #0]
 8005766:	f814 e001 	ldrb.w	lr, [r4, r1]
 800576a:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 800576e:	fb10 1303 	smlabb	r3, r0, r3, r1
 8005772:	1c49      	adds	r1, r1, #1
 8005774:	f802 e003 	strb.w	lr, [r2, r3]
 8005778:	b289      	uxth	r1, r1
 800577a:	f000 f894 	bl	80058a6 <.text_32>
 800577e:	d3ef      	bcc.n	8005760 <PRL_Received+0x1e0>
 8005780:	f3c7 3002 	ubfx	r0, r7, #12, #3
 8005784:	0080      	lsls	r0, r0, #2
 8005786:	1e80      	subs	r0, r0, #2
 8005788:	42a8      	cmp	r0, r5
 800578a:	d204      	bcs.n	8005796 <PRL_Received+0x216>
 800578c:	f3c7 3002 	ubfx	r0, r7, #12, #3
 8005790:	0080      	lsls	r0, r0, #2
 8005792:	1e80      	subs	r0, r0, #2
 8005794:	e00f      	b.n	80057b6 <PRL_Received+0x236>
 8005796:	6870      	ldr	r0, [r6, #4]
 8005798:	8005      	strh	r5, [r0, #0]
 800579a:	e00e      	b.n	80057ba <PRL_Received+0x23a>
 800579c:	2101      	movs	r1, #1
 800579e:	f884 1025 	strb.w	r1, [r4, #37]	@ 0x25
 80057a2:	2000      	movs	r0, #0
 80057a4:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 80057a8:	6833      	ldr	r3, [r6, #0]
 80057aa:	5c0a      	ldrb	r2, [r1, r0]
 80057ac:	541a      	strb	r2, [r3, r0]
 80057ae:	1c40      	adds	r0, r0, #1
 80057b0:	281a      	cmp	r0, #26
 80057b2:	d3f9      	bcc.n	80057a8 <PRL_Received+0x228>
 80057b4:	201a      	movs	r0, #26
 80057b6:	6871      	ldr	r1, [r6, #4]
 80057b8:	8008      	strh	r0, [r1, #0]
 80057ba:	4641      	mov	r1, r8
 80057bc:	4650      	mov	r0, sl
 80057be:	b005      	add	sp, #20
 80057c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c4:	f7fb ba6d 	b.w	8000ca2 <PE_PRL_PostReceiveEvent>
 80057c8:	6871      	ldr	r1, [r6, #4]
 80057ca:	8809      	ldrh	r1, [r1, #0]
 80057cc:	f240 1205 	movw	r2, #261	@ 0x105
 80057d0:	f101 031a 	add.w	r3, r1, #26
 80057d4:	4293      	cmp	r3, r2
 80057d6:	bf3f      	itttt	cc
 80057d8:	f3c7 3302 	ubfxcc	r3, r7, #12, #3
 80057dc:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 80057e0:	1e89      	subcc	r1, r1, #2
 80057e2:	42a9      	cmpcc	r1, r5
 80057e4:	d21a      	bcs.n	800581c <PRL_Received+0x29c>
 80057e6:	2101      	movs	r1, #1
 80057e8:	f884 1025 	strb.w	r1, [r4, #37]	@ 0x25
 80057ec:	3434      	adds	r4, #52	@ 0x34
 80057ee:	2100      	movs	r1, #0
 80057f0:	e007      	b.n	8005802 <PRL_Received+0x282>
 80057f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80057f6:	6832      	ldr	r2, [r6, #0]
 80057f8:	5c65      	ldrb	r5, [r4, r1]
 80057fa:	f000 f848 	bl	800588e <.text_30>
 80057fe:	54d5      	strb	r5, [r2, r3]
 8005800:	b289      	uxth	r1, r1
 8005802:	f000 f850 	bl	80058a6 <.text_32>
 8005806:	d3f4      	bcc.n	80057f2 <PRL_Received+0x272>
 8005808:	6871      	ldr	r1, [r6, #4]
 800580a:	880a      	ldrh	r2, [r1, #0]
 800580c:	043f      	lsls	r7, r7, #16
 800580e:	0ebf      	lsrs	r7, r7, #26
 8005810:	f007 071c 	and.w	r7, r7, #28
 8005814:	1eb8      	subs	r0, r7, #2
 8005816:	1882      	adds	r2, r0, r2
 8005818:	800a      	strh	r2, [r1, #0]
 800581a:	e035      	b.n	8005888 <PRL_Received+0x308>
 800581c:	6871      	ldr	r1, [r6, #4]
 800581e:	880b      	ldrh	r3, [r1, #0]
 8005820:	f000 f83b 	bl	800589a <.text_31>
 8005824:	4291      	cmp	r1, r2
 8005826:	d219      	bcs.n	800585c <PRL_Received+0x2dc>
 8005828:	f000 f837 	bl	800589a <.text_31>
 800582c:	42a9      	cmp	r1, r5
 800582e:	d315      	bcc.n	800585c <PRL_Received+0x2dc>
 8005830:	2201      	movs	r2, #1
 8005832:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
 8005836:	2100      	movs	r1, #0
 8005838:	3434      	adds	r4, #52	@ 0x34
 800583a:	e009      	b.n	8005850 <PRL_Received+0x2d0>
 800583c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005840:	6832      	ldr	r2, [r6, #0]
 8005842:	f814 a001 	ldrb.w	sl, [r4, r1]
 8005846:	f000 f822 	bl	800588e <.text_30>
 800584a:	f802 a003 	strb.w	sl, [r2, r3]
 800584e:	b289      	uxth	r1, r1
 8005850:	f000 f829 	bl	80058a6 <.text_32>
 8005854:	d3f2      	bcc.n	800583c <PRL_Received+0x2bc>
 8005856:	6870      	ldr	r0, [r6, #4]
 8005858:	8005      	strh	r5, [r0, #0]
 800585a:	e015      	b.n	8005888 <PRL_Received+0x308>
 800585c:	2100      	movs	r1, #0
 800585e:	f884 1025 	strb.w	r1, [r4, #37]	@ 0x25
 8005862:	e011      	b.n	8005888 <PRL_Received+0x308>
 8005864:	20ff      	movs	r0, #255	@ 0xff
 8005866:	7260      	strb	r0, [r4, #9]
 8005868:	2100      	movs	r1, #0
 800586a:	7421      	strb	r1, [r4, #16]
 800586c:	4650      	mov	r0, sl
 800586e:	f7fb fa38 	bl	8000ce2 <PE_PRL_PostReceiveEventError>
 8005872:	2000      	movs	r0, #0
 8005874:	72a0      	strb	r0, [r4, #10]
 8005876:	2117      	movs	r1, #23
 8005878:	9100      	str	r1, [sp, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	a365      	add	r3, pc, #404	@ (adr r3, 8005a14 <.text_43>)
 800587e:	4651      	mov	r1, sl
 8005880:	2006      	movs	r0, #6
 8005882:	f8db 4000 	ldr.w	r4, [fp]
 8005886:	47a0      	blx	r4
 8005888:	b005      	add	sp, #20
 800588a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800588e <.text_30>:
 800588e:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 8005892:	fb10 1303 	smlabb	r3, r0, r3, r1
 8005896:	1c49      	adds	r1, r1, #1
 8005898:	4770      	bx	lr

0800589a <.text_31>:
 800589a:	f3c7 3102 	ubfx	r1, r7, #12, #3
 800589e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80058a2:	1e89      	subs	r1, r1, #2
 80058a4:	4770      	bx	lr

080058a6 <.text_32>:
 80058a6:	f3c7 3202 	ubfx	r2, r7, #12, #3
 80058aa:	0092      	lsls	r2, r2, #2
 80058ac:	1e92      	subs	r2, r2, #2
 80058ae:	4291      	cmp	r1, r2
 80058b0:	4770      	bx	lr

080058b2 <.text_33>:
 80058b2:	f3c7 3002 	ubfx	r0, r7, #12, #3
 80058b6:	0080      	lsls	r0, r0, #2
 80058b8:	1c80      	adds	r0, r0, #2
 80058ba:	9000      	str	r0, [sp, #0]
 80058bc:	4770      	bx	lr

080058be <.text_34>:
 80058be:	220f      	movs	r2, #15
 80058c0:	2103      	movs	r1, #3
 80058c2:	1da0      	adds	r0, r4, #6
 80058c4:	f000 b8bf 	b.w	8005a46 <__aeabi_memset>

080058c8 <PRL_ResetIndicate>:
 80058c8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 80058cc:	460d      	mov	r5, r1
 80058ce:	2d05      	cmp	r5, #5
 80058d0:	4680      	mov	r8, r0
 80058d2:	d116      	bne.n	8005902 <PRL_ResetIndicate+0x3a>
 80058d4:	4f38      	ldr	r7, [pc, #224]	@ (80059b8 <.text_40>)
 80058d6:	4646      	mov	r6, r8
 80058d8:	f857 4026 	ldr.w	r4, [r7, r6, lsl #2]
 80058dc:	2000      	movs	r0, #0
 80058de:	2100      	movs	r1, #0
 80058e0:	b2c2      	uxtb	r2, r0
 80058e2:	1c40      	adds	r0, r0, #1
 80058e4:	18a2      	adds	r2, r4, r2
 80058e6:	b2c3      	uxtb	r3, r0
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	72d1      	strb	r1, [r2, #11]
 80058ec:	d3f8      	bcc.n	80058e0 <PRL_ResetIndicate+0x18>
 80058ee:	f7ff ffe6 	bl	80058be <.text_34>
 80058f2:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 80058f6:	2200      	movs	r2, #0
 80058f8:	7142      	strb	r2, [r0, #5]
 80058fa:	7022      	strb	r2, [r4, #0]
 80058fc:	4640      	mov	r0, r8
 80058fe:	f7ff fe3d 	bl	800557c <PRL_DisableRX>
 8005902:	2000      	movs	r0, #0
 8005904:	4e2d      	ldr	r6, [pc, #180]	@ (80059bc <.text_41>)
 8005906:	6837      	ldr	r7, [r6, #0]
 8005908:	9000      	str	r0, [sp, #0]
 800590a:	2300      	movs	r3, #0
 800590c:	462a      	mov	r2, r5
 800590e:	4641      	mov	r1, r8
 8005910:	2001      	movs	r0, #1
 8005912:	47b8      	blx	r7
 8005914:	4629      	mov	r1, r5
 8005916:	4640      	mov	r0, r8
 8005918:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800591c:	f7fb b8c3 	b.w	8000aa6 <PE_PRL_ResetReceived>

08005920 <PRL_ResetCompleted>:
 8005920:	4a25      	ldr	r2, [pc, #148]	@ (80059b8 <.text_40>)
 8005922:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005926:	2101      	movs	r1, #1
 8005928:	70c1      	strb	r1, [r0, #3]
 800592a:	4770      	bx	lr

0800592c <PRL_BistCompleted>:
 800592c:	f7fb b8e0 	b.w	8000af0 <PE_PRL_BistCompleted>

08005930 <PRL_TxCompleted>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4a21      	ldr	r2, [pc, #132]	@ (80059b8 <.text_40>)
 8005934:	4604      	mov	r4, r0
 8005936:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 800593a:	7c2a      	ldrb	r2, [r5, #16]
 800593c:	2a01      	cmp	r2, #1
 800593e:	d002      	beq.n	8005946 <PRL_TxCompleted+0x16>
 8005940:	2a02      	cmp	r2, #2
 8005942:	d009      	beq.n	8005958 <PRL_TxCompleted+0x28>
 8005944:	e010      	b.n	8005968 <PRL_TxCompleted+0x38>
 8005946:	b911      	cbnz	r1, 800594e <PRL_TxCompleted+0x1e>
 8005948:	f7fb f9fe 	bl	8000d48 <PE_PRL_PostReceiveEventComplete>
 800594c:	e001      	b.n	8005952 <PRL_TxCompleted+0x22>
 800594e:	f7fb f9c8 	bl	8000ce2 <PE_PRL_PostReceiveEventError>
 8005952:	2000      	movs	r0, #0
 8005954:	72a8      	strb	r0, [r5, #10]
 8005956:	e007      	b.n	8005968 <PRL_TxCompleted+0x38>
 8005958:	f00a f940 	bl	800fbdc <USBPD_PHY_GetRetryTimerValue>
 800595c:	0064      	lsls	r4, r4, #1
 800595e:	4601      	mov	r1, r0
 8005960:	1c64      	adds	r4, r4, #1
 8005962:	b2e0      	uxtb	r0, r4
 8005964:	f00b fc92 	bl	801128c <USBPD_TIM_Start>
 8005968:	2000      	movs	r0, #0
 800596a:	7428      	strb	r0, [r5, #16]
 800596c:	bd31      	pop	{r0, r4, r5, pc}

0800596e <USBPD_PRL_PrepareExtendedTxChunkSending>:
 800596e:	b530      	push	{r4, r5, lr}
 8005970:	4c11      	ldr	r4, [pc, #68]	@ (80059b8 <.text_40>)
 8005972:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8005976:	8ba5      	ldrh	r5, [r4, #28]
 8005978:	f248 30ff 	movw	r0, #33791	@ 0x83ff
 800597c:	4005      	ands	r5, r0
 800597e:	8a60      	ldrh	r0, [r4, #18]
 8005980:	ea45 25c1 	orr.w	r5, r5, r1, lsl #11
 8005984:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8005988:	f405 457e 	and.w	r5, r5, #65024	@ 0xfe00
 800598c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005990:	8260      	strh	r0, [r4, #18]
 8005992:	432a      	orrs	r2, r5
 8005994:	8c21      	ldrh	r1, [r4, #32]
 8005996:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800599a:	f361 0004 	bfi	r0, r1, #0, #5
 800599e:	83a2      	strh	r2, [r4, #28]
 80059a0:	8260      	strh	r0, [r4, #18]
 80059a2:	7018      	strb	r0, [r3, #0]
 80059a4:	8a60      	ldrh	r0, [r4, #18]
 80059a6:	0a00      	lsrs	r0, r0, #8
 80059a8:	7058      	strb	r0, [r3, #1]
 80059aa:	8ba0      	ldrh	r0, [r4, #28]
 80059ac:	7098      	strb	r0, [r3, #2]
 80059ae:	8ba1      	ldrh	r1, [r4, #28]
 80059b0:	0a09      	lsrs	r1, r1, #8
 80059b2:	70d9      	strb	r1, [r3, #3]
 80059b4:	bd30      	pop	{r4, r5, pc}
	...

080059b8 <.text_40>:
 80059b8:	200002e0 	.word	0x200002e0

080059bc <.text_41>:
 80059bc:	20000000 	.word	0x20000000

080059c0 <USBPD_PRL_PrepareChunkRequest>:
 80059c0:	b530      	push	{r4, r5, lr}
 80059c2:	f7ff fb2d 	bl	8005020 <.text_12>
 80059c6:	8b9c      	ldrh	r4, [r3, #28]
 80059c8:	8bdd      	ldrh	r5, [r3, #30]
 80059ca:	f444 4404 	orr.w	r4, r4, #33792	@ 0x8400
 80059ce:	0aed      	lsrs	r5, r5, #11
 80059d0:	839c      	strh	r4, [r3, #28]
 80059d2:	1c6d      	adds	r5, r5, #1
 80059d4:	02ed      	lsls	r5, r5, #11
 80059d6:	f404 4406 	and.w	r4, r4, #34304	@ 0x8600
 80059da:	f405 45f0 	and.w	r5, r5, #30720	@ 0x7800
 80059de:	432c      	orrs	r4, r5
 80059e0:	839c      	strh	r4, [r3, #28]
 80059e2:	8a5c      	ldrh	r4, [r3, #18]
 80059e4:	8c1d      	ldrh	r5, [r3, #32]
 80059e6:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 80059ea:	825c      	strh	r4, [r3, #18]
 80059ec:	f365 0404 	bfi	r4, r5, #0, #5
 80059f0:	825c      	strh	r4, [r3, #18]
 80059f2:	2400      	movs	r4, #0
 80059f4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80059f8:	7144      	strb	r4, [r0, #5]
 80059fa:	8a5a      	ldrh	r2, [r3, #18]
 80059fc:	700a      	strb	r2, [r1, #0]
 80059fe:	8a58      	ldrh	r0, [r3, #18]
 8005a00:	0a00      	lsrs	r0, r0, #8
 8005a02:	7048      	strb	r0, [r1, #1]
 8005a04:	8b98      	ldrh	r0, [r3, #28]
 8005a06:	7088      	strb	r0, [r1, #2]
 8005a08:	8b9a      	ldrh	r2, [r3, #28]
 8005a0a:	710c      	strb	r4, [r1, #4]
 8005a0c:	0a12      	lsrs	r2, r2, #8
 8005a0e:	714c      	strb	r4, [r1, #5]
 8005a10:	70ca      	strb	r2, [r1, #3]
 8005a12:	bd30      	pop	{r4, r5, pc}

08005a14 <.text_43>:
 8005a14:	5f4c5250 	.word	0x5f4c5250
 8005a18:	4e455645 	.word	0x4e455645
 8005a1c:	58525f54 	.word	0x58525f54
 8005a20:	5349445f 	.word	0x5349445f
 8005a24:	44524143 	.word	0x44524143
 8005a28:	00004445 	.word	0x00004445

08005a2c <USBPD_PRL_Init::PRL_PhyCallbacks>:
 8005a2c:	08005581 080058c9 08005921 0800592d     .U...X..!Y..-Y..
 8005a3c:	08005931 0800504d                       1Y..MP..

08005a44 <.text_45>:
 8005a44:	0001      	.short	0x0001

08005a46 <__aeabi_memset>:
 8005a46:	b470      	push	{r4, r5, r6}
 8005a48:	0784      	lsls	r4, r0, #30
 8005a4a:	d046      	beq.n	8005ada <__aeabi_memset+0x94>
 8005a4c:	1e4c      	subs	r4, r1, #1
 8005a4e:	2900      	cmp	r1, #0
 8005a50:	d041      	beq.n	8005ad6 <__aeabi_memset+0x90>
 8005a52:	b2d5      	uxtb	r5, r2
 8005a54:	4603      	mov	r3, r0
 8005a56:	e002      	b.n	8005a5e <__aeabi_memset+0x18>
 8005a58:	1e61      	subs	r1, r4, #1
 8005a5a:	b3e4      	cbz	r4, 8005ad6 <__aeabi_memset+0x90>
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	f803 5b01 	strb.w	r5, [r3], #1
 8005a62:	0799      	lsls	r1, r3, #30
 8005a64:	d1f8      	bne.n	8005a58 <__aeabi_memset+0x12>
 8005a66:	2c03      	cmp	r4, #3
 8005a68:	d92e      	bls.n	8005ac8 <__aeabi_memset+0x82>
 8005a6a:	b2d5      	uxtb	r5, r2
 8005a6c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005a70:	2c0f      	cmp	r4, #15
 8005a72:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005a76:	d919      	bls.n	8005aac <__aeabi_memset+0x66>
 8005a78:	4626      	mov	r6, r4
 8005a7a:	f103 0110 	add.w	r1, r3, #16
 8005a7e:	3e10      	subs	r6, #16
 8005a80:	2e0f      	cmp	r6, #15
 8005a82:	f841 5c10 	str.w	r5, [r1, #-16]
 8005a86:	f841 5c0c 	str.w	r5, [r1, #-12]
 8005a8a:	f841 5c08 	str.w	r5, [r1, #-8]
 8005a8e:	f841 5c04 	str.w	r5, [r1, #-4]
 8005a92:	f101 0110 	add.w	r1, r1, #16
 8005a96:	d8f2      	bhi.n	8005a7e <__aeabi_memset+0x38>
 8005a98:	f1a4 0110 	sub.w	r1, r4, #16
 8005a9c:	f021 010f 	bic.w	r1, r1, #15
 8005aa0:	f004 040f 	and.w	r4, r4, #15
 8005aa4:	3110      	adds	r1, #16
 8005aa6:	2c03      	cmp	r4, #3
 8005aa8:	440b      	add	r3, r1
 8005aaa:	d90d      	bls.n	8005ac8 <__aeabi_memset+0x82>
 8005aac:	461e      	mov	r6, r3
 8005aae:	4621      	mov	r1, r4
 8005ab0:	3904      	subs	r1, #4
 8005ab2:	2903      	cmp	r1, #3
 8005ab4:	f846 5b04 	str.w	r5, [r6], #4
 8005ab8:	d8fa      	bhi.n	8005ab0 <__aeabi_memset+0x6a>
 8005aba:	1f21      	subs	r1, r4, #4
 8005abc:	f021 0103 	bic.w	r1, r1, #3
 8005ac0:	3104      	adds	r1, #4
 8005ac2:	440b      	add	r3, r1
 8005ac4:	f004 0403 	and.w	r4, r4, #3
 8005ac8:	b12c      	cbz	r4, 8005ad6 <__aeabi_memset+0x90>
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	441c      	add	r4, r3
 8005ace:	f803 2b01 	strb.w	r2, [r3], #1
 8005ad2:	42a3      	cmp	r3, r4
 8005ad4:	d1fb      	bne.n	8005ace <__aeabi_memset+0x88>
 8005ad6:	bc70      	pop	{r4, r5, r6}
 8005ad8:	4770      	bx	lr
 8005ada:	460c      	mov	r4, r1
 8005adc:	4603      	mov	r3, r0
 8005ade:	e7c2      	b.n	8005a66 <__aeabi_memset+0x20>

08005ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ae4:	4b04      	ldr	r3, [pc, #16]	@ (8005af8 <__NVIC_GetPriorityGrouping+0x18>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	0a1b      	lsrs	r3, r3, #8
 8005aea:	f003 0307 	and.w	r3, r3, #7
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	e000ed00 	.word	0xe000ed00

08005afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	db0b      	blt.n	8005b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	f003 021f 	and.w	r2, r3, #31
 8005b14:	4907      	ldr	r1, [pc, #28]	@ (8005b34 <__NVIC_EnableIRQ+0x38>)
 8005b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b1a:	095b      	lsrs	r3, r3, #5
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8005b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	e000e100 	.word	0xe000e100

08005b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	6039      	str	r1, [r7, #0]
 8005b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	db0a      	blt.n	8005b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	490c      	ldr	r1, [pc, #48]	@ (8005b84 <__NVIC_SetPriority+0x4c>)
 8005b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b56:	0112      	lsls	r2, r2, #4
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b60:	e00a      	b.n	8005b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	4908      	ldr	r1, [pc, #32]	@ (8005b88 <__NVIC_SetPriority+0x50>)
 8005b68:	79fb      	ldrb	r3, [r7, #7]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	3b04      	subs	r3, #4
 8005b70:	0112      	lsls	r2, r2, #4
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	440b      	add	r3, r1
 8005b76:	761a      	strb	r2, [r3, #24]
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	e000e100 	.word	0xe000e100
 8005b88:	e000ed00 	.word	0xe000ed00

08005b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b089      	sub	sp, #36	@ 0x24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	f1c3 0307 	rsb	r3, r3, #7
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	bf28      	it	cs
 8005baa:	2304      	movcs	r3, #4
 8005bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	2b06      	cmp	r3, #6
 8005bb4:	d902      	bls.n	8005bbc <NVIC_EncodePriority+0x30>
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	3b03      	subs	r3, #3
 8005bba:	e000      	b.n	8005bbe <NVIC_EncodePriority+0x32>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bca:	43da      	mvns	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	401a      	ands	r2, r3
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	fa01 f303 	lsl.w	r3, r1, r3
 8005bde:	43d9      	mvns	r1, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005be4:	4313      	orrs	r3, r2
         );
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3724      	adds	r7, #36	@ 0x24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005bfc:	4b08      	ldr	r3, [pc, #32]	@ (8005c20 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005bfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c00:	4907      	ldr	r1, [pc, #28]	@ (8005c20 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005c08:	4b05      	ldr	r3, [pc, #20]	@ (8005c20 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005c0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005c12:	68fb      	ldr	r3, [r7, #12]
}
 8005c14:	bf00      	nop
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	40021000 	.word	0x40021000

08005c24 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8005c2c:	4b08      	ldr	r3, [pc, #32]	@ (8005c50 <LL_APB1_GRP2_EnableClock+0x2c>)
 8005c2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c30:	4907      	ldr	r1, [pc, #28]	@ (8005c50 <LL_APB1_GRP2_EnableClock+0x2c>)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8005c38:	4b05      	ldr	r3, [pc, #20]	@ (8005c50 <LL_APB1_GRP2_EnableClock+0x2c>)
 8005c3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005c42:	68fb      	ldr	r3, [r7, #12]
}
 8005c44:	bf00      	nop
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	40021000 	.word	0x40021000

08005c54 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8005c64:	4a0e      	ldr	r2, [pc, #56]	@ (8005ca0 <LL_DMA_SetDataTransferDirection+0x4c>)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	4413      	add	r3, r2
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	4413      	add	r3, r2
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c78:	f023 0310 	bic.w	r3, r3, #16
 8005c7c:	4908      	ldr	r1, [pc, #32]	@ (8005ca0 <LL_DMA_SetDataTransferDirection+0x4c>)
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	440a      	add	r2, r1
 8005c82:	7812      	ldrb	r2, [r2, #0]
 8005c84:	4611      	mov	r1, r2
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	440a      	add	r2, r1
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8005c92:	bf00      	nop
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	080173d4 	.word	0x080173d4

08005ca4 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8005cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8005cec <LL_DMA_SetMode+0x48>)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4413      	add	r3, r2
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f023 0220 	bic.w	r2, r3, #32
 8005cc8:	4908      	ldr	r1, [pc, #32]	@ (8005cec <LL_DMA_SetMode+0x48>)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	440b      	add	r3, r1
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	440b      	add	r3, r1
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	600b      	str	r3, [r1, #0]
             Mode);
}
 8005cde:	bf00      	nop
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	080173d4 	.word	0x080173d4

08005cf0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8005d00:	4a0d      	ldr	r2, [pc, #52]	@ (8005d38 <LL_DMA_SetPeriphIncMode+0x48>)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	4413      	add	r3, r2
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005d14:	4908      	ldr	r1, [pc, #32]	@ (8005d38 <LL_DMA_SetPeriphIncMode+0x48>)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	440b      	add	r3, r1
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	440b      	add	r3, r1
 8005d22:	4619      	mov	r1, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	080173d4 	.word	0x080173d4

08005d3c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8005d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8005d84 <LL_DMA_SetMemoryIncMode+0x48>)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	4413      	add	r3, r2
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	461a      	mov	r2, r3
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	4413      	add	r3, r2
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d60:	4908      	ldr	r1, [pc, #32]	@ (8005d84 <LL_DMA_SetMemoryIncMode+0x48>)
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	440b      	add	r3, r1
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	440b      	add	r3, r1
 8005d6e:	4619      	mov	r1, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	080173d4 	.word	0x080173d4

08005d88 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8005d98:	4a0d      	ldr	r2, [pc, #52]	@ (8005dd0 <LL_DMA_SetPeriphSize+0x48>)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	4413      	add	r3, r2
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005dac:	4908      	ldr	r1, [pc, #32]	@ (8005dd0 <LL_DMA_SetPeriphSize+0x48>)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	440b      	add	r3, r1
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	4619      	mov	r1, r3
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	440b      	add	r3, r1
 8005dba:	4619      	mov	r1, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8005dc2:	bf00      	nop
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	080173d4 	.word	0x080173d4

08005dd4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8005de4:	4a0d      	ldr	r2, [pc, #52]	@ (8005e1c <LL_DMA_SetMemorySize+0x48>)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4413      	add	r3, r2
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	461a      	mov	r2, r3
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4413      	add	r3, r2
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005df8:	4908      	ldr	r1, [pc, #32]	@ (8005e1c <LL_DMA_SetMemorySize+0x48>)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	440b      	add	r3, r1
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	4619      	mov	r1, r3
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	440b      	add	r3, r1
 8005e06:	4619      	mov	r1, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8005e0e:	bf00      	nop
 8005e10:	371c      	adds	r7, #28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	080173d4 	.word	0x080173d4

08005e20 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8005e30:	4a0d      	ldr	r2, [pc, #52]	@ (8005e68 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	4413      	add	r3, r2
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005e44:	4908      	ldr	r1, [pc, #32]	@ (8005e68 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	440b      	add	r3, r1
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	440b      	add	r3, r1
 8005e52:	4619      	mov	r1, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	600b      	str	r3, [r1, #0]
             Priority);
}
 8005e5a:	bf00      	nop
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	080173d4 	.word	0x080173d4

08005e6c <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	0a9b      	lsrs	r3, r3, #10
 8005e7c:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8005e80:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e94:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005eaa:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	601a      	str	r2, [r3, #0]
}
 8005eb4:	bf00      	nop
 8005eb6:	371c      	adds	r7, #28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ec4:	f001 f849 	bl	8006f5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ec8:	f000 f82a 	bl	8005f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005ecc:	f000 fbf6 	bl	80066bc <MX_GPIO_Init>
  MX_DMA_Init();
 8005ed0:	f000 fbb2 	bl	8006638 <MX_DMA_Init>
  MX_UCPD1_Init();
 8005ed4:	f000 fb20 	bl	8006518 <MX_UCPD1_Init>
  MX_DAC1_Init();
 8005ed8:	f000 f94c 	bl	8006174 <MX_DAC1_Init>
  MX_I2C1_Init();
 8005edc:	f000 f98e 	bl	80061fc <MX_I2C1_Init>
  MX_I2C2_Init();
 8005ee0:	f000 f9cc 	bl	800627c <MX_I2C2_Init>
  MX_ADC1_Init();
 8005ee4:	f000 f868 	bl	8005fb8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8005ee8:	f000 f8de 	bl	80060a8 <MX_ADC2_Init>
  MX_TIM3_Init();
 8005eec:	f000 fa06 	bl	80062fc <MX_TIM3_Init>
  MX_TIM15_Init();
 8005ef0:	f000 fa80 	bl	80063f4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8005ef4:	f00c fec6 	bl	8012c84 <osKernelInitialize>
  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 8005ef8:	f00f ff6e 	bl	8015dd8 <MX_USBPD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005efc:	4a05      	ldr	r2, [pc, #20]	@ (8005f14 <main+0x54>)
 8005efe:	2100      	movs	r1, #0
 8005f00:	4805      	ldr	r0, [pc, #20]	@ (8005f18 <main+0x58>)
 8005f02:	f00c ff09 	bl	8012d18 <osThreadNew>
 8005f06:	4603      	mov	r3, r0
 8005f08:	4a04      	ldr	r2, [pc, #16]	@ (8005f1c <main+0x5c>)
 8005f0a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8005f0c:	f00c fede 	bl	8012ccc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005f10:	bf00      	nop
 8005f12:	e7fd      	b.n	8005f10 <main+0x50>
 8005f14:	080173dc 	.word	0x080173dc
 8005f18:	08006779 	.word	0x08006779
 8005f1c:	20000518 	.word	0x20000518

08005f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b094      	sub	sp, #80	@ 0x50
 8005f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f26:	f107 0318 	add.w	r3, r7, #24
 8005f2a:	2238      	movs	r2, #56	@ 0x38
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f011 f8e2 	bl	80170f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f34:	1d3b      	adds	r3, r7, #4
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	605a      	str	r2, [r3, #4]
 8005f3c:	609a      	str	r2, [r3, #8]
 8005f3e:	60da      	str	r2, [r3, #12]
 8005f40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f42:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005f46:	f004 fae7 	bl	800a518 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005f4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f52:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005f54:	2340      	movs	r3, #64	@ 0x40
 8005f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8005f60:	2301      	movs	r3, #1
 8005f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8005f64:	230c      	movs	r3, #12
 8005f66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005f68:	2302      	movs	r3, #2
 8005f6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8005f6c:	2304      	movs	r3, #4
 8005f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005f70:	2302      	movs	r3, #2
 8005f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f74:	f107 0318 	add.w	r3, r7, #24
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f004 fb81 	bl	800a680 <HAL_RCC_OscConfig>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8005f84:	f000 fc14 	bl	80067b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f88:	230f      	movs	r3, #15
 8005f8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005f94:	2300      	movs	r3, #0
 8005f96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005f9c:	1d3b      	adds	r3, r7, #4
 8005f9e:	2103      	movs	r1, #3
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f004 fe7f 	bl	800aca4 <HAL_RCC_ClockConfig>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8005fac:	f000 fc00 	bl	80067b0 <Error_Handler>
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	3750      	adds	r7, #80	@ 0x50
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08c      	sub	sp, #48	@ 0x30
 8005fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8005fbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	605a      	str	r2, [r3, #4]
 8005fc8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005fca:	1d3b      	adds	r3, r7, #4
 8005fcc:	2220      	movs	r2, #32
 8005fce:	2100      	movs	r1, #0
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f011 f891 	bl	80170f8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005fd6:	4b32      	ldr	r3, [pc, #200]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 8005fd8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8005fdc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005fde:	4b30      	ldr	r3, [pc, #192]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 8005fe0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005fe4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005fe6:	4b2e      	ldr	r3, [pc, #184]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005fec:	4b2c      	ldr	r3, [pc, #176]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8005ff2:	4b2b      	ldr	r3, [pc, #172]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005ff8:	4b29      	ldr	r3, [pc, #164]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005ffe:	4b28      	ldr	r3, [pc, #160]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 8006000:	2204      	movs	r2, #4
 8006002:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006004:	4b26      	ldr	r3, [pc, #152]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 8006006:	2200      	movs	r2, #0
 8006008:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800600a:	4b25      	ldr	r3, [pc, #148]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 800600c:	2200      	movs	r2, #0
 800600e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8006010:	4b23      	ldr	r3, [pc, #140]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 8006012:	2201      	movs	r2, #1
 8006014:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006016:	4b22      	ldr	r3, [pc, #136]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800601e:	4b20      	ldr	r3, [pc, #128]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 8006020:	2200      	movs	r2, #0
 8006022:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006024:	4b1e      	ldr	r3, [pc, #120]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 8006026:	2200      	movs	r2, #0
 8006028:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800602a:	4b1d      	ldr	r3, [pc, #116]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006032:	4b1b      	ldr	r3, [pc, #108]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 8006034:	2200      	movs	r2, #0
 8006036:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006038:	4b19      	ldr	r3, [pc, #100]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006040:	4817      	ldr	r0, [pc, #92]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 8006042:	f001 f9b9 	bl	80073b8 <HAL_ADC_Init>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800604c:	f000 fbb0 	bl	80067b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006050:	2300      	movs	r3, #0
 8006052:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006058:	4619      	mov	r1, r3
 800605a:	4811      	ldr	r0, [pc, #68]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 800605c:	f001 ff46 	bl	8007eec <HAL_ADCEx_MultiModeConfigChannel>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8006066:	f000 fba3 	bl	80067b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800606a:	4b0e      	ldr	r3, [pc, #56]	@ (80060a4 <MX_ADC1_Init+0xec>)
 800606c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800606e:	2306      	movs	r3, #6
 8006070:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006076:	237f      	movs	r3, #127	@ 0x7f
 8006078:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800607a:	2304      	movs	r3, #4
 800607c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800607e:	2300      	movs	r3, #0
 8006080:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006082:	1d3b      	adds	r3, r7, #4
 8006084:	4619      	mov	r1, r3
 8006086:	4806      	ldr	r0, [pc, #24]	@ (80060a0 <MX_ADC1_Init+0xe8>)
 8006088:	f001 fb1a 	bl	80076c0 <HAL_ADC_ConfigChannel>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8006092:	f000 fb8d 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006096:	bf00      	nop
 8006098:	3730      	adds	r7, #48	@ 0x30
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	200002ec 	.word	0x200002ec
 80060a4:	0c900008 	.word	0x0c900008

080060a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80060ae:	463b      	mov	r3, r7
 80060b0:	2220      	movs	r2, #32
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f011 f81f 	bl	80170f8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80060ba:	4b2b      	ldr	r3, [pc, #172]	@ (8006168 <MX_ADC2_Init+0xc0>)
 80060bc:	4a2b      	ldr	r2, [pc, #172]	@ (800616c <MX_ADC2_Init+0xc4>)
 80060be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80060c0:	4b29      	ldr	r3, [pc, #164]	@ (8006168 <MX_ADC2_Init+0xc0>)
 80060c2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80060c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80060c8:	4b27      	ldr	r3, [pc, #156]	@ (8006168 <MX_ADC2_Init+0xc0>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80060ce:	4b26      	ldr	r3, [pc, #152]	@ (8006168 <MX_ADC2_Init+0xc0>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80060d4:	4b24      	ldr	r3, [pc, #144]	@ (8006168 <MX_ADC2_Init+0xc0>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80060da:	4b23      	ldr	r3, [pc, #140]	@ (8006168 <MX_ADC2_Init+0xc0>)
 80060dc:	2200      	movs	r2, #0
 80060de:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80060e0:	4b21      	ldr	r3, [pc, #132]	@ (8006168 <MX_ADC2_Init+0xc0>)
 80060e2:	2204      	movs	r2, #4
 80060e4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80060e6:	4b20      	ldr	r3, [pc, #128]	@ (8006168 <MX_ADC2_Init+0xc0>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80060ec:	4b1e      	ldr	r3, [pc, #120]	@ (8006168 <MX_ADC2_Init+0xc0>)
 80060ee:	2201      	movs	r2, #1
 80060f0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80060f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006168 <MX_ADC2_Init+0xc0>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80060f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006168 <MX_ADC2_Init+0xc0>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006100:	4b19      	ldr	r3, [pc, #100]	@ (8006168 <MX_ADC2_Init+0xc0>)
 8006102:	2200      	movs	r2, #0
 8006104:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006106:	4b18      	ldr	r3, [pc, #96]	@ (8006168 <MX_ADC2_Init+0xc0>)
 8006108:	2200      	movs	r2, #0
 800610a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800610c:	4b16      	ldr	r3, [pc, #88]	@ (8006168 <MX_ADC2_Init+0xc0>)
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006114:	4b14      	ldr	r3, [pc, #80]	@ (8006168 <MX_ADC2_Init+0xc0>)
 8006116:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800611a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800611c:	4b12      	ldr	r3, [pc, #72]	@ (8006168 <MX_ADC2_Init+0xc0>)
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006124:	4810      	ldr	r0, [pc, #64]	@ (8006168 <MX_ADC2_Init+0xc0>)
 8006126:	f001 f947 	bl	80073b8 <HAL_ADC_Init>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8006130:	f000 fb3e 	bl	80067b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006134:	4b0e      	ldr	r3, [pc, #56]	@ (8006170 <MX_ADC2_Init+0xc8>)
 8006136:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006138:	2306      	movs	r3, #6
 800613a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800613c:	2306      	movs	r3, #6
 800613e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006140:	237f      	movs	r3, #127	@ 0x7f
 8006142:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006144:	2304      	movs	r3, #4
 8006146:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800614c:	463b      	mov	r3, r7
 800614e:	4619      	mov	r1, r3
 8006150:	4805      	ldr	r0, [pc, #20]	@ (8006168 <MX_ADC2_Init+0xc0>)
 8006152:	f001 fab5 	bl	80076c0 <HAL_ADC_ConfigChannel>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 800615c:	f000 fb28 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006160:	bf00      	nop
 8006162:	3720      	adds	r7, #32
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000358 	.word	0x20000358
 800616c:	50000100 	.word	0x50000100
 8006170:	0c900008 	.word	0x0c900008

08006174 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08c      	sub	sp, #48	@ 0x30
 8006178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800617a:	463b      	mov	r3, r7
 800617c:	2230      	movs	r2, #48	@ 0x30
 800617e:	2100      	movs	r1, #0
 8006180:	4618      	mov	r0, r3
 8006182:	f010 ffb9 	bl	80170f8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8006186:	4b1b      	ldr	r3, [pc, #108]	@ (80061f4 <MX_DAC1_Init+0x80>)
 8006188:	4a1b      	ldr	r2, [pc, #108]	@ (80061f8 <MX_DAC1_Init+0x84>)
 800618a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800618c:	4819      	ldr	r0, [pc, #100]	@ (80061f4 <MX_DAC1_Init+0x80>)
 800618e:	f002 f831 	bl	80081f4 <HAL_DAC_Init>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006198:	f000 fb0a 	bl	80067b0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800619c:	2302      	movs	r3, #2
 800619e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80061a0:	2300      	movs	r3, #0
 80061a2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80061a4:	2300      	movs	r3, #0
 80061a6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80061a8:	2300      	movs	r3, #0
 80061aa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80061b0:	2300      	movs	r3, #0
 80061b2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80061b4:	2300      	movs	r3, #0
 80061b6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80061b8:	2301      	movs	r3, #1
 80061ba:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80061bc:	2300      	movs	r3, #0
 80061be:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80061c0:	463b      	mov	r3, r7
 80061c2:	2200      	movs	r2, #0
 80061c4:	4619      	mov	r1, r3
 80061c6:	480b      	ldr	r0, [pc, #44]	@ (80061f4 <MX_DAC1_Init+0x80>)
 80061c8:	f002 f836 	bl	8008238 <HAL_DAC_ConfigChannel>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80061d2:	f000 faed 	bl	80067b0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80061d6:	463b      	mov	r3, r7
 80061d8:	2210      	movs	r2, #16
 80061da:	4619      	mov	r1, r3
 80061dc:	4805      	ldr	r0, [pc, #20]	@ (80061f4 <MX_DAC1_Init+0x80>)
 80061de:	f002 f82b 	bl	8008238 <HAL_DAC_ConfigChannel>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80061e8:	f000 fae2 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80061ec:	bf00      	nop
 80061ee:	3730      	adds	r7, #48	@ 0x30
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	200003c4 	.word	0x200003c4
 80061f8:	50000800 	.word	0x50000800

080061fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006200:	4b1b      	ldr	r3, [pc, #108]	@ (8006270 <MX_I2C1_Init+0x74>)
 8006202:	4a1c      	ldr	r2, [pc, #112]	@ (8006274 <MX_I2C1_Init+0x78>)
 8006204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20611033;
 8006206:	4b1a      	ldr	r3, [pc, #104]	@ (8006270 <MX_I2C1_Init+0x74>)
 8006208:	4a1b      	ldr	r2, [pc, #108]	@ (8006278 <MX_I2C1_Init+0x7c>)
 800620a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800620c:	4b18      	ldr	r3, [pc, #96]	@ (8006270 <MX_I2C1_Init+0x74>)
 800620e:	2200      	movs	r2, #0
 8006210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006212:	4b17      	ldr	r3, [pc, #92]	@ (8006270 <MX_I2C1_Init+0x74>)
 8006214:	2201      	movs	r2, #1
 8006216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006218:	4b15      	ldr	r3, [pc, #84]	@ (8006270 <MX_I2C1_Init+0x74>)
 800621a:	2200      	movs	r2, #0
 800621c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800621e:	4b14      	ldr	r3, [pc, #80]	@ (8006270 <MX_I2C1_Init+0x74>)
 8006220:	2200      	movs	r2, #0
 8006222:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006224:	4b12      	ldr	r3, [pc, #72]	@ (8006270 <MX_I2C1_Init+0x74>)
 8006226:	2200      	movs	r2, #0
 8006228:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800622a:	4b11      	ldr	r3, [pc, #68]	@ (8006270 <MX_I2C1_Init+0x74>)
 800622c:	2200      	movs	r2, #0
 800622e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006230:	4b0f      	ldr	r3, [pc, #60]	@ (8006270 <MX_I2C1_Init+0x74>)
 8006232:	2200      	movs	r2, #0
 8006234:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006236:	480e      	ldr	r0, [pc, #56]	@ (8006270 <MX_I2C1_Init+0x74>)
 8006238:	f002 fb3a 	bl	80088b0 <HAL_I2C_Init>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006242:	f000 fab5 	bl	80067b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006246:	2100      	movs	r1, #0
 8006248:	4809      	ldr	r0, [pc, #36]	@ (8006270 <MX_I2C1_Init+0x74>)
 800624a:	f002 fbcc 	bl	80089e6 <HAL_I2CEx_ConfigAnalogFilter>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006254:	f000 faac 	bl	80067b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006258:	2100      	movs	r1, #0
 800625a:	4805      	ldr	r0, [pc, #20]	@ (8006270 <MX_I2C1_Init+0x74>)
 800625c:	f002 fc0e 	bl	8008a7c <HAL_I2CEx_ConfigDigitalFilter>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006266:	f000 faa3 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800626a:	bf00      	nop
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	200003d8 	.word	0x200003d8
 8006274:	40005400 	.word	0x40005400
 8006278:	20611033 	.word	0x20611033

0800627c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006280:	4b1b      	ldr	r3, [pc, #108]	@ (80062f0 <MX_I2C2_Init+0x74>)
 8006282:	4a1c      	ldr	r2, [pc, #112]	@ (80062f4 <MX_I2C2_Init+0x78>)
 8006284:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20611033;
 8006286:	4b1a      	ldr	r3, [pc, #104]	@ (80062f0 <MX_I2C2_Init+0x74>)
 8006288:	4a1b      	ldr	r2, [pc, #108]	@ (80062f8 <MX_I2C2_Init+0x7c>)
 800628a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800628c:	4b18      	ldr	r3, [pc, #96]	@ (80062f0 <MX_I2C2_Init+0x74>)
 800628e:	2200      	movs	r2, #0
 8006290:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006292:	4b17      	ldr	r3, [pc, #92]	@ (80062f0 <MX_I2C2_Init+0x74>)
 8006294:	2201      	movs	r2, #1
 8006296:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006298:	4b15      	ldr	r3, [pc, #84]	@ (80062f0 <MX_I2C2_Init+0x74>)
 800629a:	2200      	movs	r2, #0
 800629c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800629e:	4b14      	ldr	r3, [pc, #80]	@ (80062f0 <MX_I2C2_Init+0x74>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80062a4:	4b12      	ldr	r3, [pc, #72]	@ (80062f0 <MX_I2C2_Init+0x74>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80062aa:	4b11      	ldr	r3, [pc, #68]	@ (80062f0 <MX_I2C2_Init+0x74>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80062b0:	4b0f      	ldr	r3, [pc, #60]	@ (80062f0 <MX_I2C2_Init+0x74>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80062b6:	480e      	ldr	r0, [pc, #56]	@ (80062f0 <MX_I2C2_Init+0x74>)
 80062b8:	f002 fafa 	bl	80088b0 <HAL_I2C_Init>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80062c2:	f000 fa75 	bl	80067b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80062c6:	2100      	movs	r1, #0
 80062c8:	4809      	ldr	r0, [pc, #36]	@ (80062f0 <MX_I2C2_Init+0x74>)
 80062ca:	f002 fb8c 	bl	80089e6 <HAL_I2CEx_ConfigAnalogFilter>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80062d4:	f000 fa6c 	bl	80067b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80062d8:	2100      	movs	r1, #0
 80062da:	4805      	ldr	r0, [pc, #20]	@ (80062f0 <MX_I2C2_Init+0x74>)
 80062dc:	f002 fbce 	bl	8008a7c <HAL_I2CEx_ConfigDigitalFilter>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80062e6:	f000 fa63 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80062ea:	bf00      	nop
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	2000042c 	.word	0x2000042c
 80062f4:	40005800 	.word	0x40005800
 80062f8:	20611033 	.word	0x20611033

080062fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08a      	sub	sp, #40	@ 0x28
 8006300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006302:	f107 031c 	add.w	r3, r7, #28
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	605a      	str	r2, [r3, #4]
 800630c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800630e:	463b      	mov	r3, r7
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	605a      	str	r2, [r3, #4]
 8006316:	609a      	str	r2, [r3, #8]
 8006318:	60da      	str	r2, [r3, #12]
 800631a:	611a      	str	r2, [r3, #16]
 800631c:	615a      	str	r2, [r3, #20]
 800631e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006320:	4b32      	ldr	r3, [pc, #200]	@ (80063ec <MX_TIM3_Init+0xf0>)
 8006322:	4a33      	ldr	r2, [pc, #204]	@ (80063f0 <MX_TIM3_Init+0xf4>)
 8006324:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006326:	4b31      	ldr	r3, [pc, #196]	@ (80063ec <MX_TIM3_Init+0xf0>)
 8006328:	2200      	movs	r2, #0
 800632a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800632c:	4b2f      	ldr	r3, [pc, #188]	@ (80063ec <MX_TIM3_Init+0xf0>)
 800632e:	2200      	movs	r2, #0
 8006330:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006332:	4b2e      	ldr	r3, [pc, #184]	@ (80063ec <MX_TIM3_Init+0xf0>)
 8006334:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006338:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800633a:	4b2c      	ldr	r3, [pc, #176]	@ (80063ec <MX_TIM3_Init+0xf0>)
 800633c:	2200      	movs	r2, #0
 800633e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006340:	4b2a      	ldr	r3, [pc, #168]	@ (80063ec <MX_TIM3_Init+0xf0>)
 8006342:	2200      	movs	r2, #0
 8006344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006346:	4829      	ldr	r0, [pc, #164]	@ (80063ec <MX_TIM3_Init+0xf0>)
 8006348:	f005 f9a0 	bl	800b68c <HAL_TIM_PWM_Init>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8006352:	f000 fa2d 	bl	80067b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006356:	2300      	movs	r3, #0
 8006358:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800635a:	2300      	movs	r3, #0
 800635c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800635e:	f107 031c 	add.w	r3, r7, #28
 8006362:	4619      	mov	r1, r3
 8006364:	4821      	ldr	r0, [pc, #132]	@ (80063ec <MX_TIM3_Init+0xf0>)
 8006366:	f006 f805 	bl	800c374 <HAL_TIMEx_MasterConfigSynchronization>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8006370:	f000 fa1e 	bl	80067b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006374:	2360      	movs	r3, #96	@ 0x60
 8006376:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8006378:	2300      	movs	r3, #0
 800637a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800637c:	2300      	movs	r3, #0
 800637e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006380:	2300      	movs	r3, #0
 8006382:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006384:	463b      	mov	r3, r7
 8006386:	2200      	movs	r2, #0
 8006388:	4619      	mov	r1, r3
 800638a:	4818      	ldr	r0, [pc, #96]	@ (80063ec <MX_TIM3_Init+0xf0>)
 800638c:	f005 fb24 	bl	800b9d8 <HAL_TIM_PWM_ConfigChannel>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8006396:	f000 fa0b 	bl	80067b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800639a:	463b      	mov	r3, r7
 800639c:	2204      	movs	r2, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	4812      	ldr	r0, [pc, #72]	@ (80063ec <MX_TIM3_Init+0xf0>)
 80063a2:	f005 fb19 	bl	800b9d8 <HAL_TIM_PWM_ConfigChannel>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80063ac:	f000 fa00 	bl	80067b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80063b0:	463b      	mov	r3, r7
 80063b2:	2208      	movs	r2, #8
 80063b4:	4619      	mov	r1, r3
 80063b6:	480d      	ldr	r0, [pc, #52]	@ (80063ec <MX_TIM3_Init+0xf0>)
 80063b8:	f005 fb0e 	bl	800b9d8 <HAL_TIM_PWM_ConfigChannel>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80063c2:	f000 f9f5 	bl	80067b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80063c6:	463b      	mov	r3, r7
 80063c8:	220c      	movs	r2, #12
 80063ca:	4619      	mov	r1, r3
 80063cc:	4807      	ldr	r0, [pc, #28]	@ (80063ec <MX_TIM3_Init+0xf0>)
 80063ce:	f005 fb03 	bl	800b9d8 <HAL_TIM_PWM_ConfigChannel>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80063d8:	f000 f9ea 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80063dc:	4803      	ldr	r0, [pc, #12]	@ (80063ec <MX_TIM3_Init+0xf0>)
 80063de:	f000 fc03 	bl	8006be8 <HAL_TIM_MspPostInit>

}
 80063e2:	bf00      	nop
 80063e4:	3728      	adds	r7, #40	@ 0x28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000480 	.word	0x20000480
 80063f0:	40000400 	.word	0x40000400

080063f4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b098      	sub	sp, #96	@ 0x60
 80063f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	605a      	str	r2, [r3, #4]
 8006404:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006406:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	605a      	str	r2, [r3, #4]
 8006410:	609a      	str	r2, [r3, #8]
 8006412:	60da      	str	r2, [r3, #12]
 8006414:	611a      	str	r2, [r3, #16]
 8006416:	615a      	str	r2, [r3, #20]
 8006418:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800641a:	1d3b      	adds	r3, r7, #4
 800641c:	2234      	movs	r2, #52	@ 0x34
 800641e:	2100      	movs	r1, #0
 8006420:	4618      	mov	r0, r3
 8006422:	f010 fe69 	bl	80170f8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8006426:	4b3a      	ldr	r3, [pc, #232]	@ (8006510 <MX_TIM15_Init+0x11c>)
 8006428:	4a3a      	ldr	r2, [pc, #232]	@ (8006514 <MX_TIM15_Init+0x120>)
 800642a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800642c:	4b38      	ldr	r3, [pc, #224]	@ (8006510 <MX_TIM15_Init+0x11c>)
 800642e:	2200      	movs	r2, #0
 8006430:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006432:	4b37      	ldr	r3, [pc, #220]	@ (8006510 <MX_TIM15_Init+0x11c>)
 8006434:	2200      	movs	r2, #0
 8006436:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8006438:	4b35      	ldr	r3, [pc, #212]	@ (8006510 <MX_TIM15_Init+0x11c>)
 800643a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800643e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006440:	4b33      	ldr	r3, [pc, #204]	@ (8006510 <MX_TIM15_Init+0x11c>)
 8006442:	2200      	movs	r2, #0
 8006444:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8006446:	4b32      	ldr	r3, [pc, #200]	@ (8006510 <MX_TIM15_Init+0x11c>)
 8006448:	2200      	movs	r2, #0
 800644a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800644c:	4b30      	ldr	r3, [pc, #192]	@ (8006510 <MX_TIM15_Init+0x11c>)
 800644e:	2200      	movs	r2, #0
 8006450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8006452:	482f      	ldr	r0, [pc, #188]	@ (8006510 <MX_TIM15_Init+0x11c>)
 8006454:	f005 f91a 	bl	800b68c <HAL_TIM_PWM_Init>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800645e:	f000 f9a7 	bl	80067b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006462:	2300      	movs	r3, #0
 8006464:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006466:	2300      	movs	r3, #0
 8006468:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800646a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800646e:	4619      	mov	r1, r3
 8006470:	4827      	ldr	r0, [pc, #156]	@ (8006510 <MX_TIM15_Init+0x11c>)
 8006472:	f005 ff7f 	bl	800c374 <HAL_TIMEx_MasterConfigSynchronization>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800647c:	f000 f998 	bl	80067b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006480:	2360      	movs	r3, #96	@ 0x60
 8006482:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8006484:	2300      	movs	r3, #0
 8006486:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006488:	2300      	movs	r3, #0
 800648a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800648c:	2300      	movs	r3, #0
 800648e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006490:	2300      	movs	r3, #0
 8006492:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006494:	2300      	movs	r3, #0
 8006496:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006498:	2300      	movs	r3, #0
 800649a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800649c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80064a0:	2200      	movs	r2, #0
 80064a2:	4619      	mov	r1, r3
 80064a4:	481a      	ldr	r0, [pc, #104]	@ (8006510 <MX_TIM15_Init+0x11c>)
 80064a6:	f005 fa97 	bl	800b9d8 <HAL_TIM_PWM_ConfigChannel>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80064b0:	f000 f97e 	bl	80067b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80064b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80064b8:	2204      	movs	r2, #4
 80064ba:	4619      	mov	r1, r3
 80064bc:	4814      	ldr	r0, [pc, #80]	@ (8006510 <MX_TIM15_Init+0x11c>)
 80064be:	f005 fa8b 	bl	800b9d8 <HAL_TIM_PWM_ConfigChannel>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 80064c8:	f000 f972 	bl	80067b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80064cc:	2300      	movs	r3, #0
 80064ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80064d8:	2300      	movs	r3, #0
 80064da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80064dc:	2300      	movs	r3, #0
 80064de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80064e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80064e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80064e6:	2300      	movs	r3, #0
 80064e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80064ee:	1d3b      	adds	r3, r7, #4
 80064f0:	4619      	mov	r1, r3
 80064f2:	4807      	ldr	r0, [pc, #28]	@ (8006510 <MX_TIM15_Init+0x11c>)
 80064f4:	f005 ffc0 	bl	800c478 <HAL_TIMEx_ConfigBreakDeadTime>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80064fe:	f000 f957 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8006502:	4803      	ldr	r0, [pc, #12]	@ (8006510 <MX_TIM15_Init+0x11c>)
 8006504:	f000 fb70 	bl	8006be8 <HAL_TIM_MspPostInit>

}
 8006508:	bf00      	nop
 800650a:	3760      	adds	r7, #96	@ 0x60
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	200004cc 	.word	0x200004cc
 8006514:	40014000 	.word	0x40014000

08006518 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800651e:	463b      	mov	r3, r7
 8006520:	2200      	movs	r2, #0
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	605a      	str	r2, [r3, #4]
 8006526:	609a      	str	r2, [r3, #8]
 8006528:	60da      	str	r2, [r3, #12]
 800652a:	611a      	str	r2, [r3, #16]
 800652c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800652e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006532:	f7ff fb77 	bl	8005c24 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006536:	2002      	movs	r0, #2
 8006538:	f7ff fb5c 	bl	8005bf4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800653c:	2310      	movs	r3, #16
 800653e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006540:	2303      	movs	r3, #3
 8006542:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006544:	2300      	movs	r3, #0
 8006546:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006548:	463b      	mov	r3, r7
 800654a:	4619      	mov	r1, r3
 800654c:	4838      	ldr	r0, [pc, #224]	@ (8006630 <MX_UCPD1_Init+0x118>)
 800654e:	f006 fac7 	bl	800cae0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8006552:	2340      	movs	r3, #64	@ 0x40
 8006554:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006556:	2303      	movs	r3, #3
 8006558:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800655a:	2300      	movs	r3, #0
 800655c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800655e:	463b      	mov	r3, r7
 8006560:	4619      	mov	r1, r3
 8006562:	4833      	ldr	r0, [pc, #204]	@ (8006630 <MX_UCPD1_Init+0x118>)
 8006564:	f006 fabc 	bl	800cae0 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 8006568:	2272      	movs	r2, #114	@ 0x72
 800656a:	2100      	movs	r1, #0
 800656c:	4831      	ldr	r0, [pc, #196]	@ (8006634 <MX_UCPD1_Init+0x11c>)
 800656e:	f7ff fc7d 	bl	8005e6c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8006572:	2200      	movs	r2, #0
 8006574:	2100      	movs	r1, #0
 8006576:	482f      	ldr	r0, [pc, #188]	@ (8006634 <MX_UCPD1_Init+0x11c>)
 8006578:	f7ff fb6c 	bl	8005c54 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 800657c:	2200      	movs	r2, #0
 800657e:	2100      	movs	r1, #0
 8006580:	482c      	ldr	r0, [pc, #176]	@ (8006634 <MX_UCPD1_Init+0x11c>)
 8006582:	f7ff fc4d 	bl	8005e20 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8006586:	2200      	movs	r2, #0
 8006588:	2100      	movs	r1, #0
 800658a:	482a      	ldr	r0, [pc, #168]	@ (8006634 <MX_UCPD1_Init+0x11c>)
 800658c:	f7ff fb8a 	bl	8005ca4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8006590:	2200      	movs	r2, #0
 8006592:	2100      	movs	r1, #0
 8006594:	4827      	ldr	r0, [pc, #156]	@ (8006634 <MX_UCPD1_Init+0x11c>)
 8006596:	f7ff fbab 	bl	8005cf0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 800659a:	2280      	movs	r2, #128	@ 0x80
 800659c:	2100      	movs	r1, #0
 800659e:	4825      	ldr	r0, [pc, #148]	@ (8006634 <MX_UCPD1_Init+0x11c>)
 80065a0:	f7ff fbcc 	bl	8005d3c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 80065a4:	2200      	movs	r2, #0
 80065a6:	2100      	movs	r1, #0
 80065a8:	4822      	ldr	r0, [pc, #136]	@ (8006634 <MX_UCPD1_Init+0x11c>)
 80065aa:	f7ff fbed 	bl	8005d88 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 80065ae:	2200      	movs	r2, #0
 80065b0:	2100      	movs	r1, #0
 80065b2:	4820      	ldr	r0, [pc, #128]	@ (8006634 <MX_UCPD1_Init+0x11c>)
 80065b4:	f7ff fc0e 	bl	8005dd4 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 80065b8:	2273      	movs	r2, #115	@ 0x73
 80065ba:	2101      	movs	r1, #1
 80065bc:	481d      	ldr	r0, [pc, #116]	@ (8006634 <MX_UCPD1_Init+0x11c>)
 80065be:	f7ff fc55 	bl	8005e6c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80065c2:	2210      	movs	r2, #16
 80065c4:	2101      	movs	r1, #1
 80065c6:	481b      	ldr	r0, [pc, #108]	@ (8006634 <MX_UCPD1_Init+0x11c>)
 80065c8:	f7ff fb44 	bl	8005c54 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 80065cc:	2200      	movs	r2, #0
 80065ce:	2101      	movs	r1, #1
 80065d0:	4818      	ldr	r0, [pc, #96]	@ (8006634 <MX_UCPD1_Init+0x11c>)
 80065d2:	f7ff fc25 	bl	8005e20 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 80065d6:	2200      	movs	r2, #0
 80065d8:	2101      	movs	r1, #1
 80065da:	4816      	ldr	r0, [pc, #88]	@ (8006634 <MX_UCPD1_Init+0x11c>)
 80065dc:	f7ff fb62 	bl	8005ca4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 80065e0:	2200      	movs	r2, #0
 80065e2:	2101      	movs	r1, #1
 80065e4:	4813      	ldr	r0, [pc, #76]	@ (8006634 <MX_UCPD1_Init+0x11c>)
 80065e6:	f7ff fb83 	bl	8005cf0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 80065ea:	2280      	movs	r2, #128	@ 0x80
 80065ec:	2101      	movs	r1, #1
 80065ee:	4811      	ldr	r0, [pc, #68]	@ (8006634 <MX_UCPD1_Init+0x11c>)
 80065f0:	f7ff fba4 	bl	8005d3c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 80065f4:	2200      	movs	r2, #0
 80065f6:	2101      	movs	r1, #1
 80065f8:	480e      	ldr	r0, [pc, #56]	@ (8006634 <MX_UCPD1_Init+0x11c>)
 80065fa:	f7ff fbc5 	bl	8005d88 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 80065fe:	2200      	movs	r2, #0
 8006600:	2101      	movs	r1, #1
 8006602:	480c      	ldr	r0, [pc, #48]	@ (8006634 <MX_UCPD1_Init+0x11c>)
 8006604:	f7ff fbe6 	bl	8005dd4 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(UCPD1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8006608:	f7ff fa6a 	bl	8005ae0 <__NVIC_GetPriorityGrouping>
 800660c:	4603      	mov	r3, r0
 800660e:	2200      	movs	r2, #0
 8006610:	2105      	movs	r1, #5
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff faba 	bl	8005b8c <NVIC_EncodePriority>
 8006618:	4603      	mov	r3, r0
 800661a:	4619      	mov	r1, r3
 800661c:	203f      	movs	r0, #63	@ 0x3f
 800661e:	f7ff fa8b 	bl	8005b38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UCPD1_IRQn);
 8006622:	203f      	movs	r0, #63	@ 0x3f
 8006624:	f7ff fa6a 	bl	8005afc <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8006628:	bf00      	nop
 800662a:	3718      	adds	r7, #24
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	48000400 	.word	0x48000400
 8006634:	40020000 	.word	0x40020000

08006638 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800663e:	4b1e      	ldr	r3, [pc, #120]	@ (80066b8 <MX_DMA_Init+0x80>)
 8006640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006642:	4a1d      	ldr	r2, [pc, #116]	@ (80066b8 <MX_DMA_Init+0x80>)
 8006644:	f043 0304 	orr.w	r3, r3, #4
 8006648:	6493      	str	r3, [r2, #72]	@ 0x48
 800664a:	4b1b      	ldr	r3, [pc, #108]	@ (80066b8 <MX_DMA_Init+0x80>)
 800664c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800664e:	f003 0304 	and.w	r3, r3, #4
 8006652:	607b      	str	r3, [r7, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006656:	4b18      	ldr	r3, [pc, #96]	@ (80066b8 <MX_DMA_Init+0x80>)
 8006658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800665a:	4a17      	ldr	r2, [pc, #92]	@ (80066b8 <MX_DMA_Init+0x80>)
 800665c:	f043 0301 	orr.w	r3, r3, #1
 8006660:	6493      	str	r3, [r2, #72]	@ 0x48
 8006662:	4b15      	ldr	r3, [pc, #84]	@ (80066b8 <MX_DMA_Init+0x80>)
 8006664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	603b      	str	r3, [r7, #0]
 800666c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800666e:	f7ff fa37 	bl	8005ae0 <__NVIC_GetPriorityGrouping>
 8006672:	4603      	mov	r3, r0
 8006674:	2200      	movs	r2, #0
 8006676:	2105      	movs	r1, #5
 8006678:	4618      	mov	r0, r3
 800667a:	f7ff fa87 	bl	8005b8c <NVIC_EncodePriority>
 800667e:	4603      	mov	r3, r0
 8006680:	4619      	mov	r1, r3
 8006682:	200b      	movs	r0, #11
 8006684:	f7ff fa58 	bl	8005b38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006688:	200b      	movs	r0, #11
 800668a:	f7ff fa37 	bl	8005afc <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800668e:	f7ff fa27 	bl	8005ae0 <__NVIC_GetPriorityGrouping>
 8006692:	4603      	mov	r3, r0
 8006694:	2200      	movs	r2, #0
 8006696:	2105      	movs	r1, #5
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff fa77 	bl	8005b8c <NVIC_EncodePriority>
 800669e:	4603      	mov	r3, r0
 80066a0:	4619      	mov	r1, r3
 80066a2:	200c      	movs	r0, #12
 80066a4:	f7ff fa48 	bl	8005b38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80066a8:	200c      	movs	r0, #12
 80066aa:	f7ff fa27 	bl	8005afc <__NVIC_EnableIRQ>

}
 80066ae:	bf00      	nop
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	40021000 	.word	0x40021000

080066bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08a      	sub	sp, #40	@ 0x28
 80066c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066c2:	f107 0314 	add.w	r3, r7, #20
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	605a      	str	r2, [r3, #4]
 80066cc:	609a      	str	r2, [r3, #8]
 80066ce:	60da      	str	r2, [r3, #12]
 80066d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80066d2:	4b26      	ldr	r3, [pc, #152]	@ (800676c <MX_GPIO_Init+0xb0>)
 80066d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066d6:	4a25      	ldr	r2, [pc, #148]	@ (800676c <MX_GPIO_Init+0xb0>)
 80066d8:	f043 0320 	orr.w	r3, r3, #32
 80066dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066de:	4b23      	ldr	r3, [pc, #140]	@ (800676c <MX_GPIO_Init+0xb0>)
 80066e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80066ea:	4b20      	ldr	r3, [pc, #128]	@ (800676c <MX_GPIO_Init+0xb0>)
 80066ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ee:	4a1f      	ldr	r2, [pc, #124]	@ (800676c <MX_GPIO_Init+0xb0>)
 80066f0:	f043 0301 	orr.w	r3, r3, #1
 80066f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066f6:	4b1d      	ldr	r3, [pc, #116]	@ (800676c <MX_GPIO_Init+0xb0>)
 80066f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006702:	4b1a      	ldr	r3, [pc, #104]	@ (800676c <MX_GPIO_Init+0xb0>)
 8006704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006706:	4a19      	ldr	r2, [pc, #100]	@ (800676c <MX_GPIO_Init+0xb0>)
 8006708:	f043 0304 	orr.w	r3, r3, #4
 800670c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800670e:	4b17      	ldr	r3, [pc, #92]	@ (800676c <MX_GPIO_Init+0xb0>)
 8006710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006712:	f003 0304 	and.w	r3, r3, #4
 8006716:	60bb      	str	r3, [r7, #8]
 8006718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800671a:	4b14      	ldr	r3, [pc, #80]	@ (800676c <MX_GPIO_Init+0xb0>)
 800671c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800671e:	4a13      	ldr	r2, [pc, #76]	@ (800676c <MX_GPIO_Init+0xb0>)
 8006720:	f043 0302 	orr.w	r3, r3, #2
 8006724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006726:	4b11      	ldr	r3, [pc, #68]	@ (800676c <MX_GPIO_Init+0xb0>)
 8006728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	607b      	str	r3, [r7, #4]
 8006730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : MODE2_Pin */
  GPIO_InitStruct.Pin = MODE2_Pin;
 8006732:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006738:	2300      	movs	r3, #0
 800673a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800673c:	2301      	movs	r3, #1
 800673e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MODE2_GPIO_Port, &GPIO_InitStruct);
 8006740:	f107 0314 	add.w	r3, r7, #20
 8006744:	4619      	mov	r1, r3
 8006746:	480a      	ldr	r0, [pc, #40]	@ (8006770 <MX_GPIO_Init+0xb4>)
 8006748:	f001 ff30 	bl	80085ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE1_Pin */
  GPIO_InitStruct.Pin = MODE1_Pin;
 800674c:	2308      	movs	r3, #8
 800674e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006750:	2300      	movs	r3, #0
 8006752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006754:	2301      	movs	r3, #1
 8006756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MODE1_GPIO_Port, &GPIO_InitStruct);
 8006758:	f107 0314 	add.w	r3, r7, #20
 800675c:	4619      	mov	r1, r3
 800675e:	4805      	ldr	r0, [pc, #20]	@ (8006774 <MX_GPIO_Init+0xb8>)
 8006760:	f001 ff24 	bl	80085ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006764:	bf00      	nop
 8006766:	3728      	adds	r7, #40	@ 0x28
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40021000 	.word	0x40021000
 8006770:	48000800 	.word	0x48000800
 8006774:	48000400 	.word	0x48000400

08006778 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 8006780:	f00f ff20 	bl	80165c4 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006784:	2001      	movs	r0, #1
 8006786:	f00c fb86 	bl	8012e96 <osDelay>
 800678a:	e7fb      	b.n	8006784 <StartDefaultTask+0xc>

0800678c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a04      	ldr	r2, [pc, #16]	@ (80067ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d101      	bne.n	80067a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800679e:	f000 fbf5 	bl	8006f8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80067a2:	bf00      	nop
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	40014400 	.word	0x40014400

080067b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80067b4:	b672      	cpsid	i
}
 80067b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80067b8:	bf00      	nop
 80067ba:	e7fd      	b.n	80067b8 <Error_Handler+0x8>

080067bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067c2:	4b12      	ldr	r3, [pc, #72]	@ (800680c <HAL_MspInit+0x50>)
 80067c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067c6:	4a11      	ldr	r2, [pc, #68]	@ (800680c <HAL_MspInit+0x50>)
 80067c8:	f043 0301 	orr.w	r3, r3, #1
 80067cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80067ce:	4b0f      	ldr	r3, [pc, #60]	@ (800680c <HAL_MspInit+0x50>)
 80067d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	607b      	str	r3, [r7, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80067da:	4b0c      	ldr	r3, [pc, #48]	@ (800680c <HAL_MspInit+0x50>)
 80067dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067de:	4a0b      	ldr	r2, [pc, #44]	@ (800680c <HAL_MspInit+0x50>)
 80067e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80067e6:	4b09      	ldr	r3, [pc, #36]	@ (800680c <HAL_MspInit+0x50>)
 80067e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ee:	603b      	str	r3, [r7, #0]
 80067f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80067f2:	2200      	movs	r2, #0
 80067f4:	210f      	movs	r1, #15
 80067f6:	f06f 0001 	mvn.w	r0, #1
 80067fa:	f001 fcd3 	bl	80081a4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80067fe:	f003 ff2f 	bl	800a660 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	40021000 	.word	0x40021000

08006810 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b09c      	sub	sp, #112	@ 0x70
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006818:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	605a      	str	r2, [r3, #4]
 8006822:	609a      	str	r2, [r3, #8]
 8006824:	60da      	str	r2, [r3, #12]
 8006826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006828:	f107 0318 	add.w	r3, r7, #24
 800682c:	2244      	movs	r2, #68	@ 0x44
 800682e:	2100      	movs	r1, #0
 8006830:	4618      	mov	r0, r3
 8006832:	f010 fc61 	bl	80170f8 <memset>
  if(hadc->Instance==ADC1)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800683e:	d13e      	bne.n	80068be <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8006840:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006844:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8006846:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800684a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800684c:	f107 0318 	add.w	r3, r7, #24
 8006850:	4618      	mov	r0, r3
 8006852:	f004 fc5f 	bl	800b114 <HAL_RCCEx_PeriphCLKConfig>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800685c:	f7ff ffa8 	bl	80067b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006860:	4b3a      	ldr	r3, [pc, #232]	@ (800694c <HAL_ADC_MspInit+0x13c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3301      	adds	r3, #1
 8006866:	4a39      	ldr	r2, [pc, #228]	@ (800694c <HAL_ADC_MspInit+0x13c>)
 8006868:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800686a:	4b38      	ldr	r3, [pc, #224]	@ (800694c <HAL_ADC_MspInit+0x13c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d10b      	bne.n	800688a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006872:	4b37      	ldr	r3, [pc, #220]	@ (8006950 <HAL_ADC_MspInit+0x140>)
 8006874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006876:	4a36      	ldr	r2, [pc, #216]	@ (8006950 <HAL_ADC_MspInit+0x140>)
 8006878:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800687c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800687e:	4b34      	ldr	r3, [pc, #208]	@ (8006950 <HAL_ADC_MspInit+0x140>)
 8006880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006882:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800688a:	4b31      	ldr	r3, [pc, #196]	@ (8006950 <HAL_ADC_MspInit+0x140>)
 800688c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800688e:	4a30      	ldr	r2, [pc, #192]	@ (8006950 <HAL_ADC_MspInit+0x140>)
 8006890:	f043 0301 	orr.w	r3, r3, #1
 8006894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006896:	4b2e      	ldr	r3, [pc, #184]	@ (8006950 <HAL_ADC_MspInit+0x140>)
 8006898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	613b      	str	r3, [r7, #16]
 80068a0:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATT_LOW1_Pin|BATT_LOW2_Pin|BATT_HIGH1_Pin|BATT_HIGH2_Pin;
 80068a2:	230f      	movs	r3, #15
 80068a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068a6:	2303      	movs	r3, #3
 80068a8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068ae:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80068b2:	4619      	mov	r1, r3
 80068b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80068b8:	f001 fe78 	bl	80085ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80068bc:	e042      	b.n	8006944 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a24      	ldr	r2, [pc, #144]	@ (8006954 <HAL_ADC_MspInit+0x144>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d13d      	bne.n	8006944 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80068c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80068ce:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80068d2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80068d4:	f107 0318 	add.w	r3, r7, #24
 80068d8:	4618      	mov	r0, r3
 80068da:	f004 fc1b 	bl	800b114 <HAL_RCCEx_PeriphCLKConfig>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 80068e4:	f7ff ff64 	bl	80067b0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80068e8:	4b18      	ldr	r3, [pc, #96]	@ (800694c <HAL_ADC_MspInit+0x13c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3301      	adds	r3, #1
 80068ee:	4a17      	ldr	r2, [pc, #92]	@ (800694c <HAL_ADC_MspInit+0x13c>)
 80068f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80068f2:	4b16      	ldr	r3, [pc, #88]	@ (800694c <HAL_ADC_MspInit+0x13c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d10b      	bne.n	8006912 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80068fa:	4b15      	ldr	r3, [pc, #84]	@ (8006950 <HAL_ADC_MspInit+0x140>)
 80068fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068fe:	4a14      	ldr	r2, [pc, #80]	@ (8006950 <HAL_ADC_MspInit+0x140>)
 8006900:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006906:	4b12      	ldr	r3, [pc, #72]	@ (8006950 <HAL_ADC_MspInit+0x140>)
 8006908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800690a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006912:	4b0f      	ldr	r3, [pc, #60]	@ (8006950 <HAL_ADC_MspInit+0x140>)
 8006914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006916:	4a0e      	ldr	r2, [pc, #56]	@ (8006950 <HAL_ADC_MspInit+0x140>)
 8006918:	f043 0301 	orr.w	r3, r3, #1
 800691c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800691e:	4b0c      	ldr	r3, [pc, #48]	@ (8006950 <HAL_ADC_MspInit+0x140>)
 8006920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	60bb      	str	r3, [r7, #8]
 8006928:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBUS_Pin;
 800692a:	2340      	movs	r3, #64	@ 0x40
 800692c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800692e:	2303      	movs	r3, #3
 8006930:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006932:	2300      	movs	r3, #0
 8006934:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(VBUS_GPIO_Port, &GPIO_InitStruct);
 8006936:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800693a:	4619      	mov	r1, r3
 800693c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006940:	f001 fe34 	bl	80085ac <HAL_GPIO_Init>
}
 8006944:	bf00      	nop
 8006946:	3770      	adds	r7, #112	@ 0x70
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	2000051c 	.word	0x2000051c
 8006950:	40021000 	.word	0x40021000
 8006954:	50000100 	.word	0x50000100

08006958 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08a      	sub	sp, #40	@ 0x28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006960:	f107 0314 	add.w	r3, r7, #20
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	605a      	str	r2, [r3, #4]
 800696a:	609a      	str	r2, [r3, #8]
 800696c:	60da      	str	r2, [r3, #12]
 800696e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a15      	ldr	r2, [pc, #84]	@ (80069cc <HAL_DAC_MspInit+0x74>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d124      	bne.n	80069c4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800697a:	4b15      	ldr	r3, [pc, #84]	@ (80069d0 <HAL_DAC_MspInit+0x78>)
 800697c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800697e:	4a14      	ldr	r2, [pc, #80]	@ (80069d0 <HAL_DAC_MspInit+0x78>)
 8006980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006986:	4b12      	ldr	r3, [pc, #72]	@ (80069d0 <HAL_DAC_MspInit+0x78>)
 8006988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800698a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006992:	4b0f      	ldr	r3, [pc, #60]	@ (80069d0 <HAL_DAC_MspInit+0x78>)
 8006994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006996:	4a0e      	ldr	r2, [pc, #56]	@ (80069d0 <HAL_DAC_MspInit+0x78>)
 8006998:	f043 0301 	orr.w	r3, r3, #1
 800699c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800699e:	4b0c      	ldr	r3, [pc, #48]	@ (80069d0 <HAL_DAC_MspInit+0x78>)
 80069a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = CTRL1_Pin|CTRL2_Pin;
 80069aa:	2330      	movs	r3, #48	@ 0x30
 80069ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069ae:	2303      	movs	r3, #3
 80069b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b2:	2300      	movs	r3, #0
 80069b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069b6:	f107 0314 	add.w	r3, r7, #20
 80069ba:	4619      	mov	r1, r3
 80069bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80069c0:	f001 fdf4 	bl	80085ac <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80069c4:	bf00      	nop
 80069c6:	3728      	adds	r7, #40	@ 0x28
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	50000800 	.word	0x50000800
 80069d0:	40021000 	.word	0x40021000

080069d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b09e      	sub	sp, #120	@ 0x78
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80069e0:	2200      	movs	r2, #0
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	605a      	str	r2, [r3, #4]
 80069e6:	609a      	str	r2, [r3, #8]
 80069e8:	60da      	str	r2, [r3, #12]
 80069ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80069ec:	f107 0320 	add.w	r3, r7, #32
 80069f0:	2244      	movs	r2, #68	@ 0x44
 80069f2:	2100      	movs	r1, #0
 80069f4:	4618      	mov	r0, r3
 80069f6:	f010 fb7f 	bl	80170f8 <memset>
  if(hi2c->Instance==I2C1)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a5b      	ldr	r2, [pc, #364]	@ (8006b6c <HAL_I2C_MspInit+0x198>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d155      	bne.n	8006ab0 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006a04:	2340      	movs	r3, #64	@ 0x40
 8006a06:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006a0c:	f107 0320 	add.w	r3, r7, #32
 8006a10:	4618      	mov	r0, r3
 8006a12:	f004 fb7f 	bl	800b114 <HAL_RCCEx_PeriphCLKConfig>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006a1c:	f7ff fec8 	bl	80067b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a20:	4b53      	ldr	r3, [pc, #332]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a24:	4a52      	ldr	r2, [pc, #328]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006a26:	f043 0301 	orr.w	r3, r3, #1
 8006a2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a2c:	4b50      	ldr	r3, [pc, #320]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	61fb      	str	r3, [r7, #28]
 8006a36:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a38:	4b4d      	ldr	r3, [pc, #308]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a3c:	4a4c      	ldr	r2, [pc, #304]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006a3e:	f043 0302 	orr.w	r3, r3, #2
 8006a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a44:	4b4a      	ldr	r3, [pc, #296]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006a50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a54:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a56:	2312      	movs	r3, #18
 8006a58:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006a62:	2304      	movs	r3, #4
 8006a64:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a66:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006a70:	f001 fd9c 	bl	80085ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006a74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a78:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a7a:	2312      	movs	r3, #18
 8006a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a82:	2300      	movs	r3, #0
 8006a84:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006a86:	2304      	movs	r3, #4
 8006a88:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a8a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4838      	ldr	r0, [pc, #224]	@ (8006b74 <HAL_I2C_MspInit+0x1a0>)
 8006a92:	f001 fd8b 	bl	80085ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006a96:	4b36      	ldr	r3, [pc, #216]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a9a:	4a35      	ldr	r2, [pc, #212]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006a9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006aa2:	4b33      	ldr	r3, [pc, #204]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006aae:	e058      	b.n	8006b62 <HAL_I2C_MspInit+0x18e>
  else if(hi2c->Instance==I2C2)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a30      	ldr	r2, [pc, #192]	@ (8006b78 <HAL_I2C_MspInit+0x1a4>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d153      	bne.n	8006b62 <HAL_I2C_MspInit+0x18e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006aba:	2380      	movs	r3, #128	@ 0x80
 8006abc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ac2:	f107 0320 	add.w	r3, r7, #32
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f004 fb24 	bl	800b114 <HAL_RCCEx_PeriphCLKConfig>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <HAL_I2C_MspInit+0x102>
      Error_Handler();
 8006ad2:	f7ff fe6d 	bl	80067b0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ad6:	4b26      	ldr	r3, [pc, #152]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ada:	4a25      	ldr	r2, [pc, #148]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006adc:	f043 0304 	orr.w	r3, r3, #4
 8006ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ae2:	4b23      	ldr	r3, [pc, #140]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ae6:	f003 0304 	and.w	r3, r3, #4
 8006aea:	613b      	str	r3, [r7, #16]
 8006aec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aee:	4b20      	ldr	r3, [pc, #128]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006af2:	4a1f      	ldr	r2, [pc, #124]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006af4:	f043 0301 	orr.w	r3, r3, #1
 8006af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006afa:	4b1d      	ldr	r3, [pc, #116]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006b06:	2310      	movs	r3, #16
 8006b08:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b0a:	2312      	movs	r3, #18
 8006b0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b12:	2300      	movs	r3, #0
 8006b14:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006b16:	2304      	movs	r3, #4
 8006b18:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b1a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4816      	ldr	r0, [pc, #88]	@ (8006b7c <HAL_I2C_MspInit+0x1a8>)
 8006b22:	f001 fd43 	bl	80085ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006b26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b2a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b2c:	2312      	movs	r3, #18
 8006b2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b34:	2300      	movs	r3, #0
 8006b36:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006b38:	2304      	movs	r3, #4
 8006b3a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b3c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006b40:	4619      	mov	r1, r3
 8006b42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006b46:	f001 fd31 	bl	80085ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006b4a:	4b09      	ldr	r3, [pc, #36]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b4e:	4a08      	ldr	r2, [pc, #32]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006b50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006b54:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b56:	4b06      	ldr	r3, [pc, #24]	@ (8006b70 <HAL_I2C_MspInit+0x19c>)
 8006b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b5e:	60bb      	str	r3, [r7, #8]
 8006b60:	68bb      	ldr	r3, [r7, #8]
}
 8006b62:	bf00      	nop
 8006b64:	3778      	adds	r7, #120	@ 0x78
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	40005400 	.word	0x40005400
 8006b70:	40021000 	.word	0x40021000
 8006b74:	48000400 	.word	0x48000400
 8006b78:	40005800 	.word	0x40005800
 8006b7c:	48000800 	.word	0x48000800

08006b80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a13      	ldr	r2, [pc, #76]	@ (8006bdc <HAL_TIM_PWM_MspInit+0x5c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d10c      	bne.n	8006bac <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006b92:	4b13      	ldr	r3, [pc, #76]	@ (8006be0 <HAL_TIM_PWM_MspInit+0x60>)
 8006b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b96:	4a12      	ldr	r2, [pc, #72]	@ (8006be0 <HAL_TIM_PWM_MspInit+0x60>)
 8006b98:	f043 0302 	orr.w	r3, r3, #2
 8006b9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b9e:	4b10      	ldr	r3, [pc, #64]	@ (8006be0 <HAL_TIM_PWM_MspInit+0x60>)
 8006ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8006baa:	e010      	b.n	8006bce <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM15)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a0c      	ldr	r2, [pc, #48]	@ (8006be4 <HAL_TIM_PWM_MspInit+0x64>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d10b      	bne.n	8006bce <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8006be0 <HAL_TIM_PWM_MspInit+0x60>)
 8006bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bba:	4a09      	ldr	r2, [pc, #36]	@ (8006be0 <HAL_TIM_PWM_MspInit+0x60>)
 8006bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8006bc2:	4b07      	ldr	r3, [pc, #28]	@ (8006be0 <HAL_TIM_PWM_MspInit+0x60>)
 8006bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bca:	60bb      	str	r3, [r7, #8]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
}
 8006bce:	bf00      	nop
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40000400 	.word	0x40000400
 8006be0:	40021000 	.word	0x40021000
 8006be4:	40014000 	.word	0x40014000

08006be8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08c      	sub	sp, #48	@ 0x30
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bf0:	f107 031c 	add.w	r3, r7, #28
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	605a      	str	r2, [r3, #4]
 8006bfa:	609a      	str	r2, [r3, #8]
 8006bfc:	60da      	str	r2, [r3, #12]
 8006bfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a3f      	ldr	r2, [pc, #252]	@ (8006d04 <HAL_TIM_MspPostInit+0x11c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d155      	bne.n	8006cb6 <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c0a:	4b3f      	ldr	r3, [pc, #252]	@ (8006d08 <HAL_TIM_MspPostInit+0x120>)
 8006c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8006d08 <HAL_TIM_MspPostInit+0x120>)
 8006c10:	f043 0301 	orr.w	r3, r3, #1
 8006c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c16:	4b3c      	ldr	r3, [pc, #240]	@ (8006d08 <HAL_TIM_MspPostInit+0x120>)
 8006c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	61bb      	str	r3, [r7, #24]
 8006c20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c22:	4b39      	ldr	r3, [pc, #228]	@ (8006d08 <HAL_TIM_MspPostInit+0x120>)
 8006c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c26:	4a38      	ldr	r2, [pc, #224]	@ (8006d08 <HAL_TIM_MspPostInit+0x120>)
 8006c28:	f043 0302 	orr.w	r3, r3, #2
 8006c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c2e:	4b36      	ldr	r3, [pc, #216]	@ (8006d08 <HAL_TIM_MspPostInit+0x120>)
 8006c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c3a:	4b33      	ldr	r3, [pc, #204]	@ (8006d08 <HAL_TIM_MspPostInit+0x120>)
 8006c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c3e:	4a32      	ldr	r2, [pc, #200]	@ (8006d08 <HAL_TIM_MspPostInit+0x120>)
 8006c40:	f043 0304 	orr.w	r3, r3, #4
 8006c44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c46:	4b30      	ldr	r3, [pc, #192]	@ (8006d08 <HAL_TIM_MspPostInit+0x120>)
 8006c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	613b      	str	r3, [r7, #16]
 8006c50:	693b      	ldr	r3, [r7, #16]
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LEDG1_Pin;
 8006c52:	2380      	movs	r3, #128	@ 0x80
 8006c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c56:	2302      	movs	r3, #2
 8006c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006c62:	2302      	movs	r3, #2
 8006c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LEDG1_GPIO_Port, &GPIO_InitStruct);
 8006c66:	f107 031c 	add.w	r3, r7, #28
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006c70:	f001 fc9c 	bl	80085ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEDR1_Pin|LEDB1_Pin;
 8006c74:	2303      	movs	r3, #3
 8006c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c80:	2300      	movs	r3, #0
 8006c82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006c84:	2302      	movs	r3, #2
 8006c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c88:	f107 031c 	add.w	r3, r7, #28
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	481f      	ldr	r0, [pc, #124]	@ (8006d0c <HAL_TIM_MspPostInit+0x124>)
 8006c90:	f001 fc8c 	bl	80085ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEDG2_Pin;
 8006c94:	2340      	movs	r3, #64	@ 0x40
 8006c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c98:	2302      	movs	r3, #2
 8006c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LEDG2_GPIO_Port, &GPIO_InitStruct);
 8006ca8:	f107 031c 	add.w	r3, r7, #28
 8006cac:	4619      	mov	r1, r3
 8006cae:	4818      	ldr	r0, [pc, #96]	@ (8006d10 <HAL_TIM_MspPostInit+0x128>)
 8006cb0:	f001 fc7c 	bl	80085ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8006cb4:	e021      	b.n	8006cfa <HAL_TIM_MspPostInit+0x112>
  else if(htim->Instance==TIM15)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a16      	ldr	r2, [pc, #88]	@ (8006d14 <HAL_TIM_MspPostInit+0x12c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d11c      	bne.n	8006cfa <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cc0:	4b11      	ldr	r3, [pc, #68]	@ (8006d08 <HAL_TIM_MspPostInit+0x120>)
 8006cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cc4:	4a10      	ldr	r2, [pc, #64]	@ (8006d08 <HAL_TIM_MspPostInit+0x120>)
 8006cc6:	f043 0302 	orr.w	r3, r3, #2
 8006cca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8006d08 <HAL_TIM_MspPostInit+0x120>)
 8006cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	60fb      	str	r3, [r7, #12]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LEDB2_Pin|LEDR2_Pin;
 8006cd8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8006cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cde:	2302      	movs	r3, #2
 8006ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8006cea:	2301      	movs	r3, #1
 8006cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cee:	f107 031c 	add.w	r3, r7, #28
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	4805      	ldr	r0, [pc, #20]	@ (8006d0c <HAL_TIM_MspPostInit+0x124>)
 8006cf6:	f001 fc59 	bl	80085ac <HAL_GPIO_Init>
}
 8006cfa:	bf00      	nop
 8006cfc:	3730      	adds	r7, #48	@ 0x30
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40000400 	.word	0x40000400
 8006d08:	40021000 	.word	0x40021000
 8006d0c:	48000400 	.word	0x48000400
 8006d10:	48000800 	.word	0x48000800
 8006d14:	40014000 	.word	0x40014000

08006d18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08c      	sub	sp, #48	@ 0x30
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8006d28:	4b2c      	ldr	r3, [pc, #176]	@ (8006ddc <HAL_InitTick+0xc4>)
 8006d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d2c:	4a2b      	ldr	r2, [pc, #172]	@ (8006ddc <HAL_InitTick+0xc4>)
 8006d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d32:	6613      	str	r3, [r2, #96]	@ 0x60
 8006d34:	4b29      	ldr	r3, [pc, #164]	@ (8006ddc <HAL_InitTick+0xc4>)
 8006d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d3c:	60bb      	str	r3, [r7, #8]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006d40:	f107 020c 	add.w	r2, r7, #12
 8006d44:	f107 0310 	add.w	r3, r7, #16
 8006d48:	4611      	mov	r1, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f004 f96a 	bl	800b024 <HAL_RCC_GetClockConfig>
  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006d50:	f004 f952 	bl	800aff8 <HAL_RCC_GetPCLK2Freq>
 8006d54:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d58:	4a21      	ldr	r2, [pc, #132]	@ (8006de0 <HAL_InitTick+0xc8>)
 8006d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5e:	0c9b      	lsrs	r3, r3, #18
 8006d60:	3b01      	subs	r3, #1
 8006d62:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8006d64:	4b1f      	ldr	r3, [pc, #124]	@ (8006de4 <HAL_InitTick+0xcc>)
 8006d66:	4a20      	ldr	r2, [pc, #128]	@ (8006de8 <HAL_InitTick+0xd0>)
 8006d68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8006d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8006de4 <HAL_InitTick+0xcc>)
 8006d6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006d70:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8006d72:	4a1c      	ldr	r2, [pc, #112]	@ (8006de4 <HAL_InitTick+0xcc>)
 8006d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d76:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8006d78:	4b1a      	ldr	r3, [pc, #104]	@ (8006de4 <HAL_InitTick+0xcc>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d7e:	4b19      	ldr	r3, [pc, #100]	@ (8006de4 <HAL_InitTick+0xcc>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim16);
 8006d84:	4817      	ldr	r0, [pc, #92]	@ (8006de4 <HAL_InitTick+0xcc>)
 8006d86:	f004 fbb5 	bl	800b4f4 <HAL_TIM_Base_Init>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8006d90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d11b      	bne.n	8006dd0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8006d98:	4812      	ldr	r0, [pc, #72]	@ (8006de4 <HAL_InitTick+0xcc>)
 8006d9a:	f004 fc0d 	bl	800b5b8 <HAL_TIM_Base_Start_IT>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8006da4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d111      	bne.n	8006dd0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006dac:	2019      	movs	r0, #25
 8006dae:	f001 fa13 	bl	80081d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b0f      	cmp	r3, #15
 8006db6:	d808      	bhi.n	8006dca <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8006db8:	2200      	movs	r2, #0
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	2019      	movs	r0, #25
 8006dbe:	f001 f9f1 	bl	80081a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8006dec <HAL_InitTick+0xd4>)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	e002      	b.n	8006dd0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8006dd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3730      	adds	r7, #48	@ 0x30
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	40021000 	.word	0x40021000
 8006de0:	431bde83 	.word	0x431bde83
 8006de4:	20000520 	.word	0x20000520
 8006de8:	40014400 	.word	0x40014400
 8006dec:	20000008 	.word	0x20000008

08006df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006df0:	b480      	push	{r7}
 8006df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006df4:	bf00      	nop
 8006df6:	e7fd      	b.n	8006df4 <NMI_Handler+0x4>

08006df8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006dfc:	bf00      	nop
 8006dfe:	e7fd      	b.n	8006dfc <HardFault_Handler+0x4>

08006e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006e04:	bf00      	nop
 8006e06:	e7fd      	b.n	8006e04 <MemManage_Handler+0x4>

08006e08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006e0c:	bf00      	nop
 8006e0e:	e7fd      	b.n	8006e0c <BusFault_Handler+0x4>

08006e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006e14:	bf00      	nop
 8006e16:	e7fd      	b.n	8006e14 <UsageFault_Handler+0x4>

08006e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006e1c:	bf00      	nop
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006e26:	b480      	push	{r7}
 8006e28:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006e2a:	bf00      	nop
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006e38:	bf00      	nop
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
	...

08006e44 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006e48:	4802      	ldr	r0, [pc, #8]	@ (8006e54 <USB_LP_IRQHandler+0x10>)
 8006e4a:	f001 ff53 	bl	8008cf4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8006e4e:	bf00      	nop
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	2000341c 	.word	0x2000341c

08006e58 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8006e5c:	4802      	ldr	r0, [pc, #8]	@ (8006e68 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8006e5e:	f004 fc6c 	bl	800b73a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006e62:	bf00      	nop
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20000520 	.word	0x20000520

08006e6c <UCPD1_IRQHandler>:

/**
  * @brief This function handles UCPD1 interrupt / UCPD1 wake-up interrupt through EXTI line 43.
  */
void UCPD1_IRQHandler(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_IRQn 0 */

  /* USER CODE END UCPD1_IRQn 0 */
  USBPD_PORT0_IRQHandler();
 8006e70:	f008 fc57 	bl	800f722 <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN UCPD1_IRQn 1 */

  /* USER CODE END UCPD1_IRQn 1 */
}
 8006e74:	bf00      	nop
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006e80:	4a14      	ldr	r2, [pc, #80]	@ (8006ed4 <_sbrk+0x5c>)
 8006e82:	4b15      	ldr	r3, [pc, #84]	@ (8006ed8 <_sbrk+0x60>)
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006e8c:	4b13      	ldr	r3, [pc, #76]	@ (8006edc <_sbrk+0x64>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d102      	bne.n	8006e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006e94:	4b11      	ldr	r3, [pc, #68]	@ (8006edc <_sbrk+0x64>)
 8006e96:	4a12      	ldr	r2, [pc, #72]	@ (8006ee0 <_sbrk+0x68>)
 8006e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006e9a:	4b10      	ldr	r3, [pc, #64]	@ (8006edc <_sbrk+0x64>)
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d207      	bcs.n	8006eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006ea8:	f010 f994 	bl	80171d4 <__errno>
 8006eac:	4603      	mov	r3, r0
 8006eae:	220c      	movs	r2, #12
 8006eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006eb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006eb6:	e009      	b.n	8006ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006eb8:	4b08      	ldr	r3, [pc, #32]	@ (8006edc <_sbrk+0x64>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006ebe:	4b07      	ldr	r3, [pc, #28]	@ (8006edc <_sbrk+0x64>)
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	4a05      	ldr	r2, [pc, #20]	@ (8006edc <_sbrk+0x64>)
 8006ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006eca:	68fb      	ldr	r3, [r7, #12]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3718      	adds	r7, #24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	20008000 	.word	0x20008000
 8006ed8:	00000400 	.word	0x00000400
 8006edc:	2000056c 	.word	0x2000056c
 8006ee0:	20003a60 	.word	0x20003a60

08006ee4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006ee8:	4b06      	ldr	r3, [pc, #24]	@ (8006f04 <SystemInit+0x20>)
 8006eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eee:	4a05      	ldr	r2, [pc, #20]	@ (8006f04 <SystemInit+0x20>)
 8006ef0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ef4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006ef8:	bf00      	nop
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	e000ed00 	.word	0xe000ed00

08006f08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006f08:	480d      	ldr	r0, [pc, #52]	@ (8006f40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006f0a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8006f0c:	f7ff ffea 	bl	8006ee4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006f10:	480c      	ldr	r0, [pc, #48]	@ (8006f44 <LoopForever+0x6>)
  ldr r1, =_edata
 8006f12:	490d      	ldr	r1, [pc, #52]	@ (8006f48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006f14:	4a0d      	ldr	r2, [pc, #52]	@ (8006f4c <LoopForever+0xe>)
  movs r3, #0
 8006f16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006f18:	e002      	b.n	8006f20 <LoopCopyDataInit>

08006f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f1e:	3304      	adds	r3, #4

08006f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f24:	d3f9      	bcc.n	8006f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f26:	4a0a      	ldr	r2, [pc, #40]	@ (8006f50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006f28:	4c0a      	ldr	r4, [pc, #40]	@ (8006f54 <LoopForever+0x16>)
  movs r3, #0
 8006f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f2c:	e001      	b.n	8006f32 <LoopFillZerobss>

08006f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f30:	3204      	adds	r2, #4

08006f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f34:	d3fb      	bcc.n	8006f2e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8006f36:	f010 f953 	bl	80171e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006f3a:	f7fe ffc1 	bl	8005ec0 <main>

08006f3e <LoopForever>:

LoopForever:
    b LoopForever
 8006f3e:	e7fe      	b.n	8006f3e <LoopForever>
  ldr   r0, =_estack
 8006f40:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8006f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006f48:	200002ac 	.word	0x200002ac
  ldr r2, =_sidata
 8006f4c:	0801749c 	.word	0x0801749c
  ldr r2, =_sbss
 8006f50:	200002ac 	.word	0x200002ac
  ldr r4, =_ebss
 8006f54:	20003a60 	.word	0x20003a60

08006f58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006f58:	e7fe      	b.n	8006f58 <ADC1_2_IRQHandler>

08006f5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b082      	sub	sp, #8
 8006f5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f64:	2003      	movs	r0, #3
 8006f66:	f001 f912 	bl	800818e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006f6a:	200f      	movs	r0, #15
 8006f6c:	f7ff fed4 	bl	8006d18 <HAL_InitTick>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	71fb      	strb	r3, [r7, #7]
 8006f7a:	e001      	b.n	8006f80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006f7c:	f7ff fc1e 	bl	80067bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006f80:	79fb      	ldrb	r3, [r7, #7]

}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f90:	4b05      	ldr	r3, [pc, #20]	@ (8006fa8 <HAL_IncTick+0x1c>)
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	4b05      	ldr	r3, [pc, #20]	@ (8006fac <HAL_IncTick+0x20>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4413      	add	r3, r2
 8006f9a:	4a03      	ldr	r2, [pc, #12]	@ (8006fa8 <HAL_IncTick+0x1c>)
 8006f9c:	6013      	str	r3, [r2, #0]
}
 8006f9e:	bf00      	nop
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	20000570 	.word	0x20000570
 8006fac:	2000000c 	.word	0x2000000c

08006fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8006fb4:	4b03      	ldr	r3, [pc, #12]	@ (8006fc4 <HAL_GetTick+0x14>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	20000570 	.word	0x20000570

08006fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006fd0:	f7ff ffee 	bl	8006fb0 <HAL_GetTick>
 8006fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fe0:	d004      	beq.n	8006fec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006fe2:	4b09      	ldr	r3, [pc, #36]	@ (8007008 <HAL_Delay+0x40>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4413      	add	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006fec:	bf00      	nop
 8006fee:	f7ff ffdf 	bl	8006fb0 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d8f7      	bhi.n	8006fee <HAL_Delay+0x26>
  {
  }
}
 8006ffe:	bf00      	nop
 8007000:	bf00      	nop
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	2000000c 	.word	0x2000000c

0800700c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	431a      	orrs	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	609a      	str	r2, [r3, #8]
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	431a      	orrs	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	609a      	str	r2, [r3, #8]
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3360      	adds	r3, #96	@ 0x60
 8007086:	461a      	mov	r2, r3
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	4b08      	ldr	r3, [pc, #32]	@ (80070b8 <LL_ADC_SetOffset+0x44>)
 8007096:	4013      	ands	r3, r2
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	4313      	orrs	r3, r2
 80070a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80070ac:	bf00      	nop
 80070ae:	371c      	adds	r7, #28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	03fff000 	.word	0x03fff000

080070bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	3360      	adds	r3, #96	@ 0x60
 80070ca:	461a      	mov	r2, r3
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4413      	add	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3360      	adds	r3, #96	@ 0x60
 80070f8:	461a      	mov	r2, r3
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	431a      	orrs	r2, r3
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007112:	bf00      	nop
 8007114:	371c      	adds	r7, #28
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800711e:	b480      	push	{r7}
 8007120:	b087      	sub	sp, #28
 8007122:	af00      	add	r7, sp, #0
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	3360      	adds	r3, #96	@ 0x60
 800712e:	461a      	mov	r2, r3
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	431a      	orrs	r2, r3
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3360      	adds	r3, #96	@ 0x60
 8007164:	461a      	mov	r2, r3
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	431a      	orrs	r2, r3
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800717e:	bf00      	nop
 8007180:	371c      	adds	r7, #28
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	431a      	orrs	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	615a      	str	r2, [r3, #20]
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b087      	sub	sp, #28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3330      	adds	r3, #48	@ 0x30
 80071c0:	461a      	mov	r2, r3
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	0a1b      	lsrs	r3, r3, #8
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	f003 030c 	and.w	r3, r3, #12
 80071cc:	4413      	add	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f003 031f 	and.w	r3, r3, #31
 80071da:	211f      	movs	r1, #31
 80071dc:	fa01 f303 	lsl.w	r3, r1, r3
 80071e0:	43db      	mvns	r3, r3
 80071e2:	401a      	ands	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	0e9b      	lsrs	r3, r3, #26
 80071e8:	f003 011f 	and.w	r1, r3, #31
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f003 031f 	and.w	r3, r3, #31
 80071f2:	fa01 f303 	lsl.w	r3, r1, r3
 80071f6:	431a      	orrs	r2, r3
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80071fc:	bf00      	nop
 80071fe:	371c      	adds	r7, #28
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3314      	adds	r3, #20
 8007218:	461a      	mov	r2, r3
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	0e5b      	lsrs	r3, r3, #25
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	4413      	add	r3, r2
 8007226:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	0d1b      	lsrs	r3, r3, #20
 8007230:	f003 031f 	and.w	r3, r3, #31
 8007234:	2107      	movs	r1, #7
 8007236:	fa01 f303 	lsl.w	r3, r1, r3
 800723a:	43db      	mvns	r3, r3
 800723c:	401a      	ands	r2, r3
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	0d1b      	lsrs	r3, r3, #20
 8007242:	f003 031f 	and.w	r3, r3, #31
 8007246:	6879      	ldr	r1, [r7, #4]
 8007248:	fa01 f303 	lsl.w	r3, r1, r3
 800724c:	431a      	orrs	r2, r3
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007252:	bf00      	nop
 8007254:	371c      	adds	r7, #28
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
	...

08007260 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007278:	43db      	mvns	r3, r3
 800727a:	401a      	ands	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f003 0318 	and.w	r3, r3, #24
 8007282:	4908      	ldr	r1, [pc, #32]	@ (80072a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007284:	40d9      	lsrs	r1, r3
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	400b      	ands	r3, r1
 800728a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800728e:	431a      	orrs	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8007296:	bf00      	nop
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	0007ffff 	.word	0x0007ffff

080072a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80072b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6093      	str	r3, [r2, #8]
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072e0:	d101      	bne.n	80072e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e000      	b.n	80072e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8007304:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007308:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800732c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007330:	d101      	bne.n	8007336 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b01      	cmp	r3, #1
 8007356:	d101      	bne.n	800735c <LL_ADC_IsEnabled+0x18>
 8007358:	2301      	movs	r3, #1
 800735a:	e000      	b.n	800735e <LL_ADC_IsEnabled+0x1a>
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	370c      	adds	r7, #12
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800736a:	b480      	push	{r7}
 800736c:	b083      	sub	sp, #12
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	2b04      	cmp	r3, #4
 800737c:	d101      	bne.n	8007382 <LL_ADC_REG_IsConversionOngoing+0x18>
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d101      	bne.n	80073a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e000      	b.n	80073aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
	...

080073b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80073b8:	b590      	push	{r4, r7, lr}
 80073ba:	b089      	sub	sp, #36	@ 0x24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e167      	b.n	80076a2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d109      	bne.n	80073f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff fa15 	bl	8006810 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff ff67 	bl	80072cc <LL_ADC_IsDeepPowerDownEnabled>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d004      	beq.n	800740e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4618      	mov	r0, r3
 800740a:	f7ff ff4d 	bl	80072a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4618      	mov	r0, r3
 8007414:	f7ff ff82 	bl	800731c <LL_ADC_IsInternalRegulatorEnabled>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d115      	bne.n	800744a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff ff66 	bl	80072f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007428:	4ba0      	ldr	r3, [pc, #640]	@ (80076ac <HAL_ADC_Init+0x2f4>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	099b      	lsrs	r3, r3, #6
 800742e:	4aa0      	ldr	r2, [pc, #640]	@ (80076b0 <HAL_ADC_Init+0x2f8>)
 8007430:	fba2 2303 	umull	r2, r3, r2, r3
 8007434:	099b      	lsrs	r3, r3, #6
 8007436:	3301      	adds	r3, #1
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800743c:	e002      	b.n	8007444 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3b01      	subs	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1f9      	bne.n	800743e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff ff64 	bl	800731c <LL_ADC_IsInternalRegulatorEnabled>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10d      	bne.n	8007476 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800745e:	f043 0210 	orr.w	r2, r3, #16
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800746a:	f043 0201 	orr.w	r2, r3, #1
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff ff75 	bl	800736a <LL_ADC_REG_IsConversionOngoing>
 8007480:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007486:	f003 0310 	and.w	r3, r3, #16
 800748a:	2b00      	cmp	r3, #0
 800748c:	f040 8100 	bne.w	8007690 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2b00      	cmp	r3, #0
 8007494:	f040 80fc 	bne.w	8007690 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800749c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80074a0:	f043 0202 	orr.w	r2, r3, #2
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff ff49 	bl	8007344 <LL_ADC_IsEnabled>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d111      	bne.n	80074dc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80074b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80074bc:	f7ff ff42 	bl	8007344 <LL_ADC_IsEnabled>
 80074c0:	4604      	mov	r4, r0
 80074c2:	487c      	ldr	r0, [pc, #496]	@ (80076b4 <HAL_ADC_Init+0x2fc>)
 80074c4:	f7ff ff3e 	bl	8007344 <LL_ADC_IsEnabled>
 80074c8:	4603      	mov	r3, r0
 80074ca:	4323      	orrs	r3, r4
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d105      	bne.n	80074dc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	4619      	mov	r1, r3
 80074d6:	4878      	ldr	r0, [pc, #480]	@ (80076b8 <HAL_ADC_Init+0x300>)
 80074d8:	f7ff fd98 	bl	800700c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	7f5b      	ldrb	r3, [r3, #29]
 80074e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80074e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80074ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80074f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80074fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80074fc:	4313      	orrs	r3, r2
 80074fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007506:	2b01      	cmp	r3, #1
 8007508:	d106      	bne.n	8007518 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750e:	3b01      	subs	r3, #1
 8007510:	045b      	lsls	r3, r3, #17
 8007512:	69ba      	ldr	r2, [r7, #24]
 8007514:	4313      	orrs	r3, r2
 8007516:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751c:	2b00      	cmp	r3, #0
 800751e:	d009      	beq.n	8007534 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007524:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	4313      	orrs	r3, r2
 8007532:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68da      	ldr	r2, [r3, #12]
 800753a:	4b60      	ldr	r3, [pc, #384]	@ (80076bc <HAL_ADC_Init+0x304>)
 800753c:	4013      	ands	r3, r2
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	6812      	ldr	r2, [r2, #0]
 8007542:	69b9      	ldr	r1, [r7, #24]
 8007544:	430b      	orrs	r3, r1
 8007546:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f7ff ff14 	bl	8007390 <LL_ADC_INJ_IsConversionOngoing>
 8007568:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d16d      	bne.n	800764c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d16a      	bne.n	800764c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800757a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007582:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007584:	4313      	orrs	r3, r2
 8007586:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007592:	f023 0302 	bic.w	r3, r3, #2
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	6812      	ldr	r2, [r2, #0]
 800759a:	69b9      	ldr	r1, [r7, #24]
 800759c:	430b      	orrs	r3, r1
 800759e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d017      	beq.n	80075d8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	691a      	ldr	r2, [r3, #16]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80075b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80075c0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80075c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	6911      	ldr	r1, [r2, #16]
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	6812      	ldr	r2, [r2, #0]
 80075d0:	430b      	orrs	r3, r1
 80075d2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80075d6:	e013      	b.n	8007600 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691a      	ldr	r2, [r3, #16]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80075e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	6812      	ldr	r2, [r2, #0]
 80075f4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80075f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80075fc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007606:	2b01      	cmp	r3, #1
 8007608:	d118      	bne.n	800763c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007614:	f023 0304 	bic.w	r3, r3, #4
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007620:	4311      	orrs	r1, r2
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007626:	4311      	orrs	r1, r2
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800762c:	430a      	orrs	r2, r1
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f042 0201 	orr.w	r2, r2, #1
 8007638:	611a      	str	r2, [r3, #16]
 800763a:	e007      	b.n	800764c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0201 	bic.w	r2, r2, #1
 800764a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d10c      	bne.n	800766e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800765a:	f023 010f 	bic.w	r1, r3, #15
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	1e5a      	subs	r2, r3, #1
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	631a      	str	r2, [r3, #48]	@ 0x30
 800766c:	e007      	b.n	800767e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 020f 	bic.w	r2, r2, #15
 800767c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007682:	f023 0303 	bic.w	r3, r3, #3
 8007686:	f043 0201 	orr.w	r2, r3, #1
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800768e:	e007      	b.n	80076a0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007694:	f043 0210 	orr.w	r2, r3, #16
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80076a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3724      	adds	r7, #36	@ 0x24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd90      	pop	{r4, r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20000004 	.word	0x20000004
 80076b0:	053e2d63 	.word	0x053e2d63
 80076b4:	50000100 	.word	0x50000100
 80076b8:	50000300 	.word	0x50000300
 80076bc:	fff04007 	.word	0xfff04007

080076c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b0b6      	sub	sp, #216	@ 0xd8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d101      	bne.n	80076e2 <HAL_ADC_ConfigChannel+0x22>
 80076de:	2302      	movs	r3, #2
 80076e0:	e3c8      	b.n	8007e74 <HAL_ADC_ConfigChannel+0x7b4>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7ff fe3b 	bl	800736a <LL_ADC_REG_IsConversionOngoing>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f040 83ad 	bne.w	8007e56 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6818      	ldr	r0, [r3, #0]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	6859      	ldr	r1, [r3, #4]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	f7ff fd51 	bl	80071b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff fe29 	bl	800736a <LL_ADC_REG_IsConversionOngoing>
 8007718:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff fe35 	bl	8007390 <LL_ADC_INJ_IsConversionOngoing>
 8007726:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800772a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800772e:	2b00      	cmp	r3, #0
 8007730:	f040 81d9 	bne.w	8007ae6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007734:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007738:	2b00      	cmp	r3, #0
 800773a:	f040 81d4 	bne.w	8007ae6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007746:	d10f      	bne.n	8007768 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6818      	ldr	r0, [r3, #0]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2200      	movs	r2, #0
 8007752:	4619      	mov	r1, r3
 8007754:	f7ff fd58 	bl	8007208 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8007760:	4618      	mov	r0, r3
 8007762:	f7ff fd12 	bl	800718a <LL_ADC_SetSamplingTimeCommonConfig>
 8007766:	e00e      	b.n	8007786 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6818      	ldr	r0, [r3, #0]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	6819      	ldr	r1, [r3, #0]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	461a      	mov	r2, r3
 8007776:	f7ff fd47 	bl	8007208 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2100      	movs	r1, #0
 8007780:	4618      	mov	r0, r3
 8007782:	f7ff fd02 	bl	800718a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	695a      	ldr	r2, [r3, #20]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	08db      	lsrs	r3, r3, #3
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	fa02 f303 	lsl.w	r3, r2, r3
 800779c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	d022      	beq.n	80077ee <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6818      	ldr	r0, [r3, #0]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	6919      	ldr	r1, [r3, #16]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077b8:	f7ff fc5c 	bl	8007074 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6818      	ldr	r0, [r3, #0]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	6919      	ldr	r1, [r3, #16]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	461a      	mov	r2, r3
 80077ca:	f7ff fca8 	bl	800711e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6818      	ldr	r0, [r3, #0]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d102      	bne.n	80077e4 <HAL_ADC_ConfigChannel+0x124>
 80077de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80077e2:	e000      	b.n	80077e6 <HAL_ADC_ConfigChannel+0x126>
 80077e4:	2300      	movs	r3, #0
 80077e6:	461a      	mov	r2, r3
 80077e8:	f7ff fcb4 	bl	8007154 <LL_ADC_SetOffsetSaturation>
 80077ec:	e17b      	b.n	8007ae6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2100      	movs	r1, #0
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7ff fc61 	bl	80070bc <LL_ADC_GetOffsetChannel>
 80077fa:	4603      	mov	r3, r0
 80077fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10a      	bne.n	800781a <HAL_ADC_ConfigChannel+0x15a>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2100      	movs	r1, #0
 800780a:	4618      	mov	r0, r3
 800780c:	f7ff fc56 	bl	80070bc <LL_ADC_GetOffsetChannel>
 8007810:	4603      	mov	r3, r0
 8007812:	0e9b      	lsrs	r3, r3, #26
 8007814:	f003 021f 	and.w	r2, r3, #31
 8007818:	e01e      	b.n	8007858 <HAL_ADC_ConfigChannel+0x198>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2100      	movs	r1, #0
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff fc4b 	bl	80070bc <LL_ADC_GetOffsetChannel>
 8007826:	4603      	mov	r3, r0
 8007828:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800782c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007830:	fa93 f3a3 	rbit	r3, r3
 8007834:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007838:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800783c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007840:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8007848:	2320      	movs	r3, #32
 800784a:	e004      	b.n	8007856 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800784c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007850:	fab3 f383 	clz	r3, r3
 8007854:	b2db      	uxtb	r3, r3
 8007856:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007860:	2b00      	cmp	r3, #0
 8007862:	d105      	bne.n	8007870 <HAL_ADC_ConfigChannel+0x1b0>
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	0e9b      	lsrs	r3, r3, #26
 800786a:	f003 031f 	and.w	r3, r3, #31
 800786e:	e018      	b.n	80078a2 <HAL_ADC_ConfigChannel+0x1e2>
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007878:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800787c:	fa93 f3a3 	rbit	r3, r3
 8007880:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8007884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007888:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800788c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8007894:	2320      	movs	r3, #32
 8007896:	e004      	b.n	80078a2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8007898:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800789c:	fab3 f383 	clz	r3, r3
 80078a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d106      	bne.n	80078b4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2200      	movs	r2, #0
 80078ac:	2100      	movs	r1, #0
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7ff fc1a 	bl	80070e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2101      	movs	r1, #1
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7ff fbfe 	bl	80070bc <LL_ADC_GetOffsetChannel>
 80078c0:	4603      	mov	r3, r0
 80078c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10a      	bne.n	80078e0 <HAL_ADC_ConfigChannel+0x220>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2101      	movs	r1, #1
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7ff fbf3 	bl	80070bc <LL_ADC_GetOffsetChannel>
 80078d6:	4603      	mov	r3, r0
 80078d8:	0e9b      	lsrs	r3, r3, #26
 80078da:	f003 021f 	and.w	r2, r3, #31
 80078de:	e01e      	b.n	800791e <HAL_ADC_ConfigChannel+0x25e>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2101      	movs	r1, #1
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff fbe8 	bl	80070bc <LL_ADC_GetOffsetChannel>
 80078ec:	4603      	mov	r3, r0
 80078ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80078f6:	fa93 f3a3 	rbit	r3, r3
 80078fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80078fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007902:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007906:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800790e:	2320      	movs	r3, #32
 8007910:	e004      	b.n	800791c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8007912:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007916:	fab3 f383 	clz	r3, r3
 800791a:	b2db      	uxtb	r3, r3
 800791c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007926:	2b00      	cmp	r3, #0
 8007928:	d105      	bne.n	8007936 <HAL_ADC_ConfigChannel+0x276>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	0e9b      	lsrs	r3, r3, #26
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	e018      	b.n	8007968 <HAL_ADC_ConfigChannel+0x2a8>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800793e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007942:	fa93 f3a3 	rbit	r3, r3
 8007946:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800794a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800794e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007952:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800795a:	2320      	movs	r3, #32
 800795c:	e004      	b.n	8007968 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800795e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007962:	fab3 f383 	clz	r3, r3
 8007966:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007968:	429a      	cmp	r2, r3
 800796a:	d106      	bne.n	800797a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2200      	movs	r2, #0
 8007972:	2101      	movs	r1, #1
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff fbb7 	bl	80070e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2102      	movs	r1, #2
 8007980:	4618      	mov	r0, r3
 8007982:	f7ff fb9b 	bl	80070bc <LL_ADC_GetOffsetChannel>
 8007986:	4603      	mov	r3, r0
 8007988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10a      	bne.n	80079a6 <HAL_ADC_ConfigChannel+0x2e6>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2102      	movs	r1, #2
 8007996:	4618      	mov	r0, r3
 8007998:	f7ff fb90 	bl	80070bc <LL_ADC_GetOffsetChannel>
 800799c:	4603      	mov	r3, r0
 800799e:	0e9b      	lsrs	r3, r3, #26
 80079a0:	f003 021f 	and.w	r2, r3, #31
 80079a4:	e01e      	b.n	80079e4 <HAL_ADC_ConfigChannel+0x324>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2102      	movs	r1, #2
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7ff fb85 	bl	80070bc <LL_ADC_GetOffsetChannel>
 80079b2:	4603      	mov	r3, r0
 80079b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079bc:	fa93 f3a3 	rbit	r3, r3
 80079c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80079c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80079c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80079cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80079d4:	2320      	movs	r3, #32
 80079d6:	e004      	b.n	80079e2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80079d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80079dc:	fab3 f383 	clz	r3, r3
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d105      	bne.n	80079fc <HAL_ADC_ConfigChannel+0x33c>
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	0e9b      	lsrs	r3, r3, #26
 80079f6:	f003 031f 	and.w	r3, r3, #31
 80079fa:	e016      	b.n	8007a2a <HAL_ADC_ConfigChannel+0x36a>
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a08:	fa93 f3a3 	rbit	r3, r3
 8007a0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007a0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007a10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8007a1c:	2320      	movs	r3, #32
 8007a1e:	e004      	b.n	8007a2a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8007a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a24:	fab3 f383 	clz	r3, r3
 8007a28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d106      	bne.n	8007a3c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2200      	movs	r2, #0
 8007a34:	2102      	movs	r1, #2
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff fb56 	bl	80070e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2103      	movs	r1, #3
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff fb3a 	bl	80070bc <LL_ADC_GetOffsetChannel>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <HAL_ADC_ConfigChannel+0x3a8>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2103      	movs	r1, #3
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7ff fb2f 	bl	80070bc <LL_ADC_GetOffsetChannel>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	0e9b      	lsrs	r3, r3, #26
 8007a62:	f003 021f 	and.w	r2, r3, #31
 8007a66:	e017      	b.n	8007a98 <HAL_ADC_ConfigChannel+0x3d8>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2103      	movs	r1, #3
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff fb24 	bl	80070bc <LL_ADC_GetOffsetChannel>
 8007a74:	4603      	mov	r3, r0
 8007a76:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a7a:	fa93 f3a3 	rbit	r3, r3
 8007a7e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8007a80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a82:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8007a84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8007a8a:	2320      	movs	r3, #32
 8007a8c:	e003      	b.n	8007a96 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8007a8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a90:	fab3 f383 	clz	r3, r3
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d105      	bne.n	8007ab0 <HAL_ADC_ConfigChannel+0x3f0>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	0e9b      	lsrs	r3, r3, #26
 8007aaa:	f003 031f 	and.w	r3, r3, #31
 8007aae:	e011      	b.n	8007ad4 <HAL_ADC_ConfigChannel+0x414>
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ab6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ab8:	fa93 f3a3 	rbit	r3, r3
 8007abc:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8007abe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ac0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8007ac8:	2320      	movs	r3, #32
 8007aca:	e003      	b.n	8007ad4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8007acc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ace:	fab3 f383 	clz	r3, r3
 8007ad2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d106      	bne.n	8007ae6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2200      	movs	r2, #0
 8007ade:	2103      	movs	r1, #3
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7ff fb01 	bl	80070e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff fc2a 	bl	8007344 <LL_ADC_IsEnabled>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f040 8140 	bne.w	8007d78 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	6819      	ldr	r1, [r3, #0]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	461a      	mov	r2, r3
 8007b06:	f7ff fbab 	bl	8007260 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	4a8f      	ldr	r2, [pc, #572]	@ (8007d4c <HAL_ADC_ConfigChannel+0x68c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	f040 8131 	bne.w	8007d78 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10b      	bne.n	8007b3e <HAL_ADC_ConfigChannel+0x47e>
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	0e9b      	lsrs	r3, r3, #26
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	f003 031f 	and.w	r3, r3, #31
 8007b32:	2b09      	cmp	r3, #9
 8007b34:	bf94      	ite	ls
 8007b36:	2301      	movls	r3, #1
 8007b38:	2300      	movhi	r3, #0
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	e019      	b.n	8007b72 <HAL_ADC_ConfigChannel+0x4b2>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b46:	fa93 f3a3 	rbit	r3, r3
 8007b4a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007b4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b4e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8007b50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8007b56:	2320      	movs	r3, #32
 8007b58:	e003      	b.n	8007b62 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8007b5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b5c:	fab3 f383 	clz	r3, r3
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	3301      	adds	r3, #1
 8007b64:	f003 031f 	and.w	r3, r3, #31
 8007b68:	2b09      	cmp	r3, #9
 8007b6a:	bf94      	ite	ls
 8007b6c:	2301      	movls	r3, #1
 8007b6e:	2300      	movhi	r3, #0
 8007b70:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d079      	beq.n	8007c6a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d107      	bne.n	8007b92 <HAL_ADC_ConfigChannel+0x4d2>
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	0e9b      	lsrs	r3, r3, #26
 8007b88:	3301      	adds	r3, #1
 8007b8a:	069b      	lsls	r3, r3, #26
 8007b8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007b90:	e015      	b.n	8007bbe <HAL_ADC_ConfigChannel+0x4fe>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b9a:	fa93 f3a3 	rbit	r3, r3
 8007b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ba2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8007ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8007baa:	2320      	movs	r3, #32
 8007bac:	e003      	b.n	8007bb6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8007bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bb0:	fab3 f383 	clz	r3, r3
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	069b      	lsls	r3, r3, #26
 8007bba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d109      	bne.n	8007bde <HAL_ADC_ConfigChannel+0x51e>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	0e9b      	lsrs	r3, r3, #26
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	f003 031f 	and.w	r3, r3, #31
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bdc:	e017      	b.n	8007c0e <HAL_ADC_ConfigChannel+0x54e>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007be6:	fa93 f3a3 	rbit	r3, r3
 8007bea:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8007bf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8007bf6:	2320      	movs	r3, #32
 8007bf8:	e003      	b.n	8007c02 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8007bfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bfc:	fab3 f383 	clz	r3, r3
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	3301      	adds	r3, #1
 8007c04:	f003 031f 	and.w	r3, r3, #31
 8007c08:	2101      	movs	r1, #1
 8007c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c0e:	ea42 0103 	orr.w	r1, r2, r3
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <HAL_ADC_ConfigChannel+0x574>
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	0e9b      	lsrs	r3, r3, #26
 8007c24:	3301      	adds	r3, #1
 8007c26:	f003 021f 	and.w	r2, r3, #31
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	4413      	add	r3, r2
 8007c30:	051b      	lsls	r3, r3, #20
 8007c32:	e018      	b.n	8007c66 <HAL_ADC_ConfigChannel+0x5a6>
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3c:	fa93 f3a3 	rbit	r3, r3
 8007c40:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8007c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d101      	bne.n	8007c50 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8007c4c:	2320      	movs	r3, #32
 8007c4e:	e003      	b.n	8007c58 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8007c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c52:	fab3 f383 	clz	r3, r3
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	3301      	adds	r3, #1
 8007c5a:	f003 021f 	and.w	r2, r3, #31
 8007c5e:	4613      	mov	r3, r2
 8007c60:	005b      	lsls	r3, r3, #1
 8007c62:	4413      	add	r3, r2
 8007c64:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007c66:	430b      	orrs	r3, r1
 8007c68:	e081      	b.n	8007d6e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d107      	bne.n	8007c86 <HAL_ADC_ConfigChannel+0x5c6>
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	0e9b      	lsrs	r3, r3, #26
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	069b      	lsls	r3, r3, #26
 8007c80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007c84:	e015      	b.n	8007cb2 <HAL_ADC_ConfigChannel+0x5f2>
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8e:	fa93 f3a3 	rbit	r3, r3
 8007c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8007c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c96:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8007c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8007c9e:	2320      	movs	r3, #32
 8007ca0:	e003      	b.n	8007caa <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca4:	fab3 f383 	clz	r3, r3
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	3301      	adds	r3, #1
 8007cac:	069b      	lsls	r3, r3, #26
 8007cae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d109      	bne.n	8007cd2 <HAL_ADC_ConfigChannel+0x612>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	0e9b      	lsrs	r3, r3, #26
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	f003 031f 	and.w	r3, r3, #31
 8007cca:	2101      	movs	r1, #1
 8007ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd0:	e017      	b.n	8007d02 <HAL_ADC_ConfigChannel+0x642>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cd8:	6a3b      	ldr	r3, [r7, #32]
 8007cda:	fa93 f3a3 	rbit	r3, r3
 8007cde:	61fb      	str	r3, [r7, #28]
  return result;
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8007cea:	2320      	movs	r3, #32
 8007cec:	e003      	b.n	8007cf6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8007cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf0:	fab3 f383 	clz	r3, r3
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	f003 031f 	and.w	r3, r3, #31
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8007d02:	ea42 0103 	orr.w	r1, r2, r3
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10d      	bne.n	8007d2e <HAL_ADC_ConfigChannel+0x66e>
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	0e9b      	lsrs	r3, r3, #26
 8007d18:	3301      	adds	r3, #1
 8007d1a:	f003 021f 	and.w	r2, r3, #31
 8007d1e:	4613      	mov	r3, r2
 8007d20:	005b      	lsls	r3, r3, #1
 8007d22:	4413      	add	r3, r2
 8007d24:	3b1e      	subs	r3, #30
 8007d26:	051b      	lsls	r3, r3, #20
 8007d28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007d2c:	e01e      	b.n	8007d6c <HAL_ADC_ConfigChannel+0x6ac>
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	fa93 f3a3 	rbit	r3, r3
 8007d3a:	613b      	str	r3, [r7, #16]
  return result;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d104      	bne.n	8007d50 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8007d46:	2320      	movs	r3, #32
 8007d48:	e006      	b.n	8007d58 <HAL_ADC_ConfigChannel+0x698>
 8007d4a:	bf00      	nop
 8007d4c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	fab3 f383 	clz	r3, r3
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	3301      	adds	r3, #1
 8007d5a:	f003 021f 	and.w	r2, r3, #31
 8007d5e:	4613      	mov	r3, r2
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	4413      	add	r3, r2
 8007d64:	3b1e      	subs	r3, #30
 8007d66:	051b      	lsls	r3, r3, #20
 8007d68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d6c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d72:	4619      	mov	r1, r3
 8007d74:	f7ff fa48 	bl	8007208 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8007e7c <HAL_ADC_ConfigChannel+0x7bc>)
 8007d7e:	4013      	ands	r3, r2
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d071      	beq.n	8007e68 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007d84:	483e      	ldr	r0, [pc, #248]	@ (8007e80 <HAL_ADC_ConfigChannel+0x7c0>)
 8007d86:	f7ff f967 	bl	8007058 <LL_ADC_GetCommonPathInternalCh>
 8007d8a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a3c      	ldr	r2, [pc, #240]	@ (8007e84 <HAL_ADC_ConfigChannel+0x7c4>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d004      	beq.n	8007da2 <HAL_ADC_ConfigChannel+0x6e2>
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a3a      	ldr	r2, [pc, #232]	@ (8007e88 <HAL_ADC_ConfigChannel+0x7c8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d127      	bne.n	8007df2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007da2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007da6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d121      	bne.n	8007df2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007db6:	d157      	bne.n	8007e68 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007db8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007dbc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	482f      	ldr	r0, [pc, #188]	@ (8007e80 <HAL_ADC_ConfigChannel+0x7c0>)
 8007dc4:	f7ff f935 	bl	8007032 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007dc8:	4b30      	ldr	r3, [pc, #192]	@ (8007e8c <HAL_ADC_ConfigChannel+0x7cc>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	099b      	lsrs	r3, r3, #6
 8007dce:	4a30      	ldr	r2, [pc, #192]	@ (8007e90 <HAL_ADC_ConfigChannel+0x7d0>)
 8007dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd4:	099b      	lsrs	r3, r3, #6
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	4613      	mov	r3, r2
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	4413      	add	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007de2:	e002      	b.n	8007dea <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1f9      	bne.n	8007de4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007df0:	e03a      	b.n	8007e68 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a27      	ldr	r2, [pc, #156]	@ (8007e94 <HAL_ADC_ConfigChannel+0x7d4>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d113      	bne.n	8007e24 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10d      	bne.n	8007e24 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a22      	ldr	r2, [pc, #136]	@ (8007e98 <HAL_ADC_ConfigChannel+0x7d8>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d02a      	beq.n	8007e68 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	4818      	ldr	r0, [pc, #96]	@ (8007e80 <HAL_ADC_ConfigChannel+0x7c0>)
 8007e1e:	f7ff f908 	bl	8007032 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007e22:	e021      	b.n	8007e68 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a1c      	ldr	r2, [pc, #112]	@ (8007e9c <HAL_ADC_ConfigChannel+0x7dc>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d11c      	bne.n	8007e68 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007e2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d116      	bne.n	8007e68 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a16      	ldr	r2, [pc, #88]	@ (8007e98 <HAL_ADC_ConfigChannel+0x7d8>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d011      	beq.n	8007e68 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007e44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	480c      	ldr	r0, [pc, #48]	@ (8007e80 <HAL_ADC_ConfigChannel+0x7c0>)
 8007e50:	f7ff f8ef 	bl	8007032 <LL_ADC_SetCommonPathInternalCh>
 8007e54:	e008      	b.n	8007e68 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e5a:	f043 0220 	orr.w	r2, r3, #32
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007e70:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	37d8      	adds	r7, #216	@ 0xd8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	80080000 	.word	0x80080000
 8007e80:	50000300 	.word	0x50000300
 8007e84:	c3210000 	.word	0xc3210000
 8007e88:	90c00010 	.word	0x90c00010
 8007e8c:	20000004 	.word	0x20000004
 8007e90:	053e2d63 	.word	0x053e2d63
 8007e94:	c7520000 	.word	0xc7520000
 8007e98:	50000100 	.word	0x50000100
 8007e9c:	cb840000 	.word	0xcb840000

08007ea0 <LL_ADC_IsEnabled>:
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d101      	bne.n	8007eb8 <LL_ADC_IsEnabled+0x18>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e000      	b.n	8007eba <LL_ADC_IsEnabled+0x1a>
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <LL_ADC_REG_IsConversionOngoing>:
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b083      	sub	sp, #12
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f003 0304 	and.w	r3, r3, #4
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	d101      	bne.n	8007ede <LL_ADC_REG_IsConversionOngoing+0x18>
 8007eda:	2301      	movs	r3, #1
 8007edc:	e000      	b.n	8007ee0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007eec:	b590      	push	{r4, r7, lr}
 8007eee:	b0a1      	sub	sp, #132	@ 0x84
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d101      	bne.n	8007f0a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007f06:	2302      	movs	r3, #2
 8007f08:	e08b      	b.n	8008022 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8007f12:	2300      	movs	r3, #0
 8007f14:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007f16:	2300      	movs	r3, #0
 8007f18:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f22:	d102      	bne.n	8007f2a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007f24:	4b41      	ldr	r3, [pc, #260]	@ (800802c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007f26:	60bb      	str	r3, [r7, #8]
 8007f28:	e001      	b.n	8007f2e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10b      	bne.n	8007f4c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f38:	f043 0220 	orr.w	r2, r3, #32
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e06a      	b.n	8008022 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7ff ffb9 	bl	8007ec6 <LL_ADC_REG_IsConversionOngoing>
 8007f54:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff ffb3 	bl	8007ec6 <LL_ADC_REG_IsConversionOngoing>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d14c      	bne.n	8008000 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007f66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d149      	bne.n	8008000 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007f6c:	4b30      	ldr	r3, [pc, #192]	@ (8008030 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8007f6e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d028      	beq.n	8007fca <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007f78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	6859      	ldr	r1, [r3, #4]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007f8a:	035b      	lsls	r3, r3, #13
 8007f8c:	430b      	orrs	r3, r1
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f92:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007f94:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007f98:	f7ff ff82 	bl	8007ea0 <LL_ADC_IsEnabled>
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	4823      	ldr	r0, [pc, #140]	@ (800802c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007fa0:	f7ff ff7e 	bl	8007ea0 <LL_ADC_IsEnabled>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	4323      	orrs	r3, r4
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d133      	bne.n	8008014 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007fac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007fb4:	f023 030f 	bic.w	r3, r3, #15
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	6811      	ldr	r1, [r2, #0]
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	6892      	ldr	r2, [r2, #8]
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007fc6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007fc8:	e024      	b.n	8008014 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007fca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007fd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007fd4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007fd6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007fda:	f7ff ff61 	bl	8007ea0 <LL_ADC_IsEnabled>
 8007fde:	4604      	mov	r4, r0
 8007fe0:	4812      	ldr	r0, [pc, #72]	@ (800802c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007fe2:	f7ff ff5d 	bl	8007ea0 <LL_ADC_IsEnabled>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	4323      	orrs	r3, r4
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d112      	bne.n	8008014 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007fee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007ff6:	f023 030f 	bic.w	r3, r3, #15
 8007ffa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007ffc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007ffe:	e009      	b.n	8008014 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008004:	f043 0220 	orr.w	r2, r3, #32
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8008012:	e000      	b.n	8008016 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008014:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800801e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8008022:	4618      	mov	r0, r3
 8008024:	3784      	adds	r7, #132	@ 0x84
 8008026:	46bd      	mov	sp, r7
 8008028:	bd90      	pop	{r4, r7, pc}
 800802a:	bf00      	nop
 800802c:	50000100 	.word	0x50000100
 8008030:	50000300 	.word	0x50000300

08008034 <__NVIC_SetPriorityGrouping>:
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f003 0307 	and.w	r3, r3, #7
 8008042:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008044:	4b0c      	ldr	r3, [pc, #48]	@ (8008078 <__NVIC_SetPriorityGrouping+0x44>)
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008050:	4013      	ands	r3, r2
 8008052:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800805c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008066:	4a04      	ldr	r2, [pc, #16]	@ (8008078 <__NVIC_SetPriorityGrouping+0x44>)
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	60d3      	str	r3, [r2, #12]
}
 800806c:	bf00      	nop
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	e000ed00 	.word	0xe000ed00

0800807c <__NVIC_GetPriorityGrouping>:
{
 800807c:	b480      	push	{r7}
 800807e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008080:	4b04      	ldr	r3, [pc, #16]	@ (8008094 <__NVIC_GetPriorityGrouping+0x18>)
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	0a1b      	lsrs	r3, r3, #8
 8008086:	f003 0307 	and.w	r3, r3, #7
}
 800808a:	4618      	mov	r0, r3
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	e000ed00 	.word	0xe000ed00

08008098 <__NVIC_EnableIRQ>:
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	db0b      	blt.n	80080c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080aa:	79fb      	ldrb	r3, [r7, #7]
 80080ac:	f003 021f 	and.w	r2, r3, #31
 80080b0:	4907      	ldr	r1, [pc, #28]	@ (80080d0 <__NVIC_EnableIRQ+0x38>)
 80080b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080b6:	095b      	lsrs	r3, r3, #5
 80080b8:	2001      	movs	r0, #1
 80080ba:	fa00 f202 	lsl.w	r2, r0, r2
 80080be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80080c2:	bf00      	nop
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	e000e100 	.word	0xe000e100

080080d4 <__NVIC_SetPriority>:
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	6039      	str	r1, [r7, #0]
 80080de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	db0a      	blt.n	80080fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	490c      	ldr	r1, [pc, #48]	@ (8008120 <__NVIC_SetPriority+0x4c>)
 80080ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080f2:	0112      	lsls	r2, r2, #4
 80080f4:	b2d2      	uxtb	r2, r2
 80080f6:	440b      	add	r3, r1
 80080f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80080fc:	e00a      	b.n	8008114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	b2da      	uxtb	r2, r3
 8008102:	4908      	ldr	r1, [pc, #32]	@ (8008124 <__NVIC_SetPriority+0x50>)
 8008104:	79fb      	ldrb	r3, [r7, #7]
 8008106:	f003 030f 	and.w	r3, r3, #15
 800810a:	3b04      	subs	r3, #4
 800810c:	0112      	lsls	r2, r2, #4
 800810e:	b2d2      	uxtb	r2, r2
 8008110:	440b      	add	r3, r1
 8008112:	761a      	strb	r2, [r3, #24]
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	e000e100 	.word	0xe000e100
 8008124:	e000ed00 	.word	0xe000ed00

08008128 <NVIC_EncodePriority>:
{
 8008128:	b480      	push	{r7}
 800812a:	b089      	sub	sp, #36	@ 0x24
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f003 0307 	and.w	r3, r3, #7
 800813a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	f1c3 0307 	rsb	r3, r3, #7
 8008142:	2b04      	cmp	r3, #4
 8008144:	bf28      	it	cs
 8008146:	2304      	movcs	r3, #4
 8008148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	3304      	adds	r3, #4
 800814e:	2b06      	cmp	r3, #6
 8008150:	d902      	bls.n	8008158 <NVIC_EncodePriority+0x30>
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	3b03      	subs	r3, #3
 8008156:	e000      	b.n	800815a <NVIC_EncodePriority+0x32>
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800815c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	fa02 f303 	lsl.w	r3, r2, r3
 8008166:	43da      	mvns	r2, r3
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	401a      	ands	r2, r3
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008170:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	fa01 f303 	lsl.w	r3, r1, r3
 800817a:	43d9      	mvns	r1, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008180:	4313      	orrs	r3, r2
}
 8008182:	4618      	mov	r0, r3
 8008184:	3724      	adds	r7, #36	@ 0x24
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b082      	sub	sp, #8
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7ff ff4c 	bl	8008034 <__NVIC_SetPriorityGrouping>
}
 800819c:	bf00      	nop
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	4603      	mov	r3, r0
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80081b2:	f7ff ff63 	bl	800807c <__NVIC_GetPriorityGrouping>
 80081b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	68b9      	ldr	r1, [r7, #8]
 80081bc:	6978      	ldr	r0, [r7, #20]
 80081be:	f7ff ffb3 	bl	8008128 <NVIC_EncodePriority>
 80081c2:	4602      	mov	r2, r0
 80081c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081c8:	4611      	mov	r1, r2
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7ff ff82 	bl	80080d4 <__NVIC_SetPriority>
}
 80081d0:	bf00      	nop
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4603      	mov	r3, r0
 80081e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80081e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7ff ff56 	bl	8008098 <__NVIC_EnableIRQ>
}
 80081ec:	bf00      	nop
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e014      	b.n	8008230 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	791b      	ldrb	r3, [r3, #4]
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b00      	cmp	r3, #0
 800820e:	d105      	bne.n	800821c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7fe fb9e 	bl	8006958 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b08a      	sub	sp, #40	@ 0x28
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d002      	beq.n	8008254 <HAL_DAC_ConfigChannel+0x1c>
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d101      	bne.n	8008258 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e1a1      	b.n	800859c <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	795b      	ldrb	r3, [r3, #5]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d101      	bne.n	800826a <HAL_DAC_ConfigChannel+0x32>
 8008266:	2302      	movs	r3, #2
 8008268:	e198      	b.n	800859c <HAL_DAC_ConfigChannel+0x364>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2201      	movs	r2, #1
 800826e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2202      	movs	r2, #2
 8008274:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	2b04      	cmp	r3, #4
 800827c:	d17a      	bne.n	8008374 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800827e:	f7fe fe97 	bl	8006fb0 <HAL_GetTick>
 8008282:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d13d      	bne.n	8008306 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800828a:	e018      	b.n	80082be <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800828c:	f7fe fe90 	bl	8006fb0 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b01      	cmp	r3, #1
 8008298:	d911      	bls.n	80082be <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00a      	beq.n	80082be <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	f043 0208 	orr.w	r2, r3, #8
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2203      	movs	r2, #3
 80082b8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e16e      	b.n	800859c <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1df      	bne.n	800828c <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80082d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80082d6:	e020      	b.n	800831a <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80082d8:	f7fe fe6a 	bl	8006fb0 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d90f      	bls.n	8008306 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	da0a      	bge.n	8008306 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	f043 0208 	orr.w	r2, r3, #8
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2203      	movs	r2, #3
 8008300:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e14a      	b.n	800859c <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800830c:	2b00      	cmp	r3, #0
 800830e:	dbe3      	blt.n	80082d8 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008318:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f003 0310 	and.w	r3, r3, #16
 8008326:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800832a:	fa01 f303 	lsl.w	r3, r1, r3
 800832e:	43db      	mvns	r3, r3
 8008330:	ea02 0103 	and.w	r1, r2, r3
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f003 0310 	and.w	r3, r3, #16
 800833e:	409a      	lsls	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f003 0310 	and.w	r3, r3, #16
 8008354:	21ff      	movs	r1, #255	@ 0xff
 8008356:	fa01 f303 	lsl.w	r3, r1, r3
 800835a:	43db      	mvns	r3, r3
 800835c:	ea02 0103 	and.w	r1, r2, r3
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f003 0310 	and.w	r3, r3, #16
 800836a:	409a      	lsls	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	430a      	orrs	r2, r1
 8008372:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d11d      	bne.n	80083b8 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008382:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f003 0310 	and.w	r3, r3, #16
 800838a:	221f      	movs	r2, #31
 800838c:	fa02 f303 	lsl.w	r3, r2, r3
 8008390:	43db      	mvns	r3, r3
 8008392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008394:	4013      	ands	r3, r2
 8008396:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f003 0310 	and.w	r3, r3, #16
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	fa02 f303 	lsl.w	r3, r2, r3
 80083aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083ac:	4313      	orrs	r3, r2
 80083ae:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083be:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f003 0310 	and.w	r3, r3, #16
 80083c6:	2207      	movs	r2, #7
 80083c8:	fa02 f303 	lsl.w	r3, r2, r3
 80083cc:	43db      	mvns	r3, r3
 80083ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083d0:	4013      	ands	r3, r2
 80083d2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d102      	bne.n	80083e2 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 80083dc:	2300      	movs	r3, #0
 80083de:	623b      	str	r3, [r7, #32]
 80083e0:	e00f      	b.n	8008402 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d102      	bne.n	80083f0 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80083ea:	2301      	movs	r3, #1
 80083ec:	623b      	str	r3, [r7, #32]
 80083ee:	e008      	b.n	8008402 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d102      	bne.n	80083fe <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80083f8:	2301      	movs	r3, #1
 80083fa:	623b      	str	r3, [r7, #32]
 80083fc:	e001      	b.n	8008402 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80083fe:	2300      	movs	r3, #0
 8008400:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	689a      	ldr	r2, [r3, #8]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	4313      	orrs	r3, r2
 800840c:	6a3a      	ldr	r2, [r7, #32]
 800840e:	4313      	orrs	r3, r2
 8008410:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f003 0310 	and.w	r3, r3, #16
 8008418:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800841c:	fa02 f303 	lsl.w	r3, r2, r3
 8008420:	43db      	mvns	r3, r3
 8008422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008424:	4013      	ands	r3, r2
 8008426:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	791b      	ldrb	r3, [r3, #4]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d102      	bne.n	8008436 <HAL_DAC_ConfigChannel+0x1fe>
 8008430:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008434:	e000      	b.n	8008438 <HAL_DAC_ConfigChannel+0x200>
 8008436:	2300      	movs	r3, #0
 8008438:	697a      	ldr	r2, [r7, #20]
 800843a:	4313      	orrs	r3, r2
 800843c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f003 0310 	and.w	r3, r3, #16
 8008444:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008448:	fa02 f303 	lsl.w	r3, r2, r3
 800844c:	43db      	mvns	r3, r3
 800844e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008450:	4013      	ands	r3, r2
 8008452:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	795b      	ldrb	r3, [r3, #5]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d102      	bne.n	8008462 <HAL_DAC_ConfigChannel+0x22a>
 800845c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008460:	e000      	b.n	8008464 <HAL_DAC_ConfigChannel+0x22c>
 8008462:	2300      	movs	r3, #0
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	4313      	orrs	r3, r2
 8008468:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800846a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8008470:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b02      	cmp	r3, #2
 8008478:	d114      	bne.n	80084a4 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800847a:	f002 fdb1 	bl	800afe0 <HAL_RCC_GetHCLKFreq>
 800847e:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	4a48      	ldr	r2, [pc, #288]	@ (80085a4 <HAL_DAC_ConfigChannel+0x36c>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d904      	bls.n	8008492 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8008488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800848e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008490:	e00f      	b.n	80084b2 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	4a44      	ldr	r2, [pc, #272]	@ (80085a8 <HAL_DAC_ConfigChannel+0x370>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d90a      	bls.n	80084b0 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800849a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80084a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80084a2:	e006      	b.n	80084b2 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084aa:	4313      	orrs	r3, r2
 80084ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80084ae:	e000      	b.n	80084b2 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80084b0:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f003 0310 	and.w	r3, r3, #16
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	fa02 f303 	lsl.w	r3, r2, r3
 80084be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084c0:	4313      	orrs	r3, r2
 80084c2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6819      	ldr	r1, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f003 0310 	and.w	r3, r3, #16
 80084d8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80084dc:	fa02 f303 	lsl.w	r3, r2, r3
 80084e0:	43da      	mvns	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	400a      	ands	r2, r1
 80084e8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f003 0310 	and.w	r3, r3, #16
 80084f8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80084fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008500:	43db      	mvns	r3, r3
 8008502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008504:	4013      	ands	r3, r2
 8008506:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f003 0310 	and.w	r3, r3, #16
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	fa02 f303 	lsl.w	r3, r2, r3
 800851a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800851c:	4313      	orrs	r3, r2
 800851e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008526:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6819      	ldr	r1, [r3, #0]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f003 0310 	and.w	r3, r3, #16
 8008534:	22c0      	movs	r2, #192	@ 0xc0
 8008536:	fa02 f303 	lsl.w	r3, r2, r3
 800853a:	43da      	mvns	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	400a      	ands	r2, r1
 8008542:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	089b      	lsrs	r3, r3, #2
 800854a:	f003 030f 	and.w	r3, r3, #15
 800854e:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	089b      	lsrs	r3, r3, #2
 8008556:	021b      	lsls	r3, r3, #8
 8008558:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	4313      	orrs	r3, r2
 8008560:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f003 0310 	and.w	r3, r3, #16
 800856e:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8008572:	fa01 f303 	lsl.w	r3, r1, r3
 8008576:	43db      	mvns	r3, r3
 8008578:	ea02 0103 	and.w	r1, r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f003 0310 	and.w	r3, r3, #16
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	409a      	lsls	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2201      	movs	r2, #1
 8008592:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800859a:	7ffb      	ldrb	r3, [r7, #31]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3728      	adds	r7, #40	@ 0x28
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	09896800 	.word	0x09896800
 80085a8:	04c4b400 	.word	0x04c4b400

080085ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b087      	sub	sp, #28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80085ba:	e15a      	b.n	8008872 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	2101      	movs	r1, #1
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	fa01 f303 	lsl.w	r3, r1, r3
 80085c8:	4013      	ands	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f000 814c 	beq.w	800886c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f003 0303 	and.w	r3, r3, #3
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d005      	beq.n	80085ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d130      	bne.n	800864e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	2203      	movs	r2, #3
 80085f8:	fa02 f303 	lsl.w	r3, r2, r3
 80085fc:	43db      	mvns	r3, r3
 80085fe:	693a      	ldr	r2, [r7, #16]
 8008600:	4013      	ands	r3, r2
 8008602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	68da      	ldr	r2, [r3, #12]
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	fa02 f303 	lsl.w	r3, r2, r3
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	4313      	orrs	r3, r2
 8008614:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008622:	2201      	movs	r2, #1
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	fa02 f303 	lsl.w	r3, r2, r3
 800862a:	43db      	mvns	r3, r3
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	4013      	ands	r3, r2
 8008630:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	091b      	lsrs	r3, r3, #4
 8008638:	f003 0201 	and.w	r2, r3, #1
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	fa02 f303 	lsl.w	r3, r2, r3
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	4313      	orrs	r3, r2
 8008646:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f003 0303 	and.w	r3, r3, #3
 8008656:	2b03      	cmp	r3, #3
 8008658:	d017      	beq.n	800868a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	2203      	movs	r2, #3
 8008666:	fa02 f303 	lsl.w	r3, r2, r3
 800866a:	43db      	mvns	r3, r3
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	4013      	ands	r3, r2
 8008670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	689a      	ldr	r2, [r3, #8]
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	fa02 f303 	lsl.w	r3, r2, r3
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	4313      	orrs	r3, r2
 8008682:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f003 0303 	and.w	r3, r3, #3
 8008692:	2b02      	cmp	r3, #2
 8008694:	d123      	bne.n	80086de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	08da      	lsrs	r2, r3, #3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	3208      	adds	r2, #8
 800869e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	f003 0307 	and.w	r3, r3, #7
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	220f      	movs	r2, #15
 80086ae:	fa02 f303 	lsl.w	r3, r2, r3
 80086b2:	43db      	mvns	r3, r3
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	4013      	ands	r3, r2
 80086b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	691a      	ldr	r2, [r3, #16]
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f003 0307 	and.w	r3, r3, #7
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	08da      	lsrs	r2, r3, #3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3208      	adds	r2, #8
 80086d8:	6939      	ldr	r1, [r7, #16]
 80086da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	005b      	lsls	r3, r3, #1
 80086e8:	2203      	movs	r2, #3
 80086ea:	fa02 f303 	lsl.w	r3, r2, r3
 80086ee:	43db      	mvns	r3, r3
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	4013      	ands	r3, r2
 80086f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f003 0203 	and.w	r2, r3, #3
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	005b      	lsls	r3, r3, #1
 8008702:	fa02 f303 	lsl.w	r3, r2, r3
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800871a:	2b00      	cmp	r3, #0
 800871c:	f000 80a6 	beq.w	800886c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008720:	4b5b      	ldr	r3, [pc, #364]	@ (8008890 <HAL_GPIO_Init+0x2e4>)
 8008722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008724:	4a5a      	ldr	r2, [pc, #360]	@ (8008890 <HAL_GPIO_Init+0x2e4>)
 8008726:	f043 0301 	orr.w	r3, r3, #1
 800872a:	6613      	str	r3, [r2, #96]	@ 0x60
 800872c:	4b58      	ldr	r3, [pc, #352]	@ (8008890 <HAL_GPIO_Init+0x2e4>)
 800872e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	60bb      	str	r3, [r7, #8]
 8008736:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008738:	4a56      	ldr	r2, [pc, #344]	@ (8008894 <HAL_GPIO_Init+0x2e8>)
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	089b      	lsrs	r3, r3, #2
 800873e:	3302      	adds	r3, #2
 8008740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008744:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	f003 0303 	and.w	r3, r3, #3
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	220f      	movs	r2, #15
 8008750:	fa02 f303 	lsl.w	r3, r2, r3
 8008754:	43db      	mvns	r3, r3
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	4013      	ands	r3, r2
 800875a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008762:	d01f      	beq.n	80087a4 <HAL_GPIO_Init+0x1f8>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a4c      	ldr	r2, [pc, #304]	@ (8008898 <HAL_GPIO_Init+0x2ec>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d019      	beq.n	80087a0 <HAL_GPIO_Init+0x1f4>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a4b      	ldr	r2, [pc, #300]	@ (800889c <HAL_GPIO_Init+0x2f0>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d013      	beq.n	800879c <HAL_GPIO_Init+0x1f0>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a4a      	ldr	r2, [pc, #296]	@ (80088a0 <HAL_GPIO_Init+0x2f4>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d00d      	beq.n	8008798 <HAL_GPIO_Init+0x1ec>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a49      	ldr	r2, [pc, #292]	@ (80088a4 <HAL_GPIO_Init+0x2f8>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d007      	beq.n	8008794 <HAL_GPIO_Init+0x1e8>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a48      	ldr	r2, [pc, #288]	@ (80088a8 <HAL_GPIO_Init+0x2fc>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d101      	bne.n	8008790 <HAL_GPIO_Init+0x1e4>
 800878c:	2305      	movs	r3, #5
 800878e:	e00a      	b.n	80087a6 <HAL_GPIO_Init+0x1fa>
 8008790:	2306      	movs	r3, #6
 8008792:	e008      	b.n	80087a6 <HAL_GPIO_Init+0x1fa>
 8008794:	2304      	movs	r3, #4
 8008796:	e006      	b.n	80087a6 <HAL_GPIO_Init+0x1fa>
 8008798:	2303      	movs	r3, #3
 800879a:	e004      	b.n	80087a6 <HAL_GPIO_Init+0x1fa>
 800879c:	2302      	movs	r3, #2
 800879e:	e002      	b.n	80087a6 <HAL_GPIO_Init+0x1fa>
 80087a0:	2301      	movs	r3, #1
 80087a2:	e000      	b.n	80087a6 <HAL_GPIO_Init+0x1fa>
 80087a4:	2300      	movs	r3, #0
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	f002 0203 	and.w	r2, r2, #3
 80087ac:	0092      	lsls	r2, r2, #2
 80087ae:	4093      	lsls	r3, r2
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087b6:	4937      	ldr	r1, [pc, #220]	@ (8008894 <HAL_GPIO_Init+0x2e8>)
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	089b      	lsrs	r3, r3, #2
 80087bc:	3302      	adds	r3, #2
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80087c4:	4b39      	ldr	r3, [pc, #228]	@ (80088ac <HAL_GPIO_Init+0x300>)
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	43db      	mvns	r3, r3
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	4013      	ands	r3, r2
 80087d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d003      	beq.n	80087e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80087e8:	4a30      	ldr	r2, [pc, #192]	@ (80088ac <HAL_GPIO_Init+0x300>)
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80087ee:	4b2f      	ldr	r3, [pc, #188]	@ (80088ac <HAL_GPIO_Init+0x300>)
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	43db      	mvns	r3, r3
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	4013      	ands	r3, r2
 80087fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4313      	orrs	r3, r2
 8008810:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008812:	4a26      	ldr	r2, [pc, #152]	@ (80088ac <HAL_GPIO_Init+0x300>)
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008818:	4b24      	ldr	r3, [pc, #144]	@ (80088ac <HAL_GPIO_Init+0x300>)
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	43db      	mvns	r3, r3
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	4013      	ands	r3, r2
 8008826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d003      	beq.n	800883c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	4313      	orrs	r3, r2
 800883a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800883c:	4a1b      	ldr	r2, [pc, #108]	@ (80088ac <HAL_GPIO_Init+0x300>)
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008842:	4b1a      	ldr	r3, [pc, #104]	@ (80088ac <HAL_GPIO_Init+0x300>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	43db      	mvns	r3, r3
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	4013      	ands	r3, r2
 8008850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4313      	orrs	r3, r2
 8008864:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008866:	4a11      	ldr	r2, [pc, #68]	@ (80088ac <HAL_GPIO_Init+0x300>)
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	3301      	adds	r3, #1
 8008870:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	fa22 f303 	lsr.w	r3, r2, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	f47f ae9d 	bne.w	80085bc <HAL_GPIO_Init+0x10>
  }
}
 8008882:	bf00      	nop
 8008884:	bf00      	nop
 8008886:	371c      	adds	r7, #28
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	40021000 	.word	0x40021000
 8008894:	40010000 	.word	0x40010000
 8008898:	48000400 	.word	0x48000400
 800889c:	48000800 	.word	0x48000800
 80088a0:	48000c00 	.word	0x48000c00
 80088a4:	48001000 	.word	0x48001000
 80088a8:	48001400 	.word	0x48001400
 80088ac:	40010400 	.word	0x40010400

080088b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e08d      	b.n	80089de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d106      	bne.n	80088dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7fe f87c 	bl	80069d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2224      	movs	r2, #36	@ 0x24
 80088e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f022 0201 	bic.w	r2, r2, #1
 80088f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008900:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	689a      	ldr	r2, [r3, #8]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008910:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d107      	bne.n	800892a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	689a      	ldr	r2, [r3, #8]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008926:	609a      	str	r2, [r3, #8]
 8008928:	e006      	b.n	8008938 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	689a      	ldr	r2, [r3, #8]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008936:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	2b02      	cmp	r3, #2
 800893e:	d108      	bne.n	8008952 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800894e:	605a      	str	r2, [r3, #4]
 8008950:	e007      	b.n	8008962 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008960:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	6812      	ldr	r2, [r2, #0]
 800896c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008974:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68da      	ldr	r2, [r3, #12]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008984:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	691a      	ldr	r2, [r3, #16]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	430a      	orrs	r2, r1
 800899e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	69d9      	ldr	r1, [r3, #28]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a1a      	ldr	r2, [r3, #32]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	430a      	orrs	r2, r1
 80089ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0201 	orr.w	r2, r2, #1
 80089be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2220      	movs	r2, #32
 80089ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b083      	sub	sp, #12
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b20      	cmp	r3, #32
 80089fa:	d138      	bne.n	8008a6e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d101      	bne.n	8008a0a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008a06:	2302      	movs	r3, #2
 8008a08:	e032      	b.n	8008a70 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2224      	movs	r2, #36	@ 0x24
 8008a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f022 0201 	bic.w	r2, r2, #1
 8008a28:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008a38:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	6819      	ldr	r1, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	430a      	orrs	r2, r1
 8008a48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f042 0201 	orr.w	r2, r2, #1
 8008a58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2220      	movs	r2, #32
 8008a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	e000      	b.n	8008a70 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008a6e:	2302      	movs	r3, #2
  }
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b20      	cmp	r3, #32
 8008a90:	d139      	bne.n	8008b06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d101      	bne.n	8008aa0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	e033      	b.n	8008b08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2224      	movs	r2, #36	@ 0x24
 8008aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0201 	bic.w	r2, r2, #1
 8008abe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008ace:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	021b      	lsls	r3, r3, #8
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f042 0201 	orr.w	r2, r2, #1
 8008af0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2220      	movs	r2, #32
 8008af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	e000      	b.n	8008b08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008b06:	2302      	movs	r3, #2
  }
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d101      	bne.n	8008b26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e0c0      	b.n	8008ca8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d106      	bne.n	8008b40 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f00d ff22 	bl	8016984 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2203      	movs	r2, #3
 8008b44:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f004 f8b9 	bl	800ccc4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b52:	2300      	movs	r3, #0
 8008b54:	73fb      	strb	r3, [r7, #15]
 8008b56:	e03e      	b.n	8008bd6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008b58:	7bfa      	ldrb	r2, [r7, #15]
 8008b5a:	6879      	ldr	r1, [r7, #4]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4413      	add	r3, r2
 8008b62:	00db      	lsls	r3, r3, #3
 8008b64:	440b      	add	r3, r1
 8008b66:	3311      	adds	r3, #17
 8008b68:	2201      	movs	r2, #1
 8008b6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008b6c:	7bfa      	ldrb	r2, [r7, #15]
 8008b6e:	6879      	ldr	r1, [r7, #4]
 8008b70:	4613      	mov	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	00db      	lsls	r3, r3, #3
 8008b78:	440b      	add	r3, r1
 8008b7a:	3310      	adds	r3, #16
 8008b7c:	7bfa      	ldrb	r2, [r7, #15]
 8008b7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008b80:	7bfa      	ldrb	r2, [r7, #15]
 8008b82:	6879      	ldr	r1, [r7, #4]
 8008b84:	4613      	mov	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	00db      	lsls	r3, r3, #3
 8008b8c:	440b      	add	r3, r1
 8008b8e:	3313      	adds	r3, #19
 8008b90:	2200      	movs	r2, #0
 8008b92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008b94:	7bfa      	ldrb	r2, [r7, #15]
 8008b96:	6879      	ldr	r1, [r7, #4]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	00db      	lsls	r3, r3, #3
 8008ba0:	440b      	add	r3, r1
 8008ba2:	3320      	adds	r3, #32
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008ba8:	7bfa      	ldrb	r2, [r7, #15]
 8008baa:	6879      	ldr	r1, [r7, #4]
 8008bac:	4613      	mov	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	00db      	lsls	r3, r3, #3
 8008bb4:	440b      	add	r3, r1
 8008bb6:	3324      	adds	r3, #36	@ 0x24
 8008bb8:	2200      	movs	r2, #0
 8008bba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
 8008bbe:	6879      	ldr	r1, [r7, #4]
 8008bc0:	1c5a      	adds	r2, r3, #1
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	00db      	lsls	r3, r3, #3
 8008bca:	440b      	add	r3, r1
 8008bcc:	2200      	movs	r2, #0
 8008bce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	73fb      	strb	r3, [r7, #15]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	791b      	ldrb	r3, [r3, #4]
 8008bda:	7bfa      	ldrb	r2, [r7, #15]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d3bb      	bcc.n	8008b58 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008be0:	2300      	movs	r3, #0
 8008be2:	73fb      	strb	r3, [r7, #15]
 8008be4:	e044      	b.n	8008c70 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008be6:	7bfa      	ldrb	r2, [r7, #15]
 8008be8:	6879      	ldr	r1, [r7, #4]
 8008bea:	4613      	mov	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	00db      	lsls	r3, r3, #3
 8008bf2:	440b      	add	r3, r1
 8008bf4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008bfc:	7bfa      	ldrb	r2, [r7, #15]
 8008bfe:	6879      	ldr	r1, [r7, #4]
 8008c00:	4613      	mov	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4413      	add	r3, r2
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	440b      	add	r3, r1
 8008c0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c0e:	7bfa      	ldrb	r2, [r7, #15]
 8008c10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008c12:	7bfa      	ldrb	r2, [r7, #15]
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	4613      	mov	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	00db      	lsls	r3, r3, #3
 8008c1e:	440b      	add	r3, r1
 8008c20:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8008c24:	2200      	movs	r2, #0
 8008c26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008c28:	7bfa      	ldrb	r2, [r7, #15]
 8008c2a:	6879      	ldr	r1, [r7, #4]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	440b      	add	r3, r1
 8008c36:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008c3e:	7bfa      	ldrb	r2, [r7, #15]
 8008c40:	6879      	ldr	r1, [r7, #4]
 8008c42:	4613      	mov	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	00db      	lsls	r3, r3, #3
 8008c4a:	440b      	add	r3, r1
 8008c4c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008c50:	2200      	movs	r2, #0
 8008c52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008c54:	7bfa      	ldrb	r2, [r7, #15]
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4413      	add	r3, r2
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	440b      	add	r3, r1
 8008c62:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8008c66:	2200      	movs	r2, #0
 8008c68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	73fb      	strb	r3, [r7, #15]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	791b      	ldrb	r3, [r3, #4]
 8008c74:	7bfa      	ldrb	r2, [r7, #15]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d3b5      	bcc.n	8008be6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6818      	ldr	r0, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	3304      	adds	r3, #4
 8008c82:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008c86:	f004 f838 	bl	800ccfa <USB_DevInit>

  hpcd->USB_Address = 0U;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	7a9b      	ldrb	r3, [r3, #10]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d102      	bne.n	8008ca6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f001 fc0e 	bl	800a4c2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d101      	bne.n	8008cc6 <HAL_PCD_Start+0x16>
 8008cc2:	2302      	movs	r3, #2
 8008cc4:	e012      	b.n	8008cec <HAL_PCD_Start+0x3c>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f003 ffdf 	bl	800cc96 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f005 fdbd 	bl	800e85c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f005 fdc2 	bl	800e88a <USB_ReadInterrupts>
 8008d06:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fb06 	bl	8009324 <PCD_EP_ISR_Handler>

    return;
 8008d18:	e110      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d013      	beq.n	8008d4c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d36:	b292      	uxth	r2, r2
 8008d38:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f00d feb2 	bl	8016aa6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8008d42:	2100      	movs	r1, #0
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f8fc 	bl	8008f42 <HAL_PCD_SetAddress>

    return;
 8008d4a:	e0f7      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00c      	beq.n	8008d70 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008d68:	b292      	uxth	r2, r2
 8008d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008d6e:	e0e5      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00c      	beq.n	8008d94 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d8c:	b292      	uxth	r2, r2
 8008d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008d92:	e0d3      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d034      	beq.n	8008e08 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f022 0204 	bic.w	r2, r2, #4
 8008db0:	b292      	uxth	r2, r2
 8008db2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f022 0208 	bic.w	r2, r2, #8
 8008dc8:	b292      	uxth	r2, r2
 8008dca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d107      	bne.n	8008de8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008de0:	2100      	movs	r1, #0
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f00e f852 	bl	8016e8c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f00d fe95 	bl	8016b18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e00:	b292      	uxth	r2, r2
 8008e02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008e06:	e099      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d027      	beq.n	8008e62 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f042 0208 	orr.w	r2, r2, #8
 8008e24:	b292      	uxth	r2, r2
 8008e26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e3c:	b292      	uxth	r2, r2
 8008e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f042 0204 	orr.w	r2, r2, #4
 8008e54:	b292      	uxth	r2, r2
 8008e56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f00d fe42 	bl	8016ae4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008e60:	e06c      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d040      	beq.n	8008eee <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e7e:	b292      	uxth	r2, r2
 8008e80:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d12b      	bne.n	8008ee6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f042 0204 	orr.w	r2, r2, #4
 8008ea0:	b292      	uxth	r2, r2
 8008ea2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f042 0208 	orr.w	r2, r2, #8
 8008eb8:	b292      	uxth	r2, r2
 8008eba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	089b      	lsrs	r3, r3, #2
 8008ed2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008edc:	2101      	movs	r1, #1
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f00d ffd4 	bl	8016e8c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008ee4:	e02a      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f00d fdfc 	bl	8016ae4 <HAL_PCD_SuspendCallback>
    return;
 8008eec:	e026      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00f      	beq.n	8008f18 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008f0a:	b292      	uxth	r2, r2
 8008f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f00d fdba 	bl	8016a8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008f16:	e011      	b.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00c      	beq.n	8008f3c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008f34:	b292      	uxth	r2, r2
 8008f36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008f3a:	bf00      	nop
  }
}
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b082      	sub	sp, #8
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d101      	bne.n	8008f5c <HAL_PCD_SetAddress+0x1a>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	e012      	b.n	8008f82 <HAL_PCD_SetAddress+0x40>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	78fa      	ldrb	r2, [r7, #3]
 8008f68:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	78fa      	ldrb	r2, [r7, #3]
 8008f70:	4611      	mov	r1, r2
 8008f72:	4618      	mov	r0, r3
 8008f74:	f005 fc5e 	bl	800e834 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	4608      	mov	r0, r1
 8008f94:	4611      	mov	r1, r2
 8008f96:	461a      	mov	r2, r3
 8008f98:	4603      	mov	r3, r0
 8008f9a:	70fb      	strb	r3, [r7, #3]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	803b      	strh	r3, [r7, #0]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	da0e      	bge.n	8008fce <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	f003 0207 	and.w	r2, r3, #7
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	00db      	lsls	r3, r3, #3
 8008fbe:	3310      	adds	r3, #16
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	705a      	strb	r2, [r3, #1]
 8008fcc:	e00e      	b.n	8008fec <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fce:	78fb      	ldrb	r3, [r7, #3]
 8008fd0:	f003 0207 	and.w	r2, r3, #7
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4413      	add	r3, r2
 8008fda:	00db      	lsls	r3, r3, #3
 8008fdc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008fec:	78fb      	ldrb	r3, [r7, #3]
 8008fee:	f003 0307 	and.w	r3, r3, #7
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008ff8:	883b      	ldrh	r3, [r7, #0]
 8008ffa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	78ba      	ldrb	r2, [r7, #2]
 8009006:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009008:	78bb      	ldrb	r3, [r7, #2]
 800900a:	2b02      	cmp	r3, #2
 800900c:	d102      	bne.n	8009014 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800901a:	2b01      	cmp	r3, #1
 800901c:	d101      	bne.n	8009022 <HAL_PCD_EP_Open+0x98>
 800901e:	2302      	movs	r3, #2
 8009020:	e00e      	b.n	8009040 <HAL_PCD_EP_Open+0xb6>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68f9      	ldr	r1, [r7, #12]
 8009030:	4618      	mov	r0, r3
 8009032:	f003 fe81 	bl	800cd38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800903e:	7afb      	ldrb	r3, [r7, #11]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009058:	2b00      	cmp	r3, #0
 800905a:	da0e      	bge.n	800907a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800905c:	78fb      	ldrb	r3, [r7, #3]
 800905e:	f003 0207 	and.w	r2, r3, #7
 8009062:	4613      	mov	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4413      	add	r3, r2
 8009068:	00db      	lsls	r3, r3, #3
 800906a:	3310      	adds	r3, #16
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	4413      	add	r3, r2
 8009070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2201      	movs	r2, #1
 8009076:	705a      	strb	r2, [r3, #1]
 8009078:	e00e      	b.n	8009098 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800907a:	78fb      	ldrb	r3, [r7, #3]
 800907c:	f003 0207 	and.w	r2, r3, #7
 8009080:	4613      	mov	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4413      	add	r3, r2
 8009086:	00db      	lsls	r3, r3, #3
 8009088:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	4413      	add	r3, r2
 8009090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009098:	78fb      	ldrb	r3, [r7, #3]
 800909a:	f003 0307 	and.w	r3, r3, #7
 800909e:	b2da      	uxtb	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d101      	bne.n	80090b2 <HAL_PCD_EP_Close+0x6a>
 80090ae:	2302      	movs	r3, #2
 80090b0:	e00e      	b.n	80090d0 <HAL_PCD_EP_Close+0x88>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68f9      	ldr	r1, [r7, #12]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f004 fb21 	bl	800d708 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	607a      	str	r2, [r7, #4]
 80090e2:	603b      	str	r3, [r7, #0]
 80090e4:	460b      	mov	r3, r1
 80090e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090e8:	7afb      	ldrb	r3, [r7, #11]
 80090ea:	f003 0207 	and.w	r2, r3, #7
 80090ee:	4613      	mov	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4413      	add	r3, r2
 80090f4:	00db      	lsls	r3, r3, #3
 80090f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	4413      	add	r3, r2
 80090fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	683a      	ldr	r2, [r7, #0]
 800910a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	2200      	movs	r2, #0
 8009110:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2200      	movs	r2, #0
 8009116:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009118:	7afb      	ldrb	r3, [r7, #11]
 800911a:	f003 0307 	and.w	r3, r3, #7
 800911e:	b2da      	uxtb	r2, r3
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	6979      	ldr	r1, [r7, #20]
 800912a:	4618      	mov	r0, r3
 800912c:	f004 fcd9 	bl	800dae2 <USB_EPStartXfer>

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3718      	adds	r7, #24
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	460b      	mov	r3, r1
 8009144:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009146:	78fb      	ldrb	r3, [r7, #3]
 8009148:	f003 0207 	and.w	r2, r3, #7
 800914c:	6879      	ldr	r1, [r7, #4]
 800914e:	4613      	mov	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4413      	add	r3, r2
 8009154:	00db      	lsls	r3, r3, #3
 8009156:	440b      	add	r3, r1
 8009158:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800915c:	681b      	ldr	r3, [r3, #0]
}
 800915e:	4618      	mov	r0, r3
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b086      	sub	sp, #24
 800916e:	af00      	add	r7, sp, #0
 8009170:	60f8      	str	r0, [r7, #12]
 8009172:	607a      	str	r2, [r7, #4]
 8009174:	603b      	str	r3, [r7, #0]
 8009176:	460b      	mov	r3, r1
 8009178:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800917a:	7afb      	ldrb	r3, [r7, #11]
 800917c:	f003 0207 	and.w	r2, r3, #7
 8009180:	4613      	mov	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	3310      	adds	r3, #16
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	4413      	add	r3, r2
 800918e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2200      	movs	r2, #0
 80091ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	2201      	movs	r2, #1
 80091b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091b6:	7afb      	ldrb	r3, [r7, #11]
 80091b8:	f003 0307 	and.w	r3, r3, #7
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	6979      	ldr	r1, [r7, #20]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f004 fc8a 	bl	800dae2 <USB_EPStartXfer>

  return HAL_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3718      	adds	r7, #24
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	460b      	mov	r3, r1
 80091e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80091e4:	78fb      	ldrb	r3, [r7, #3]
 80091e6:	f003 0307 	and.w	r3, r3, #7
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	7912      	ldrb	r2, [r2, #4]
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d901      	bls.n	80091f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e03e      	b.n	8009274 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80091f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	da0e      	bge.n	800921c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091fe:	78fb      	ldrb	r3, [r7, #3]
 8009200:	f003 0207 	and.w	r2, r3, #7
 8009204:	4613      	mov	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	00db      	lsls	r3, r3, #3
 800920c:	3310      	adds	r3, #16
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	4413      	add	r3, r2
 8009212:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2201      	movs	r2, #1
 8009218:	705a      	strb	r2, [r3, #1]
 800921a:	e00c      	b.n	8009236 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800921c:	78fa      	ldrb	r2, [r7, #3]
 800921e:	4613      	mov	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	00db      	lsls	r3, r3, #3
 8009226:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	4413      	add	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2201      	movs	r2, #1
 800923a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800923c:	78fb      	ldrb	r3, [r7, #3]
 800923e:	f003 0307 	and.w	r3, r3, #7
 8009242:	b2da      	uxtb	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800924e:	2b01      	cmp	r3, #1
 8009250:	d101      	bne.n	8009256 <HAL_PCD_EP_SetStall+0x7e>
 8009252:	2302      	movs	r3, #2
 8009254:	e00e      	b.n	8009274 <HAL_PCD_EP_SetStall+0x9c>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68f9      	ldr	r1, [r7, #12]
 8009264:	4618      	mov	r0, r3
 8009266:	f005 f9eb 	bl	800e640 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	460b      	mov	r3, r1
 8009286:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009288:	78fb      	ldrb	r3, [r7, #3]
 800928a:	f003 030f 	and.w	r3, r3, #15
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	7912      	ldrb	r2, [r2, #4]
 8009292:	4293      	cmp	r3, r2
 8009294:	d901      	bls.n	800929a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e040      	b.n	800931c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800929a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	da0e      	bge.n	80092c0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092a2:	78fb      	ldrb	r3, [r7, #3]
 80092a4:	f003 0207 	and.w	r2, r3, #7
 80092a8:	4613      	mov	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	4413      	add	r3, r2
 80092ae:	00db      	lsls	r3, r3, #3
 80092b0:	3310      	adds	r3, #16
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	4413      	add	r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2201      	movs	r2, #1
 80092bc:	705a      	strb	r2, [r3, #1]
 80092be:	e00e      	b.n	80092de <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	f003 0207 	and.w	r2, r3, #7
 80092c6:	4613      	mov	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4413      	add	r3, r2
 80092cc:	00db      	lsls	r3, r3, #3
 80092ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	4413      	add	r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092e4:	78fb      	ldrb	r3, [r7, #3]
 80092e6:	f003 0307 	and.w	r3, r3, #7
 80092ea:	b2da      	uxtb	r2, r3
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d101      	bne.n	80092fe <HAL_PCD_EP_ClrStall+0x82>
 80092fa:	2302      	movs	r3, #2
 80092fc:	e00e      	b.n	800931c <HAL_PCD_EP_ClrStall+0xa0>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2201      	movs	r2, #1
 8009302:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68f9      	ldr	r1, [r7, #12]
 800930c:	4618      	mov	r0, r3
 800930e:	f005 f9e8 	bl	800e6e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b092      	sub	sp, #72	@ 0x48
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800932c:	e333      	b.n	8009996 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009336:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009338:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800933a:	b2db      	uxtb	r3, r3
 800933c:	f003 030f 	and.w	r3, r3, #15
 8009340:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8009344:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009348:	2b00      	cmp	r3, #0
 800934a:	f040 8108 	bne.w	800955e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800934e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009350:	f003 0310 	and.w	r3, r3, #16
 8009354:	2b00      	cmp	r3, #0
 8009356:	d14c      	bne.n	80093f2 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	881b      	ldrh	r3, [r3, #0]
 800935e:	b29b      	uxth	r3, r3
 8009360:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8009364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009368:	813b      	strh	r3, [r7, #8]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	893b      	ldrh	r3, [r7, #8]
 8009370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009378:	b29b      	uxth	r3, r3
 800937a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3310      	adds	r3, #16
 8009380:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800938a:	b29b      	uxth	r3, r3
 800938c:	461a      	mov	r2, r3
 800938e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	00db      	lsls	r3, r3, #3
 8009394:	4413      	add	r3, r2
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	6812      	ldr	r2, [r2, #0]
 800939a:	4413      	add	r3, r2
 800939c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80093a0:	881b      	ldrh	r3, [r3, #0]
 80093a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80093a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80093aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093ac:	695a      	ldr	r2, [r3, #20]
 80093ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093b0:	69db      	ldr	r3, [r3, #28]
 80093b2:	441a      	add	r2, r3
 80093b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093b6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80093b8:	2100      	movs	r1, #0
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f00d fb4b 	bl	8016a56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	7b1b      	ldrb	r3, [r3, #12]
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f000 82e5 	beq.w	8009996 <PCD_EP_ISR_Handler+0x672>
 80093cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f040 82e0 	bne.w	8009996 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	7b1b      	ldrb	r3, [r3, #12]
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	731a      	strb	r2, [r3, #12]
 80093f0:	e2d1      	b.n	8009996 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80093f8:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	881b      	ldrh	r3, [r3, #0]
 8009400:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009402:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009404:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009408:	2b00      	cmp	r3, #0
 800940a:	d032      	beq.n	8009472 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009414:	b29b      	uxth	r3, r3
 8009416:	461a      	mov	r2, r3
 8009418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	00db      	lsls	r3, r3, #3
 800941e:	4413      	add	r3, r2
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	6812      	ldr	r2, [r2, #0]
 8009424:	4413      	add	r3, r2
 8009426:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009432:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6818      	ldr	r0, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800943e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009440:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009444:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009446:	b29b      	uxth	r3, r3
 8009448:	f005 fa71 	bl	800e92e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	b29a      	uxth	r2, r3
 8009454:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009458:	4013      	ands	r3, r2
 800945a:	817b      	strh	r3, [r7, #10]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	897a      	ldrh	r2, [r7, #10]
 8009462:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009466:	b292      	uxth	r2, r2
 8009468:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f00d fac6 	bl	80169fc <HAL_PCD_SetupStageCallback>
 8009470:	e291      	b.n	8009996 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009472:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009476:	2b00      	cmp	r3, #0
 8009478:	f280 828d 	bge.w	8009996 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	b29a      	uxth	r2, r3
 8009484:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009488:	4013      	ands	r3, r2
 800948a:	81fb      	strh	r3, [r7, #14]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	89fa      	ldrh	r2, [r7, #14]
 8009492:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009496:	b292      	uxth	r2, r2
 8009498:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	461a      	mov	r2, r3
 80094a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	00db      	lsls	r3, r3, #3
 80094ac:	4413      	add	r3, r2
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	6812      	ldr	r2, [r2, #0]
 80094b2:	4413      	add	r3, r2
 80094b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80094b8:	881b      	ldrh	r3, [r3, #0]
 80094ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80094be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094c0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80094c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d019      	beq.n	80094fe <PCD_EP_ISR_Handler+0x1da>
 80094ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d015      	beq.n	80094fe <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094d8:	6959      	ldr	r1, [r3, #20]
 80094da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094dc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80094de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094e0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	f005 fa23 	bl	800e92e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80094e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094ea:	695a      	ldr	r2, [r3, #20]
 80094ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094ee:	69db      	ldr	r3, [r3, #28]
 80094f0:	441a      	add	r2, r3
 80094f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094f4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80094f6:	2100      	movs	r1, #0
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f00d fa91 	bl	8016a20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	881b      	ldrh	r3, [r3, #0]
 8009504:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009506:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800950c:	2b00      	cmp	r3, #0
 800950e:	f040 8242 	bne.w	8009996 <PCD_EP_ISR_Handler+0x672>
 8009512:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009514:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009518:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800951c:	f000 823b 	beq.w	8009996 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	881b      	ldrh	r3, [r3, #0]
 8009526:	b29b      	uxth	r3, r3
 8009528:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800952c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009530:	81bb      	strh	r3, [r7, #12]
 8009532:	89bb      	ldrh	r3, [r7, #12]
 8009534:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009538:	81bb      	strh	r3, [r7, #12]
 800953a:	89bb      	ldrh	r3, [r7, #12]
 800953c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009540:	81bb      	strh	r3, [r7, #12]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	89bb      	ldrh	r3, [r7, #12]
 8009548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800954c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009558:	b29b      	uxth	r3, r3
 800955a:	8013      	strh	r3, [r2, #0]
 800955c:	e21b      	b.n	8009996 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	461a      	mov	r2, r3
 8009564:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009570:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009574:	2b00      	cmp	r3, #0
 8009576:	f280 80f1 	bge.w	800975c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	461a      	mov	r2, r3
 8009580:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	881b      	ldrh	r3, [r3, #0]
 800958a:	b29a      	uxth	r2, r3
 800958c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009590:	4013      	ands	r3, r2
 8009592:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	461a      	mov	r2, r3
 800959a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80095a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80095a8:	b292      	uxth	r2, r2
 80095aa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80095ac:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80095b0:	4613      	mov	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	00db      	lsls	r3, r3, #3
 80095b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	4413      	add	r3, r2
 80095c0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80095c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095c4:	7b1b      	ldrb	r3, [r3, #12]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d123      	bne.n	8009612 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	461a      	mov	r2, r3
 80095d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	4413      	add	r3, r2
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	6812      	ldr	r2, [r2, #0]
 80095e2:	4413      	add	r3, r2
 80095e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80095e8:	881b      	ldrh	r3, [r3, #0]
 80095ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095ee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80095f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f000 808b 	beq.w	8009712 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6818      	ldr	r0, [r3, #0]
 8009600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009602:	6959      	ldr	r1, [r3, #20]
 8009604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009606:	88da      	ldrh	r2, [r3, #6]
 8009608:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800960c:	f005 f98f 	bl	800e92e <USB_ReadPMA>
 8009610:	e07f      	b.n	8009712 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8009612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009614:	78db      	ldrb	r3, [r3, #3]
 8009616:	2b02      	cmp	r3, #2
 8009618:	d109      	bne.n	800962e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800961a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800961c:	461a      	mov	r2, r3
 800961e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f9c6 	bl	80099b2 <HAL_PCD_EP_DB_Receive>
 8009626:	4603      	mov	r3, r0
 8009628:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800962c:	e071      	b.n	8009712 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	881b      	ldrh	r3, [r3, #0]
 800963e:	b29b      	uxth	r3, r3
 8009640:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009648:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	441a      	add	r2, r3
 8009658:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800965a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800965e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009666:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800966a:	b29b      	uxth	r3, r3
 800966c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	461a      	mov	r2, r3
 8009674:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4413      	add	r3, r2
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	b29b      	uxth	r3, r3
 8009680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d022      	beq.n	80096ce <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009690:	b29b      	uxth	r3, r3
 8009692:	461a      	mov	r2, r3
 8009694:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	00db      	lsls	r3, r3, #3
 800969a:	4413      	add	r3, r2
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	6812      	ldr	r2, [r2, #0]
 80096a0:	4413      	add	r3, r2
 80096a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80096a6:	881b      	ldrh	r3, [r3, #0]
 80096a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096ac:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80096b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d02c      	beq.n	8009712 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096be:	6959      	ldr	r1, [r3, #20]
 80096c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096c2:	891a      	ldrh	r2, [r3, #8]
 80096c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80096c8:	f005 f931 	bl	800e92e <USB_ReadPMA>
 80096cc:	e021      	b.n	8009712 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	461a      	mov	r2, r3
 80096da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	00db      	lsls	r3, r3, #3
 80096e0:	4413      	add	r3, r2
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	6812      	ldr	r2, [r2, #0]
 80096e6:	4413      	add	r3, r2
 80096e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80096f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d009      	beq.n	8009712 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6818      	ldr	r0, [r3, #0]
 8009702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009704:	6959      	ldr	r1, [r3, #20]
 8009706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009708:	895a      	ldrh	r2, [r3, #10]
 800970a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800970e:	f005 f90e 	bl	800e92e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8009712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009714:	69da      	ldr	r2, [r3, #28]
 8009716:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800971a:	441a      	add	r2, r3
 800971c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800971e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009720:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009722:	695a      	ldr	r2, [r3, #20]
 8009724:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009728:	441a      	add	r2, r3
 800972a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800972c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800972e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009730:	699b      	ldr	r3, [r3, #24]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d005      	beq.n	8009742 <PCD_EP_ISR_Handler+0x41e>
 8009736:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800973a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	429a      	cmp	r2, r3
 8009740:	d206      	bcs.n	8009750 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	4619      	mov	r1, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f00d f969 	bl	8016a20 <HAL_PCD_DataOutStageCallback>
 800974e:	e005      	b.n	800975c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009756:	4618      	mov	r0, r3
 8009758:	f004 f9c3 	bl	800dae2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800975c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800975e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009762:	2b00      	cmp	r3, #0
 8009764:	f000 8117 	beq.w	8009996 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8009768:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800976c:	4613      	mov	r3, r2
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	00db      	lsls	r3, r3, #3
 8009774:	3310      	adds	r3, #16
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	4413      	add	r3, r2
 800977a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	461a      	mov	r2, r3
 8009782:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4413      	add	r3, r2
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	b29b      	uxth	r3, r3
 800978e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8009792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009796:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	461a      	mov	r2, r3
 800979e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	441a      	add	r2, r3
 80097a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80097a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80097b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097b6:	78db      	ldrb	r3, [r3, #3]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	f040 80a1 	bne.w	8009900 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80097be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097c0:	2200      	movs	r2, #0
 80097c2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80097c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097c6:	7b1b      	ldrb	r3, [r3, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 8092 	beq.w	80098f2 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80097ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80097d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d046      	beq.n	8009866 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80097d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097da:	785b      	ldrb	r3, [r3, #1]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d126      	bne.n	800982e <PCD_EP_ISR_Handler+0x50a>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	617b      	str	r3, [r7, #20]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	461a      	mov	r2, r3
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	4413      	add	r3, r2
 80097f6:	617b      	str	r3, [r7, #20]
 80097f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	00da      	lsls	r2, r3, #3
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	4413      	add	r3, r2
 8009802:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009806:	613b      	str	r3, [r7, #16]
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	881b      	ldrh	r3, [r3, #0]
 800980c:	b29b      	uxth	r3, r3
 800980e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009812:	b29a      	uxth	r2, r3
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	801a      	strh	r2, [r3, #0]
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	881b      	ldrh	r3, [r3, #0]
 800981c:	b29b      	uxth	r3, r3
 800981e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009826:	b29a      	uxth	r2, r3
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	801a      	strh	r2, [r3, #0]
 800982c:	e061      	b.n	80098f2 <PCD_EP_ISR_Handler+0x5ce>
 800982e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009830:	785b      	ldrb	r3, [r3, #1]
 8009832:	2b01      	cmp	r3, #1
 8009834:	d15d      	bne.n	80098f2 <PCD_EP_ISR_Handler+0x5ce>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	61fb      	str	r3, [r7, #28]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009844:	b29b      	uxth	r3, r3
 8009846:	461a      	mov	r2, r3
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	4413      	add	r3, r2
 800984c:	61fb      	str	r3, [r7, #28]
 800984e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	00da      	lsls	r2, r3, #3
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	4413      	add	r3, r2
 8009858:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800985c:	61bb      	str	r3, [r7, #24]
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	2200      	movs	r2, #0
 8009862:	801a      	strh	r2, [r3, #0]
 8009864:	e045      	b.n	80098f2 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800986c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800986e:	785b      	ldrb	r3, [r3, #1]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d126      	bne.n	80098c2 <PCD_EP_ISR_Handler+0x59e>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	627b      	str	r3, [r7, #36]	@ 0x24
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009882:	b29b      	uxth	r3, r3
 8009884:	461a      	mov	r2, r3
 8009886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009888:	4413      	add	r3, r2
 800988a:	627b      	str	r3, [r7, #36]	@ 0x24
 800988c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	00da      	lsls	r2, r3, #3
 8009892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009894:	4413      	add	r3, r2
 8009896:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800989a:	623b      	str	r3, [r7, #32]
 800989c:	6a3b      	ldr	r3, [r7, #32]
 800989e:	881b      	ldrh	r3, [r3, #0]
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	801a      	strh	r2, [r3, #0]
 80098ac:	6a3b      	ldr	r3, [r7, #32]
 80098ae:	881b      	ldrh	r3, [r3, #0]
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	6a3b      	ldr	r3, [r7, #32]
 80098be:	801a      	strh	r2, [r3, #0]
 80098c0:	e017      	b.n	80098f2 <PCD_EP_ISR_Handler+0x5ce>
 80098c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098c4:	785b      	ldrb	r3, [r3, #1]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d113      	bne.n	80098f2 <PCD_EP_ISR_Handler+0x5ce>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	461a      	mov	r2, r3
 80098d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d8:	4413      	add	r3, r2
 80098da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	00da      	lsls	r2, r3, #3
 80098e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e4:	4413      	add	r3, r2
 80098e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80098ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ee:	2200      	movs	r2, #0
 80098f0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80098f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f00d f8ac 	bl	8016a56 <HAL_PCD_DataInStageCallback>
 80098fe:	e04a      	b.n	8009996 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8009900:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009906:	2b00      	cmp	r3, #0
 8009908:	d13f      	bne.n	800998a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009912:	b29b      	uxth	r3, r3
 8009914:	461a      	mov	r2, r3
 8009916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	00db      	lsls	r3, r3, #3
 800991c:	4413      	add	r3, r2
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	6812      	ldr	r2, [r2, #0]
 8009922:	4413      	add	r3, r2
 8009924:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009928:	881b      	ldrh	r3, [r3, #0]
 800992a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800992e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8009930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009932:	699a      	ldr	r2, [r3, #24]
 8009934:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009936:	429a      	cmp	r2, r3
 8009938:	d906      	bls.n	8009948 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800993a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800993c:	699a      	ldr	r2, [r3, #24]
 800993e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009940:	1ad2      	subs	r2, r2, r3
 8009942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009944:	619a      	str	r2, [r3, #24]
 8009946:	e002      	b.n	800994e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8009948:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800994a:	2200      	movs	r2, #0
 800994c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800994e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d106      	bne.n	8009964 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f00d f87a 	bl	8016a56 <HAL_PCD_DataInStageCallback>
 8009962:	e018      	b.n	8009996 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009964:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009966:	695a      	ldr	r2, [r3, #20]
 8009968:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800996a:	441a      	add	r2, r3
 800996c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800996e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009972:	69da      	ldr	r2, [r3, #28]
 8009974:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009976:	441a      	add	r2, r3
 8009978:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800997a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009982:	4618      	mov	r0, r3
 8009984:	f004 f8ad 	bl	800dae2 <USB_EPStartXfer>
 8009988:	e005      	b.n	8009996 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800998a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800998c:	461a      	mov	r2, r3
 800998e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f917 	bl	8009bc4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800999e:	b29b      	uxth	r3, r3
 80099a0:	b21b      	sxth	r3, r3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f6ff acc3 	blt.w	800932e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3748      	adds	r7, #72	@ 0x48
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b088      	sub	sp, #32
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	60f8      	str	r0, [r7, #12]
 80099ba:	60b9      	str	r1, [r7, #8]
 80099bc:	4613      	mov	r3, r2
 80099be:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80099c0:	88fb      	ldrh	r3, [r7, #6]
 80099c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d07c      	beq.n	8009ac4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	461a      	mov	r2, r3
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	4413      	add	r3, r2
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	6812      	ldr	r2, [r2, #0]
 80099e2:	4413      	add	r3, r2
 80099e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80099e8:	881b      	ldrh	r3, [r3, #0]
 80099ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	699a      	ldr	r2, [r3, #24]
 80099f4:	8b7b      	ldrh	r3, [r7, #26]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d306      	bcc.n	8009a08 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	699a      	ldr	r2, [r3, #24]
 80099fe:	8b7b      	ldrh	r3, [r7, #26]
 8009a00:	1ad2      	subs	r2, r2, r3
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	619a      	str	r2, [r3, #24]
 8009a06:	e002      	b.n	8009a0e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d123      	bne.n	8009a5e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	4413      	add	r3, r2
 8009a24:	881b      	ldrh	r3, [r3, #0]
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a30:	833b      	strh	r3, [r7, #24]
 8009a32:	8b3b      	ldrh	r3, [r7, #24]
 8009a34:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009a38:	833b      	strh	r3, [r7, #24]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	441a      	add	r2, r3
 8009a48:	8b3b      	ldrh	r3, [r7, #24]
 8009a4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009a5e:	88fb      	ldrh	r3, [r7, #6]
 8009a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d01f      	beq.n	8009aa8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4413      	add	r3, r2
 8009a76:	881b      	ldrh	r3, [r3, #0]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a82:	82fb      	strh	r3, [r7, #22]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	441a      	add	r2, r3
 8009a92:	8afb      	ldrh	r3, [r7, #22]
 8009a94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009aa0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009aa8:	8b7b      	ldrh	r3, [r7, #26]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f000 8085 	beq.w	8009bba <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6818      	ldr	r0, [r3, #0]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	6959      	ldr	r1, [r3, #20]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	891a      	ldrh	r2, [r3, #8]
 8009abc:	8b7b      	ldrh	r3, [r7, #26]
 8009abe:	f004 ff36 	bl	800e92e <USB_ReadPMA>
 8009ac2:	e07a      	b.n	8009bba <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	461a      	mov	r2, r3
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	00db      	lsls	r3, r3, #3
 8009ad6:	4413      	add	r3, r2
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	6812      	ldr	r2, [r2, #0]
 8009adc:	4413      	add	r3, r2
 8009ade:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ae8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	699a      	ldr	r2, [r3, #24]
 8009aee:	8b7b      	ldrh	r3, [r7, #26]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d306      	bcc.n	8009b02 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	699a      	ldr	r2, [r3, #24]
 8009af8:	8b7b      	ldrh	r3, [r7, #26]
 8009afa:	1ad2      	subs	r2, r2, r3
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	619a      	str	r2, [r3, #24]
 8009b00:	e002      	b.n	8009b08 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	2200      	movs	r2, #0
 8009b06:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d123      	bne.n	8009b58 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	461a      	mov	r2, r3
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4413      	add	r3, r2
 8009b1e:	881b      	ldrh	r3, [r3, #0]
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b2a:	83fb      	strh	r3, [r7, #30]
 8009b2c:	8bfb      	ldrh	r3, [r7, #30]
 8009b2e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009b32:	83fb      	strh	r3, [r7, #30]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	461a      	mov	r2, r3
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	441a      	add	r2, r3
 8009b42:	8bfb      	ldrh	r3, [r7, #30]
 8009b44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009b58:	88fb      	ldrh	r3, [r7, #6]
 8009b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d11f      	bne.n	8009ba2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	461a      	mov	r2, r3
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	4413      	add	r3, r2
 8009b70:	881b      	ldrh	r3, [r3, #0]
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b7c:	83bb      	strh	r3, [r7, #28]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	461a      	mov	r2, r3
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	441a      	add	r2, r3
 8009b8c:	8bbb      	ldrh	r3, [r7, #28]
 8009b8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009ba2:	8b7b      	ldrh	r3, [r7, #26]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d008      	beq.n	8009bba <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6818      	ldr	r0, [r3, #0]
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	6959      	ldr	r1, [r3, #20]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	895a      	ldrh	r2, [r3, #10]
 8009bb4:	8b7b      	ldrh	r3, [r7, #26]
 8009bb6:	f004 feba 	bl	800e92e <USB_ReadPMA>
    }
  }

  return count;
 8009bba:	8b7b      	ldrh	r3, [r7, #26]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3720      	adds	r7, #32
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b0a6      	sub	sp, #152	@ 0x98
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009bd2:	88fb      	ldrh	r3, [r7, #6]
 8009bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f000 81f7 	beq.w	8009fcc <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	461a      	mov	r2, r3
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	00db      	lsls	r3, r3, #3
 8009bf0:	4413      	add	r3, r2
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	6812      	ldr	r2, [r2, #0]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c02:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	699a      	ldr	r2, [r3, #24]
 8009c0a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d907      	bls.n	8009c22 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	699a      	ldr	r2, [r3, #24]
 8009c16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009c1a:	1ad2      	subs	r2, r2, r3
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	619a      	str	r2, [r3, #24]
 8009c20:	e002      	b.n	8009c28 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	2200      	movs	r2, #0
 8009c26:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f040 80e1 	bne.w	8009df4 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	785b      	ldrb	r3, [r3, #1]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d126      	bne.n	8009c88 <HAL_PCD_EP_DB_Transmit+0xc4>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4e:	4413      	add	r3, r2
 8009c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	00da      	lsls	r2, r3, #3
 8009c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c64:	881b      	ldrh	r3, [r3, #0]
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c70:	801a      	strh	r2, [r3, #0]
 8009c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c84:	801a      	strh	r2, [r3, #0]
 8009c86:	e01a      	b.n	8009cbe <HAL_PCD_EP_DB_Transmit+0xfa>
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	785b      	ldrb	r3, [r3, #1]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d116      	bne.n	8009cbe <HAL_PCD_EP_DB_Transmit+0xfa>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca4:	4413      	add	r3, r2
 8009ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	00da      	lsls	r2, r3, #3
 8009cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cba:	2200      	movs	r2, #0
 8009cbc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	785b      	ldrb	r3, [r3, #1]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d126      	bne.n	8009d1a <HAL_PCD_EP_DB_Transmit+0x156>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	623b      	str	r3, [r7, #32]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	461a      	mov	r2, r3
 8009cde:	6a3b      	ldr	r3, [r7, #32]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	623b      	str	r3, [r7, #32]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	00da      	lsls	r2, r3, #3
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	4413      	add	r3, r2
 8009cee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009cf2:	61fb      	str	r3, [r7, #28]
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	881b      	ldrh	r3, [r3, #0]
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	801a      	strh	r2, [r3, #0]
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	881b      	ldrh	r3, [r3, #0]
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	801a      	strh	r2, [r3, #0]
 8009d18:	e017      	b.n	8009d4a <HAL_PCD_EP_DB_Transmit+0x186>
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	785b      	ldrb	r3, [r3, #1]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d113      	bne.n	8009d4a <HAL_PCD_EP_DB_Transmit+0x186>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d30:	4413      	add	r3, r2
 8009d32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	00da      	lsls	r2, r3, #3
 8009d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d46:	2200      	movs	r2, #0
 8009d48:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	78db      	ldrb	r3, [r3, #3]
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d123      	bne.n	8009d9a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	461a      	mov	r2, r3
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4413      	add	r3, r2
 8009d60:	881b      	ldrh	r3, [r3, #0]
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d6c:	837b      	strh	r3, [r7, #26]
 8009d6e:	8b7b      	ldrh	r3, [r7, #26]
 8009d70:	f083 0320 	eor.w	r3, r3, #32
 8009d74:	837b      	strh	r3, [r7, #26]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	441a      	add	r2, r3
 8009d84:	8b7b      	ldrh	r3, [r7, #26]
 8009d86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	4619      	mov	r1, r3
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f00c fe58 	bl	8016a56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009da6:	88fb      	ldrh	r3, [r7, #6]
 8009da8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d01f      	beq.n	8009df0 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	461a      	mov	r2, r3
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	881b      	ldrh	r3, [r3, #0]
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dca:	833b      	strh	r3, [r7, #24]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	441a      	add	r2, r3
 8009dda:	8b3b      	ldrh	r3, [r7, #24]
 8009ddc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009de0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009de4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8009df0:	2300      	movs	r3, #0
 8009df2:	e31f      	b.n	800a434 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009df4:	88fb      	ldrh	r3, [r7, #6]
 8009df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d021      	beq.n	8009e42 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	461a      	mov	r2, r3
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4413      	add	r3, r2
 8009e0c:	881b      	ldrh	r3, [r3, #0]
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e18:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	461a      	mov	r2, r3
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	441a      	add	r2, r3
 8009e2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009e2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	f040 82ca 	bne.w	800a3e2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	695a      	ldr	r2, [r3, #20]
 8009e52:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009e56:	441a      	add	r2, r3
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	69da      	ldr	r2, [r3, #28]
 8009e60:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009e64:	441a      	add	r2, r3
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	6a1a      	ldr	r2, [r3, #32]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d309      	bcc.n	8009e8a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	6a1a      	ldr	r2, [r3, #32]
 8009e80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e82:	1ad2      	subs	r2, r2, r3
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	621a      	str	r2, [r3, #32]
 8009e88:	e015      	b.n	8009eb6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d107      	bne.n	8009ea2 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8009e92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009e96:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009ea0:	e009      	b.n	8009eb6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	6a1b      	ldr	r3, [r3, #32]
 8009eae:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	785b      	ldrb	r3, [r3, #1]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d15f      	bne.n	8009f7e <HAL_PCD_EP_DB_Transmit+0x3ba>
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	461a      	mov	r2, r3
 8009ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ed2:	4413      	add	r3, r2
 8009ed4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	00da      	lsls	r2, r3, #3
 8009edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ede:	4413      	add	r3, r2
 8009ee0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ee8:	881b      	ldrh	r3, [r3, #0]
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ef4:	801a      	strh	r2, [r3, #0]
 8009ef6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d10a      	bne.n	8009f12 <HAL_PCD_EP_DB_Transmit+0x34e>
 8009efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009efe:	881b      	ldrh	r3, [r3, #0]
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f0e:	801a      	strh	r2, [r3, #0]
 8009f10:	e051      	b.n	8009fb6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8009f12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f14:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f16:	d816      	bhi.n	8009f46 <HAL_PCD_EP_DB_Transmit+0x382>
 8009f18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f1a:	085b      	lsrs	r3, r3, #1
 8009f1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f20:	f003 0301 	and.w	r3, r3, #1
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <HAL_PCD_EP_DB_Transmit+0x36a>
 8009f28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f30:	881b      	ldrh	r3, [r3, #0]
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	029b      	lsls	r3, r3, #10
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f42:	801a      	strh	r2, [r3, #0]
 8009f44:	e037      	b.n	8009fb6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8009f46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f48:	095b      	lsrs	r3, r3, #5
 8009f4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f4e:	f003 031f 	and.w	r3, r3, #31
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d102      	bne.n	8009f5c <HAL_PCD_EP_DB_Transmit+0x398>
 8009f56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f5e:	881b      	ldrh	r3, [r3, #0]
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	029b      	lsls	r3, r3, #10
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f7a:	801a      	strh	r2, [r3, #0]
 8009f7c:	e01b      	b.n	8009fb6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	785b      	ldrb	r3, [r3, #1]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d117      	bne.n	8009fb6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	461a      	mov	r2, r3
 8009f98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f9a:	4413      	add	r3, r2
 8009f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	00da      	lsls	r2, r3, #3
 8009fa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009fac:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fb4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6818      	ldr	r0, [r3, #0]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	6959      	ldr	r1, [r3, #20]
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	891a      	ldrh	r2, [r3, #8]
 8009fc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	f004 fc70 	bl	800e8aa <USB_WritePMA>
 8009fca:	e20a      	b.n	800a3e2 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	00db      	lsls	r3, r3, #3
 8009fde:	4413      	add	r3, r2
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	6812      	ldr	r2, [r2, #0]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009fea:	881b      	ldrh	r3, [r3, #0]
 8009fec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ff0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	699a      	ldr	r2, [r3, #24]
 8009ff8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d307      	bcc.n	800a010 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	699a      	ldr	r2, [r3, #24]
 800a004:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a008:	1ad2      	subs	r2, r2, r3
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	619a      	str	r2, [r3, #24]
 800a00e:	e002      	b.n	800a016 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2200      	movs	r2, #0
 800a014:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f040 80f6 	bne.w	800a20c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	785b      	ldrb	r3, [r3, #1]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d126      	bne.n	800a076 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	677b      	str	r3, [r7, #116]	@ 0x74
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a036:	b29b      	uxth	r3, r3
 800a038:	461a      	mov	r2, r3
 800a03a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a03c:	4413      	add	r3, r2
 800a03e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	00da      	lsls	r2, r3, #3
 800a046:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a048:	4413      	add	r3, r2
 800a04a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a04e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a050:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a052:	881b      	ldrh	r3, [r3, #0]
 800a054:	b29b      	uxth	r3, r3
 800a056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a05e:	801a      	strh	r2, [r3, #0]
 800a060:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a062:	881b      	ldrh	r3, [r3, #0]
 800a064:	b29b      	uxth	r3, r3
 800a066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a06a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a06e:	b29a      	uxth	r2, r3
 800a070:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a072:	801a      	strh	r2, [r3, #0]
 800a074:	e01a      	b.n	800a0ac <HAL_PCD_EP_DB_Transmit+0x4e8>
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	785b      	ldrb	r3, [r3, #1]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d116      	bne.n	800a0ac <HAL_PCD_EP_DB_Transmit+0x4e8>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	461a      	mov	r2, r3
 800a090:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a092:	4413      	add	r3, r2
 800a094:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	00da      	lsls	r2, r3, #3
 800a09c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a09e:	4413      	add	r3, r2
 800a0a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a0a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a0a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	785b      	ldrb	r3, [r3, #1]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d12f      	bne.n	800a11c <HAL_PCD_EP_DB_Transmit+0x558>
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0d4:	4413      	add	r3, r2
 800a0d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	00da      	lsls	r2, r3, #3
 800a0e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0e4:	4413      	add	r3, r2
 800a0e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a0ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a0ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a100:	801a      	strh	r2, [r3, #0]
 800a102:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	b29b      	uxth	r3, r3
 800a10a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a10e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a112:	b29a      	uxth	r2, r3
 800a114:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a118:	801a      	strh	r2, [r3, #0]
 800a11a:	e01c      	b.n	800a156 <HAL_PCD_EP_DB_Transmit+0x592>
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	785b      	ldrb	r3, [r3, #1]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d118      	bne.n	800a156 <HAL_PCD_EP_DB_Transmit+0x592>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	461a      	mov	r2, r3
 800a130:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a134:	4413      	add	r3, r2
 800a136:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	00da      	lsls	r2, r3, #3
 800a140:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a144:	4413      	add	r3, r2
 800a146:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a14a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a14e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a152:	2200      	movs	r2, #0
 800a154:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	78db      	ldrb	r3, [r3, #3]
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d127      	bne.n	800a1ae <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	461a      	mov	r2, r3
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4413      	add	r3, r2
 800a16c:	881b      	ldrh	r3, [r3, #0]
 800a16e:	b29b      	uxth	r3, r3
 800a170:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a178:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a17c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a180:	f083 0320 	eor.w	r3, r3, #32
 800a184:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	461a      	mov	r2, r3
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	441a      	add	r2, r3
 800a196:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a19a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a19e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f00c fc4e 	bl	8016a56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a1ba:	88fb      	ldrh	r3, [r7, #6]
 800a1bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d121      	bne.n	800a208 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4413      	add	r3, r2
 800a1d2:	881b      	ldrh	r3, [r3, #0]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1de:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	441a      	add	r2, r3
 800a1f0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a1f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a204:	b29b      	uxth	r3, r3
 800a206:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	e113      	b.n	800a434 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a20c:	88fb      	ldrh	r3, [r7, #6]
 800a20e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a212:	2b00      	cmp	r3, #0
 800a214:	d121      	bne.n	800a25a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	461a      	mov	r2, r3
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	4413      	add	r3, r2
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	b29b      	uxth	r3, r3
 800a228:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a22c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a230:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	461a      	mov	r2, r3
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	441a      	add	r2, r3
 800a242:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a246:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a24a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a24e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a256:	b29b      	uxth	r3, r3
 800a258:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a260:	2b01      	cmp	r3, #1
 800a262:	f040 80be 	bne.w	800a3e2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	695a      	ldr	r2, [r3, #20]
 800a26a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a26e:	441a      	add	r2, r3
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	69da      	ldr	r2, [r3, #28]
 800a278:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a27c:	441a      	add	r2, r3
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	6a1a      	ldr	r2, [r3, #32]
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d309      	bcc.n	800a2a2 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	6a1a      	ldr	r2, [r3, #32]
 800a298:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a29a:	1ad2      	subs	r2, r2, r3
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	621a      	str	r2, [r3, #32]
 800a2a0:	e015      	b.n	800a2ce <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	6a1b      	ldr	r3, [r3, #32]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d107      	bne.n	800a2ba <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800a2aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a2ae:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800a2b8:	e009      	b.n	800a2ce <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	785b      	ldrb	r3, [r3, #1]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d15f      	bne.n	800a39c <HAL_PCD_EP_DB_Transmit+0x7d8>
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a2f0:	4413      	add	r3, r2
 800a2f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	00da      	lsls	r2, r3, #3
 800a2fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a302:	667b      	str	r3, [r7, #100]	@ 0x64
 800a304:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a306:	881b      	ldrh	r3, [r3, #0]
 800a308:	b29b      	uxth	r3, r3
 800a30a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a30e:	b29a      	uxth	r2, r3
 800a310:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a312:	801a      	strh	r2, [r3, #0]
 800a314:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10a      	bne.n	800a330 <HAL_PCD_EP_DB_Transmit+0x76c>
 800a31a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a31c:	881b      	ldrh	r3, [r3, #0]
 800a31e:	b29b      	uxth	r3, r3
 800a320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a328:	b29a      	uxth	r2, r3
 800a32a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a32c:	801a      	strh	r2, [r3, #0]
 800a32e:	e04e      	b.n	800a3ce <HAL_PCD_EP_DB_Transmit+0x80a>
 800a330:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a332:	2b3e      	cmp	r3, #62	@ 0x3e
 800a334:	d816      	bhi.n	800a364 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800a336:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a338:	085b      	lsrs	r3, r3, #1
 800a33a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a33c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a33e:	f003 0301 	and.w	r3, r3, #1
 800a342:	2b00      	cmp	r3, #0
 800a344:	d002      	beq.n	800a34c <HAL_PCD_EP_DB_Transmit+0x788>
 800a346:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a348:	3301      	adds	r3, #1
 800a34a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a34c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a34e:	881b      	ldrh	r3, [r3, #0]
 800a350:	b29a      	uxth	r2, r3
 800a352:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a354:	b29b      	uxth	r3, r3
 800a356:	029b      	lsls	r3, r3, #10
 800a358:	b29b      	uxth	r3, r3
 800a35a:	4313      	orrs	r3, r2
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a360:	801a      	strh	r2, [r3, #0]
 800a362:	e034      	b.n	800a3ce <HAL_PCD_EP_DB_Transmit+0x80a>
 800a364:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a366:	095b      	lsrs	r3, r3, #5
 800a368:	663b      	str	r3, [r7, #96]	@ 0x60
 800a36a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a36c:	f003 031f 	and.w	r3, r3, #31
 800a370:	2b00      	cmp	r3, #0
 800a372:	d102      	bne.n	800a37a <HAL_PCD_EP_DB_Transmit+0x7b6>
 800a374:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a376:	3b01      	subs	r3, #1
 800a378:	663b      	str	r3, [r7, #96]	@ 0x60
 800a37a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a37c:	881b      	ldrh	r3, [r3, #0]
 800a37e:	b29a      	uxth	r2, r3
 800a380:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a382:	b29b      	uxth	r3, r3
 800a384:	029b      	lsls	r3, r3, #10
 800a386:	b29b      	uxth	r3, r3
 800a388:	4313      	orrs	r3, r2
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a394:	b29a      	uxth	r2, r3
 800a396:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a398:	801a      	strh	r2, [r3, #0]
 800a39a:	e018      	b.n	800a3ce <HAL_PCD_EP_DB_Transmit+0x80a>
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	785b      	ldrb	r3, [r3, #1]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d114      	bne.n	800a3ce <HAL_PCD_EP_DB_Transmit+0x80a>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3b2:	4413      	add	r3, r2
 800a3b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	00da      	lsls	r2, r3, #3
 800a3bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3be:	4413      	add	r3, r2
 800a3c0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a3c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a3c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3cc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6818      	ldr	r0, [r3, #0]
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	6959      	ldr	r1, [r3, #20]
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	895a      	ldrh	r2, [r3, #10]
 800a3da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	f004 fa64 	bl	800e8aa <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	4413      	add	r3, r2
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3fc:	82fb      	strh	r3, [r7, #22]
 800a3fe:	8afb      	ldrh	r3, [r7, #22]
 800a400:	f083 0310 	eor.w	r3, r3, #16
 800a404:	82fb      	strh	r3, [r7, #22]
 800a406:	8afb      	ldrh	r3, [r7, #22]
 800a408:	f083 0320 	eor.w	r3, r3, #32
 800a40c:	82fb      	strh	r3, [r7, #22]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	461a      	mov	r2, r3
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	441a      	add	r2, r3
 800a41c:	8afb      	ldrh	r3, [r7, #22]
 800a41e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a42a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a42e:	b29b      	uxth	r3, r3
 800a430:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3798      	adds	r7, #152	@ 0x98
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b087      	sub	sp, #28
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	607b      	str	r3, [r7, #4]
 800a446:	460b      	mov	r3, r1
 800a448:	817b      	strh	r3, [r7, #10]
 800a44a:	4613      	mov	r3, r2
 800a44c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a44e:	897b      	ldrh	r3, [r7, #10]
 800a450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a454:	b29b      	uxth	r3, r3
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00b      	beq.n	800a472 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a45a:	897b      	ldrh	r3, [r7, #10]
 800a45c:	f003 0207 	and.w	r2, r3, #7
 800a460:	4613      	mov	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4413      	add	r3, r2
 800a466:	00db      	lsls	r3, r3, #3
 800a468:	3310      	adds	r3, #16
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	4413      	add	r3, r2
 800a46e:	617b      	str	r3, [r7, #20]
 800a470:	e009      	b.n	800a486 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a472:	897a      	ldrh	r2, [r7, #10]
 800a474:	4613      	mov	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4413      	add	r3, r2
 800a47a:	00db      	lsls	r3, r3, #3
 800a47c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	4413      	add	r3, r2
 800a484:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a486:	893b      	ldrh	r3, [r7, #8]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d107      	bne.n	800a49c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	2200      	movs	r2, #0
 800a490:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	b29a      	uxth	r2, r3
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	80da      	strh	r2, [r3, #6]
 800a49a:	e00b      	b.n	800a4b4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	0c1b      	lsrs	r3, r3, #16
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	371c      	adds	r7, #28
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b085      	sub	sp, #20
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	f043 0301 	orr.w	r3, r3, #1
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	f043 0302 	orr.w	r3, r3, #2
 800a500:	b29a      	uxth	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3714      	adds	r7, #20
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
	...

0800a518 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d141      	bne.n	800a5aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a526:	4b4b      	ldr	r3, [pc, #300]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a52e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a532:	d131      	bne.n	800a598 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a534:	4b47      	ldr	r3, [pc, #284]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a53a:	4a46      	ldr	r2, [pc, #280]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a53c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a540:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a544:	4b43      	ldr	r3, [pc, #268]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a54c:	4a41      	ldr	r2, [pc, #260]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a54e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a552:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a554:	4b40      	ldr	r3, [pc, #256]	@ (800a658 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2232      	movs	r2, #50	@ 0x32
 800a55a:	fb02 f303 	mul.w	r3, r2, r3
 800a55e:	4a3f      	ldr	r2, [pc, #252]	@ (800a65c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a560:	fba2 2303 	umull	r2, r3, r2, r3
 800a564:	0c9b      	lsrs	r3, r3, #18
 800a566:	3301      	adds	r3, #1
 800a568:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a56a:	e002      	b.n	800a572 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	3b01      	subs	r3, #1
 800a570:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a572:	4b38      	ldr	r3, [pc, #224]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a574:	695b      	ldr	r3, [r3, #20]
 800a576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a57a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a57e:	d102      	bne.n	800a586 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1f2      	bne.n	800a56c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a586:	4b33      	ldr	r3, [pc, #204]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a58e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a592:	d158      	bne.n	800a646 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a594:	2303      	movs	r3, #3
 800a596:	e057      	b.n	800a648 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a598:	4b2e      	ldr	r3, [pc, #184]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a59a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a59e:	4a2d      	ldr	r2, [pc, #180]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800a5a8:	e04d      	b.n	800a646 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5b0:	d141      	bne.n	800a636 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a5b2:	4b28      	ldr	r3, [pc, #160]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a5ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5be:	d131      	bne.n	800a624 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a5c0:	4b24      	ldr	r3, [pc, #144]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5c6:	4a23      	ldr	r2, [pc, #140]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a5d0:	4b20      	ldr	r3, [pc, #128]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a5d8:	4a1e      	ldr	r2, [pc, #120]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a5de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a5e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a658 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2232      	movs	r2, #50	@ 0x32
 800a5e6:	fb02 f303 	mul.w	r3, r2, r3
 800a5ea:	4a1c      	ldr	r2, [pc, #112]	@ (800a65c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a5ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a5f0:	0c9b      	lsrs	r3, r3, #18
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a5f6:	e002      	b.n	800a5fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a5fe:	4b15      	ldr	r3, [pc, #84]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a60a:	d102      	bne.n	800a612 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1f2      	bne.n	800a5f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a612:	4b10      	ldr	r3, [pc, #64]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a61a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a61e:	d112      	bne.n	800a646 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a620:	2303      	movs	r3, #3
 800a622:	e011      	b.n	800a648 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a624:	4b0b      	ldr	r3, [pc, #44]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a62a:	4a0a      	ldr	r2, [pc, #40]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a62c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a630:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800a634:	e007      	b.n	800a646 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a636:	4b07      	ldr	r3, [pc, #28]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a63e:	4a05      	ldr	r2, [pc, #20]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a640:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a644:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3714      	adds	r7, #20
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr
 800a654:	40007000 	.word	0x40007000
 800a658:	20000004 	.word	0x20000004
 800a65c:	431bde83 	.word	0x431bde83

0800a660 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800a660:	b480      	push	{r7}
 800a662:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a664:	4b05      	ldr	r3, [pc, #20]	@ (800a67c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	4a04      	ldr	r2, [pc, #16]	@ (800a67c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a66a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a66e:	6093      	str	r3, [r2, #8]
}
 800a670:	bf00      	nop
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	40007000 	.word	0x40007000

0800a680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b088      	sub	sp, #32
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d101      	bne.n	800a692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e2fe      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0301 	and.w	r3, r3, #1
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d075      	beq.n	800a78a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a69e:	4b97      	ldr	r3, [pc, #604]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	f003 030c 	and.w	r3, r3, #12
 800a6a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a6a8:	4b94      	ldr	r3, [pc, #592]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	f003 0303 	and.w	r3, r3, #3
 800a6b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	2b0c      	cmp	r3, #12
 800a6b6:	d102      	bne.n	800a6be <HAL_RCC_OscConfig+0x3e>
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	d002      	beq.n	800a6c4 <HAL_RCC_OscConfig+0x44>
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	2b08      	cmp	r3, #8
 800a6c2:	d10b      	bne.n	800a6dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6c4:	4b8d      	ldr	r3, [pc, #564]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d05b      	beq.n	800a788 <HAL_RCC_OscConfig+0x108>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d157      	bne.n	800a788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e2d9      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6e4:	d106      	bne.n	800a6f4 <HAL_RCC_OscConfig+0x74>
 800a6e6:	4b85      	ldr	r3, [pc, #532]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a84      	ldr	r2, [pc, #528]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a6ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6f0:	6013      	str	r3, [r2, #0]
 800a6f2:	e01d      	b.n	800a730 <HAL_RCC_OscConfig+0xb0>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a6fc:	d10c      	bne.n	800a718 <HAL_RCC_OscConfig+0x98>
 800a6fe:	4b7f      	ldr	r3, [pc, #508]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a7e      	ldr	r2, [pc, #504]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a704:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a708:	6013      	str	r3, [r2, #0]
 800a70a:	4b7c      	ldr	r3, [pc, #496]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a7b      	ldr	r2, [pc, #492]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a714:	6013      	str	r3, [r2, #0]
 800a716:	e00b      	b.n	800a730 <HAL_RCC_OscConfig+0xb0>
 800a718:	4b78      	ldr	r3, [pc, #480]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a77      	ldr	r2, [pc, #476]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a71e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a722:	6013      	str	r3, [r2, #0]
 800a724:	4b75      	ldr	r3, [pc, #468]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a74      	ldr	r2, [pc, #464]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a72a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a72e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d013      	beq.n	800a760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a738:	f7fc fc3a 	bl	8006fb0 <HAL_GetTick>
 800a73c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a73e:	e008      	b.n	800a752 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a740:	f7fc fc36 	bl	8006fb0 <HAL_GetTick>
 800a744:	4602      	mov	r2, r0
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	1ad3      	subs	r3, r2, r3
 800a74a:	2b64      	cmp	r3, #100	@ 0x64
 800a74c:	d901      	bls.n	800a752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a74e:	2303      	movs	r3, #3
 800a750:	e29e      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a752:	4b6a      	ldr	r3, [pc, #424]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d0f0      	beq.n	800a740 <HAL_RCC_OscConfig+0xc0>
 800a75e:	e014      	b.n	800a78a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a760:	f7fc fc26 	bl	8006fb0 <HAL_GetTick>
 800a764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a766:	e008      	b.n	800a77a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a768:	f7fc fc22 	bl	8006fb0 <HAL_GetTick>
 800a76c:	4602      	mov	r2, r0
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	2b64      	cmp	r3, #100	@ 0x64
 800a774:	d901      	bls.n	800a77a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a776:	2303      	movs	r3, #3
 800a778:	e28a      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a77a:	4b60      	ldr	r3, [pc, #384]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1f0      	bne.n	800a768 <HAL_RCC_OscConfig+0xe8>
 800a786:	e000      	b.n	800a78a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 0302 	and.w	r3, r3, #2
 800a792:	2b00      	cmp	r3, #0
 800a794:	d075      	beq.n	800a882 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a796:	4b59      	ldr	r3, [pc, #356]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	f003 030c 	and.w	r3, r3, #12
 800a79e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a7a0:	4b56      	ldr	r3, [pc, #344]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	f003 0303 	and.w	r3, r3, #3
 800a7a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	2b0c      	cmp	r3, #12
 800a7ae:	d102      	bne.n	800a7b6 <HAL_RCC_OscConfig+0x136>
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d002      	beq.n	800a7bc <HAL_RCC_OscConfig+0x13c>
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	2b04      	cmp	r3, #4
 800a7ba:	d11f      	bne.n	800a7fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a7bc:	4b4f      	ldr	r3, [pc, #316]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d005      	beq.n	800a7d4 <HAL_RCC_OscConfig+0x154>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e25d      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7d4:	4b49      	ldr	r3, [pc, #292]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	061b      	lsls	r3, r3, #24
 800a7e2:	4946      	ldr	r1, [pc, #280]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a7e8:	4b45      	ldr	r3, [pc, #276]	@ (800a900 <HAL_RCC_OscConfig+0x280>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7fc fa93 	bl	8006d18 <HAL_InitTick>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d043      	beq.n	800a880 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e249      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d023      	beq.n	800a84c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a804:	4b3d      	ldr	r3, [pc, #244]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a3c      	ldr	r2, [pc, #240]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a80a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a80e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a810:	f7fc fbce 	bl	8006fb0 <HAL_GetTick>
 800a814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a816:	e008      	b.n	800a82a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a818:	f7fc fbca 	bl	8006fb0 <HAL_GetTick>
 800a81c:	4602      	mov	r2, r0
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	2b02      	cmp	r3, #2
 800a824:	d901      	bls.n	800a82a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a826:	2303      	movs	r3, #3
 800a828:	e232      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a82a:	4b34      	ldr	r3, [pc, #208]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a832:	2b00      	cmp	r3, #0
 800a834:	d0f0      	beq.n	800a818 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a836:	4b31      	ldr	r3, [pc, #196]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	061b      	lsls	r3, r3, #24
 800a844:	492d      	ldr	r1, [pc, #180]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a846:	4313      	orrs	r3, r2
 800a848:	604b      	str	r3, [r1, #4]
 800a84a:	e01a      	b.n	800a882 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a84c:	4b2b      	ldr	r3, [pc, #172]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a2a      	ldr	r2, [pc, #168]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a852:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a858:	f7fc fbaa 	bl	8006fb0 <HAL_GetTick>
 800a85c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a85e:	e008      	b.n	800a872 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a860:	f7fc fba6 	bl	8006fb0 <HAL_GetTick>
 800a864:	4602      	mov	r2, r0
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d901      	bls.n	800a872 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a86e:	2303      	movs	r3, #3
 800a870:	e20e      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a872:	4b22      	ldr	r3, [pc, #136]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1f0      	bne.n	800a860 <HAL_RCC_OscConfig+0x1e0>
 800a87e:	e000      	b.n	800a882 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a880:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 0308 	and.w	r3, r3, #8
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d041      	beq.n	800a912 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	695b      	ldr	r3, [r3, #20]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d01c      	beq.n	800a8d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a896:	4b19      	ldr	r3, [pc, #100]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a898:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a89c:	4a17      	ldr	r2, [pc, #92]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a89e:	f043 0301 	orr.w	r3, r3, #1
 800a8a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8a6:	f7fc fb83 	bl	8006fb0 <HAL_GetTick>
 800a8aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a8ac:	e008      	b.n	800a8c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8ae:	f7fc fb7f 	bl	8006fb0 <HAL_GetTick>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	d901      	bls.n	800a8c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	e1e7      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a8c0:	4b0e      	ldr	r3, [pc, #56]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a8c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8c6:	f003 0302 	and.w	r3, r3, #2
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d0ef      	beq.n	800a8ae <HAL_RCC_OscConfig+0x22e>
 800a8ce:	e020      	b.n	800a912 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a8d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a8d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8d6:	4a09      	ldr	r2, [pc, #36]	@ (800a8fc <HAL_RCC_OscConfig+0x27c>)
 800a8d8:	f023 0301 	bic.w	r3, r3, #1
 800a8dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8e0:	f7fc fb66 	bl	8006fb0 <HAL_GetTick>
 800a8e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a8e6:	e00d      	b.n	800a904 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8e8:	f7fc fb62 	bl	8006fb0 <HAL_GetTick>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d906      	bls.n	800a904 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a8f6:	2303      	movs	r3, #3
 800a8f8:	e1ca      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
 800a8fa:	bf00      	nop
 800a8fc:	40021000 	.word	0x40021000
 800a900:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a904:	4b8c      	ldr	r3, [pc, #560]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800a906:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a90a:	f003 0302 	and.w	r3, r3, #2
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1ea      	bne.n	800a8e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 0304 	and.w	r3, r3, #4
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	f000 80a6 	beq.w	800aa6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a920:	2300      	movs	r3, #0
 800a922:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a924:	4b84      	ldr	r3, [pc, #528]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800a926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <HAL_RCC_OscConfig+0x2b4>
 800a930:	2301      	movs	r3, #1
 800a932:	e000      	b.n	800a936 <HAL_RCC_OscConfig+0x2b6>
 800a934:	2300      	movs	r3, #0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00d      	beq.n	800a956 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a93a:	4b7f      	ldr	r3, [pc, #508]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800a93c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a93e:	4a7e      	ldr	r2, [pc, #504]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800a940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a944:	6593      	str	r3, [r2, #88]	@ 0x58
 800a946:	4b7c      	ldr	r3, [pc, #496]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800a948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a94a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a94e:	60fb      	str	r3, [r7, #12]
 800a950:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a952:	2301      	movs	r3, #1
 800a954:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a956:	4b79      	ldr	r3, [pc, #484]	@ (800ab3c <HAL_RCC_OscConfig+0x4bc>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d118      	bne.n	800a994 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a962:	4b76      	ldr	r3, [pc, #472]	@ (800ab3c <HAL_RCC_OscConfig+0x4bc>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a75      	ldr	r2, [pc, #468]	@ (800ab3c <HAL_RCC_OscConfig+0x4bc>)
 800a968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a96c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a96e:	f7fc fb1f 	bl	8006fb0 <HAL_GetTick>
 800a972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a974:	e008      	b.n	800a988 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a976:	f7fc fb1b 	bl	8006fb0 <HAL_GetTick>
 800a97a:	4602      	mov	r2, r0
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	1ad3      	subs	r3, r2, r3
 800a980:	2b02      	cmp	r3, #2
 800a982:	d901      	bls.n	800a988 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a984:	2303      	movs	r3, #3
 800a986:	e183      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a988:	4b6c      	ldr	r3, [pc, #432]	@ (800ab3c <HAL_RCC_OscConfig+0x4bc>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a990:	2b00      	cmp	r3, #0
 800a992:	d0f0      	beq.n	800a976 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d108      	bne.n	800a9ae <HAL_RCC_OscConfig+0x32e>
 800a99c:	4b66      	ldr	r3, [pc, #408]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800a99e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9a2:	4a65      	ldr	r2, [pc, #404]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800a9a4:	f043 0301 	orr.w	r3, r3, #1
 800a9a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a9ac:	e024      	b.n	800a9f8 <HAL_RCC_OscConfig+0x378>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	2b05      	cmp	r3, #5
 800a9b4:	d110      	bne.n	800a9d8 <HAL_RCC_OscConfig+0x358>
 800a9b6:	4b60      	ldr	r3, [pc, #384]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800a9b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9bc:	4a5e      	ldr	r2, [pc, #376]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800a9be:	f043 0304 	orr.w	r3, r3, #4
 800a9c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a9c6:	4b5c      	ldr	r3, [pc, #368]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800a9c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9cc:	4a5a      	ldr	r2, [pc, #360]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800a9ce:	f043 0301 	orr.w	r3, r3, #1
 800a9d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a9d6:	e00f      	b.n	800a9f8 <HAL_RCC_OscConfig+0x378>
 800a9d8:	4b57      	ldr	r3, [pc, #348]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800a9da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9de:	4a56      	ldr	r2, [pc, #344]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800a9e0:	f023 0301 	bic.w	r3, r3, #1
 800a9e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a9e8:	4b53      	ldr	r3, [pc, #332]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800a9ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9ee:	4a52      	ldr	r2, [pc, #328]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800a9f0:	f023 0304 	bic.w	r3, r3, #4
 800a9f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d016      	beq.n	800aa2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa00:	f7fc fad6 	bl	8006fb0 <HAL_GetTick>
 800aa04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa06:	e00a      	b.n	800aa1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa08:	f7fc fad2 	bl	8006fb0 <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d901      	bls.n	800aa1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e138      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa1e:	4b46      	ldr	r3, [pc, #280]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800aa20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa24:	f003 0302 	and.w	r3, r3, #2
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d0ed      	beq.n	800aa08 <HAL_RCC_OscConfig+0x388>
 800aa2c:	e015      	b.n	800aa5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa2e:	f7fc fabf 	bl	8006fb0 <HAL_GetTick>
 800aa32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aa34:	e00a      	b.n	800aa4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa36:	f7fc fabb 	bl	8006fb0 <HAL_GetTick>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	1ad3      	subs	r3, r2, r3
 800aa40:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d901      	bls.n	800aa4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	e121      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aa4c:	4b3a      	ldr	r3, [pc, #232]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800aa4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa52:	f003 0302 	and.w	r3, r3, #2
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1ed      	bne.n	800aa36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800aa5a:	7ffb      	ldrb	r3, [r7, #31]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d105      	bne.n	800aa6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa60:	4b35      	ldr	r3, [pc, #212]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800aa62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa64:	4a34      	ldr	r2, [pc, #208]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800aa66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa6a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0320 	and.w	r3, r3, #32
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d03c      	beq.n	800aaf2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	699b      	ldr	r3, [r3, #24]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d01c      	beq.n	800aaba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aa80:	4b2d      	ldr	r3, [pc, #180]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800aa82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aa86:	4a2c      	ldr	r2, [pc, #176]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800aa88:	f043 0301 	orr.w	r3, r3, #1
 800aa8c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa90:	f7fc fa8e 	bl	8006fb0 <HAL_GetTick>
 800aa94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aa96:	e008      	b.n	800aaaa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aa98:	f7fc fa8a 	bl	8006fb0 <HAL_GetTick>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d901      	bls.n	800aaaa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	e0f2      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aaaa:	4b23      	ldr	r3, [pc, #140]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800aaac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aab0:	f003 0302 	and.w	r3, r3, #2
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d0ef      	beq.n	800aa98 <HAL_RCC_OscConfig+0x418>
 800aab8:	e01b      	b.n	800aaf2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aaba:	4b1f      	ldr	r3, [pc, #124]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800aabc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aac0:	4a1d      	ldr	r2, [pc, #116]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800aac2:	f023 0301 	bic.w	r3, r3, #1
 800aac6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aaca:	f7fc fa71 	bl	8006fb0 <HAL_GetTick>
 800aace:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800aad0:	e008      	b.n	800aae4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aad2:	f7fc fa6d 	bl	8006fb0 <HAL_GetTick>
 800aad6:	4602      	mov	r2, r0
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	1ad3      	subs	r3, r2, r3
 800aadc:	2b02      	cmp	r3, #2
 800aade:	d901      	bls.n	800aae4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800aae0:	2303      	movs	r3, #3
 800aae2:	e0d5      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800aae4:	4b14      	ldr	r3, [pc, #80]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800aae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aaea:	f003 0302 	and.w	r3, r3, #2
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1ef      	bne.n	800aad2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	69db      	ldr	r3, [r3, #28]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f000 80c9 	beq.w	800ac8e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aafc:	4b0e      	ldr	r3, [pc, #56]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	f003 030c 	and.w	r3, r3, #12
 800ab04:	2b0c      	cmp	r3, #12
 800ab06:	f000 8083 	beq.w	800ac10 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	69db      	ldr	r3, [r3, #28]
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d15e      	bne.n	800abd0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab12:	4b09      	ldr	r3, [pc, #36]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a08      	ldr	r2, [pc, #32]	@ (800ab38 <HAL_RCC_OscConfig+0x4b8>)
 800ab18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab1e:	f7fc fa47 	bl	8006fb0 <HAL_GetTick>
 800ab22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab24:	e00c      	b.n	800ab40 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab26:	f7fc fa43 	bl	8006fb0 <HAL_GetTick>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	2b02      	cmp	r3, #2
 800ab32:	d905      	bls.n	800ab40 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800ab34:	2303      	movs	r3, #3
 800ab36:	e0ab      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
 800ab38:	40021000 	.word	0x40021000
 800ab3c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab40:	4b55      	ldr	r3, [pc, #340]	@ (800ac98 <HAL_RCC_OscConfig+0x618>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1ec      	bne.n	800ab26 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab4c:	4b52      	ldr	r3, [pc, #328]	@ (800ac98 <HAL_RCC_OscConfig+0x618>)
 800ab4e:	68da      	ldr	r2, [r3, #12]
 800ab50:	4b52      	ldr	r3, [pc, #328]	@ (800ac9c <HAL_RCC_OscConfig+0x61c>)
 800ab52:	4013      	ands	r3, r2
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	6a11      	ldr	r1, [r2, #32]
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ab5c:	3a01      	subs	r2, #1
 800ab5e:	0112      	lsls	r2, r2, #4
 800ab60:	4311      	orrs	r1, r2
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800ab66:	0212      	lsls	r2, r2, #8
 800ab68:	4311      	orrs	r1, r2
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ab6e:	0852      	lsrs	r2, r2, #1
 800ab70:	3a01      	subs	r2, #1
 800ab72:	0552      	lsls	r2, r2, #21
 800ab74:	4311      	orrs	r1, r2
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ab7a:	0852      	lsrs	r2, r2, #1
 800ab7c:	3a01      	subs	r2, #1
 800ab7e:	0652      	lsls	r2, r2, #25
 800ab80:	4311      	orrs	r1, r2
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ab86:	06d2      	lsls	r2, r2, #27
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	4943      	ldr	r1, [pc, #268]	@ (800ac98 <HAL_RCC_OscConfig+0x618>)
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab90:	4b41      	ldr	r3, [pc, #260]	@ (800ac98 <HAL_RCC_OscConfig+0x618>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a40      	ldr	r2, [pc, #256]	@ (800ac98 <HAL_RCC_OscConfig+0x618>)
 800ab96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ab9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ab9c:	4b3e      	ldr	r3, [pc, #248]	@ (800ac98 <HAL_RCC_OscConfig+0x618>)
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	4a3d      	ldr	r2, [pc, #244]	@ (800ac98 <HAL_RCC_OscConfig+0x618>)
 800aba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aba6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aba8:	f7fc fa02 	bl	8006fb0 <HAL_GetTick>
 800abac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abae:	e008      	b.n	800abc2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abb0:	f7fc f9fe 	bl	8006fb0 <HAL_GetTick>
 800abb4:	4602      	mov	r2, r0
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	1ad3      	subs	r3, r2, r3
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d901      	bls.n	800abc2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e066      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abc2:	4b35      	ldr	r3, [pc, #212]	@ (800ac98 <HAL_RCC_OscConfig+0x618>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d0f0      	beq.n	800abb0 <HAL_RCC_OscConfig+0x530>
 800abce:	e05e      	b.n	800ac8e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abd0:	4b31      	ldr	r3, [pc, #196]	@ (800ac98 <HAL_RCC_OscConfig+0x618>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a30      	ldr	r2, [pc, #192]	@ (800ac98 <HAL_RCC_OscConfig+0x618>)
 800abd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800abda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abdc:	f7fc f9e8 	bl	8006fb0 <HAL_GetTick>
 800abe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800abe2:	e008      	b.n	800abf6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abe4:	f7fc f9e4 	bl	8006fb0 <HAL_GetTick>
 800abe8:	4602      	mov	r2, r0
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	1ad3      	subs	r3, r2, r3
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d901      	bls.n	800abf6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800abf2:	2303      	movs	r3, #3
 800abf4:	e04c      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800abf6:	4b28      	ldr	r3, [pc, #160]	@ (800ac98 <HAL_RCC_OscConfig+0x618>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d1f0      	bne.n	800abe4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800ac02:	4b25      	ldr	r3, [pc, #148]	@ (800ac98 <HAL_RCC_OscConfig+0x618>)
 800ac04:	68da      	ldr	r2, [r3, #12]
 800ac06:	4924      	ldr	r1, [pc, #144]	@ (800ac98 <HAL_RCC_OscConfig+0x618>)
 800ac08:	4b25      	ldr	r3, [pc, #148]	@ (800aca0 <HAL_RCC_OscConfig+0x620>)
 800ac0a:	4013      	ands	r3, r2
 800ac0c:	60cb      	str	r3, [r1, #12]
 800ac0e:	e03e      	b.n	800ac8e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	69db      	ldr	r3, [r3, #28]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d101      	bne.n	800ac1c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e039      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800ac1c:	4b1e      	ldr	r3, [pc, #120]	@ (800ac98 <HAL_RCC_OscConfig+0x618>)
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	f003 0203 	and.w	r2, r3, #3
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6a1b      	ldr	r3, [r3, #32]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d12c      	bne.n	800ac8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d123      	bne.n	800ac8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d11b      	bne.n	800ac8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac5c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d113      	bne.n	800ac8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac6c:	085b      	lsrs	r3, r3, #1
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d109      	bne.n	800ac8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac80:	085b      	lsrs	r3, r3, #1
 800ac82:	3b01      	subs	r3, #1
 800ac84:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d001      	beq.n	800ac8e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e000      	b.n	800ac90 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3720      	adds	r7, #32
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	40021000 	.word	0x40021000
 800ac9c:	019f800c 	.word	0x019f800c
 800aca0:	feeefffc 	.word	0xfeeefffc

0800aca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b086      	sub	sp, #24
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800acae:	2300      	movs	r3, #0
 800acb0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d101      	bne.n	800acbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	e11e      	b.n	800aefa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800acbc:	4b91      	ldr	r3, [pc, #580]	@ (800af04 <HAL_RCC_ClockConfig+0x260>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f003 030f 	and.w	r3, r3, #15
 800acc4:	683a      	ldr	r2, [r7, #0]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d910      	bls.n	800acec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acca:	4b8e      	ldr	r3, [pc, #568]	@ (800af04 <HAL_RCC_ClockConfig+0x260>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f023 020f 	bic.w	r2, r3, #15
 800acd2:	498c      	ldr	r1, [pc, #560]	@ (800af04 <HAL_RCC_ClockConfig+0x260>)
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acda:	4b8a      	ldr	r3, [pc, #552]	@ (800af04 <HAL_RCC_ClockConfig+0x260>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 030f 	and.w	r3, r3, #15
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d001      	beq.n	800acec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ace8:	2301      	movs	r3, #1
 800acea:	e106      	b.n	800aefa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 0301 	and.w	r3, r3, #1
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d073      	beq.n	800ade0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	2b03      	cmp	r3, #3
 800acfe:	d129      	bne.n	800ad54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad00:	4b81      	ldr	r3, [pc, #516]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d101      	bne.n	800ad10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e0f4      	b.n	800aefa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800ad10:	f000 f9ba 	bl	800b088 <RCC_GetSysClockFreqFromPLLSource>
 800ad14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	4a7c      	ldr	r2, [pc, #496]	@ (800af0c <HAL_RCC_ClockConfig+0x268>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d93f      	bls.n	800ad9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ad1e:	4b7a      	ldr	r3, [pc, #488]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d009      	beq.n	800ad3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d033      	beq.n	800ad9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d12f      	bne.n	800ad9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ad3e:	4b72      	ldr	r3, [pc, #456]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad46:	4a70      	ldr	r2, [pc, #448]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800ad48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ad4e:	2380      	movs	r3, #128	@ 0x80
 800ad50:	617b      	str	r3, [r7, #20]
 800ad52:	e024      	b.n	800ad9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	2b02      	cmp	r3, #2
 800ad5a:	d107      	bne.n	800ad6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ad5c:	4b6a      	ldr	r3, [pc, #424]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d109      	bne.n	800ad7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e0c6      	b.n	800aefa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad6c:	4b66      	ldr	r3, [pc, #408]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d101      	bne.n	800ad7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e0be      	b.n	800aefa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ad7c:	f000 f8ce 	bl	800af1c <HAL_RCC_GetSysClockFreq>
 800ad80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	4a61      	ldr	r2, [pc, #388]	@ (800af0c <HAL_RCC_ClockConfig+0x268>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d909      	bls.n	800ad9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ad8a:	4b5f      	ldr	r3, [pc, #380]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad92:	4a5d      	ldr	r2, [pc, #372]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800ad94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ad9a:	2380      	movs	r3, #128	@ 0x80
 800ad9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ad9e:	4b5a      	ldr	r3, [pc, #360]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	f023 0203 	bic.w	r2, r3, #3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	4957      	ldr	r1, [pc, #348]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800adac:	4313      	orrs	r3, r2
 800adae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adb0:	f7fc f8fe 	bl	8006fb0 <HAL_GetTick>
 800adb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adb6:	e00a      	b.n	800adce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adb8:	f7fc f8fa 	bl	8006fb0 <HAL_GetTick>
 800adbc:	4602      	mov	r2, r0
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d901      	bls.n	800adce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800adca:	2303      	movs	r3, #3
 800adcc:	e095      	b.n	800aefa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adce:	4b4e      	ldr	r3, [pc, #312]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	f003 020c 	and.w	r2, r3, #12
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	429a      	cmp	r2, r3
 800adde:	d1eb      	bne.n	800adb8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 0302 	and.w	r3, r3, #2
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d023      	beq.n	800ae34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d005      	beq.n	800ae04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800adf8:	4b43      	ldr	r3, [pc, #268]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	4a42      	ldr	r2, [pc, #264]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800adfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ae02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f003 0308 	and.w	r3, r3, #8
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d007      	beq.n	800ae20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ae10:	4b3d      	ldr	r3, [pc, #244]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ae18:	4a3b      	ldr	r2, [pc, #236]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800ae1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ae1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae20:	4b39      	ldr	r3, [pc, #228]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	4936      	ldr	r1, [pc, #216]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	608b      	str	r3, [r1, #8]
 800ae32:	e008      	b.n	800ae46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	2b80      	cmp	r3, #128	@ 0x80
 800ae38:	d105      	bne.n	800ae46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ae3a:	4b33      	ldr	r3, [pc, #204]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	4a32      	ldr	r2, [pc, #200]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800ae40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ae44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae46:	4b2f      	ldr	r3, [pc, #188]	@ (800af04 <HAL_RCC_ClockConfig+0x260>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f003 030f 	and.w	r3, r3, #15
 800ae4e:	683a      	ldr	r2, [r7, #0]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d21d      	bcs.n	800ae90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae54:	4b2b      	ldr	r3, [pc, #172]	@ (800af04 <HAL_RCC_ClockConfig+0x260>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f023 020f 	bic.w	r2, r3, #15
 800ae5c:	4929      	ldr	r1, [pc, #164]	@ (800af04 <HAL_RCC_ClockConfig+0x260>)
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	4313      	orrs	r3, r2
 800ae62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ae64:	f7fc f8a4 	bl	8006fb0 <HAL_GetTick>
 800ae68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae6a:	e00a      	b.n	800ae82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae6c:	f7fc f8a0 	bl	8006fb0 <HAL_GetTick>
 800ae70:	4602      	mov	r2, r0
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d901      	bls.n	800ae82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e03b      	b.n	800aefa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae82:	4b20      	ldr	r3, [pc, #128]	@ (800af04 <HAL_RCC_ClockConfig+0x260>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f003 030f 	and.w	r3, r3, #15
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d1ed      	bne.n	800ae6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 0304 	and.w	r3, r3, #4
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d008      	beq.n	800aeae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae9c:	4b1a      	ldr	r3, [pc, #104]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	68db      	ldr	r3, [r3, #12]
 800aea8:	4917      	ldr	r1, [pc, #92]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 0308 	and.w	r3, r3, #8
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d009      	beq.n	800aece <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aeba:	4b13      	ldr	r3, [pc, #76]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	00db      	lsls	r3, r3, #3
 800aec8:	490f      	ldr	r1, [pc, #60]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800aeca:	4313      	orrs	r3, r2
 800aecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aece:	f000 f825 	bl	800af1c <HAL_RCC_GetSysClockFreq>
 800aed2:	4602      	mov	r2, r0
 800aed4:	4b0c      	ldr	r3, [pc, #48]	@ (800af08 <HAL_RCC_ClockConfig+0x264>)
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	091b      	lsrs	r3, r3, #4
 800aeda:	f003 030f 	and.w	r3, r3, #15
 800aede:	490c      	ldr	r1, [pc, #48]	@ (800af10 <HAL_RCC_ClockConfig+0x26c>)
 800aee0:	5ccb      	ldrb	r3, [r1, r3]
 800aee2:	f003 031f 	and.w	r3, r3, #31
 800aee6:	fa22 f303 	lsr.w	r3, r2, r3
 800aeea:	4a0a      	ldr	r2, [pc, #40]	@ (800af14 <HAL_RCC_ClockConfig+0x270>)
 800aeec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800aeee:	4b0a      	ldr	r3, [pc, #40]	@ (800af18 <HAL_RCC_ClockConfig+0x274>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fb ff10 	bl	8006d18 <HAL_InitTick>
 800aef8:	4603      	mov	r3, r0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3718      	adds	r7, #24
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	40022000 	.word	0x40022000
 800af08:	40021000 	.word	0x40021000
 800af0c:	04c4b400 	.word	0x04c4b400
 800af10:	08017400 	.word	0x08017400
 800af14:	20000004 	.word	0x20000004
 800af18:	20000008 	.word	0x20000008

0800af1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b087      	sub	sp, #28
 800af20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800af22:	4b2c      	ldr	r3, [pc, #176]	@ (800afd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	f003 030c 	and.w	r3, r3, #12
 800af2a:	2b04      	cmp	r3, #4
 800af2c:	d102      	bne.n	800af34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800af2e:	4b2a      	ldr	r3, [pc, #168]	@ (800afd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800af30:	613b      	str	r3, [r7, #16]
 800af32:	e047      	b.n	800afc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800af34:	4b27      	ldr	r3, [pc, #156]	@ (800afd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	f003 030c 	and.w	r3, r3, #12
 800af3c:	2b08      	cmp	r3, #8
 800af3e:	d102      	bne.n	800af46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800af40:	4b26      	ldr	r3, [pc, #152]	@ (800afdc <HAL_RCC_GetSysClockFreq+0xc0>)
 800af42:	613b      	str	r3, [r7, #16]
 800af44:	e03e      	b.n	800afc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800af46:	4b23      	ldr	r3, [pc, #140]	@ (800afd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	f003 030c 	and.w	r3, r3, #12
 800af4e:	2b0c      	cmp	r3, #12
 800af50:	d136      	bne.n	800afc0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800af52:	4b20      	ldr	r3, [pc, #128]	@ (800afd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	f003 0303 	and.w	r3, r3, #3
 800af5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800af5c:	4b1d      	ldr	r3, [pc, #116]	@ (800afd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	091b      	lsrs	r3, r3, #4
 800af62:	f003 030f 	and.w	r3, r3, #15
 800af66:	3301      	adds	r3, #1
 800af68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2b03      	cmp	r3, #3
 800af6e:	d10c      	bne.n	800af8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800af70:	4a1a      	ldr	r2, [pc, #104]	@ (800afdc <HAL_RCC_GetSysClockFreq+0xc0>)
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	fbb2 f3f3 	udiv	r3, r2, r3
 800af78:	4a16      	ldr	r2, [pc, #88]	@ (800afd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af7a:	68d2      	ldr	r2, [r2, #12]
 800af7c:	0a12      	lsrs	r2, r2, #8
 800af7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800af82:	fb02 f303 	mul.w	r3, r2, r3
 800af86:	617b      	str	r3, [r7, #20]
      break;
 800af88:	e00c      	b.n	800afa4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800af8a:	4a13      	ldr	r2, [pc, #76]	@ (800afd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af92:	4a10      	ldr	r2, [pc, #64]	@ (800afd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800af94:	68d2      	ldr	r2, [r2, #12]
 800af96:	0a12      	lsrs	r2, r2, #8
 800af98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800af9c:	fb02 f303 	mul.w	r3, r2, r3
 800afa0:	617b      	str	r3, [r7, #20]
      break;
 800afa2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800afa4:	4b0b      	ldr	r3, [pc, #44]	@ (800afd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	0e5b      	lsrs	r3, r3, #25
 800afaa:	f003 0303 	and.w	r3, r3, #3
 800afae:	3301      	adds	r3, #1
 800afb0:	005b      	lsls	r3, r3, #1
 800afb2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800afb4:	697a      	ldr	r2, [r7, #20]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800afbc:	613b      	str	r3, [r7, #16]
 800afbe:	e001      	b.n	800afc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800afc0:	2300      	movs	r3, #0
 800afc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800afc4:	693b      	ldr	r3, [r7, #16]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	371c      	adds	r7, #28
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	40021000 	.word	0x40021000
 800afd8:	00f42400 	.word	0x00f42400
 800afdc:	017d7840 	.word	0x017d7840

0800afe0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800afe0:	b480      	push	{r7}
 800afe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800afe4:	4b03      	ldr	r3, [pc, #12]	@ (800aff4 <HAL_RCC_GetHCLKFreq+0x14>)
 800afe6:	681b      	ldr	r3, [r3, #0]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	20000004 	.word	0x20000004

0800aff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800affc:	f7ff fff0 	bl	800afe0 <HAL_RCC_GetHCLKFreq>
 800b000:	4602      	mov	r2, r0
 800b002:	4b06      	ldr	r3, [pc, #24]	@ (800b01c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	0adb      	lsrs	r3, r3, #11
 800b008:	f003 0307 	and.w	r3, r3, #7
 800b00c:	4904      	ldr	r1, [pc, #16]	@ (800b020 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b00e:	5ccb      	ldrb	r3, [r1, r3]
 800b010:	f003 031f 	and.w	r3, r3, #31
 800b014:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b018:	4618      	mov	r0, r3
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	40021000 	.word	0x40021000
 800b020:	08017410 	.word	0x08017410

0800b024 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	220f      	movs	r2, #15
 800b032:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800b034:	4b12      	ldr	r3, [pc, #72]	@ (800b080 <HAL_RCC_GetClockConfig+0x5c>)
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	f003 0203 	and.w	r2, r3, #3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800b040:	4b0f      	ldr	r3, [pc, #60]	@ (800b080 <HAL_RCC_GetClockConfig+0x5c>)
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800b04c:	4b0c      	ldr	r3, [pc, #48]	@ (800b080 <HAL_RCC_GetClockConfig+0x5c>)
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800b058:	4b09      	ldr	r3, [pc, #36]	@ (800b080 <HAL_RCC_GetClockConfig+0x5c>)
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	08db      	lsrs	r3, r3, #3
 800b05e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800b066:	4b07      	ldr	r3, [pc, #28]	@ (800b084 <HAL_RCC_GetClockConfig+0x60>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f003 020f 	and.w	r2, r3, #15
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	601a      	str	r2, [r3, #0]
}
 800b072:	bf00      	nop
 800b074:	370c      	adds	r7, #12
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	40021000 	.word	0x40021000
 800b084:	40022000 	.word	0x40022000

0800b088 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b088:	b480      	push	{r7}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b08e:	4b1e      	ldr	r3, [pc, #120]	@ (800b108 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	f003 0303 	and.w	r3, r3, #3
 800b096:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b098:	4b1b      	ldr	r3, [pc, #108]	@ (800b108 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	091b      	lsrs	r3, r3, #4
 800b09e:	f003 030f 	and.w	r3, r3, #15
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	2b03      	cmp	r3, #3
 800b0aa:	d10c      	bne.n	800b0c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b0ac:	4a17      	ldr	r2, [pc, #92]	@ (800b10c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0b4:	4a14      	ldr	r2, [pc, #80]	@ (800b108 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b0b6:	68d2      	ldr	r2, [r2, #12]
 800b0b8:	0a12      	lsrs	r2, r2, #8
 800b0ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b0be:	fb02 f303 	mul.w	r3, r2, r3
 800b0c2:	617b      	str	r3, [r7, #20]
    break;
 800b0c4:	e00c      	b.n	800b0e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b0c6:	4a12      	ldr	r2, [pc, #72]	@ (800b110 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ce:	4a0e      	ldr	r2, [pc, #56]	@ (800b108 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b0d0:	68d2      	ldr	r2, [r2, #12]
 800b0d2:	0a12      	lsrs	r2, r2, #8
 800b0d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b0d8:	fb02 f303 	mul.w	r3, r2, r3
 800b0dc:	617b      	str	r3, [r7, #20]
    break;
 800b0de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b0e0:	4b09      	ldr	r3, [pc, #36]	@ (800b108 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	0e5b      	lsrs	r3, r3, #25
 800b0e6:	f003 0303 	and.w	r3, r3, #3
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	005b      	lsls	r3, r3, #1
 800b0ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b0f0:	697a      	ldr	r2, [r7, #20]
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b0fa:	687b      	ldr	r3, [r7, #4]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	371c      	adds	r7, #28
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	40021000 	.word	0x40021000
 800b10c:	017d7840 	.word	0x017d7840
 800b110:	00f42400 	.word	0x00f42400

0800b114 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b11c:	2300      	movs	r3, #0
 800b11e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b120:	2300      	movs	r3, #0
 800b122:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f000 8098 	beq.w	800b262 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b132:	2300      	movs	r3, #0
 800b134:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b136:	4b43      	ldr	r3, [pc, #268]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b13a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d10d      	bne.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b142:	4b40      	ldr	r3, [pc, #256]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b146:	4a3f      	ldr	r2, [pc, #252]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b14c:	6593      	str	r3, [r2, #88]	@ 0x58
 800b14e:	4b3d      	ldr	r3, [pc, #244]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b156:	60bb      	str	r3, [r7, #8]
 800b158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b15a:	2301      	movs	r3, #1
 800b15c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b15e:	4b3a      	ldr	r3, [pc, #232]	@ (800b248 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a39      	ldr	r2, [pc, #228]	@ (800b248 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b168:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b16a:	f7fb ff21 	bl	8006fb0 <HAL_GetTick>
 800b16e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b170:	e009      	b.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b172:	f7fb ff1d 	bl	8006fb0 <HAL_GetTick>
 800b176:	4602      	mov	r2, r0
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	1ad3      	subs	r3, r2, r3
 800b17c:	2b02      	cmp	r3, #2
 800b17e:	d902      	bls.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b180:	2303      	movs	r3, #3
 800b182:	74fb      	strb	r3, [r7, #19]
        break;
 800b184:	e005      	b.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b186:	4b30      	ldr	r3, [pc, #192]	@ (800b248 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d0ef      	beq.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b192:	7cfb      	ldrb	r3, [r7, #19]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d159      	bne.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b198:	4b2a      	ldr	r3, [pc, #168]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b19e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b1a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d01e      	beq.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d019      	beq.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b1b4:	4b23      	ldr	r3, [pc, #140]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b1be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b1c0:	4b20      	ldr	r3, [pc, #128]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1c6:	4a1f      	ldr	r2, [pc, #124]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b1cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b1d0:	4b1c      	ldr	r3, [pc, #112]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1d6:	4a1b      	ldr	r2, [pc, #108]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b1dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b1e0:	4a18      	ldr	r2, [pc, #96]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	f003 0301 	and.w	r3, r3, #1
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d016      	beq.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1f2:	f7fb fedd 	bl	8006fb0 <HAL_GetTick>
 800b1f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b1f8:	e00b      	b.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1fa:	f7fb fed9 	bl	8006fb0 <HAL_GetTick>
 800b1fe:	4602      	mov	r2, r0
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b208:	4293      	cmp	r3, r2
 800b20a:	d902      	bls.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b20c:	2303      	movs	r3, #3
 800b20e:	74fb      	strb	r3, [r7, #19]
            break;
 800b210:	e006      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b212:	4b0c      	ldr	r3, [pc, #48]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b218:	f003 0302 	and.w	r3, r3, #2
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d0ec      	beq.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b220:	7cfb      	ldrb	r3, [r7, #19]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d10b      	bne.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b226:	4b07      	ldr	r3, [pc, #28]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b22c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b234:	4903      	ldr	r1, [pc, #12]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b236:	4313      	orrs	r3, r2
 800b238:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800b23c:	e008      	b.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b23e:	7cfb      	ldrb	r3, [r7, #19]
 800b240:	74bb      	strb	r3, [r7, #18]
 800b242:	e005      	b.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b244:	40021000 	.word	0x40021000
 800b248:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b24c:	7cfb      	ldrb	r3, [r7, #19]
 800b24e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b250:	7c7b      	ldrb	r3, [r7, #17]
 800b252:	2b01      	cmp	r3, #1
 800b254:	d105      	bne.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b256:	4ba6      	ldr	r3, [pc, #664]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b25a:	4aa5      	ldr	r2, [pc, #660]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b25c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b260:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 0301 	and.w	r3, r3, #1
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00a      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b26e:	4ba0      	ldr	r3, [pc, #640]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b274:	f023 0203 	bic.w	r2, r3, #3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	499c      	ldr	r1, [pc, #624]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b27e:	4313      	orrs	r3, r2
 800b280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 0302 	and.w	r3, r3, #2
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00a      	beq.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b290:	4b97      	ldr	r3, [pc, #604]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b296:	f023 020c 	bic.w	r2, r3, #12
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	4994      	ldr	r1, [pc, #592]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f003 0304 	and.w	r3, r3, #4
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00a      	beq.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b2b2:	4b8f      	ldr	r3, [pc, #572]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	498b      	ldr	r1, [pc, #556]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 0308 	and.w	r3, r3, #8
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00a      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b2d4:	4b86      	ldr	r3, [pc, #536]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	691b      	ldr	r3, [r3, #16]
 800b2e2:	4983      	ldr	r1, [pc, #524]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 0320 	and.w	r3, r3, #32
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d00a      	beq.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b2f6:	4b7e      	ldr	r3, [pc, #504]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	497a      	ldr	r1, [pc, #488]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b306:	4313      	orrs	r3, r2
 800b308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00a      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b318:	4b75      	ldr	r3, [pc, #468]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b31a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b31e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	4972      	ldr	r1, [pc, #456]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b328:	4313      	orrs	r3, r2
 800b32a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00a      	beq.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b33a:	4b6d      	ldr	r3, [pc, #436]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b33c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b340:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	69db      	ldr	r3, [r3, #28]
 800b348:	4969      	ldr	r1, [pc, #420]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b34a:	4313      	orrs	r3, r2
 800b34c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00a      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b35c:	4b64      	ldr	r3, [pc, #400]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b35e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b362:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a1b      	ldr	r3, [r3, #32]
 800b36a:	4961      	ldr	r1, [pc, #388]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b36c:	4313      	orrs	r3, r2
 800b36e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00a      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b37e:	4b5c      	ldr	r3, [pc, #368]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b384:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b38c:	4958      	ldr	r1, [pc, #352]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b38e:	4313      	orrs	r3, r2
 800b390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d015      	beq.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b3a0:	4b53      	ldr	r3, [pc, #332]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ae:	4950      	ldr	r1, [pc, #320]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3be:	d105      	bne.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b3c0:	4b4b      	ldr	r3, [pc, #300]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	4a4a      	ldr	r2, [pc, #296]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b3ca:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d015      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b3d8:	4b45      	ldr	r3, [pc, #276]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3e6:	4942      	ldr	r1, [pc, #264]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b3f6:	d105      	bne.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b3f8:	4b3d      	ldr	r3, [pc, #244]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	4a3c      	ldr	r2, [pc, #240]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b402:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d015      	beq.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b410:	4b37      	ldr	r3, [pc, #220]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b416:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b41e:	4934      	ldr	r1, [pc, #208]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b420:	4313      	orrs	r3, r2
 800b422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b42a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b42e:	d105      	bne.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b430:	4b2f      	ldr	r3, [pc, #188]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	4a2e      	ldr	r2, [pc, #184]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b43a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b444:	2b00      	cmp	r3, #0
 800b446:	d015      	beq.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b448:	4b29      	ldr	r3, [pc, #164]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b44e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b456:	4926      	ldr	r1, [pc, #152]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b458:	4313      	orrs	r3, r2
 800b45a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b462:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b466:	d105      	bne.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b468:	4b21      	ldr	r3, [pc, #132]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	4a20      	ldr	r2, [pc, #128]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b46e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b472:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d015      	beq.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b480:	4b1b      	ldr	r3, [pc, #108]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b486:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b48e:	4918      	ldr	r1, [pc, #96]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b490:	4313      	orrs	r3, r2
 800b492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b49a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b49e:	d105      	bne.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b4a0:	4b13      	ldr	r3, [pc, #76]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	4a12      	ldr	r2, [pc, #72]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b4aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d015      	beq.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b4b8:	4b0d      	ldr	r3, [pc, #52]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4c6:	490a      	ldr	r1, [pc, #40]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4d6:	d105      	bne.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b4d8:	4b05      	ldr	r3, [pc, #20]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	4a04      	ldr	r2, [pc, #16]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b4e4:	7cbb      	ldrb	r3, [r7, #18]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3718      	adds	r7, #24
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	40021000 	.word	0x40021000

0800b4f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d101      	bne.n	800b506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b502:	2301      	movs	r3, #1
 800b504:	e049      	b.n	800b59a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d106      	bne.n	800b520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f841 	bl	800b5a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2202      	movs	r2, #2
 800b524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	3304      	adds	r3, #4
 800b530:	4619      	mov	r1, r3
 800b532:	4610      	mov	r0, r2
 800b534:	f000 fb8c 	bl	800bc50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2201      	movs	r2, #1
 800b554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b5a2:	b480      	push	{r7}
 800b5a4:	b083      	sub	sp, #12
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b5aa:	bf00      	nop
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
	...

0800b5b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d001      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e04a      	b.n	800b666 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2202      	movs	r2, #2
 800b5d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68da      	ldr	r2, [r3, #12]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f042 0201 	orr.w	r2, r2, #1
 800b5e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a21      	ldr	r2, [pc, #132]	@ (800b674 <HAL_TIM_Base_Start_IT+0xbc>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d018      	beq.n	800b624 <HAL_TIM_Base_Start_IT+0x6c>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5fa:	d013      	beq.n	800b624 <HAL_TIM_Base_Start_IT+0x6c>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a1d      	ldr	r2, [pc, #116]	@ (800b678 <HAL_TIM_Base_Start_IT+0xc0>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d00e      	beq.n	800b624 <HAL_TIM_Base_Start_IT+0x6c>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a1c      	ldr	r2, [pc, #112]	@ (800b67c <HAL_TIM_Base_Start_IT+0xc4>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d009      	beq.n	800b624 <HAL_TIM_Base_Start_IT+0x6c>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a1a      	ldr	r2, [pc, #104]	@ (800b680 <HAL_TIM_Base_Start_IT+0xc8>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d004      	beq.n	800b624 <HAL_TIM_Base_Start_IT+0x6c>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a19      	ldr	r2, [pc, #100]	@ (800b684 <HAL_TIM_Base_Start_IT+0xcc>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d115      	bne.n	800b650 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	689a      	ldr	r2, [r3, #8]
 800b62a:	4b17      	ldr	r3, [pc, #92]	@ (800b688 <HAL_TIM_Base_Start_IT+0xd0>)
 800b62c:	4013      	ands	r3, r2
 800b62e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2b06      	cmp	r3, #6
 800b634:	d015      	beq.n	800b662 <HAL_TIM_Base_Start_IT+0xaa>
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b63c:	d011      	beq.n	800b662 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f042 0201 	orr.w	r2, r2, #1
 800b64c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b64e:	e008      	b.n	800b662 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f042 0201 	orr.w	r2, r2, #1
 800b65e:	601a      	str	r2, [r3, #0]
 800b660:	e000      	b.n	800b664 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b662:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	3714      	adds	r7, #20
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	40012c00 	.word	0x40012c00
 800b678:	40000400 	.word	0x40000400
 800b67c:	40000800 	.word	0x40000800
 800b680:	40013400 	.word	0x40013400
 800b684:	40014000 	.word	0x40014000
 800b688:	00010007 	.word	0x00010007

0800b68c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d101      	bne.n	800b69e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	e049      	b.n	800b732 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d106      	bne.n	800b6b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f7fb fa64 	bl	8006b80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	3304      	adds	r3, #4
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	4610      	mov	r0, r2
 800b6cc:	f000 fac0 	bl	800bc50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2201      	movs	r2, #1
 800b704:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2201      	movs	r2, #1
 800b714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2201      	movs	r2, #1
 800b71c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2201      	movs	r2, #1
 800b724:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2201      	movs	r2, #1
 800b72c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b084      	sub	sp, #16
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	f003 0302 	and.w	r3, r3, #2
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d020      	beq.n	800b79e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f003 0302 	and.w	r3, r3, #2
 800b762:	2b00      	cmp	r3, #0
 800b764:	d01b      	beq.n	800b79e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f06f 0202 	mvn.w	r2, #2
 800b76e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2201      	movs	r2, #1
 800b774:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	699b      	ldr	r3, [r3, #24]
 800b77c:	f003 0303 	and.w	r3, r3, #3
 800b780:	2b00      	cmp	r3, #0
 800b782:	d003      	beq.n	800b78c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 fa45 	bl	800bc14 <HAL_TIM_IC_CaptureCallback>
 800b78a:	e005      	b.n	800b798 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fa37 	bl	800bc00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 fa48 	bl	800bc28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	f003 0304 	and.w	r3, r3, #4
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d020      	beq.n	800b7ea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f003 0304 	and.w	r3, r3, #4
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d01b      	beq.n	800b7ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f06f 0204 	mvn.w	r2, #4
 800b7ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2202      	movs	r2, #2
 800b7c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	699b      	ldr	r3, [r3, #24]
 800b7c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d003      	beq.n	800b7d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 fa1f 	bl	800bc14 <HAL_TIM_IC_CaptureCallback>
 800b7d6:	e005      	b.n	800b7e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 fa11 	bl	800bc00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 fa22 	bl	800bc28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	f003 0308 	and.w	r3, r3, #8
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d020      	beq.n	800b836 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f003 0308 	and.w	r3, r3, #8
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d01b      	beq.n	800b836 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f06f 0208 	mvn.w	r2, #8
 800b806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2204      	movs	r2, #4
 800b80c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	69db      	ldr	r3, [r3, #28]
 800b814:	f003 0303 	and.w	r3, r3, #3
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d003      	beq.n	800b824 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 f9f9 	bl	800bc14 <HAL_TIM_IC_CaptureCallback>
 800b822:	e005      	b.n	800b830 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 f9eb 	bl	800bc00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 f9fc 	bl	800bc28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	f003 0310 	and.w	r3, r3, #16
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d020      	beq.n	800b882 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f003 0310 	and.w	r3, r3, #16
 800b846:	2b00      	cmp	r3, #0
 800b848:	d01b      	beq.n	800b882 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f06f 0210 	mvn.w	r2, #16
 800b852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2208      	movs	r2, #8
 800b858:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	69db      	ldr	r3, [r3, #28]
 800b860:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b864:	2b00      	cmp	r3, #0
 800b866:	d003      	beq.n	800b870 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f000 f9d3 	bl	800bc14 <HAL_TIM_IC_CaptureCallback>
 800b86e:	e005      	b.n	800b87c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 f9c5 	bl	800bc00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 f9d6 	bl	800bc28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	f003 0301 	and.w	r3, r3, #1
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00c      	beq.n	800b8a6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f003 0301 	and.w	r3, r3, #1
 800b892:	2b00      	cmp	r3, #0
 800b894:	d007      	beq.n	800b8a6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f06f 0201 	mvn.w	r2, #1
 800b89e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f7fa ff73 	bl	800678c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d104      	bne.n	800b8ba <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00c      	beq.n	800b8d4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d007      	beq.n	800b8d4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b8cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fe68 	bl	800c5a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00c      	beq.n	800b8f8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d007      	beq.n	800b8f8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b8f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 fe60 	bl	800c5b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00c      	beq.n	800b91c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d007      	beq.n	800b91c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 f990 	bl	800bc3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	f003 0320 	and.w	r3, r3, #32
 800b922:	2b00      	cmp	r3, #0
 800b924:	d00c      	beq.n	800b940 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f003 0320 	and.w	r3, r3, #32
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d007      	beq.n	800b940 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f06f 0220 	mvn.w	r2, #32
 800b938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 fe28 	bl	800c590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00c      	beq.n	800b964 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b950:	2b00      	cmp	r3, #0
 800b952:	d007      	beq.n	800b964 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b95c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 fe34 	bl	800c5cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00c      	beq.n	800b988 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b974:	2b00      	cmp	r3, #0
 800b976:	d007      	beq.n	800b988 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fe2c 	bl	800c5e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d00c      	beq.n	800b9ac <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d007      	beq.n	800b9ac <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b9a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fe24 	bl	800c5f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d00c      	beq.n	800b9d0 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d007      	beq.n	800b9d0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b9c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fe1c 	bl	800c608 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b9d0:	bf00      	nop
 800b9d2:	3710      	adds	r7, #16
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b086      	sub	sp, #24
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d101      	bne.n	800b9f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	e0ff      	b.n	800bbf6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2b14      	cmp	r3, #20
 800ba02:	f200 80f0 	bhi.w	800bbe6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ba06:	a201      	add	r2, pc, #4	@ (adr r2, 800ba0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ba08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba0c:	0800ba61 	.word	0x0800ba61
 800ba10:	0800bbe7 	.word	0x0800bbe7
 800ba14:	0800bbe7 	.word	0x0800bbe7
 800ba18:	0800bbe7 	.word	0x0800bbe7
 800ba1c:	0800baa1 	.word	0x0800baa1
 800ba20:	0800bbe7 	.word	0x0800bbe7
 800ba24:	0800bbe7 	.word	0x0800bbe7
 800ba28:	0800bbe7 	.word	0x0800bbe7
 800ba2c:	0800bae3 	.word	0x0800bae3
 800ba30:	0800bbe7 	.word	0x0800bbe7
 800ba34:	0800bbe7 	.word	0x0800bbe7
 800ba38:	0800bbe7 	.word	0x0800bbe7
 800ba3c:	0800bb23 	.word	0x0800bb23
 800ba40:	0800bbe7 	.word	0x0800bbe7
 800ba44:	0800bbe7 	.word	0x0800bbe7
 800ba48:	0800bbe7 	.word	0x0800bbe7
 800ba4c:	0800bb65 	.word	0x0800bb65
 800ba50:	0800bbe7 	.word	0x0800bbe7
 800ba54:	0800bbe7 	.word	0x0800bbe7
 800ba58:	0800bbe7 	.word	0x0800bbe7
 800ba5c:	0800bba5 	.word	0x0800bba5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	68b9      	ldr	r1, [r7, #8]
 800ba66:	4618      	mov	r0, r3
 800ba68:	f000 f98e 	bl	800bd88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	699a      	ldr	r2, [r3, #24]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f042 0208 	orr.w	r2, r2, #8
 800ba7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	699a      	ldr	r2, [r3, #24]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f022 0204 	bic.w	r2, r2, #4
 800ba8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6999      	ldr	r1, [r3, #24]
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	691a      	ldr	r2, [r3, #16]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	430a      	orrs	r2, r1
 800ba9c:	619a      	str	r2, [r3, #24]
      break;
 800ba9e:	e0a5      	b.n	800bbec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	68b9      	ldr	r1, [r7, #8]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f000 f9fe 	bl	800bea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	699a      	ldr	r2, [r3, #24]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800baba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	699a      	ldr	r2, [r3, #24]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800baca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6999      	ldr	r1, [r3, #24]
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	021a      	lsls	r2, r3, #8
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	430a      	orrs	r2, r1
 800bade:	619a      	str	r2, [r3, #24]
      break;
 800bae0:	e084      	b.n	800bbec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	68b9      	ldr	r1, [r7, #8]
 800bae8:	4618      	mov	r0, r3
 800baea:	f000 fa67 	bl	800bfbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	69da      	ldr	r2, [r3, #28]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f042 0208 	orr.w	r2, r2, #8
 800bafc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	69da      	ldr	r2, [r3, #28]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f022 0204 	bic.w	r2, r2, #4
 800bb0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	69d9      	ldr	r1, [r3, #28]
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	691a      	ldr	r2, [r3, #16]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	430a      	orrs	r2, r1
 800bb1e:	61da      	str	r2, [r3, #28]
      break;
 800bb20:	e064      	b.n	800bbec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	68b9      	ldr	r1, [r7, #8]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f000 facf 	bl	800c0cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	69da      	ldr	r2, [r3, #28]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bb3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	69da      	ldr	r2, [r3, #28]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	69d9      	ldr	r1, [r3, #28]
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	691b      	ldr	r3, [r3, #16]
 800bb58:	021a      	lsls	r2, r3, #8
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	430a      	orrs	r2, r1
 800bb60:	61da      	str	r2, [r3, #28]
      break;
 800bb62:	e043      	b.n	800bbec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68b9      	ldr	r1, [r7, #8]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f000 fb38 	bl	800c1e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f042 0208 	orr.w	r2, r2, #8
 800bb7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f022 0204 	bic.w	r2, r2, #4
 800bb8e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	691a      	ldr	r2, [r3, #16]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	430a      	orrs	r2, r1
 800bba0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800bba2:	e023      	b.n	800bbec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	68b9      	ldr	r1, [r7, #8]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 fb7c 	bl	800c2a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bbbe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bbce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	021a      	lsls	r2, r3, #8
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	430a      	orrs	r2, r1
 800bbe2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800bbe4:	e002      	b.n	800bbec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	75fb      	strb	r3, [r7, #23]
      break;
 800bbea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bbf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3718      	adds	r7, #24
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop

0800bc00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc08:	bf00      	nop
 800bc0a:	370c      	adds	r7, #12
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc1c:	bf00      	nop
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc30:	bf00      	nop
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc44:	bf00      	nop
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	4a42      	ldr	r2, [pc, #264]	@ (800bd6c <TIM_Base_SetConfig+0x11c>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d00f      	beq.n	800bc88 <TIM_Base_SetConfig+0x38>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc6e:	d00b      	beq.n	800bc88 <TIM_Base_SetConfig+0x38>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4a3f      	ldr	r2, [pc, #252]	@ (800bd70 <TIM_Base_SetConfig+0x120>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d007      	beq.n	800bc88 <TIM_Base_SetConfig+0x38>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4a3e      	ldr	r2, [pc, #248]	@ (800bd74 <TIM_Base_SetConfig+0x124>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d003      	beq.n	800bc88 <TIM_Base_SetConfig+0x38>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4a3d      	ldr	r2, [pc, #244]	@ (800bd78 <TIM_Base_SetConfig+0x128>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d108      	bne.n	800bc9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4a33      	ldr	r2, [pc, #204]	@ (800bd6c <TIM_Base_SetConfig+0x11c>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d01b      	beq.n	800bcda <TIM_Base_SetConfig+0x8a>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bca8:	d017      	beq.n	800bcda <TIM_Base_SetConfig+0x8a>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4a30      	ldr	r2, [pc, #192]	@ (800bd70 <TIM_Base_SetConfig+0x120>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d013      	beq.n	800bcda <TIM_Base_SetConfig+0x8a>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	4a2f      	ldr	r2, [pc, #188]	@ (800bd74 <TIM_Base_SetConfig+0x124>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d00f      	beq.n	800bcda <TIM_Base_SetConfig+0x8a>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4a2e      	ldr	r2, [pc, #184]	@ (800bd78 <TIM_Base_SetConfig+0x128>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d00b      	beq.n	800bcda <TIM_Base_SetConfig+0x8a>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4a2d      	ldr	r2, [pc, #180]	@ (800bd7c <TIM_Base_SetConfig+0x12c>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d007      	beq.n	800bcda <TIM_Base_SetConfig+0x8a>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	4a2c      	ldr	r2, [pc, #176]	@ (800bd80 <TIM_Base_SetConfig+0x130>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d003      	beq.n	800bcda <TIM_Base_SetConfig+0x8a>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4a2b      	ldr	r2, [pc, #172]	@ (800bd84 <TIM_Base_SetConfig+0x134>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d108      	bne.n	800bcec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	4313      	orrs	r3, r2
 800bcea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	695b      	ldr	r3, [r3, #20]
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	689a      	ldr	r2, [r3, #8]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	4a16      	ldr	r2, [pc, #88]	@ (800bd6c <TIM_Base_SetConfig+0x11c>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d00f      	beq.n	800bd38 <TIM_Base_SetConfig+0xe8>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	4a17      	ldr	r2, [pc, #92]	@ (800bd78 <TIM_Base_SetConfig+0x128>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d00b      	beq.n	800bd38 <TIM_Base_SetConfig+0xe8>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4a16      	ldr	r2, [pc, #88]	@ (800bd7c <TIM_Base_SetConfig+0x12c>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d007      	beq.n	800bd38 <TIM_Base_SetConfig+0xe8>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4a15      	ldr	r2, [pc, #84]	@ (800bd80 <TIM_Base_SetConfig+0x130>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d003      	beq.n	800bd38 <TIM_Base_SetConfig+0xe8>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	4a14      	ldr	r2, [pc, #80]	@ (800bd84 <TIM_Base_SetConfig+0x134>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d103      	bne.n	800bd40 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	691a      	ldr	r2, [r3, #16]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2201      	movs	r2, #1
 800bd44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	f003 0301 	and.w	r3, r3, #1
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d105      	bne.n	800bd5e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	f023 0201 	bic.w	r2, r3, #1
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	611a      	str	r2, [r3, #16]
  }
}
 800bd5e:	bf00      	nop
 800bd60:	3714      	adds	r7, #20
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	40012c00 	.word	0x40012c00
 800bd70:	40000400 	.word	0x40000400
 800bd74:	40000800 	.word	0x40000800
 800bd78:	40013400 	.word	0x40013400
 800bd7c:	40014000 	.word	0x40014000
 800bd80:	40014400 	.word	0x40014400
 800bd84:	40014800 	.word	0x40014800

0800bd88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b087      	sub	sp, #28
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6a1b      	ldr	r3, [r3, #32]
 800bd96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a1b      	ldr	r3, [r3, #32]
 800bd9c:	f023 0201 	bic.w	r2, r3, #1
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	699b      	ldr	r3, [r3, #24]
 800bdae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bdb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bdba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f023 0303 	bic.w	r3, r3, #3
 800bdc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	f023 0302 	bic.w	r3, r3, #2
 800bdd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4a2c      	ldr	r2, [pc, #176]	@ (800be94 <TIM_OC1_SetConfig+0x10c>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d00f      	beq.n	800be08 <TIM_OC1_SetConfig+0x80>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4a2b      	ldr	r2, [pc, #172]	@ (800be98 <TIM_OC1_SetConfig+0x110>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d00b      	beq.n	800be08 <TIM_OC1_SetConfig+0x80>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4a2a      	ldr	r2, [pc, #168]	@ (800be9c <TIM_OC1_SetConfig+0x114>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d007      	beq.n	800be08 <TIM_OC1_SetConfig+0x80>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a29      	ldr	r2, [pc, #164]	@ (800bea0 <TIM_OC1_SetConfig+0x118>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d003      	beq.n	800be08 <TIM_OC1_SetConfig+0x80>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a28      	ldr	r2, [pc, #160]	@ (800bea4 <TIM_OC1_SetConfig+0x11c>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d10c      	bne.n	800be22 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	f023 0308 	bic.w	r3, r3, #8
 800be0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	697a      	ldr	r2, [r7, #20]
 800be16:	4313      	orrs	r3, r2
 800be18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	f023 0304 	bic.w	r3, r3, #4
 800be20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4a1b      	ldr	r2, [pc, #108]	@ (800be94 <TIM_OC1_SetConfig+0x10c>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d00f      	beq.n	800be4a <TIM_OC1_SetConfig+0xc2>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4a1a      	ldr	r2, [pc, #104]	@ (800be98 <TIM_OC1_SetConfig+0x110>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d00b      	beq.n	800be4a <TIM_OC1_SetConfig+0xc2>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4a19      	ldr	r2, [pc, #100]	@ (800be9c <TIM_OC1_SetConfig+0x114>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d007      	beq.n	800be4a <TIM_OC1_SetConfig+0xc2>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a18      	ldr	r2, [pc, #96]	@ (800bea0 <TIM_OC1_SetConfig+0x118>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d003      	beq.n	800be4a <TIM_OC1_SetConfig+0xc2>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4a17      	ldr	r2, [pc, #92]	@ (800bea4 <TIM_OC1_SetConfig+0x11c>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d111      	bne.n	800be6e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800be50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800be58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	695b      	ldr	r3, [r3, #20]
 800be5e:	693a      	ldr	r2, [r7, #16]
 800be60:	4313      	orrs	r3, r2
 800be62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	699b      	ldr	r3, [r3, #24]
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	4313      	orrs	r3, r2
 800be6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	693a      	ldr	r2, [r7, #16]
 800be72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	685a      	ldr	r2, [r3, #4]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	697a      	ldr	r2, [r7, #20]
 800be86:	621a      	str	r2, [r3, #32]
}
 800be88:	bf00      	nop
 800be8a:	371c      	adds	r7, #28
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr
 800be94:	40012c00 	.word	0x40012c00
 800be98:	40013400 	.word	0x40013400
 800be9c:	40014000 	.word	0x40014000
 800bea0:	40014400 	.word	0x40014400
 800bea4:	40014800 	.word	0x40014800

0800bea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b087      	sub	sp, #28
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6a1b      	ldr	r3, [r3, #32]
 800bebc:	f023 0210 	bic.w	r2, r3, #16
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	699b      	ldr	r3, [r3, #24]
 800bece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800beda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	021b      	lsls	r3, r3, #8
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	4313      	orrs	r3, r2
 800beee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	f023 0320 	bic.w	r3, r3, #32
 800bef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	011b      	lsls	r3, r3, #4
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a28      	ldr	r2, [pc, #160]	@ (800bfa8 <TIM_OC2_SetConfig+0x100>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d003      	beq.n	800bf14 <TIM_OC2_SetConfig+0x6c>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a27      	ldr	r2, [pc, #156]	@ (800bfac <TIM_OC2_SetConfig+0x104>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d10d      	bne.n	800bf30 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	011b      	lsls	r3, r3, #4
 800bf22:	697a      	ldr	r2, [r7, #20]
 800bf24:	4313      	orrs	r3, r2
 800bf26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	4a1d      	ldr	r2, [pc, #116]	@ (800bfa8 <TIM_OC2_SetConfig+0x100>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d00f      	beq.n	800bf58 <TIM_OC2_SetConfig+0xb0>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	4a1c      	ldr	r2, [pc, #112]	@ (800bfac <TIM_OC2_SetConfig+0x104>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d00b      	beq.n	800bf58 <TIM_OC2_SetConfig+0xb0>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	4a1b      	ldr	r2, [pc, #108]	@ (800bfb0 <TIM_OC2_SetConfig+0x108>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d007      	beq.n	800bf58 <TIM_OC2_SetConfig+0xb0>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4a1a      	ldr	r2, [pc, #104]	@ (800bfb4 <TIM_OC2_SetConfig+0x10c>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d003      	beq.n	800bf58 <TIM_OC2_SetConfig+0xb0>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4a19      	ldr	r2, [pc, #100]	@ (800bfb8 <TIM_OC2_SetConfig+0x110>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d113      	bne.n	800bf80 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bf5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bf66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	695b      	ldr	r3, [r3, #20]
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	693a      	ldr	r2, [r7, #16]
 800bf70:	4313      	orrs	r3, r2
 800bf72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	699b      	ldr	r3, [r3, #24]
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	693a      	ldr	r2, [r7, #16]
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	693a      	ldr	r2, [r7, #16]
 800bf84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	685a      	ldr	r2, [r3, #4]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	697a      	ldr	r2, [r7, #20]
 800bf98:	621a      	str	r2, [r3, #32]
}
 800bf9a:	bf00      	nop
 800bf9c:	371c      	adds	r7, #28
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	40012c00 	.word	0x40012c00
 800bfac:	40013400 	.word	0x40013400
 800bfb0:	40014000 	.word	0x40014000
 800bfb4:	40014400 	.word	0x40014400
 800bfb8:	40014800 	.word	0x40014800

0800bfbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b087      	sub	sp, #28
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6a1b      	ldr	r3, [r3, #32]
 800bfca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6a1b      	ldr	r3, [r3, #32]
 800bfd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	69db      	ldr	r3, [r3, #28]
 800bfe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bfea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f023 0303 	bic.w	r3, r3, #3
 800bff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68fa      	ldr	r2, [r7, #12]
 800bffe:	4313      	orrs	r3, r2
 800c000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	021b      	lsls	r3, r3, #8
 800c010:	697a      	ldr	r2, [r7, #20]
 800c012:	4313      	orrs	r3, r2
 800c014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4a27      	ldr	r2, [pc, #156]	@ (800c0b8 <TIM_OC3_SetConfig+0xfc>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d003      	beq.n	800c026 <TIM_OC3_SetConfig+0x6a>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4a26      	ldr	r2, [pc, #152]	@ (800c0bc <TIM_OC3_SetConfig+0x100>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d10d      	bne.n	800c042 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c02c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	021b      	lsls	r3, r3, #8
 800c034:	697a      	ldr	r2, [r7, #20]
 800c036:	4313      	orrs	r3, r2
 800c038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	4a1c      	ldr	r2, [pc, #112]	@ (800c0b8 <TIM_OC3_SetConfig+0xfc>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d00f      	beq.n	800c06a <TIM_OC3_SetConfig+0xae>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4a1b      	ldr	r2, [pc, #108]	@ (800c0bc <TIM_OC3_SetConfig+0x100>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d00b      	beq.n	800c06a <TIM_OC3_SetConfig+0xae>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	4a1a      	ldr	r2, [pc, #104]	@ (800c0c0 <TIM_OC3_SetConfig+0x104>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d007      	beq.n	800c06a <TIM_OC3_SetConfig+0xae>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	4a19      	ldr	r2, [pc, #100]	@ (800c0c4 <TIM_OC3_SetConfig+0x108>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d003      	beq.n	800c06a <TIM_OC3_SetConfig+0xae>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	4a18      	ldr	r2, [pc, #96]	@ (800c0c8 <TIM_OC3_SetConfig+0x10c>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d113      	bne.n	800c092 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	695b      	ldr	r3, [r3, #20]
 800c07e:	011b      	lsls	r3, r3, #4
 800c080:	693a      	ldr	r2, [r7, #16]
 800c082:	4313      	orrs	r3, r2
 800c084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	699b      	ldr	r3, [r3, #24]
 800c08a:	011b      	lsls	r3, r3, #4
 800c08c:	693a      	ldr	r2, [r7, #16]
 800c08e:	4313      	orrs	r3, r2
 800c090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	693a      	ldr	r2, [r7, #16]
 800c096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	685a      	ldr	r2, [r3, #4]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	697a      	ldr	r2, [r7, #20]
 800c0aa:	621a      	str	r2, [r3, #32]
}
 800c0ac:	bf00      	nop
 800c0ae:	371c      	adds	r7, #28
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr
 800c0b8:	40012c00 	.word	0x40012c00
 800c0bc:	40013400 	.word	0x40013400
 800c0c0:	40014000 	.word	0x40014000
 800c0c4:	40014400 	.word	0x40014400
 800c0c8:	40014800 	.word	0x40014800

0800c0cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b087      	sub	sp, #28
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6a1b      	ldr	r3, [r3, #32]
 800c0da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6a1b      	ldr	r3, [r3, #32]
 800c0e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	69db      	ldr	r3, [r3, #28]
 800c0f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c0fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	021b      	lsls	r3, r3, #8
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	4313      	orrs	r3, r2
 800c112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c11a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	031b      	lsls	r3, r3, #12
 800c122:	697a      	ldr	r2, [r7, #20]
 800c124:	4313      	orrs	r3, r2
 800c126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	4a28      	ldr	r2, [pc, #160]	@ (800c1cc <TIM_OC4_SetConfig+0x100>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d003      	beq.n	800c138 <TIM_OC4_SetConfig+0x6c>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4a27      	ldr	r2, [pc, #156]	@ (800c1d0 <TIM_OC4_SetConfig+0x104>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d10d      	bne.n	800c154 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c13e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	031b      	lsls	r3, r3, #12
 800c146:	697a      	ldr	r2, [r7, #20]
 800c148:	4313      	orrs	r3, r2
 800c14a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c152:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	4a1d      	ldr	r2, [pc, #116]	@ (800c1cc <TIM_OC4_SetConfig+0x100>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d00f      	beq.n	800c17c <TIM_OC4_SetConfig+0xb0>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4a1c      	ldr	r2, [pc, #112]	@ (800c1d0 <TIM_OC4_SetConfig+0x104>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d00b      	beq.n	800c17c <TIM_OC4_SetConfig+0xb0>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	4a1b      	ldr	r2, [pc, #108]	@ (800c1d4 <TIM_OC4_SetConfig+0x108>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d007      	beq.n	800c17c <TIM_OC4_SetConfig+0xb0>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4a1a      	ldr	r2, [pc, #104]	@ (800c1d8 <TIM_OC4_SetConfig+0x10c>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d003      	beq.n	800c17c <TIM_OC4_SetConfig+0xb0>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	4a19      	ldr	r2, [pc, #100]	@ (800c1dc <TIM_OC4_SetConfig+0x110>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d113      	bne.n	800c1a4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c182:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c18a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	695b      	ldr	r3, [r3, #20]
 800c190:	019b      	lsls	r3, r3, #6
 800c192:	693a      	ldr	r2, [r7, #16]
 800c194:	4313      	orrs	r3, r2
 800c196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	699b      	ldr	r3, [r3, #24]
 800c19c:	019b      	lsls	r3, r3, #6
 800c19e:	693a      	ldr	r2, [r7, #16]
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	693a      	ldr	r2, [r7, #16]
 800c1a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	685a      	ldr	r2, [r3, #4]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	697a      	ldr	r2, [r7, #20]
 800c1bc:	621a      	str	r2, [r3, #32]
}
 800c1be:	bf00      	nop
 800c1c0:	371c      	adds	r7, #28
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	40012c00 	.word	0x40012c00
 800c1d0:	40013400 	.word	0x40013400
 800c1d4:	40014000 	.word	0x40014000
 800c1d8:	40014400 	.word	0x40014400
 800c1dc:	40014800 	.word	0x40014800

0800c1e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b087      	sub	sp, #28
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6a1b      	ldr	r3, [r3, #32]
 800c1ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6a1b      	ldr	r3, [r3, #32]
 800c1f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c20e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	4313      	orrs	r3, r2
 800c21c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c224:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	041b      	lsls	r3, r3, #16
 800c22c:	693a      	ldr	r2, [r7, #16]
 800c22e:	4313      	orrs	r3, r2
 800c230:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	4a17      	ldr	r2, [pc, #92]	@ (800c294 <TIM_OC5_SetConfig+0xb4>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d00f      	beq.n	800c25a <TIM_OC5_SetConfig+0x7a>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4a16      	ldr	r2, [pc, #88]	@ (800c298 <TIM_OC5_SetConfig+0xb8>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d00b      	beq.n	800c25a <TIM_OC5_SetConfig+0x7a>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	4a15      	ldr	r2, [pc, #84]	@ (800c29c <TIM_OC5_SetConfig+0xbc>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d007      	beq.n	800c25a <TIM_OC5_SetConfig+0x7a>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4a14      	ldr	r2, [pc, #80]	@ (800c2a0 <TIM_OC5_SetConfig+0xc0>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d003      	beq.n	800c25a <TIM_OC5_SetConfig+0x7a>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4a13      	ldr	r2, [pc, #76]	@ (800c2a4 <TIM_OC5_SetConfig+0xc4>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d109      	bne.n	800c26e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c260:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	695b      	ldr	r3, [r3, #20]
 800c266:	021b      	lsls	r3, r3, #8
 800c268:	697a      	ldr	r2, [r7, #20]
 800c26a:	4313      	orrs	r3, r2
 800c26c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	697a      	ldr	r2, [r7, #20]
 800c272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	685a      	ldr	r2, [r3, #4]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	693a      	ldr	r2, [r7, #16]
 800c286:	621a      	str	r2, [r3, #32]
}
 800c288:	bf00      	nop
 800c28a:	371c      	adds	r7, #28
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr
 800c294:	40012c00 	.word	0x40012c00
 800c298:	40013400 	.word	0x40013400
 800c29c:	40014000 	.word	0x40014000
 800c2a0:	40014400 	.word	0x40014400
 800c2a4:	40014800 	.word	0x40014800

0800c2a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b087      	sub	sp, #28
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a1b      	ldr	r3, [r3, #32]
 800c2b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6a1b      	ldr	r3, [r3, #32]
 800c2bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c2d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	021b      	lsls	r3, r3, #8
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c2ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	051b      	lsls	r3, r3, #20
 800c2f6:	693a      	ldr	r2, [r7, #16]
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4a18      	ldr	r2, [pc, #96]	@ (800c360 <TIM_OC6_SetConfig+0xb8>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d00f      	beq.n	800c324 <TIM_OC6_SetConfig+0x7c>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4a17      	ldr	r2, [pc, #92]	@ (800c364 <TIM_OC6_SetConfig+0xbc>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d00b      	beq.n	800c324 <TIM_OC6_SetConfig+0x7c>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4a16      	ldr	r2, [pc, #88]	@ (800c368 <TIM_OC6_SetConfig+0xc0>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d007      	beq.n	800c324 <TIM_OC6_SetConfig+0x7c>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	4a15      	ldr	r2, [pc, #84]	@ (800c36c <TIM_OC6_SetConfig+0xc4>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d003      	beq.n	800c324 <TIM_OC6_SetConfig+0x7c>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	4a14      	ldr	r2, [pc, #80]	@ (800c370 <TIM_OC6_SetConfig+0xc8>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d109      	bne.n	800c338 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c32a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	695b      	ldr	r3, [r3, #20]
 800c330:	029b      	lsls	r3, r3, #10
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	4313      	orrs	r3, r2
 800c336:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	697a      	ldr	r2, [r7, #20]
 800c33c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	68fa      	ldr	r2, [r7, #12]
 800c342:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	685a      	ldr	r2, [r3, #4]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	693a      	ldr	r2, [r7, #16]
 800c350:	621a      	str	r2, [r3, #32]
}
 800c352:	bf00      	nop
 800c354:	371c      	adds	r7, #28
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	40012c00 	.word	0x40012c00
 800c364:	40013400 	.word	0x40013400
 800c368:	40014000 	.word	0x40014000
 800c36c:	40014400 	.word	0x40014400
 800c370:	40014800 	.word	0x40014800

0800c374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c384:	2b01      	cmp	r3, #1
 800c386:	d101      	bne.n	800c38c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c388:	2302      	movs	r3, #2
 800c38a:	e065      	b.n	800c458 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2202      	movs	r2, #2
 800c398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a2c      	ldr	r2, [pc, #176]	@ (800c464 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d004      	beq.n	800c3c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a2b      	ldr	r2, [pc, #172]	@ (800c468 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d108      	bne.n	800c3d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c3c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c3d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a1b      	ldr	r2, [pc, #108]	@ (800c464 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d018      	beq.n	800c42c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c402:	d013      	beq.n	800c42c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a18      	ldr	r2, [pc, #96]	@ (800c46c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d00e      	beq.n	800c42c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a17      	ldr	r2, [pc, #92]	@ (800c470 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d009      	beq.n	800c42c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a12      	ldr	r2, [pc, #72]	@ (800c468 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d004      	beq.n	800c42c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a13      	ldr	r2, [pc, #76]	@ (800c474 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d10c      	bne.n	800c446 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c432:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2201      	movs	r2, #1
 800c44a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3714      	adds	r7, #20
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr
 800c464:	40012c00 	.word	0x40012c00
 800c468:	40013400 	.word	0x40013400
 800c46c:	40000400 	.word	0x40000400
 800c470:	40000800 	.word	0x40000800
 800c474:	40014000 	.word	0x40014000

0800c478 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c482:	2300      	movs	r3, #0
 800c484:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d101      	bne.n	800c494 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c490:	2302      	movs	r3, #2
 800c492:	e073      	b.n	800c57c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	691b      	ldr	r3, [r3, #16]
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	695b      	ldr	r3, [r3, #20]
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	699b      	ldr	r3, [r3, #24]
 800c508:	041b      	lsls	r3, r3, #16
 800c50a:	4313      	orrs	r3, r2
 800c50c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	69db      	ldr	r3, [r3, #28]
 800c518:	4313      	orrs	r3, r2
 800c51a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a19      	ldr	r2, [pc, #100]	@ (800c588 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d004      	beq.n	800c530 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a18      	ldr	r2, [pc, #96]	@ (800c58c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d11c      	bne.n	800c56a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c53a:	051b      	lsls	r3, r3, #20
 800c53c:	4313      	orrs	r3, r2
 800c53e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	6a1b      	ldr	r3, [r3, #32]
 800c54a:	4313      	orrs	r3, r2
 800c54c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c558:	4313      	orrs	r3, r2
 800c55a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c566:	4313      	orrs	r3, r2
 800c568:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	68fa      	ldr	r2, [r7, #12]
 800c570:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3714      	adds	r7, #20
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr
 800c588:	40012c00 	.word	0x40012c00
 800c58c:	40013400 	.word	0x40013400

0800c590 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c598:	bf00      	nop
 800c59a:	370c      	adds	r7, #12
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr

0800c5a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c5ac:	bf00      	nop
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c5c0:	bf00      	nop
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c5d4:	bf00      	nop
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c5e8:	bf00      	nop
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c5fc:	bf00      	nop
 800c5fe:	370c      	adds	r7, #12
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr

0800c608 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c610:	bf00      	nop
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr

0800c61c <LL_DMA_ConfigTransfer>:
{
 800c61c:	b480      	push	{r7}
 800c61e:	b087      	sub	sp, #28
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800c62c:	4a0e      	ldr	r2, [pc, #56]	@ (800c668 <LL_DMA_ConfigTransfer+0x4c>)
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	4413      	add	r3, r2
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	461a      	mov	r2, r3
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	4413      	add	r3, r2
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800c640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c644:	4908      	ldr	r1, [pc, #32]	@ (800c668 <LL_DMA_ConfigTransfer+0x4c>)
 800c646:	68ba      	ldr	r2, [r7, #8]
 800c648:	440a      	add	r2, r1
 800c64a:	7812      	ldrb	r2, [r2, #0]
 800c64c:	4611      	mov	r1, r2
 800c64e:	697a      	ldr	r2, [r7, #20]
 800c650:	440a      	add	r2, r1
 800c652:	4611      	mov	r1, r2
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	4313      	orrs	r3, r2
 800c658:	600b      	str	r3, [r1, #0]
}
 800c65a:	bf00      	nop
 800c65c:	371c      	adds	r7, #28
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr
 800c666:	bf00      	nop
 800c668:	08017418 	.word	0x08017418

0800c66c <LL_DMA_SetDataLength>:
{
 800c66c:	b480      	push	{r7}
 800c66e:	b087      	sub	sp, #28
 800c670:	af00      	add	r7, sp, #0
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800c67c:	4a0d      	ldr	r2, [pc, #52]	@ (800c6b4 <LL_DMA_SetDataLength+0x48>)
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	4413      	add	r3, r2
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	461a      	mov	r2, r3
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	4413      	add	r3, r2
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	0c1b      	lsrs	r3, r3, #16
 800c68e:	041b      	lsls	r3, r3, #16
 800c690:	4908      	ldr	r1, [pc, #32]	@ (800c6b4 <LL_DMA_SetDataLength+0x48>)
 800c692:	68ba      	ldr	r2, [r7, #8]
 800c694:	440a      	add	r2, r1
 800c696:	7812      	ldrb	r2, [r2, #0]
 800c698:	4611      	mov	r1, r2
 800c69a:	697a      	ldr	r2, [r7, #20]
 800c69c:	440a      	add	r2, r1
 800c69e:	4611      	mov	r1, r2
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	604b      	str	r3, [r1, #4]
}
 800c6a6:	bf00      	nop
 800c6a8:	371c      	adds	r7, #28
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	08017418 	.word	0x08017418

0800c6b8 <LL_DMA_SetMemoryAddress>:
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b087      	sub	sp, #28
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	60f8      	str	r0, [r7, #12]
 800c6c0:	60b9      	str	r1, [r7, #8]
 800c6c2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 800c6c8:	4a07      	ldr	r2, [pc, #28]	@ (800c6e8 <LL_DMA_SetMemoryAddress+0x30>)
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	60d3      	str	r3, [r2, #12]
}
 800c6dc:	bf00      	nop
 800c6de:	371c      	adds	r7, #28
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr
 800c6e8:	08017418 	.word	0x08017418

0800c6ec <LL_DMA_SetPeriphAddress>:
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b087      	sub	sp, #28
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800c6fc:	4a07      	ldr	r2, [pc, #28]	@ (800c71c <LL_DMA_SetPeriphAddress+0x30>)
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	4413      	add	r3, r2
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	461a      	mov	r2, r3
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	4413      	add	r3, r2
 800c70a:	461a      	mov	r2, r3
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6093      	str	r3, [r2, #8]
}
 800c710:	bf00      	nop
 800c712:	371c      	adds	r7, #28
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr
 800c71c:	08017418 	.word	0x08017418

0800c720 <LL_DMA_SetPeriphRequest>:
{
 800c720:	b480      	push	{r7}
 800c722:	b087      	sub	sp, #28
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	0a9b      	lsrs	r3, r3, #10
 800c730:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800c734:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 800c738:	00db      	lsls	r3, r3, #3
 800c73a:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	4413      	add	r3, r2
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c748:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800c752:	68ba      	ldr	r2, [r7, #8]
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	4413      	add	r3, r2
 800c758:	009b      	lsls	r3, r3, #2
 800c75a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c75e:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	430a      	orrs	r2, r1
 800c766:	601a      	str	r2, [r3, #0]
}
 800c768:	bf00      	nop
 800c76a:	371c      	adds	r7, #28
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800c788:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800c78e:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800c794:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800c79a:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800c7a0:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	68b9      	ldr	r1, [r7, #8]
 800c7ac:	68f8      	ldr	r0, [r7, #12]
 800c7ae:	f7ff ff35 	bl	800c61c <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	68b9      	ldr	r1, [r7, #8]
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f7ff ff7c 	bl	800c6b8 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	68b9      	ldr	r1, [r7, #8]
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	f7ff ff8f 	bl	800c6ec <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a1b      	ldr	r3, [r3, #32]
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	68b9      	ldr	r1, [r7, #8]
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f7ff ff48 	bl	800c66c <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	68b9      	ldr	r1, [r7, #8]
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f7ff ff9b 	bl	800c720 <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 800c7ea:	2300      	movs	r3, #0
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3710      	adds	r7, #16
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = (uint32_t)0x00000000U;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = (uint32_t)0x00000000U;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2200      	movs	r2, #0
 800c81e:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = (uint32_t)0x00000000U;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2200      	movs	r2, #0
 800c836:	625a      	str	r2, [r3, #36]	@ 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2200      	movs	r2, #0
 800c83c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c83e:	bf00      	nop
 800c840:	370c      	adds	r7, #12
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr

0800c84a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800c84a:	b480      	push	{r7}
 800c84c:	b08b      	sub	sp, #44	@ 0x2c
 800c84e:	af00      	add	r7, sp, #0
 800c850:	60f8      	str	r0, [r7, #12]
 800c852:	60b9      	str	r1, [r7, #8]
 800c854:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	fa93 f3a3 	rbit	r3, r3
 800c864:	613b      	str	r3, [r7, #16]
  return result;
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d101      	bne.n	800c874 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800c870:	2320      	movs	r3, #32
 800c872:	e003      	b.n	800c87c <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	fab3 f383 	clz	r3, r3
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	005b      	lsls	r3, r3, #1
 800c87e:	2103      	movs	r1, #3
 800c880:	fa01 f303 	lsl.w	r3, r1, r3
 800c884:	43db      	mvns	r3, r3
 800c886:	401a      	ands	r2, r3
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c88c:	6a3b      	ldr	r3, [r7, #32]
 800c88e:	fa93 f3a3 	rbit	r3, r3
 800c892:	61fb      	str	r3, [r7, #28]
  return result;
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d101      	bne.n	800c8a2 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800c89e:	2320      	movs	r3, #32
 800c8a0:	e003      	b.n	800c8aa <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a4:	fab3 f383 	clz	r3, r3
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	005b      	lsls	r3, r3, #1
 800c8ac:	6879      	ldr	r1, [r7, #4]
 800c8ae:	fa01 f303 	lsl.w	r3, r1, r3
 800c8b2:	431a      	orrs	r2, r3
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	601a      	str	r2, [r3, #0]
}
 800c8b8:	bf00      	nop
 800c8ba:	372c      	adds	r7, #44	@ 0x2c
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b085      	sub	sp, #20
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	685a      	ldr	r2, [r3, #4]
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	43db      	mvns	r3, r3
 800c8d8:	401a      	ands	r2, r3
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	6879      	ldr	r1, [r7, #4]
 800c8de:	fb01 f303 	mul.w	r3, r1, r3
 800c8e2:	431a      	orrs	r2, r3
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	605a      	str	r2, [r3, #4]
}
 800c8e8:	bf00      	nop
 800c8ea:	3714      	adds	r7, #20
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b08b      	sub	sp, #44	@ 0x2c
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	689a      	ldr	r2, [r3, #8]
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	fa93 f3a3 	rbit	r3, r3
 800c90e:	613b      	str	r3, [r7, #16]
  return result;
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c914:	69bb      	ldr	r3, [r7, #24]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d101      	bne.n	800c91e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800c91a:	2320      	movs	r3, #32
 800c91c:	e003      	b.n	800c926 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	fab3 f383 	clz	r3, r3
 800c924:	b2db      	uxtb	r3, r3
 800c926:	005b      	lsls	r3, r3, #1
 800c928:	2103      	movs	r1, #3
 800c92a:	fa01 f303 	lsl.w	r3, r1, r3
 800c92e:	43db      	mvns	r3, r3
 800c930:	401a      	ands	r2, r3
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c936:	6a3b      	ldr	r3, [r7, #32]
 800c938:	fa93 f3a3 	rbit	r3, r3
 800c93c:	61fb      	str	r3, [r7, #28]
  return result;
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c944:	2b00      	cmp	r3, #0
 800c946:	d101      	bne.n	800c94c <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800c948:	2320      	movs	r3, #32
 800c94a:	e003      	b.n	800c954 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800c94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94e:	fab3 f383 	clz	r3, r3
 800c952:	b2db      	uxtb	r3, r3
 800c954:	005b      	lsls	r3, r3, #1
 800c956:	6879      	ldr	r1, [r7, #4]
 800c958:	fa01 f303 	lsl.w	r3, r1, r3
 800c95c:	431a      	orrs	r2, r3
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800c962:	bf00      	nop
 800c964:	372c      	adds	r7, #44	@ 0x2c
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr

0800c96e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800c96e:	b480      	push	{r7}
 800c970:	b08b      	sub	sp, #44	@ 0x2c
 800c972:	af00      	add	r7, sp, #0
 800c974:	60f8      	str	r0, [r7, #12]
 800c976:	60b9      	str	r1, [r7, #8]
 800c978:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	68da      	ldr	r2, [r3, #12]
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	fa93 f3a3 	rbit	r3, r3
 800c988:	613b      	str	r3, [r7, #16]
  return result;
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d101      	bne.n	800c998 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800c994:	2320      	movs	r3, #32
 800c996:	e003      	b.n	800c9a0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	fab3 f383 	clz	r3, r3
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	005b      	lsls	r3, r3, #1
 800c9a2:	2103      	movs	r1, #3
 800c9a4:	fa01 f303 	lsl.w	r3, r1, r3
 800c9a8:	43db      	mvns	r3, r3
 800c9aa:	401a      	ands	r2, r3
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c9b0:	6a3b      	ldr	r3, [r7, #32]
 800c9b2:	fa93 f3a3 	rbit	r3, r3
 800c9b6:	61fb      	str	r3, [r7, #28]
  return result;
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d101      	bne.n	800c9c6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800c9c2:	2320      	movs	r3, #32
 800c9c4:	e003      	b.n	800c9ce <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800c9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c8:	fab3 f383 	clz	r3, r3
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	005b      	lsls	r3, r3, #1
 800c9d0:	6879      	ldr	r1, [r7, #4]
 800c9d2:	fa01 f303 	lsl.w	r3, r1, r3
 800c9d6:	431a      	orrs	r2, r3
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	60da      	str	r2, [r3, #12]
}
 800c9dc:	bf00      	nop
 800c9de:	372c      	adds	r7, #44	@ 0x2c
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b08b      	sub	sp, #44	@ 0x2c
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6a1a      	ldr	r2, [r3, #32]
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	fa93 f3a3 	rbit	r3, r3
 800ca02:	613b      	str	r3, [r7, #16]
  return result;
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ca08:	69bb      	ldr	r3, [r7, #24]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d101      	bne.n	800ca12 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800ca0e:	2320      	movs	r3, #32
 800ca10:	e003      	b.n	800ca1a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	fab3 f383 	clz	r3, r3
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	210f      	movs	r1, #15
 800ca1e:	fa01 f303 	lsl.w	r3, r1, r3
 800ca22:	43db      	mvns	r3, r3
 800ca24:	401a      	ands	r2, r3
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ca2a:	6a3b      	ldr	r3, [r7, #32]
 800ca2c:	fa93 f3a3 	rbit	r3, r3
 800ca30:	61fb      	str	r3, [r7, #28]
  return result;
 800ca32:	69fb      	ldr	r3, [r7, #28]
 800ca34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ca36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d101      	bne.n	800ca40 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800ca3c:	2320      	movs	r3, #32
 800ca3e:	e003      	b.n	800ca48 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800ca40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca42:	fab3 f383 	clz	r3, r3
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	6879      	ldr	r1, [r7, #4]
 800ca4c:	fa01 f303 	lsl.w	r3, r1, r3
 800ca50:	431a      	orrs	r2, r3
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800ca56:	bf00      	nop
 800ca58:	372c      	adds	r7, #44	@ 0x2c
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr

0800ca62 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ca62:	b480      	push	{r7}
 800ca64:	b08b      	sub	sp, #44	@ 0x2c
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	60f8      	str	r0, [r7, #12]
 800ca6a:	60b9      	str	r1, [r7, #8]
 800ca6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	0a1b      	lsrs	r3, r3, #8
 800ca76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	fa93 f3a3 	rbit	r3, r3
 800ca7e:	613b      	str	r3, [r7, #16]
  return result;
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ca84:	69bb      	ldr	r3, [r7, #24]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d101      	bne.n	800ca8e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800ca8a:	2320      	movs	r3, #32
 800ca8c:	e003      	b.n	800ca96 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800ca8e:	69bb      	ldr	r3, [r7, #24]
 800ca90:	fab3 f383 	clz	r3, r3
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	009b      	lsls	r3, r3, #2
 800ca98:	210f      	movs	r1, #15
 800ca9a:	fa01 f303 	lsl.w	r3, r1, r3
 800ca9e:	43db      	mvns	r3, r3
 800caa0:	401a      	ands	r2, r3
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	0a1b      	lsrs	r3, r3, #8
 800caa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800caa8:	6a3b      	ldr	r3, [r7, #32]
 800caaa:	fa93 f3a3 	rbit	r3, r3
 800caae:	61fb      	str	r3, [r7, #28]
  return result;
 800cab0:	69fb      	ldr	r3, [r7, #28]
 800cab2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800cab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d101      	bne.n	800cabe <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800caba:	2320      	movs	r3, #32
 800cabc:	e003      	b.n	800cac6 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800cabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac0:	fab3 f383 	clz	r3, r3
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	6879      	ldr	r1, [r7, #4]
 800caca:	fa01 f303 	lsl.w	r3, r1, r3
 800cace:	431a      	orrs	r2, r3
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800cad4:	bf00      	nop
 800cad6:	372c      	adds	r7, #44	@ 0x2c
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b088      	sub	sp, #32
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	fa93 f3a3 	rbit	r3, r3
 800caf6:	60fb      	str	r3, [r7, #12]
  return result;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d101      	bne.n	800cb06 <LL_GPIO_Init+0x26>
    return 32U;
 800cb02:	2320      	movs	r3, #32
 800cb04:	e003      	b.n	800cb0e <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	fab3 f383 	clz	r3, r3
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800cb10:	e048      	b.n	800cba4 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	2101      	movs	r1, #1
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	fa01 f303 	lsl.w	r3, r1, r3
 800cb1e:	4013      	ands	r3, r2
 800cb20:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d03a      	beq.n	800cb9e <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d003      	beq.n	800cb38 <LL_GPIO_Init+0x58>
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	2b02      	cmp	r3, #2
 800cb36:	d10e      	bne.n	800cb56 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	69b9      	ldr	r1, [r7, #24]
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f7ff fed7 	bl	800c8f4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	6819      	ldr	r1, [r3, #0]
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	461a      	mov	r2, r3
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f7ff feb7 	bl	800c8c4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	691b      	ldr	r3, [r3, #16]
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	69b9      	ldr	r1, [r7, #24]
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f7ff ff05 	bl	800c96e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	d111      	bne.n	800cb90 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800cb6c:	69bb      	ldr	r3, [r7, #24]
 800cb6e:	2bff      	cmp	r3, #255	@ 0xff
 800cb70:	d807      	bhi.n	800cb82 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	695b      	ldr	r3, [r3, #20]
 800cb76:	461a      	mov	r2, r3
 800cb78:	69b9      	ldr	r1, [r7, #24]
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7ff ff34 	bl	800c9e8 <LL_GPIO_SetAFPin_0_7>
 800cb80:	e006      	b.n	800cb90 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	695b      	ldr	r3, [r3, #20]
 800cb86:	461a      	mov	r2, r3
 800cb88:	69b9      	ldr	r1, [r7, #24]
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff ff69 	bl	800ca62 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	461a      	mov	r2, r3
 800cb96:	69b9      	ldr	r1, [r7, #24]
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f7ff fe56 	bl	800c84a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	3301      	adds	r3, #1
 800cba2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	681a      	ldr	r2, [r3, #0]
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	fa22 f303 	lsr.w	r3, r2, r3
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d1af      	bne.n	800cb12 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3720      	adds	r7, #32
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	601a      	str	r2, [r3, #0]
}
 800cbd0:	bf00      	nop
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <LL_APB1_GRP2_EnableClock>:
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b085      	sub	sp, #20
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800cbe4:	4b08      	ldr	r3, [pc, #32]	@ (800cc08 <LL_APB1_GRP2_EnableClock+0x2c>)
 800cbe6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cbe8:	4907      	ldr	r1, [pc, #28]	@ (800cc08 <LL_APB1_GRP2_EnableClock+0x2c>)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4313      	orrs	r3, r2
 800cbee:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800cbf0:	4b05      	ldr	r3, [pc, #20]	@ (800cc08 <LL_APB1_GRP2_EnableClock+0x2c>)
 800cbf2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	4013      	ands	r3, r2
 800cbf8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
}
 800cbfc:	bf00      	nop
 800cbfe:	3714      	adds	r7, #20
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr
 800cc08:	40021000 	.word	0x40021000

0800cc0c <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, const LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	4a11      	ldr	r2, [pc, #68]	@ (800cc60 <LL_UCPD_Init+0x54>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d103      	bne.n	800cc26 <LL_UCPD_Init+0x1a>
  {
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800cc1e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800cc22:	f7ff ffdb 	bl	800cbdc <LL_APB1_GRP2_EnableClock>
  }


  LL_UCPD_Disable(UCPDx);
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f7ff ffc8 	bl	800cbbc <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	4b0c      	ldr	r3, [pc, #48]	@ (800cc64 <LL_UCPD_Init+0x58>)
 800cc32:	4013      	ands	r3, r2
 800cc34:	683a      	ldr	r2, [r7, #0]
 800cc36:	6811      	ldr	r1, [r2, #0]
 800cc38:	683a      	ldr	r2, [r7, #0]
 800cc3a:	6852      	ldr	r2, [r2, #4]
 800cc3c:	02d2      	lsls	r2, r2, #11
 800cc3e:	4311      	orrs	r1, r2
 800cc40:	683a      	ldr	r2, [r7, #0]
 800cc42:	6892      	ldr	r2, [r2, #8]
 800cc44:	0192      	lsls	r2, r2, #6
 800cc46:	4311      	orrs	r1, r2
 800cc48:	683a      	ldr	r2, [r7, #0]
 800cc4a:	68d2      	ldr	r2, [r2, #12]
 800cc4c:	430a      	orrs	r2, r1
 800cc4e:	431a      	orrs	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800cc54:	2300      	movs	r3, #0
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3708      	adds	r7, #8
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	4000a000 	.word	0x4000a000
 800cc64:	fff10000 	.word	0xfff10000

0800cc68 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800cc76:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2207      	movs	r2, #7
 800cc7c:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2210      	movs	r2, #16
 800cc82:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	220d      	movs	r2, #13
 800cc88:	60da      	str	r2, [r3, #12]
}
 800cc8a:	bf00      	nop
 800cc8c:	370c      	adds	r7, #12
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr

0800cc96 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800cc96:	b480      	push	{r7}
 800cc98:	b085      	sub	sp, #20
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2200      	movs	r2, #0
 800cca2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cca6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800ccaa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	b29a      	uxth	r2, r3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ccb6:	2300      	movs	r3, #0
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3714      	adds	r7, #20
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cccc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800ccd0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800ccd8:	b29a      	uxth	r2, r3
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	43db      	mvns	r3, r3
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	4013      	ands	r3, r2
 800cce4:	b29a      	uxth	r2, r3
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ccec:	2300      	movs	r3, #0
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3714      	adds	r7, #20
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf8:	4770      	bx	lr

0800ccfa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ccfa:	b480      	push	{r7}
 800ccfc:	b085      	sub	sp, #20
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	60f8      	str	r0, [r7, #12]
 800cd02:	1d3b      	adds	r3, r7, #4
 800cd04:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2200      	movs	r2, #0
 800cd24:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800cd28:	2300      	movs	r3, #0
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3714      	adds	r7, #20
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr
	...

0800cd38 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b0a7      	sub	sp, #156	@ 0x9c
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800cd42:	2300      	movs	r3, #0
 800cd44:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	4413      	add	r3, r2
 800cd52:	881b      	ldrh	r3, [r3, #0]
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800cd5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd5e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	78db      	ldrb	r3, [r3, #3]
 800cd66:	2b03      	cmp	r3, #3
 800cd68:	d81f      	bhi.n	800cdaa <USB_ActivateEndpoint+0x72>
 800cd6a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd70 <USB_ActivateEndpoint+0x38>)
 800cd6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd70:	0800cd81 	.word	0x0800cd81
 800cd74:	0800cd9d 	.word	0x0800cd9d
 800cd78:	0800cdb3 	.word	0x0800cdb3
 800cd7c:	0800cd8f 	.word	0x0800cd8f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800cd80:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800cd84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cd88:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800cd8c:	e012      	b.n	800cdb4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800cd8e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800cd92:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800cd96:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800cd9a:	e00b      	b.n	800cdb4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800cd9c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800cda0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cda4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800cda8:	e004      	b.n	800cdb4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800cdb0:	e000      	b.n	800cdb4 <USB_ActivateEndpoint+0x7c>
      break;
 800cdb2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800cdb4:	687a      	ldr	r2, [r7, #4]
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	441a      	add	r2, r3
 800cdbe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800cdc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	009b      	lsls	r3, r3, #2
 800cdde:	4413      	add	r3, r2
 800cde0:	881b      	ldrh	r3, [r3, #0]
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	b21b      	sxth	r3, r3
 800cde6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdee:	b21a      	sxth	r2, r3
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	b21b      	sxth	r3, r3
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	b21b      	sxth	r3, r3
 800cdfa:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	441a      	add	r2, r3
 800ce08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800ce0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	7b1b      	ldrb	r3, [r3, #12]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f040 8180 	bne.w	800d12a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	785b      	ldrb	r3, [r3, #1]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	f000 8084 	beq.w	800cf3c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	61bb      	str	r3, [r7, #24]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	461a      	mov	r2, r3
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	4413      	add	r3, r2
 800ce46:	61bb      	str	r3, [r7, #24]
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	00da      	lsls	r2, r3, #3
 800ce4e:	69bb      	ldr	r3, [r7, #24]
 800ce50:	4413      	add	r3, r2
 800ce52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ce56:	617b      	str	r3, [r7, #20]
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	88db      	ldrh	r3, [r3, #6]
 800ce5c:	085b      	lsrs	r3, r3, #1
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	005b      	lsls	r3, r3, #1
 800ce62:	b29a      	uxth	r2, r3
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	4413      	add	r3, r2
 800ce72:	881b      	ldrh	r3, [r3, #0]
 800ce74:	827b      	strh	r3, [r7, #18]
 800ce76:	8a7b      	ldrh	r3, [r7, #18]
 800ce78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d01b      	beq.n	800ceb8 <USB_ActivateEndpoint+0x180>
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	4413      	add	r3, r2
 800ce8a:	881b      	ldrh	r3, [r3, #0]
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce96:	823b      	strh	r3, [r7, #16]
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	441a      	add	r2, r3
 800cea2:	8a3b      	ldrh	r3, [r7, #16]
 800cea4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cea8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ceac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ceb0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ceb4:	b29b      	uxth	r3, r3
 800ceb6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	78db      	ldrb	r3, [r3, #3]
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	d020      	beq.n	800cf02 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	4413      	add	r3, r2
 800ceca:	881b      	ldrh	r3, [r3, #0]
 800cecc:	b29b      	uxth	r3, r3
 800cece:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ced2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ced6:	81bb      	strh	r3, [r7, #12]
 800ced8:	89bb      	ldrh	r3, [r7, #12]
 800ceda:	f083 0320 	eor.w	r3, r3, #32
 800cede:	81bb      	strh	r3, [r7, #12]
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	441a      	add	r2, r3
 800ceea:	89bb      	ldrh	r3, [r7, #12]
 800ceec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cef0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cef4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	8013      	strh	r3, [r2, #0]
 800cf00:	e3f9      	b.n	800d6f6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	4413      	add	r3, r2
 800cf0c:	881b      	ldrh	r3, [r3, #0]
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf18:	81fb      	strh	r3, [r7, #14]
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	441a      	add	r2, r3
 800cf24:	89fb      	ldrh	r3, [r7, #14]
 800cf26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	8013      	strh	r3, [r2, #0]
 800cf3a:	e3dc      	b.n	800d6f6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	461a      	mov	r2, r3
 800cf4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf4c:	4413      	add	r3, r2
 800cf4e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	00da      	lsls	r2, r3, #3
 800cf56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf58:	4413      	add	r3, r2
 800cf5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800cf5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	88db      	ldrh	r3, [r3, #6]
 800cf64:	085b      	lsrs	r3, r3, #1
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	005b      	lsls	r3, r3, #1
 800cf6a:	b29a      	uxth	r2, r3
 800cf6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf6e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf80:	4413      	add	r3, r2
 800cf82:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	00da      	lsls	r2, r3, #3
 800cf8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf8c:	4413      	add	r3, r2
 800cf8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cf92:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf96:	881b      	ldrh	r3, [r3, #0]
 800cf98:	b29b      	uxth	r3, r3
 800cf9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa2:	801a      	strh	r2, [r3, #0]
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10a      	bne.n	800cfc2 <USB_ActivateEndpoint+0x28a>
 800cfac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfae:	881b      	ldrh	r3, [r3, #0]
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfbe:	801a      	strh	r2, [r3, #0]
 800cfc0:	e041      	b.n	800d046 <USB_ActivateEndpoint+0x30e>
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	691b      	ldr	r3, [r3, #16]
 800cfc6:	2b3e      	cmp	r3, #62	@ 0x3e
 800cfc8:	d81c      	bhi.n	800d004 <USB_ActivateEndpoint+0x2cc>
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	691b      	ldr	r3, [r3, #16]
 800cfce:	085b      	lsrs	r3, r3, #1
 800cfd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	691b      	ldr	r3, [r3, #16]
 800cfd8:	f003 0301 	and.w	r3, r3, #1
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d004      	beq.n	800cfea <USB_ActivateEndpoint+0x2b2>
 800cfe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfec:	881b      	ldrh	r3, [r3, #0]
 800cfee:	b29a      	uxth	r2, r3
 800cff0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	029b      	lsls	r3, r3, #10
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	4313      	orrs	r3, r2
 800cffc:	b29a      	uxth	r2, r3
 800cffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d000:	801a      	strh	r2, [r3, #0]
 800d002:	e020      	b.n	800d046 <USB_ActivateEndpoint+0x30e>
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	095b      	lsrs	r3, r3, #5
 800d00a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	691b      	ldr	r3, [r3, #16]
 800d012:	f003 031f 	and.w	r3, r3, #31
 800d016:	2b00      	cmp	r3, #0
 800d018:	d104      	bne.n	800d024 <USB_ActivateEndpoint+0x2ec>
 800d01a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d01e:	3b01      	subs	r3, #1
 800d020:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d026:	881b      	ldrh	r3, [r3, #0]
 800d028:	b29a      	uxth	r2, r3
 800d02a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d02e:	b29b      	uxth	r3, r3
 800d030:	029b      	lsls	r3, r3, #10
 800d032:	b29b      	uxth	r3, r3
 800d034:	4313      	orrs	r3, r2
 800d036:	b29b      	uxth	r3, r3
 800d038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d03c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d040:	b29a      	uxth	r2, r3
 800d042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d044:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	4413      	add	r3, r2
 800d050:	881b      	ldrh	r3, [r3, #0]
 800d052:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d054:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d01b      	beq.n	800d096 <USB_ActivateEndpoint+0x35e>
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	4413      	add	r3, r2
 800d068:	881b      	ldrh	r3, [r3, #0]
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d074:	843b      	strh	r3, [r7, #32]
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	441a      	add	r2, r3
 800d080:	8c3b      	ldrh	r3, [r7, #32]
 800d082:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d086:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d08a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d08e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d092:	b29b      	uxth	r3, r3
 800d094:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d124      	bne.n	800d0e8 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	4413      	add	r3, r2
 800d0a8:	881b      	ldrh	r3, [r3, #0]
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d0b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0b4:	83bb      	strh	r3, [r7, #28]
 800d0b6:	8bbb      	ldrh	r3, [r7, #28]
 800d0b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d0bc:	83bb      	strh	r3, [r7, #28]
 800d0be:	8bbb      	ldrh	r3, [r7, #28]
 800d0c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d0c4:	83bb      	strh	r3, [r7, #28]
 800d0c6:	687a      	ldr	r2, [r7, #4]
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	441a      	add	r2, r3
 800d0d0:	8bbb      	ldrh	r3, [r7, #28]
 800d0d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	8013      	strh	r3, [r2, #0]
 800d0e6:	e306      	b.n	800d6f6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	4413      	add	r3, r2
 800d0f2:	881b      	ldrh	r3, [r3, #0]
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d0fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0fe:	83fb      	strh	r3, [r7, #30]
 800d100:	8bfb      	ldrh	r3, [r7, #30]
 800d102:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d106:	83fb      	strh	r3, [r7, #30]
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	441a      	add	r2, r3
 800d112:	8bfb      	ldrh	r3, [r7, #30]
 800d114:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d118:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d11c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d124:	b29b      	uxth	r3, r3
 800d126:	8013      	strh	r3, [r2, #0]
 800d128:	e2e5      	b.n	800d6f6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	78db      	ldrb	r3, [r3, #3]
 800d12e:	2b02      	cmp	r3, #2
 800d130:	d11e      	bne.n	800d170 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	009b      	lsls	r3, r3, #2
 800d13a:	4413      	add	r3, r2
 800d13c:	881b      	ldrh	r3, [r3, #0]
 800d13e:	b29b      	uxth	r3, r3
 800d140:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d148:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	441a      	add	r2, r3
 800d156:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800d15a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d15e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d162:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d16a:	b29b      	uxth	r3, r3
 800d16c:	8013      	strh	r3, [r2, #0]
 800d16e:	e01d      	b.n	800d1ac <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	009b      	lsls	r3, r3, #2
 800d178:	4413      	add	r3, r2
 800d17a:	881b      	ldrh	r3, [r3, #0]
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d186:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	441a      	add	r2, r3
 800d194:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800d198:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d19c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d1bc:	4413      	add	r3, r2
 800d1be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	00da      	lsls	r2, r3, #3
 800d1c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d1c8:	4413      	add	r3, r2
 800d1ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d1ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	891b      	ldrh	r3, [r3, #8]
 800d1d4:	085b      	lsrs	r3, r3, #1
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	005b      	lsls	r3, r3, #1
 800d1da:	b29a      	uxth	r2, r3
 800d1dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1de:	801a      	strh	r2, [r3, #0]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	677b      	str	r3, [r7, #116]	@ 0x74
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d1f0:	4413      	add	r3, r2
 800d1f2:	677b      	str	r3, [r7, #116]	@ 0x74
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	00da      	lsls	r2, r3, #3
 800d1fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d1fc:	4413      	add	r3, r2
 800d1fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d202:	673b      	str	r3, [r7, #112]	@ 0x70
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	895b      	ldrh	r3, [r3, #10]
 800d208:	085b      	lsrs	r3, r3, #1
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	005b      	lsls	r3, r3, #1
 800d20e:	b29a      	uxth	r2, r3
 800d210:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d212:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	785b      	ldrb	r3, [r3, #1]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	f040 81af 	bne.w	800d57c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	4413      	add	r3, r2
 800d228:	881b      	ldrh	r3, [r3, #0]
 800d22a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800d22e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800d232:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d236:	2b00      	cmp	r3, #0
 800d238:	d01d      	beq.n	800d276 <USB_ActivateEndpoint+0x53e>
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	009b      	lsls	r3, r3, #2
 800d242:	4413      	add	r3, r2
 800d244:	881b      	ldrh	r3, [r3, #0]
 800d246:	b29b      	uxth	r3, r3
 800d248:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d24c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d250:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	009b      	lsls	r3, r3, #2
 800d25c:	441a      	add	r2, r3
 800d25e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800d262:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d26a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d26e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d272:	b29b      	uxth	r3, r3
 800d274:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	4413      	add	r3, r2
 800d280:	881b      	ldrh	r3, [r3, #0]
 800d282:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800d286:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800d28a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d01d      	beq.n	800d2ce <USB_ActivateEndpoint+0x596>
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	009b      	lsls	r3, r3, #2
 800d29a:	4413      	add	r3, r2
 800d29c:	881b      	ldrh	r3, [r3, #0]
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d2a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2a8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	441a      	add	r2, r3
 800d2b6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800d2ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d2be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d2c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d2c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	785b      	ldrb	r3, [r3, #1]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d16b      	bne.n	800d3ae <USB_ActivateEndpoint+0x676>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2e6:	4413      	add	r3, r2
 800d2e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	00da      	lsls	r2, r3, #3
 800d2f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2f2:	4413      	add	r3, r2
 800d2f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d2f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2fc:	881b      	ldrh	r3, [r3, #0]
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d304:	b29a      	uxth	r2, r3
 800d306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d308:	801a      	strh	r2, [r3, #0]
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	691b      	ldr	r3, [r3, #16]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d10a      	bne.n	800d328 <USB_ActivateEndpoint+0x5f0>
 800d312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d314:	881b      	ldrh	r3, [r3, #0]
 800d316:	b29b      	uxth	r3, r3
 800d318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d31c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d320:	b29a      	uxth	r2, r3
 800d322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d324:	801a      	strh	r2, [r3, #0]
 800d326:	e05d      	b.n	800d3e4 <USB_ActivateEndpoint+0x6ac>
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	691b      	ldr	r3, [r3, #16]
 800d32c:	2b3e      	cmp	r3, #62	@ 0x3e
 800d32e:	d81c      	bhi.n	800d36a <USB_ActivateEndpoint+0x632>
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	691b      	ldr	r3, [r3, #16]
 800d334:	085b      	lsrs	r3, r3, #1
 800d336:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	f003 0301 	and.w	r3, r3, #1
 800d342:	2b00      	cmp	r3, #0
 800d344:	d004      	beq.n	800d350 <USB_ActivateEndpoint+0x618>
 800d346:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d34a:	3301      	adds	r3, #1
 800d34c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d352:	881b      	ldrh	r3, [r3, #0]
 800d354:	b29a      	uxth	r2, r3
 800d356:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	029b      	lsls	r3, r3, #10
 800d35e:	b29b      	uxth	r3, r3
 800d360:	4313      	orrs	r3, r2
 800d362:	b29a      	uxth	r2, r3
 800d364:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d366:	801a      	strh	r2, [r3, #0]
 800d368:	e03c      	b.n	800d3e4 <USB_ActivateEndpoint+0x6ac>
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	691b      	ldr	r3, [r3, #16]
 800d36e:	095b      	lsrs	r3, r3, #5
 800d370:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	691b      	ldr	r3, [r3, #16]
 800d378:	f003 031f 	and.w	r3, r3, #31
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d104      	bne.n	800d38a <USB_ActivateEndpoint+0x652>
 800d380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d384:	3b01      	subs	r3, #1
 800d386:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d38a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d38c:	881b      	ldrh	r3, [r3, #0]
 800d38e:	b29a      	uxth	r2, r3
 800d390:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d394:	b29b      	uxth	r3, r3
 800d396:	029b      	lsls	r3, r3, #10
 800d398:	b29b      	uxth	r3, r3
 800d39a:	4313      	orrs	r3, r2
 800d39c:	b29b      	uxth	r3, r3
 800d39e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3a6:	b29a      	uxth	r2, r3
 800d3a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3aa:	801a      	strh	r2, [r3, #0]
 800d3ac:	e01a      	b.n	800d3e4 <USB_ActivateEndpoint+0x6ac>
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	785b      	ldrb	r3, [r3, #1]
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d116      	bne.n	800d3e4 <USB_ActivateEndpoint+0x6ac>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	657b      	str	r3, [r7, #84]	@ 0x54
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3c6:	4413      	add	r3, r2
 800d3c8:	657b      	str	r3, [r7, #84]	@ 0x54
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	00da      	lsls	r2, r3, #3
 800d3d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3d2:	4413      	add	r3, r2
 800d3d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d3d8:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	691b      	ldr	r3, [r3, #16]
 800d3de:	b29a      	uxth	r2, r3
 800d3e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3e2:	801a      	strh	r2, [r3, #0]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	785b      	ldrb	r3, [r3, #1]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d16b      	bne.n	800d4c8 <USB_ActivateEndpoint+0x790>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3fa:	b29b      	uxth	r3, r3
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d400:	4413      	add	r3, r2
 800d402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	00da      	lsls	r2, r3, #3
 800d40a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d40c:	4413      	add	r3, r2
 800d40e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d412:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d416:	881b      	ldrh	r3, [r3, #0]
 800d418:	b29b      	uxth	r3, r3
 800d41a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d41e:	b29a      	uxth	r2, r3
 800d420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d422:	801a      	strh	r2, [r3, #0]
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d10a      	bne.n	800d442 <USB_ActivateEndpoint+0x70a>
 800d42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d42e:	881b      	ldrh	r3, [r3, #0]
 800d430:	b29b      	uxth	r3, r3
 800d432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d43a:	b29a      	uxth	r2, r3
 800d43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d43e:	801a      	strh	r2, [r3, #0]
 800d440:	e05b      	b.n	800d4fa <USB_ActivateEndpoint+0x7c2>
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	691b      	ldr	r3, [r3, #16]
 800d446:	2b3e      	cmp	r3, #62	@ 0x3e
 800d448:	d81c      	bhi.n	800d484 <USB_ActivateEndpoint+0x74c>
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	085b      	lsrs	r3, r3, #1
 800d450:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	691b      	ldr	r3, [r3, #16]
 800d458:	f003 0301 	and.w	r3, r3, #1
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d004      	beq.n	800d46a <USB_ActivateEndpoint+0x732>
 800d460:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d464:	3301      	adds	r3, #1
 800d466:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d46c:	881b      	ldrh	r3, [r3, #0]
 800d46e:	b29a      	uxth	r2, r3
 800d470:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d474:	b29b      	uxth	r3, r3
 800d476:	029b      	lsls	r3, r3, #10
 800d478:	b29b      	uxth	r3, r3
 800d47a:	4313      	orrs	r3, r2
 800d47c:	b29a      	uxth	r2, r3
 800d47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d480:	801a      	strh	r2, [r3, #0]
 800d482:	e03a      	b.n	800d4fa <USB_ActivateEndpoint+0x7c2>
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	691b      	ldr	r3, [r3, #16]
 800d488:	095b      	lsrs	r3, r3, #5
 800d48a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	691b      	ldr	r3, [r3, #16]
 800d492:	f003 031f 	and.w	r3, r3, #31
 800d496:	2b00      	cmp	r3, #0
 800d498:	d104      	bne.n	800d4a4 <USB_ActivateEndpoint+0x76c>
 800d49a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d49e:	3b01      	subs	r3, #1
 800d4a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4a6:	881b      	ldrh	r3, [r3, #0]
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	029b      	lsls	r3, r3, #10
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4c0:	b29a      	uxth	r2, r3
 800d4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c4:	801a      	strh	r2, [r3, #0]
 800d4c6:	e018      	b.n	800d4fa <USB_ActivateEndpoint+0x7c2>
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	785b      	ldrb	r3, [r3, #1]
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d114      	bne.n	800d4fa <USB_ActivateEndpoint+0x7c2>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	461a      	mov	r2, r3
 800d4da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4dc:	4413      	add	r3, r2
 800d4de:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	00da      	lsls	r2, r3, #3
 800d4e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4e8:	4413      	add	r3, r2
 800d4ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d4ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	691b      	ldr	r3, [r3, #16]
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4f8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	4413      	add	r3, r2
 800d504:	881b      	ldrh	r3, [r3, #0]
 800d506:	b29b      	uxth	r3, r3
 800d508:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d50c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d510:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d512:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d514:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d518:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d51a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d51c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d520:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	009b      	lsls	r3, r3, #2
 800d52a:	441a      	add	r2, r3
 800d52c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d52e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d532:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d53a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d53e:	b29b      	uxth	r3, r3
 800d540:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	4413      	add	r3, r2
 800d54c:	881b      	ldrh	r3, [r3, #0]
 800d54e:	b29b      	uxth	r3, r3
 800d550:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d554:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d558:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800d55a:	687a      	ldr	r2, [r7, #4]
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	009b      	lsls	r3, r3, #2
 800d562:	441a      	add	r2, r3
 800d564:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d566:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d56a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d56e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d576:	b29b      	uxth	r3, r3
 800d578:	8013      	strh	r3, [r2, #0]
 800d57a:	e0bc      	b.n	800d6f6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d57c:	687a      	ldr	r2, [r7, #4]
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	4413      	add	r3, r2
 800d586:	881b      	ldrh	r3, [r3, #0]
 800d588:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800d58c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d590:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d594:	2b00      	cmp	r3, #0
 800d596:	d01d      	beq.n	800d5d4 <USB_ActivateEndpoint+0x89c>
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	4413      	add	r3, r2
 800d5a2:	881b      	ldrh	r3, [r3, #0]
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d5aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5ae:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	441a      	add	r2, r3
 800d5bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d5c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d5c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d5c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d5cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	4413      	add	r3, r2
 800d5de:	881b      	ldrh	r3, [r3, #0]
 800d5e0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800d5e4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800d5e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d01d      	beq.n	800d62c <USB_ActivateEndpoint+0x8f4>
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	4413      	add	r3, r2
 800d5fa:	881b      	ldrh	r3, [r3, #0]
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d606:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	441a      	add	r2, r3
 800d614:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800d618:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d61c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d624:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d628:	b29b      	uxth	r3, r3
 800d62a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	78db      	ldrb	r3, [r3, #3]
 800d630:	2b01      	cmp	r3, #1
 800d632:	d024      	beq.n	800d67e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	009b      	lsls	r3, r3, #2
 800d63c:	4413      	add	r3, r2
 800d63e:	881b      	ldrh	r3, [r3, #0]
 800d640:	b29b      	uxth	r3, r3
 800d642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d646:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d64a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d64e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d652:	f083 0320 	eor.w	r3, r3, #32
 800d656:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	441a      	add	r2, r3
 800d664:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d668:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d66c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d670:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d678:	b29b      	uxth	r3, r3
 800d67a:	8013      	strh	r3, [r2, #0]
 800d67c:	e01d      	b.n	800d6ba <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	4413      	add	r3, r2
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d694:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d698:	687a      	ldr	r2, [r7, #4]
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	441a      	add	r2, r3
 800d6a2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800d6a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	4413      	add	r3, r2
 800d6c4:	881b      	ldrh	r3, [r3, #0]
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d6cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6d0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	009b      	lsls	r3, r3, #2
 800d6dc:	441a      	add	r2, r3
 800d6de:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d6e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d6f6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	379c      	adds	r7, #156	@ 0x9c
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr
 800d706:	bf00      	nop

0800d708 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d708:	b480      	push	{r7}
 800d70a:	b08d      	sub	sp, #52	@ 0x34
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	7b1b      	ldrb	r3, [r3, #12]
 800d716:	2b00      	cmp	r3, #0
 800d718:	f040 808e 	bne.w	800d838 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	785b      	ldrb	r3, [r3, #1]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d044      	beq.n	800d7ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	4413      	add	r3, r2
 800d72e:	881b      	ldrh	r3, [r3, #0]
 800d730:	81bb      	strh	r3, [r7, #12]
 800d732:	89bb      	ldrh	r3, [r7, #12]
 800d734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d01b      	beq.n	800d774 <USB_DeactivateEndpoint+0x6c>
 800d73c:	687a      	ldr	r2, [r7, #4]
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	4413      	add	r3, r2
 800d746:	881b      	ldrh	r3, [r3, #0]
 800d748:	b29b      	uxth	r3, r3
 800d74a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d74e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d752:	817b      	strh	r3, [r7, #10]
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	441a      	add	r2, r3
 800d75e:	897b      	ldrh	r3, [r7, #10]
 800d760:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d764:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d76c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d770:	b29b      	uxth	r3, r3
 800d772:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	4413      	add	r3, r2
 800d77e:	881b      	ldrh	r3, [r3, #0]
 800d780:	b29b      	uxth	r3, r3
 800d782:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d78a:	813b      	strh	r3, [r7, #8]
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	441a      	add	r2, r3
 800d796:	893b      	ldrh	r3, [r7, #8]
 800d798:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d79c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7a8:	b29b      	uxth	r3, r3
 800d7aa:	8013      	strh	r3, [r2, #0]
 800d7ac:	e192      	b.n	800dad4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	4413      	add	r3, r2
 800d7b8:	881b      	ldrh	r3, [r3, #0]
 800d7ba:	827b      	strh	r3, [r7, #18]
 800d7bc:	8a7b      	ldrh	r3, [r7, #18]
 800d7be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d01b      	beq.n	800d7fe <USB_DeactivateEndpoint+0xf6>
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	009b      	lsls	r3, r3, #2
 800d7ce:	4413      	add	r3, r2
 800d7d0:	881b      	ldrh	r3, [r3, #0]
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7dc:	823b      	strh	r3, [r7, #16]
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	009b      	lsls	r3, r3, #2
 800d7e6:	441a      	add	r2, r3
 800d7e8:	8a3b      	ldrh	r3, [r7, #16]
 800d7ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d7f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	4413      	add	r3, r2
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d810:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d814:	81fb      	strh	r3, [r7, #14]
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	009b      	lsls	r3, r3, #2
 800d81e:	441a      	add	r2, r3
 800d820:	89fb      	ldrh	r3, [r7, #14]
 800d822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d82a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d82e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d832:	b29b      	uxth	r3, r3
 800d834:	8013      	strh	r3, [r2, #0]
 800d836:	e14d      	b.n	800dad4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	785b      	ldrb	r3, [r3, #1]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	f040 80a5 	bne.w	800d98c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	009b      	lsls	r3, r3, #2
 800d84a:	4413      	add	r3, r2
 800d84c:	881b      	ldrh	r3, [r3, #0]
 800d84e:	843b      	strh	r3, [r7, #32]
 800d850:	8c3b      	ldrh	r3, [r7, #32]
 800d852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d856:	2b00      	cmp	r3, #0
 800d858:	d01b      	beq.n	800d892 <USB_DeactivateEndpoint+0x18a>
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	009b      	lsls	r3, r3, #2
 800d862:	4413      	add	r3, r2
 800d864:	881b      	ldrh	r3, [r3, #0]
 800d866:	b29b      	uxth	r3, r3
 800d868:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d86c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d870:	83fb      	strh	r3, [r7, #30]
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	009b      	lsls	r3, r3, #2
 800d87a:	441a      	add	r2, r3
 800d87c:	8bfb      	ldrh	r3, [r7, #30]
 800d87e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d882:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d886:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d88a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d88e:	b29b      	uxth	r3, r3
 800d890:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	4413      	add	r3, r2
 800d89c:	881b      	ldrh	r3, [r3, #0]
 800d89e:	83bb      	strh	r3, [r7, #28]
 800d8a0:	8bbb      	ldrh	r3, [r7, #28]
 800d8a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d01b      	beq.n	800d8e2 <USB_DeactivateEndpoint+0x1da>
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	009b      	lsls	r3, r3, #2
 800d8b2:	4413      	add	r3, r2
 800d8b4:	881b      	ldrh	r3, [r3, #0]
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d8bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8c0:	837b      	strh	r3, [r7, #26]
 800d8c2:	687a      	ldr	r2, [r7, #4]
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	441a      	add	r2, r3
 800d8cc:	8b7b      	ldrh	r3, [r7, #26]
 800d8ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d8da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	009b      	lsls	r3, r3, #2
 800d8ea:	4413      	add	r3, r2
 800d8ec:	881b      	ldrh	r3, [r3, #0]
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d8f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8f8:	833b      	strh	r3, [r7, #24]
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	009b      	lsls	r3, r3, #2
 800d902:	441a      	add	r2, r3
 800d904:	8b3b      	ldrh	r3, [r7, #24]
 800d906:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d90a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d90e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d912:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d916:	b29b      	uxth	r3, r3
 800d918:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	009b      	lsls	r3, r3, #2
 800d922:	4413      	add	r3, r2
 800d924:	881b      	ldrh	r3, [r3, #0]
 800d926:	b29b      	uxth	r3, r3
 800d928:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d92c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d930:	82fb      	strh	r3, [r7, #22]
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	009b      	lsls	r3, r3, #2
 800d93a:	441a      	add	r2, r3
 800d93c:	8afb      	ldrh	r3, [r7, #22]
 800d93e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d942:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d94a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d94e:	b29b      	uxth	r3, r3
 800d950:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	4413      	add	r3, r2
 800d95c:	881b      	ldrh	r3, [r3, #0]
 800d95e:	b29b      	uxth	r3, r3
 800d960:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d968:	82bb      	strh	r3, [r7, #20]
 800d96a:	687a      	ldr	r2, [r7, #4]
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	441a      	add	r2, r3
 800d974:	8abb      	ldrh	r3, [r7, #20]
 800d976:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d97a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d97e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d986:	b29b      	uxth	r3, r3
 800d988:	8013      	strh	r3, [r2, #0]
 800d98a:	e0a3      	b.n	800dad4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	4413      	add	r3, r2
 800d996:	881b      	ldrh	r3, [r3, #0]
 800d998:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800d99a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d99c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d01b      	beq.n	800d9dc <USB_DeactivateEndpoint+0x2d4>
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	4413      	add	r3, r2
 800d9ae:	881b      	ldrh	r3, [r3, #0]
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d9b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9ba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800d9bc:	687a      	ldr	r2, [r7, #4]
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	009b      	lsls	r3, r3, #2
 800d9c4:	441a      	add	r2, r3
 800d9c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d9c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d9d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d9d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	4413      	add	r3, r2
 800d9e6:	881b      	ldrh	r3, [r3, #0]
 800d9e8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800d9ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d9ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d01b      	beq.n	800da2c <USB_DeactivateEndpoint+0x324>
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	4413      	add	r3, r2
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	b29b      	uxth	r3, r3
 800da02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da0a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	009b      	lsls	r3, r3, #2
 800da14:	441a      	add	r2, r3
 800da16:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800da18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da24:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800da28:	b29b      	uxth	r3, r3
 800da2a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	4413      	add	r3, r2
 800da36:	881b      	ldrh	r3, [r3, #0]
 800da38:	b29b      	uxth	r3, r3
 800da3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da42:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800da44:	687a      	ldr	r2, [r7, #4]
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	441a      	add	r2, r3
 800da4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800da5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da60:	b29b      	uxth	r3, r3
 800da62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	4413      	add	r3, r2
 800da6e:	881b      	ldrh	r3, [r3, #0]
 800da70:	b29b      	uxth	r3, r3
 800da72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	441a      	add	r2, r3
 800da86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da98:	b29b      	uxth	r3, r3
 800da9a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	4413      	add	r3, r2
 800daa6:	881b      	ldrh	r3, [r3, #0]
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800daae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dab2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800dab4:	687a      	ldr	r2, [r7, #4]
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	009b      	lsls	r3, r3, #2
 800dabc:	441a      	add	r2, r3
 800dabe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dac0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dac4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dacc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dad0:	b29b      	uxth	r3, r3
 800dad2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800dad4:	2300      	movs	r3, #0
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3734      	adds	r7, #52	@ 0x34
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr

0800dae2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b0ac      	sub	sp, #176	@ 0xb0
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
 800daea:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	785b      	ldrb	r3, [r3, #1]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	f040 84ca 	bne.w	800e48a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	699a      	ldr	r2, [r3, #24]
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	691b      	ldr	r3, [r3, #16]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d904      	bls.n	800db0c <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	691b      	ldr	r3, [r3, #16]
 800db06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800db0a:	e003      	b.n	800db14 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	699b      	ldr	r3, [r3, #24]
 800db10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	7b1b      	ldrb	r3, [r3, #12]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d122      	bne.n	800db62 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	6959      	ldr	r1, [r3, #20]
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	88da      	ldrh	r2, [r3, #6]
 800db24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db28:	b29b      	uxth	r3, r3
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 febd 	bl	800e8aa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	613b      	str	r3, [r7, #16]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	461a      	mov	r2, r3
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	4413      	add	r3, r2
 800db42:	613b      	str	r3, [r7, #16]
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	00da      	lsls	r2, r3, #3
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	4413      	add	r3, r2
 800db4e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800db52:	60fb      	str	r3, [r7, #12]
 800db54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db58:	b29a      	uxth	r2, r3
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	801a      	strh	r2, [r3, #0]
 800db5e:	f000 bc6f 	b.w	800e440 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	78db      	ldrb	r3, [r3, #3]
 800db66:	2b02      	cmp	r3, #2
 800db68:	f040 831e 	bne.w	800e1a8 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	6a1a      	ldr	r2, [r3, #32]
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	691b      	ldr	r3, [r3, #16]
 800db74:	429a      	cmp	r2, r3
 800db76:	f240 82cf 	bls.w	800e118 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	781b      	ldrb	r3, [r3, #0]
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	4413      	add	r3, r2
 800db84:	881b      	ldrh	r3, [r3, #0]
 800db86:	b29b      	uxth	r3, r3
 800db88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db90:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800db94:	687a      	ldr	r2, [r7, #4]
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	009b      	lsls	r3, r3, #2
 800db9c:	441a      	add	r2, r3
 800db9e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800dba2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dba6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dbaa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800dbae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	6a1a      	ldr	r2, [r3, #32]
 800dbba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dbbe:	1ad2      	subs	r2, r2, r3
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	009b      	lsls	r3, r3, #2
 800dbcc:	4413      	add	r3, r2
 800dbce:	881b      	ldrh	r3, [r3, #0]
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	f000 814f 	beq.w	800de7a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	633b      	str	r3, [r7, #48]	@ 0x30
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	785b      	ldrb	r3, [r3, #1]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d16b      	bne.n	800dcc0 <USB_EPStartXfer+0x1de>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbf8:	4413      	add	r3, r2
 800dbfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	00da      	lsls	r2, r3, #3
 800dc02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc04:	4413      	add	r3, r2
 800dc06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dc0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc0e:	881b      	ldrh	r3, [r3, #0]
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc16:	b29a      	uxth	r2, r3
 800dc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc1a:	801a      	strh	r2, [r3, #0]
 800dc1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d10a      	bne.n	800dc3a <USB_EPStartXfer+0x158>
 800dc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc26:	881b      	ldrh	r3, [r3, #0]
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc32:	b29a      	uxth	r2, r3
 800dc34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc36:	801a      	strh	r2, [r3, #0]
 800dc38:	e05b      	b.n	800dcf2 <USB_EPStartXfer+0x210>
 800dc3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc3e:	2b3e      	cmp	r3, #62	@ 0x3e
 800dc40:	d81c      	bhi.n	800dc7c <USB_EPStartXfer+0x19a>
 800dc42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc46:	085b      	lsrs	r3, r3, #1
 800dc48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800dc4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc50:	f003 0301 	and.w	r3, r3, #1
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d004      	beq.n	800dc62 <USB_EPStartXfer+0x180>
 800dc58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800dc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc64:	881b      	ldrh	r3, [r3, #0]
 800dc66:	b29a      	uxth	r2, r3
 800dc68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	029b      	lsls	r3, r3, #10
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	4313      	orrs	r3, r2
 800dc74:	b29a      	uxth	r2, r3
 800dc76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc78:	801a      	strh	r2, [r3, #0]
 800dc7a:	e03a      	b.n	800dcf2 <USB_EPStartXfer+0x210>
 800dc7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc80:	095b      	lsrs	r3, r3, #5
 800dc82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800dc86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc8a:	f003 031f 	and.w	r3, r3, #31
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d104      	bne.n	800dc9c <USB_EPStartXfer+0x1ba>
 800dc92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dc96:	3b01      	subs	r3, #1
 800dc98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800dc9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc9e:	881b      	ldrh	r3, [r3, #0]
 800dca0:	b29a      	uxth	r2, r3
 800dca2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	029b      	lsls	r3, r3, #10
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	4313      	orrs	r3, r2
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcb8:	b29a      	uxth	r2, r3
 800dcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcbc:	801a      	strh	r2, [r3, #0]
 800dcbe:	e018      	b.n	800dcf2 <USB_EPStartXfer+0x210>
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	785b      	ldrb	r3, [r3, #1]
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d114      	bne.n	800dcf2 <USB_EPStartXfer+0x210>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd4:	4413      	add	r3, r2
 800dcd6:	633b      	str	r3, [r7, #48]	@ 0x30
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	00da      	lsls	r2, r3, #3
 800dcde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dce0:	4413      	add	r3, r2
 800dce2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dcec:	b29a      	uxth	r2, r3
 800dcee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	895b      	ldrh	r3, [r3, #10]
 800dcf6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	6959      	ldr	r1, [r3, #20]
 800dcfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f000 fdce 	bl	800e8aa <USB_WritePMA>
            ep->xfer_buff += len;
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	695a      	ldr	r2, [r3, #20]
 800dd12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd16:	441a      	add	r2, r3
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	6a1a      	ldr	r2, [r3, #32]
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	691b      	ldr	r3, [r3, #16]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d907      	bls.n	800dd38 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	6a1a      	ldr	r2, [r3, #32]
 800dd2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd30:	1ad2      	subs	r2, r2, r3
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	621a      	str	r2, [r3, #32]
 800dd36:	e006      	b.n	800dd46 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	6a1b      	ldr	r3, [r3, #32]
 800dd3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	2200      	movs	r2, #0
 800dd44:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	785b      	ldrb	r3, [r3, #1]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d16b      	bne.n	800de26 <USB_EPStartXfer+0x344>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	61bb      	str	r3, [r7, #24]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	69bb      	ldr	r3, [r7, #24]
 800dd5e:	4413      	add	r3, r2
 800dd60:	61bb      	str	r3, [r7, #24]
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	00da      	lsls	r2, r3, #3
 800dd68:	69bb      	ldr	r3, [r7, #24]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dd70:	617b      	str	r3, [r7, #20]
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	881b      	ldrh	r3, [r3, #0]
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	801a      	strh	r2, [r3, #0]
 800dd82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d10a      	bne.n	800dda0 <USB_EPStartXfer+0x2be>
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	881b      	ldrh	r3, [r3, #0]
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd98:	b29a      	uxth	r2, r3
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	801a      	strh	r2, [r3, #0]
 800dd9e:	e05d      	b.n	800de5c <USB_EPStartXfer+0x37a>
 800dda0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dda4:	2b3e      	cmp	r3, #62	@ 0x3e
 800dda6:	d81c      	bhi.n	800dde2 <USB_EPStartXfer+0x300>
 800dda8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ddac:	085b      	lsrs	r3, r3, #1
 800ddae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ddb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ddb6:	f003 0301 	and.w	r3, r3, #1
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d004      	beq.n	800ddc8 <USB_EPStartXfer+0x2e6>
 800ddbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	881b      	ldrh	r3, [r3, #0]
 800ddcc:	b29a      	uxth	r2, r3
 800ddce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	029b      	lsls	r3, r3, #10
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	4313      	orrs	r3, r2
 800ddda:	b29a      	uxth	r2, r3
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	801a      	strh	r2, [r3, #0]
 800dde0:	e03c      	b.n	800de5c <USB_EPStartXfer+0x37a>
 800dde2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dde6:	095b      	lsrs	r3, r3, #5
 800dde8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ddec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ddf0:	f003 031f 	and.w	r3, r3, #31
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d104      	bne.n	800de02 <USB_EPStartXfer+0x320>
 800ddf8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ddfc:	3b01      	subs	r3, #1
 800ddfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	881b      	ldrh	r3, [r3, #0]
 800de06:	b29a      	uxth	r2, r3
 800de08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	029b      	lsls	r3, r3, #10
 800de10:	b29b      	uxth	r3, r3
 800de12:	4313      	orrs	r3, r2
 800de14:	b29b      	uxth	r3, r3
 800de16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de1e:	b29a      	uxth	r2, r3
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	801a      	strh	r2, [r3, #0]
 800de24:	e01a      	b.n	800de5c <USB_EPStartXfer+0x37a>
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	785b      	ldrb	r3, [r3, #1]
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d116      	bne.n	800de5c <USB_EPStartXfer+0x37a>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	623b      	str	r3, [r7, #32]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de38:	b29b      	uxth	r3, r3
 800de3a:	461a      	mov	r2, r3
 800de3c:	6a3b      	ldr	r3, [r7, #32]
 800de3e:	4413      	add	r3, r2
 800de40:	623b      	str	r3, [r7, #32]
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	00da      	lsls	r2, r3, #3
 800de48:	6a3b      	ldr	r3, [r7, #32]
 800de4a:	4413      	add	r3, r2
 800de4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800de50:	61fb      	str	r3, [r7, #28]
 800de52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de56:	b29a      	uxth	r2, r3
 800de58:	69fb      	ldr	r3, [r7, #28]
 800de5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	891b      	ldrh	r3, [r3, #8]
 800de60:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	6959      	ldr	r1, [r3, #20]
 800de68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f000 fd19 	bl	800e8aa <USB_WritePMA>
 800de78:	e2e2      	b.n	800e440 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	785b      	ldrb	r3, [r3, #1]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d16b      	bne.n	800df5a <USB_EPStartXfer+0x478>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	461a      	mov	r2, r3
 800de90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de92:	4413      	add	r3, r2
 800de94:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	00da      	lsls	r2, r3, #3
 800de9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de9e:	4413      	add	r3, r2
 800dea0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dea4:	647b      	str	r3, [r7, #68]	@ 0x44
 800dea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dea8:	881b      	ldrh	r3, [r3, #0]
 800deaa:	b29b      	uxth	r3, r3
 800deac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800deb4:	801a      	strh	r2, [r3, #0]
 800deb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800deba:	2b00      	cmp	r3, #0
 800debc:	d10a      	bne.n	800ded4 <USB_EPStartXfer+0x3f2>
 800debe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dec0:	881b      	ldrh	r3, [r3, #0]
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800decc:	b29a      	uxth	r2, r3
 800dece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ded0:	801a      	strh	r2, [r3, #0]
 800ded2:	e05d      	b.n	800df90 <USB_EPStartXfer+0x4ae>
 800ded4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ded8:	2b3e      	cmp	r3, #62	@ 0x3e
 800deda:	d81c      	bhi.n	800df16 <USB_EPStartXfer+0x434>
 800dedc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dee0:	085b      	lsrs	r3, r3, #1
 800dee2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800deea:	f003 0301 	and.w	r3, r3, #1
 800deee:	2b00      	cmp	r3, #0
 800def0:	d004      	beq.n	800defc <USB_EPStartXfer+0x41a>
 800def2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800def6:	3301      	adds	r3, #1
 800def8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800defc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800defe:	881b      	ldrh	r3, [r3, #0]
 800df00:	b29a      	uxth	r2, r3
 800df02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800df06:	b29b      	uxth	r3, r3
 800df08:	029b      	lsls	r3, r3, #10
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	4313      	orrs	r3, r2
 800df0e:	b29a      	uxth	r2, r3
 800df10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df12:	801a      	strh	r2, [r3, #0]
 800df14:	e03c      	b.n	800df90 <USB_EPStartXfer+0x4ae>
 800df16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df1a:	095b      	lsrs	r3, r3, #5
 800df1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800df20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df24:	f003 031f 	and.w	r3, r3, #31
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d104      	bne.n	800df36 <USB_EPStartXfer+0x454>
 800df2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800df30:	3b01      	subs	r3, #1
 800df32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800df36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df38:	881b      	ldrh	r3, [r3, #0]
 800df3a:	b29a      	uxth	r2, r3
 800df3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800df40:	b29b      	uxth	r3, r3
 800df42:	029b      	lsls	r3, r3, #10
 800df44:	b29b      	uxth	r3, r3
 800df46:	4313      	orrs	r3, r2
 800df48:	b29b      	uxth	r3, r3
 800df4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df52:	b29a      	uxth	r2, r3
 800df54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df56:	801a      	strh	r2, [r3, #0]
 800df58:	e01a      	b.n	800df90 <USB_EPStartXfer+0x4ae>
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	785b      	ldrb	r3, [r3, #1]
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d116      	bne.n	800df90 <USB_EPStartXfer+0x4ae>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	653b      	str	r3, [r7, #80]	@ 0x50
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	461a      	mov	r2, r3
 800df70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df72:	4413      	add	r3, r2
 800df74:	653b      	str	r3, [r7, #80]	@ 0x50
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	00da      	lsls	r2, r3, #3
 800df7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df7e:	4413      	add	r3, r2
 800df80:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800df84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df8a:	b29a      	uxth	r2, r3
 800df8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df8e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	891b      	ldrh	r3, [r3, #8]
 800df94:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	6959      	ldr	r1, [r3, #20]
 800df9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f000 fc7f 	bl	800e8aa <USB_WritePMA>
            ep->xfer_buff += len;
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	695a      	ldr	r2, [r3, #20]
 800dfb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfb4:	441a      	add	r2, r3
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	6a1a      	ldr	r2, [r3, #32]
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	691b      	ldr	r3, [r3, #16]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d907      	bls.n	800dfd6 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	6a1a      	ldr	r2, [r3, #32]
 800dfca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfce:	1ad2      	subs	r2, r2, r3
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	621a      	str	r2, [r3, #32]
 800dfd4:	e006      	b.n	800dfe4 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	6a1b      	ldr	r3, [r3, #32]
 800dfda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	643b      	str	r3, [r7, #64]	@ 0x40
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	785b      	ldrb	r3, [r3, #1]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d16b      	bne.n	800e0c8 <USB_EPStartXfer+0x5e6>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	461a      	mov	r2, r3
 800dffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e000:	4413      	add	r3, r2
 800e002:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	00da      	lsls	r2, r3, #3
 800e00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e00c:	4413      	add	r3, r2
 800e00e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e012:	637b      	str	r3, [r7, #52]	@ 0x34
 800e014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e016:	881b      	ldrh	r3, [r3, #0]
 800e018:	b29b      	uxth	r3, r3
 800e01a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e01e:	b29a      	uxth	r2, r3
 800e020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e022:	801a      	strh	r2, [r3, #0]
 800e024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d10a      	bne.n	800e042 <USB_EPStartXfer+0x560>
 800e02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e02e:	881b      	ldrh	r3, [r3, #0]
 800e030:	b29b      	uxth	r3, r3
 800e032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e03a:	b29a      	uxth	r2, r3
 800e03c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e03e:	801a      	strh	r2, [r3, #0]
 800e040:	e05b      	b.n	800e0fa <USB_EPStartXfer+0x618>
 800e042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e046:	2b3e      	cmp	r3, #62	@ 0x3e
 800e048:	d81c      	bhi.n	800e084 <USB_EPStartXfer+0x5a2>
 800e04a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e04e:	085b      	lsrs	r3, r3, #1
 800e050:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e054:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e058:	f003 0301 	and.w	r3, r3, #1
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d004      	beq.n	800e06a <USB_EPStartXfer+0x588>
 800e060:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e064:	3301      	adds	r3, #1
 800e066:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e06a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e06c:	881b      	ldrh	r3, [r3, #0]
 800e06e:	b29a      	uxth	r2, r3
 800e070:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e074:	b29b      	uxth	r3, r3
 800e076:	029b      	lsls	r3, r3, #10
 800e078:	b29b      	uxth	r3, r3
 800e07a:	4313      	orrs	r3, r2
 800e07c:	b29a      	uxth	r2, r3
 800e07e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e080:	801a      	strh	r2, [r3, #0]
 800e082:	e03a      	b.n	800e0fa <USB_EPStartXfer+0x618>
 800e084:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e088:	095b      	lsrs	r3, r3, #5
 800e08a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e08e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e092:	f003 031f 	and.w	r3, r3, #31
 800e096:	2b00      	cmp	r3, #0
 800e098:	d104      	bne.n	800e0a4 <USB_EPStartXfer+0x5c2>
 800e09a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e09e:	3b01      	subs	r3, #1
 800e0a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e0a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0a6:	881b      	ldrh	r3, [r3, #0]
 800e0a8:	b29a      	uxth	r2, r3
 800e0aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	029b      	lsls	r3, r3, #10
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0c0:	b29a      	uxth	r2, r3
 800e0c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0c4:	801a      	strh	r2, [r3, #0]
 800e0c6:	e018      	b.n	800e0fa <USB_EPStartXfer+0x618>
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	785b      	ldrb	r3, [r3, #1]
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d114      	bne.n	800e0fa <USB_EPStartXfer+0x618>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	461a      	mov	r2, r3
 800e0da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0dc:	4413      	add	r3, r2
 800e0de:	643b      	str	r3, [r7, #64]	@ 0x40
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	00da      	lsls	r2, r3, #3
 800e0e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0e8:	4413      	add	r3, r2
 800e0ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e0f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0f4:	b29a      	uxth	r2, r3
 800e0f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	895b      	ldrh	r3, [r3, #10]
 800e0fe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	6959      	ldr	r1, [r3, #20]
 800e106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f000 fbca 	bl	800e8aa <USB_WritePMA>
 800e116:	e193      	b.n	800e440 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	6a1b      	ldr	r3, [r3, #32]
 800e11c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	009b      	lsls	r3, r3, #2
 800e128:	4413      	add	r3, r2
 800e12a:	881b      	ldrh	r3, [r3, #0]
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800e132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e136:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	441a      	add	r2, r3
 800e144:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800e148:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e14c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e150:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e158:	b29b      	uxth	r3, r3
 800e15a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e166:	b29b      	uxth	r3, r3
 800e168:	461a      	mov	r2, r3
 800e16a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e16c:	4413      	add	r3, r2
 800e16e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	00da      	lsls	r2, r3, #3
 800e176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e178:	4413      	add	r3, r2
 800e17a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e17e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e184:	b29a      	uxth	r2, r3
 800e186:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e188:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	891b      	ldrh	r3, [r3, #8]
 800e18e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	6959      	ldr	r1, [r3, #20]
 800e196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f000 fb82 	bl	800e8aa <USB_WritePMA>
 800e1a6:	e14b      	b.n	800e440 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	6a1a      	ldr	r2, [r3, #32]
 800e1ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1b0:	1ad2      	subs	r2, r2, r3
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	009b      	lsls	r3, r3, #2
 800e1be:	4413      	add	r3, r2
 800e1c0:	881b      	ldrh	r3, [r3, #0]
 800e1c2:	b29b      	uxth	r3, r3
 800e1c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	f000 809a 	beq.w	800e302 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	673b      	str	r3, [r7, #112]	@ 0x70
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	785b      	ldrb	r3, [r3, #1]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d16b      	bne.n	800e2b2 <USB_EPStartXfer+0x7d0>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e1ea:	4413      	add	r3, r2
 800e1ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	00da      	lsls	r2, r3, #3
 800e1f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e1f6:	4413      	add	r3, r2
 800e1f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e1fc:	667b      	str	r3, [r7, #100]	@ 0x64
 800e1fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e200:	881b      	ldrh	r3, [r3, #0]
 800e202:	b29b      	uxth	r3, r3
 800e204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e208:	b29a      	uxth	r2, r3
 800e20a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e20c:	801a      	strh	r2, [r3, #0]
 800e20e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e212:	2b00      	cmp	r3, #0
 800e214:	d10a      	bne.n	800e22c <USB_EPStartXfer+0x74a>
 800e216:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e218:	881b      	ldrh	r3, [r3, #0]
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e224:	b29a      	uxth	r2, r3
 800e226:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e228:	801a      	strh	r2, [r3, #0]
 800e22a:	e05b      	b.n	800e2e4 <USB_EPStartXfer+0x802>
 800e22c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e230:	2b3e      	cmp	r3, #62	@ 0x3e
 800e232:	d81c      	bhi.n	800e26e <USB_EPStartXfer+0x78c>
 800e234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e238:	085b      	lsrs	r3, r3, #1
 800e23a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e23e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e242:	f003 0301 	and.w	r3, r3, #1
 800e246:	2b00      	cmp	r3, #0
 800e248:	d004      	beq.n	800e254 <USB_EPStartXfer+0x772>
 800e24a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e24e:	3301      	adds	r3, #1
 800e250:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e254:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e256:	881b      	ldrh	r3, [r3, #0]
 800e258:	b29a      	uxth	r2, r3
 800e25a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e25e:	b29b      	uxth	r3, r3
 800e260:	029b      	lsls	r3, r3, #10
 800e262:	b29b      	uxth	r3, r3
 800e264:	4313      	orrs	r3, r2
 800e266:	b29a      	uxth	r2, r3
 800e268:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e26a:	801a      	strh	r2, [r3, #0]
 800e26c:	e03a      	b.n	800e2e4 <USB_EPStartXfer+0x802>
 800e26e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e272:	095b      	lsrs	r3, r3, #5
 800e274:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e27c:	f003 031f 	and.w	r3, r3, #31
 800e280:	2b00      	cmp	r3, #0
 800e282:	d104      	bne.n	800e28e <USB_EPStartXfer+0x7ac>
 800e284:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e288:	3b01      	subs	r3, #1
 800e28a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e28e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e290:	881b      	ldrh	r3, [r3, #0]
 800e292:	b29a      	uxth	r2, r3
 800e294:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e298:	b29b      	uxth	r3, r3
 800e29a:	029b      	lsls	r3, r3, #10
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	4313      	orrs	r3, r2
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e2ae:	801a      	strh	r2, [r3, #0]
 800e2b0:	e018      	b.n	800e2e4 <USB_EPStartXfer+0x802>
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	785b      	ldrb	r3, [r3, #1]
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	d114      	bne.n	800e2e4 <USB_EPStartXfer+0x802>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e2c6:	4413      	add	r3, r2
 800e2c8:	673b      	str	r3, [r7, #112]	@ 0x70
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	00da      	lsls	r2, r3, #3
 800e2d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e2d2:	4413      	add	r3, r2
 800e2d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e2d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e2da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e2de:	b29a      	uxth	r2, r3
 800e2e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	895b      	ldrh	r3, [r3, #10]
 800e2e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	6959      	ldr	r1, [r3, #20]
 800e2f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 fad5 	bl	800e8aa <USB_WritePMA>
 800e300:	e09e      	b.n	800e440 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	785b      	ldrb	r3, [r3, #1]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d16b      	bne.n	800e3e2 <USB_EPStartXfer+0x900>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e314:	b29b      	uxth	r3, r3
 800e316:	461a      	mov	r2, r3
 800e318:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e31a:	4413      	add	r3, r2
 800e31c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	00da      	lsls	r2, r3, #3
 800e324:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e326:	4413      	add	r3, r2
 800e328:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e32c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e32e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e330:	881b      	ldrh	r3, [r3, #0]
 800e332:	b29b      	uxth	r3, r3
 800e334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e338:	b29a      	uxth	r2, r3
 800e33a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e33c:	801a      	strh	r2, [r3, #0]
 800e33e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e342:	2b00      	cmp	r3, #0
 800e344:	d10a      	bne.n	800e35c <USB_EPStartXfer+0x87a>
 800e346:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e348:	881b      	ldrh	r3, [r3, #0]
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e354:	b29a      	uxth	r2, r3
 800e356:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e358:	801a      	strh	r2, [r3, #0]
 800e35a:	e063      	b.n	800e424 <USB_EPStartXfer+0x942>
 800e35c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e360:	2b3e      	cmp	r3, #62	@ 0x3e
 800e362:	d81c      	bhi.n	800e39e <USB_EPStartXfer+0x8bc>
 800e364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e368:	085b      	lsrs	r3, r3, #1
 800e36a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e36e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e372:	f003 0301 	and.w	r3, r3, #1
 800e376:	2b00      	cmp	r3, #0
 800e378:	d004      	beq.n	800e384 <USB_EPStartXfer+0x8a2>
 800e37a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e37e:	3301      	adds	r3, #1
 800e380:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e384:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e386:	881b      	ldrh	r3, [r3, #0]
 800e388:	b29a      	uxth	r2, r3
 800e38a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e38e:	b29b      	uxth	r3, r3
 800e390:	029b      	lsls	r3, r3, #10
 800e392:	b29b      	uxth	r3, r3
 800e394:	4313      	orrs	r3, r2
 800e396:	b29a      	uxth	r2, r3
 800e398:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e39a:	801a      	strh	r2, [r3, #0]
 800e39c:	e042      	b.n	800e424 <USB_EPStartXfer+0x942>
 800e39e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e3a2:	095b      	lsrs	r3, r3, #5
 800e3a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e3a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e3ac:	f003 031f 	and.w	r3, r3, #31
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d104      	bne.n	800e3be <USB_EPStartXfer+0x8dc>
 800e3b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e3b8:	3b01      	subs	r3, #1
 800e3ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e3be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e3c0:	881b      	ldrh	r3, [r3, #0]
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	029b      	lsls	r3, r3, #10
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	b29b      	uxth	r3, r3
 800e3d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3da:	b29a      	uxth	r2, r3
 800e3dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e3de:	801a      	strh	r2, [r3, #0]
 800e3e0:	e020      	b.n	800e424 <USB_EPStartXfer+0x942>
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	785b      	ldrb	r3, [r3, #1]
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	d11c      	bne.n	800e424 <USB_EPStartXfer+0x942>
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e3fe:	4413      	add	r3, r2
 800e400:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	00da      	lsls	r2, r3, #3
 800e40a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e40e:	4413      	add	r3, r2
 800e410:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e414:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e422:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	891b      	ldrh	r3, [r3, #8]
 800e428:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	6959      	ldr	r1, [r3, #20]
 800e430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e434:	b29b      	uxth	r3, r3
 800e436:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 fa35 	bl	800e8aa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	4413      	add	r3, r2
 800e44a:	881b      	ldrh	r3, [r3, #0]
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e456:	817b      	strh	r3, [r7, #10]
 800e458:	897b      	ldrh	r3, [r7, #10]
 800e45a:	f083 0310 	eor.w	r3, r3, #16
 800e45e:	817b      	strh	r3, [r7, #10]
 800e460:	897b      	ldrh	r3, [r7, #10]
 800e462:	f083 0320 	eor.w	r3, r3, #32
 800e466:	817b      	strh	r3, [r7, #10]
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	441a      	add	r2, r3
 800e472:	897b      	ldrh	r3, [r7, #10]
 800e474:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e478:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e47c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e484:	b29b      	uxth	r3, r3
 800e486:	8013      	strh	r3, [r2, #0]
 800e488:	e0d5      	b.n	800e636 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	7b1b      	ldrb	r3, [r3, #12]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d156      	bne.n	800e540 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	699b      	ldr	r3, [r3, #24]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d122      	bne.n	800e4e0 <USB_EPStartXfer+0x9fe>
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	78db      	ldrb	r3, [r3, #3]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d11e      	bne.n	800e4e0 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	4413      	add	r3, r2
 800e4ac:	881b      	ldrh	r3, [r3, #0]
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e4b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4b8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	441a      	add	r2, r3
 800e4c6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e4ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e4ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e4d2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e4d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	8013      	strh	r3, [r2, #0]
 800e4de:	e01d      	b.n	800e51c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	009b      	lsls	r3, r3, #2
 800e4e8:	4413      	add	r3, r2
 800e4ea:	881b      	ldrh	r3, [r3, #0]
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800e4f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4f6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	009b      	lsls	r3, r3, #2
 800e502:	441a      	add	r2, r3
 800e504:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800e508:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e50c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e510:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e518:	b29b      	uxth	r3, r3
 800e51a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	699a      	ldr	r2, [r3, #24]
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	691b      	ldr	r3, [r3, #16]
 800e524:	429a      	cmp	r2, r3
 800e526:	d907      	bls.n	800e538 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	699a      	ldr	r2, [r3, #24]
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	691b      	ldr	r3, [r3, #16]
 800e530:	1ad2      	subs	r2, r2, r3
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	619a      	str	r2, [r3, #24]
 800e536:	e054      	b.n	800e5e2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	2200      	movs	r2, #0
 800e53c:	619a      	str	r2, [r3, #24]
 800e53e:	e050      	b.n	800e5e2 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	78db      	ldrb	r3, [r3, #3]
 800e544:	2b02      	cmp	r3, #2
 800e546:	d142      	bne.n	800e5ce <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	69db      	ldr	r3, [r3, #28]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d048      	beq.n	800e5e2 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	4413      	add	r3, r2
 800e55a:	881b      	ldrh	r3, [r3, #0]
 800e55c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e560:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e564:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d005      	beq.n	800e578 <USB_EPStartXfer+0xa96>
 800e56c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e574:	2b00      	cmp	r3, #0
 800e576:	d10b      	bne.n	800e590 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e578:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e57c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e580:	2b00      	cmp	r3, #0
 800e582:	d12e      	bne.n	800e5e2 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e584:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800e588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d128      	bne.n	800e5e2 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	009b      	lsls	r3, r3, #2
 800e598:	4413      	add	r3, r2
 800e59a:	881b      	ldrh	r3, [r3, #0]
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e5a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e5a6:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	441a      	add	r2, r3
 800e5b4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800e5b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e5bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e5c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e5c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	8013      	strh	r3, [r2, #0]
 800e5cc:	e009      	b.n	800e5e2 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	78db      	ldrb	r3, [r3, #3]
 800e5d2:	2b01      	cmp	r3, #1
 800e5d4:	d103      	bne.n	800e5de <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	619a      	str	r2, [r3, #24]
 800e5dc:	e001      	b.n	800e5e2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	e02a      	b.n	800e638 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	4413      	add	r3, r2
 800e5ec:	881b      	ldrh	r3, [r3, #0]
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e5f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e5f8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e5fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e600:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e604:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e608:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e60c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e610:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	009b      	lsls	r3, r3, #2
 800e61c:	441a      	add	r2, r3
 800e61e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e622:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e626:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e62a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e62e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e632:	b29b      	uxth	r3, r3
 800e634:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e636:	2300      	movs	r3, #0
}
 800e638:	4618      	mov	r0, r3
 800e63a:	37b0      	adds	r7, #176	@ 0xb0
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}

0800e640 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e640:	b480      	push	{r7}
 800e642:	b085      	sub	sp, #20
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	785b      	ldrb	r3, [r3, #1]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d020      	beq.n	800e694 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e652:	687a      	ldr	r2, [r7, #4]
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	4413      	add	r3, r2
 800e65c:	881b      	ldrh	r3, [r3, #0]
 800e65e:	b29b      	uxth	r3, r3
 800e660:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e664:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e668:	81bb      	strh	r3, [r7, #12]
 800e66a:	89bb      	ldrh	r3, [r7, #12]
 800e66c:	f083 0310 	eor.w	r3, r3, #16
 800e670:	81bb      	strh	r3, [r7, #12]
 800e672:	687a      	ldr	r2, [r7, #4]
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	441a      	add	r2, r3
 800e67c:	89bb      	ldrh	r3, [r7, #12]
 800e67e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e68a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e68e:	b29b      	uxth	r3, r3
 800e690:	8013      	strh	r3, [r2, #0]
 800e692:	e01f      	b.n	800e6d4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e694:	687a      	ldr	r2, [r7, #4]
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	4413      	add	r3, r2
 800e69e:	881b      	ldrh	r3, [r3, #0]
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e6a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e6aa:	81fb      	strh	r3, [r7, #14]
 800e6ac:	89fb      	ldrh	r3, [r7, #14]
 800e6ae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e6b2:	81fb      	strh	r3, [r7, #14]
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	441a      	add	r2, r3
 800e6be:	89fb      	ldrh	r3, [r7, #14]
 800e6c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e6c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e6c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e6cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e6d4:	2300      	movs	r3, #0
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3714      	adds	r7, #20
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr

0800e6e2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e6e2:	b480      	push	{r7}
 800e6e4:	b087      	sub	sp, #28
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	6078      	str	r0, [r7, #4]
 800e6ea:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	785b      	ldrb	r3, [r3, #1]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d04c      	beq.n	800e78e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	009b      	lsls	r3, r3, #2
 800e6fc:	4413      	add	r3, r2
 800e6fe:	881b      	ldrh	r3, [r3, #0]
 800e700:	823b      	strh	r3, [r7, #16]
 800e702:	8a3b      	ldrh	r3, [r7, #16]
 800e704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d01b      	beq.n	800e744 <USB_EPClearStall+0x62>
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	009b      	lsls	r3, r3, #2
 800e714:	4413      	add	r3, r2
 800e716:	881b      	ldrh	r3, [r3, #0]
 800e718:	b29b      	uxth	r3, r3
 800e71a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e71e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e722:	81fb      	strh	r3, [r7, #14]
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	009b      	lsls	r3, r3, #2
 800e72c:	441a      	add	r2, r3
 800e72e:	89fb      	ldrh	r3, [r7, #14]
 800e730:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e734:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e738:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e73c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e740:	b29b      	uxth	r3, r3
 800e742:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	78db      	ldrb	r3, [r3, #3]
 800e748:	2b01      	cmp	r3, #1
 800e74a:	d06c      	beq.n	800e826 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	4413      	add	r3, r2
 800e756:	881b      	ldrh	r3, [r3, #0]
 800e758:	b29b      	uxth	r3, r3
 800e75a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e75e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e762:	81bb      	strh	r3, [r7, #12]
 800e764:	89bb      	ldrh	r3, [r7, #12]
 800e766:	f083 0320 	eor.w	r3, r3, #32
 800e76a:	81bb      	strh	r3, [r7, #12]
 800e76c:	687a      	ldr	r2, [r7, #4]
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	441a      	add	r2, r3
 800e776:	89bb      	ldrh	r3, [r7, #12]
 800e778:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e77c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e780:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e788:	b29b      	uxth	r3, r3
 800e78a:	8013      	strh	r3, [r2, #0]
 800e78c:	e04b      	b.n	800e826 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	009b      	lsls	r3, r3, #2
 800e796:	4413      	add	r3, r2
 800e798:	881b      	ldrh	r3, [r3, #0]
 800e79a:	82fb      	strh	r3, [r7, #22]
 800e79c:	8afb      	ldrh	r3, [r7, #22]
 800e79e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d01b      	beq.n	800e7de <USB_EPClearStall+0xfc>
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	009b      	lsls	r3, r3, #2
 800e7ae:	4413      	add	r3, r2
 800e7b0:	881b      	ldrh	r3, [r3, #0]
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e7b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e7bc:	82bb      	strh	r3, [r7, #20]
 800e7be:	687a      	ldr	r2, [r7, #4]
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	781b      	ldrb	r3, [r3, #0]
 800e7c4:	009b      	lsls	r3, r3, #2
 800e7c6:	441a      	add	r2, r3
 800e7c8:	8abb      	ldrh	r3, [r7, #20]
 800e7ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e7ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e7d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e7d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7da:	b29b      	uxth	r3, r3
 800e7dc:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	4413      	add	r3, r2
 800e7e8:	881b      	ldrh	r3, [r3, #0]
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e7f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e7f4:	827b      	strh	r3, [r7, #18]
 800e7f6:	8a7b      	ldrh	r3, [r7, #18]
 800e7f8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e7fc:	827b      	strh	r3, [r7, #18]
 800e7fe:	8a7b      	ldrh	r3, [r7, #18]
 800e800:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e804:	827b      	strh	r3, [r7, #18]
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	009b      	lsls	r3, r3, #2
 800e80e:	441a      	add	r2, r3
 800e810:	8a7b      	ldrh	r3, [r7, #18]
 800e812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e81a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e81e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e822:	b29b      	uxth	r3, r3
 800e824:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e826:	2300      	movs	r3, #0
}
 800e828:	4618      	mov	r0, r3
 800e82a:	371c      	adds	r7, #28
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr

0800e834 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e834:	b480      	push	{r7}
 800e836:	b083      	sub	sp, #12
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	460b      	mov	r3, r1
 800e83e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e840:	78fb      	ldrb	r3, [r7, #3]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d103      	bne.n	800e84e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2280      	movs	r2, #128	@ 0x80
 800e84a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e84e:	2300      	movs	r3, #0
}
 800e850:	4618      	mov	r0, r3
 800e852:	370c      	adds	r7, #12
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr

0800e85c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b083      	sub	sp, #12
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e874:	b29a      	uxth	r2, r3
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e87c:	2300      	movs	r3, #0
}
 800e87e:	4618      	mov	r0, r3
 800e880:	370c      	adds	r7, #12
 800e882:	46bd      	mov	sp, r7
 800e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e888:	4770      	bx	lr

0800e88a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e88a:	b480      	push	{r7}
 800e88c:	b085      	sub	sp, #20
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e898:	b29b      	uxth	r3, r3
 800e89a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e89c:	68fb      	ldr	r3, [r7, #12]
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3714      	adds	r7, #20
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr

0800e8aa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e8aa:	b480      	push	{r7}
 800e8ac:	b08b      	sub	sp, #44	@ 0x2c
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	60f8      	str	r0, [r7, #12]
 800e8b2:	60b9      	str	r1, [r7, #8]
 800e8b4:	4611      	mov	r1, r2
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	460b      	mov	r3, r1
 800e8ba:	80fb      	strh	r3, [r7, #6]
 800e8bc:	4613      	mov	r3, r2
 800e8be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e8c0:	88bb      	ldrh	r3, [r7, #4]
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	085b      	lsrs	r3, r3, #1
 800e8c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e8d0:	88fa      	ldrh	r2, [r7, #6]
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e8da:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e8dc:	69bb      	ldr	r3, [r7, #24]
 800e8de:	627b      	str	r3, [r7, #36]	@ 0x24
 800e8e0:	e01b      	b.n	800e91a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e8e2:	69fb      	ldr	r3, [r7, #28]
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e8e8:	69fb      	ldr	r3, [r7, #28]
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	021b      	lsls	r3, r3, #8
 800e8f0:	b21a      	sxth	r2, r3
 800e8f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e8f6:	4313      	orrs	r3, r2
 800e8f8:	b21b      	sxth	r3, r3
 800e8fa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e8fc:	6a3b      	ldr	r3, [r7, #32]
 800e8fe:	8a7a      	ldrh	r2, [r7, #18]
 800e900:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e902:	6a3b      	ldr	r3, [r7, #32]
 800e904:	3302      	adds	r3, #2
 800e906:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	3301      	adds	r3, #1
 800e90c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	3301      	adds	r3, #1
 800e912:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e916:	3b01      	subs	r3, #1
 800e918:	627b      	str	r3, [r7, #36]	@ 0x24
 800e91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d1e0      	bne.n	800e8e2 <USB_WritePMA+0x38>
  }
}
 800e920:	bf00      	nop
 800e922:	bf00      	nop
 800e924:	372c      	adds	r7, #44	@ 0x2c
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr

0800e92e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e92e:	b480      	push	{r7}
 800e930:	b08b      	sub	sp, #44	@ 0x2c
 800e932:	af00      	add	r7, sp, #0
 800e934:	60f8      	str	r0, [r7, #12]
 800e936:	60b9      	str	r1, [r7, #8]
 800e938:	4611      	mov	r1, r2
 800e93a:	461a      	mov	r2, r3
 800e93c:	460b      	mov	r3, r1
 800e93e:	80fb      	strh	r3, [r7, #6]
 800e940:	4613      	mov	r3, r2
 800e942:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e944:	88bb      	ldrh	r3, [r7, #4]
 800e946:	085b      	lsrs	r3, r3, #1
 800e948:	b29b      	uxth	r3, r3
 800e94a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e954:	88fa      	ldrh	r2, [r7, #6]
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	4413      	add	r3, r2
 800e95a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e95e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	627b      	str	r3, [r7, #36]	@ 0x24
 800e964:	e018      	b.n	800e998 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e966:	6a3b      	ldr	r3, [r7, #32]
 800e968:	881b      	ldrh	r3, [r3, #0]
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e96e:	6a3b      	ldr	r3, [r7, #32]
 800e970:	3302      	adds	r3, #2
 800e972:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	b2da      	uxtb	r2, r3
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	3301      	adds	r3, #1
 800e980:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	0a1b      	lsrs	r3, r3, #8
 800e986:	b2da      	uxtb	r2, r3
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	3301      	adds	r3, #1
 800e990:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e994:	3b01      	subs	r3, #1
 800e996:	627b      	str	r3, [r7, #36]	@ 0x24
 800e998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d1e3      	bne.n	800e966 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e99e:	88bb      	ldrh	r3, [r7, #4]
 800e9a0:	f003 0301 	and.w	r3, r3, #1
 800e9a4:	b29b      	uxth	r3, r3
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d007      	beq.n	800e9ba <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e9aa:	6a3b      	ldr	r3, [r7, #32]
 800e9ac:	881b      	ldrh	r3, [r3, #0]
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	b2da      	uxtb	r2, r3
 800e9b6:	69fb      	ldr	r3, [r7, #28]
 800e9b8:	701a      	strb	r2, [r3, #0]
  }
}
 800e9ba:	bf00      	nop
 800e9bc:	372c      	adds	r7, #44	@ 0x2c
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr
	...

0800e9c8 <__NVIC_EnableIRQ>:
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e9d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	db0b      	blt.n	800e9f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e9da:	79fb      	ldrb	r3, [r7, #7]
 800e9dc:	f003 021f 	and.w	r2, r3, #31
 800e9e0:	4907      	ldr	r1, [pc, #28]	@ (800ea00 <__NVIC_EnableIRQ+0x38>)
 800e9e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9e6:	095b      	lsrs	r3, r3, #5
 800e9e8:	2001      	movs	r0, #1
 800e9ea:	fa00 f202 	lsl.w	r2, r0, r2
 800e9ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e9f2:	bf00      	nop
 800e9f4:	370c      	adds	r7, #12
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fc:	4770      	bx	lr
 800e9fe:	bf00      	nop
 800ea00:	e000e100 	.word	0xe000e100

0800ea04 <__NVIC_SetPriority>:
{
 800ea04:	b480      	push	{r7}
 800ea06:	b083      	sub	sp, #12
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	6039      	str	r1, [r7, #0]
 800ea0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ea10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	db0a      	blt.n	800ea2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	b2da      	uxtb	r2, r3
 800ea1c:	490c      	ldr	r1, [pc, #48]	@ (800ea50 <__NVIC_SetPriority+0x4c>)
 800ea1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ea22:	0112      	lsls	r2, r2, #4
 800ea24:	b2d2      	uxtb	r2, r2
 800ea26:	440b      	add	r3, r1
 800ea28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ea2c:	e00a      	b.n	800ea44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	b2da      	uxtb	r2, r3
 800ea32:	4908      	ldr	r1, [pc, #32]	@ (800ea54 <__NVIC_SetPriority+0x50>)
 800ea34:	79fb      	ldrb	r3, [r7, #7]
 800ea36:	f003 030f 	and.w	r3, r3, #15
 800ea3a:	3b04      	subs	r3, #4
 800ea3c:	0112      	lsls	r2, r2, #4
 800ea3e:	b2d2      	uxtb	r2, r2
 800ea40:	440b      	add	r3, r1
 800ea42:	761a      	strb	r2, [r3, #24]
}
 800ea44:	bf00      	nop
 800ea46:	370c      	adds	r7, #12
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr
 800ea50:	e000e100 	.word	0xe000e100
 800ea54:	e000ed00 	.word	0xe000ed00

0800ea58 <LL_AHB2_GRP1_EnableClock>:
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b085      	sub	sp, #20
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800ea60:	4b08      	ldr	r3, [pc, #32]	@ (800ea84 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800ea62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ea64:	4907      	ldr	r1, [pc, #28]	@ (800ea84 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	4313      	orrs	r3, r2
 800ea6a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800ea6c:	4b05      	ldr	r3, [pc, #20]	@ (800ea84 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800ea6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	4013      	ands	r3, r2
 800ea74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ea76:	68fb      	ldr	r3, [r7, #12]
}
 800ea78:	bf00      	nop
 800ea7a:	3714      	adds	r7, #20
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr
 800ea84:	40021000 	.word	0x40021000

0800ea88 <LL_GPIO_SetPinMode>:
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b08b      	sub	sp, #44	@ 0x2c
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	fa93 f3a3 	rbit	r3, r3
 800eaa2:	613b      	str	r3, [r7, #16]
  return result;
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800eaa8:	69bb      	ldr	r3, [r7, #24]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d101      	bne.n	800eab2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800eaae:	2320      	movs	r3, #32
 800eab0:	e003      	b.n	800eaba <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800eab2:	69bb      	ldr	r3, [r7, #24]
 800eab4:	fab3 f383 	clz	r3, r3
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	005b      	lsls	r3, r3, #1
 800eabc:	2103      	movs	r1, #3
 800eabe:	fa01 f303 	lsl.w	r3, r1, r3
 800eac2:	43db      	mvns	r3, r3
 800eac4:	401a      	ands	r2, r3
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800eaca:	6a3b      	ldr	r3, [r7, #32]
 800eacc:	fa93 f3a3 	rbit	r3, r3
 800ead0:	61fb      	str	r3, [r7, #28]
  return result;
 800ead2:	69fb      	ldr	r3, [r7, #28]
 800ead4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ead6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d101      	bne.n	800eae0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800eadc:	2320      	movs	r3, #32
 800eade:	e003      	b.n	800eae8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800eae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae2:	fab3 f383 	clz	r3, r3
 800eae6:	b2db      	uxtb	r3, r3
 800eae8:	005b      	lsls	r3, r3, #1
 800eaea:	6879      	ldr	r1, [r7, #4]
 800eaec:	fa01 f303 	lsl.w	r3, r1, r3
 800eaf0:	431a      	orrs	r2, r3
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	601a      	str	r2, [r3, #0]
}
 800eaf6:	bf00      	nop
 800eaf8:	372c      	adds	r7, #44	@ 0x2c
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr

0800eb02 <LL_GPIO_SetPinPull>:
{
 800eb02:	b480      	push	{r7}
 800eb04:	b08b      	sub	sp, #44	@ 0x2c
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	60f8      	str	r0, [r7, #12]
 800eb0a:	60b9      	str	r1, [r7, #8]
 800eb0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	68da      	ldr	r2, [r3, #12]
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	fa93 f3a3 	rbit	r3, r3
 800eb1c:	613b      	str	r3, [r7, #16]
  return result;
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800eb22:	69bb      	ldr	r3, [r7, #24]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d101      	bne.n	800eb2c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800eb28:	2320      	movs	r3, #32
 800eb2a:	e003      	b.n	800eb34 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800eb2c:	69bb      	ldr	r3, [r7, #24]
 800eb2e:	fab3 f383 	clz	r3, r3
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	005b      	lsls	r3, r3, #1
 800eb36:	2103      	movs	r1, #3
 800eb38:	fa01 f303 	lsl.w	r3, r1, r3
 800eb3c:	43db      	mvns	r3, r3
 800eb3e:	401a      	ands	r2, r3
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800eb44:	6a3b      	ldr	r3, [r7, #32]
 800eb46:	fa93 f3a3 	rbit	r3, r3
 800eb4a:	61fb      	str	r3, [r7, #28]
  return result;
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800eb50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d101      	bne.n	800eb5a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800eb56:	2320      	movs	r3, #32
 800eb58:	e003      	b.n	800eb62 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800eb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb5c:	fab3 f383 	clz	r3, r3
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	005b      	lsls	r3, r3, #1
 800eb64:	6879      	ldr	r1, [r7, #4]
 800eb66:	fa01 f303 	lsl.w	r3, r1, r3
 800eb6a:	431a      	orrs	r2, r3
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	60da      	str	r2, [r3, #12]
}
 800eb70:	bf00      	nop
 800eb72:	372c      	adds	r7, #44	@ 0x2c
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <LL_UCPD_Enable>:
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	601a      	str	r2, [r3, #0]
}
 800eb90:	bf00      	nop
 800eb92:	370c      	adds	r7, #12
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr

0800eb9c <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ebae:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ebb2:	683a      	ldr	r2, [r7, #0]
 800ebb4:	431a      	orrs	r2, r3
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	601a      	str	r2, [r3, #0]
}
 800ebba:	bf00      	nop
 800ebbc:	370c      	adds	r7, #12
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc4:	4770      	bx	lr

0800ebc6 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 800ebc6:	b480      	push	{r7}
 800ebc8:	b083      	sub	sp, #12
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
 800ebce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	68db      	ldr	r3, [r3, #12]
 800ebd4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	431a      	orrs	r2, r3
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	60da      	str	r2, [r3, #12]
}
 800ebe0:	bf00      	nop
 800ebe2:	370c      	adds	r7, #12
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr

0800ebec <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b083      	sub	sp, #12
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	691b      	ldr	r3, [r3, #16]
 800ebf8:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	611a      	str	r2, [r3, #16]
}
 800ec00:	bf00      	nop
 800ec02:	370c      	adds	r7, #12
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr

0800ec0c <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	691b      	ldr	r3, [r3, #16]
 800ec18:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	611a      	str	r2, [r3, #16]
}
 800ec20:	bf00      	nop
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800ec30:	4b05      	ldr	r3, [pc, #20]	@ (800ec48 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800ec32:	689b      	ldr	r3, [r3, #8]
 800ec34:	4a04      	ldr	r2, [pc, #16]	@ (800ec48 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800ec36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ec3a:	6093      	str	r3, [r2, #8]
}
 800ec3c:	bf00      	nop
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr
 800ec46:	bf00      	nop
 800ec48:	40007000 	.word	0x40007000

0800ec4c <CAD_Init>:
  * @param  pParams       Pointer on PD parameters based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 800ec4c:	b590      	push	{r4, r7, lr}
 800ec4e:	b08b      	sub	sp, #44	@ 0x2c
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60b9      	str	r1, [r7, #8]
 800ec54:	607a      	str	r2, [r7, #4]
 800ec56:	603b      	str	r3, [r7, #0]
 800ec58:	4603      	mov	r3, r0
 800ec5a:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800ec5c:	7bfa      	ldrb	r2, [r7, #15]
 800ec5e:	4613      	mov	r3, r2
 800ec60:	005b      	lsls	r3, r3, #1
 800ec62:	4413      	add	r3, r2
 800ec64:	009b      	lsls	r3, r3, #2
 800ec66:	4a66      	ldr	r2, [pc, #408]	@ (800ee00 <CAD_Init+0x1b4>)
 800ec68:	4413      	add	r3, r2
 800ec6a:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 800ec6c:	7bfa      	ldrb	r2, [r7, #15]
 800ec6e:	4965      	ldr	r1, [pc, #404]	@ (800ee04 <CAD_Init+0x1b8>)
 800ec70:	4613      	mov	r3, r2
 800ec72:	011b      	lsls	r3, r3, #4
 800ec74:	1a9b      	subs	r3, r3, r2
 800ec76:	009b      	lsls	r3, r3, #2
 800ec78:	440b      	add	r3, r1
 800ec7a:	3310      	adds	r3, #16
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 800ec80:	7bfa      	ldrb	r2, [r7, #15]
 800ec82:	4960      	ldr	r1, [pc, #384]	@ (800ee04 <CAD_Init+0x1b8>)
 800ec84:	4613      	mov	r3, r2
 800ec86:	011b      	lsls	r3, r3, #4
 800ec88:	1a9b      	subs	r3, r3, r2
 800ec8a:	009b      	lsls	r3, r3, #2
 800ec8c:	440b      	add	r3, r1
 800ec8e:	330c      	adds	r3, #12
 800ec90:	68ba      	ldr	r2, [r7, #8]
 800ec92:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 800ec94:	7bfa      	ldrb	r2, [r7, #15]
 800ec96:	495b      	ldr	r1, [pc, #364]	@ (800ee04 <CAD_Init+0x1b8>)
 800ec98:	4613      	mov	r3, r2
 800ec9a:	011b      	lsls	r3, r3, #4
 800ec9c:	1a9b      	subs	r3, r3, r2
 800ec9e:	009b      	lsls	r3, r3, #2
 800eca0:	440b      	add	r3, r1
 800eca2:	330c      	adds	r3, #12
 800eca4:	6819      	ldr	r1, [r3, #0]
 800eca6:	7bfa      	ldrb	r2, [r7, #15]
 800eca8:	4856      	ldr	r0, [pc, #344]	@ (800ee04 <CAD_Init+0x1b8>)
 800ecaa:	4613      	mov	r3, r2
 800ecac:	011b      	lsls	r3, r3, #4
 800ecae:	1a9b      	subs	r3, r3, r2
 800ecb0:	009b      	lsls	r3, r3, #2
 800ecb2:	4403      	add	r3, r0
 800ecb4:	3310      	adds	r3, #16
 800ecb6:	681a      	ldr	r2, [r3, #0]
 800ecb8:	794b      	ldrb	r3, [r1, #5]
 800ecba:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800ecbe:	b2d9      	uxtb	r1, r3
 800ecc0:	7893      	ldrb	r3, [r2, #2]
 800ecc2:	f361 0301 	bfi	r3, r1, #0, #2
 800ecc6:	7093      	strb	r3, [r2, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 800ecc8:	7bfa      	ldrb	r2, [r7, #15]
 800ecca:	494e      	ldr	r1, [pc, #312]	@ (800ee04 <CAD_Init+0x1b8>)
 800eccc:	4613      	mov	r3, r2
 800ecce:	011b      	lsls	r3, r3, #4
 800ecd0:	1a9b      	subs	r3, r3, r2
 800ecd2:	009b      	lsls	r3, r3, #2
 800ecd4:	440b      	add	r3, r1
 800ecd6:	3310      	adds	r3, #16
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	7893      	ldrb	r3, [r2, #2]
 800ecdc:	f36f 0383 	bfc	r3, #2, #2
 800ece0:	7093      	strb	r3, [r2, #2]

  /* Reset handle */
  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 800ece2:	220c      	movs	r2, #12
 800ece4:	2100      	movs	r1, #0
 800ece6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ece8:	f008 fa06 	bl	80170f8 <memset>

  /* Register CAD wake up callback */
  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 800ecec:	7bfa      	ldrb	r2, [r7, #15]
 800ecee:	4945      	ldr	r1, [pc, #276]	@ (800ee04 <CAD_Init+0x1b8>)
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	011b      	lsls	r3, r3, #4
 800ecf4:	1a9b      	subs	r3, r3, r2
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	440b      	add	r3, r1
 800ecfa:	332c      	adds	r3, #44	@ 0x2c
 800ecfc:	683a      	ldr	r2, [r7, #0]
 800ecfe:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 800ed00:	7bfc      	ldrb	r4, [r7, #15]
 800ed02:	7bfb      	ldrb	r3, [r7, #15]
 800ed04:	4618      	mov	r0, r3
 800ed06:	f000 fbb1 	bl	800f46c <USBPD_HW_GetUSPDInstance>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	493d      	ldr	r1, [pc, #244]	@ (800ee04 <CAD_Init+0x1b8>)
 800ed0e:	4623      	mov	r3, r4
 800ed10:	011b      	lsls	r3, r3, #4
 800ed12:	1b1b      	subs	r3, r3, r4
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	440b      	add	r3, r1
 800ed18:	601a      	str	r2, [r3, #0]

  /* Initialize UCPD */
  LL_UCPD_StructInit(&settings);
 800ed1a:	f107 0314 	add.w	r3, r7, #20
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7fd ffa2 	bl	800cc68 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 800ed24:	7bfa      	ldrb	r2, [r7, #15]
 800ed26:	4937      	ldr	r1, [pc, #220]	@ (800ee04 <CAD_Init+0x1b8>)
 800ed28:	4613      	mov	r3, r2
 800ed2a:	011b      	lsls	r3, r3, #4
 800ed2c:	1a9b      	subs	r3, r3, r2
 800ed2e:	009b      	lsls	r3, r3, #2
 800ed30:	440b      	add	r3, r1
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f107 0214 	add.w	r2, r7, #20
 800ed38:	4611      	mov	r1, r2
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7fd ff66 	bl	800cc0c <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 800ed40:	7bfa      	ldrb	r2, [r7, #15]
 800ed42:	4930      	ldr	r1, [pc, #192]	@ (800ee04 <CAD_Init+0x1b8>)
 800ed44:	4613      	mov	r3, r2
 800ed46:	011b      	lsls	r3, r3, #4
 800ed48:	1a9b      	subs	r3, r3, r2
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	440b      	add	r3, r1
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7ff ff21 	bl	800eb9c <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800ed5a:	7bfa      	ldrb	r2, [r7, #15]
 800ed5c:	4929      	ldr	r1, [pc, #164]	@ (800ee04 <CAD_Init+0x1b8>)
 800ed5e:	4613      	mov	r3, r2
 800ed60:	011b      	lsls	r3, r3, #4
 800ed62:	1a9b      	subs	r3, r3, r2
 800ed64:	009b      	lsls	r3, r3, #2
 800ed66:	440b      	add	r3, r1
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7ff ff29 	bl	800ebc6 <LL_UCPD_SetccEnable>
#ifdef _LOW_POWER
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */

  /* Disable dead battery */
  LL_PWR_DisableUCPDDeadBattery(); /* PWR->CR3 |= (1 << 14); */
 800ed74:	f7ff ff5a 	bl	800ec2c <LL_PWR_DisableUCPDDeadBattery>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB); /* GPIOB enable RCC->AHB2ENR |= 2; */
 800ed78:	2002      	movs	r0, #2
 800ed7a:	f7ff fe6d 	bl	800ea58 <LL_AHB2_GRP1_EnableClock>

  /* Set by default UCPD1_CC1 & UCPD1_CC2 in analog mode */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ANALOG); /* PB6 mode = GP analog => CC1 */
 800ed7e:	2203      	movs	r2, #3
 800ed80:	2140      	movs	r1, #64	@ 0x40
 800ed82:	4821      	ldr	r0, [pc, #132]	@ (800ee08 <CAD_Init+0x1bc>)
 800ed84:	f7ff fe80 	bl	800ea88 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_ANALOG); /* PB4 mode = GP analog => CC2 */
 800ed88:	2203      	movs	r2, #3
 800ed8a:	2110      	movs	r1, #16
 800ed8c:	481e      	ldr	r0, [pc, #120]	@ (800ee08 <CAD_Init+0x1bc>)
 800ed8e:	f7ff fe7b 	bl	800ea88 <LL_GPIO_SetPinMode>

  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 800ed92:	2200      	movs	r2, #0
 800ed94:	2140      	movs	r1, #64	@ 0x40
 800ed96:	481c      	ldr	r0, [pc, #112]	@ (800ee08 <CAD_Init+0x1bc>)
 800ed98:	f7ff feb3 	bl	800eb02 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	2110      	movs	r1, #16
 800eda0:	4819      	ldr	r0, [pc, #100]	@ (800ee08 <CAD_Init+0x1bc>)
 800eda2:	f7ff feae 	bl	800eb02 <LL_GPIO_SetPinPull>

  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 800eda6:	7bfb      	ldrb	r3, [r7, #15]
 800eda8:	4618      	mov	r0, r3
 800edaa:	f007 fbb3 	bl	8016514 <BSP_USBPD_PWR_Init>
  /* Register VBUS detect callback */
  BSP_USBPD_PWR_RegisterVBUSDetectCallback(PortNum, CAD_HW_IF_VBUSDetectCallback);
#endif /* TCPP0203_SUPPORT */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800edae:	7bfa      	ldrb	r2, [r7, #15]
 800edb0:	4914      	ldr	r1, [pc, #80]	@ (800ee04 <CAD_Init+0x1b8>)
 800edb2:	4613      	mov	r3, r2
 800edb4:	011b      	lsls	r3, r3, #4
 800edb6:	1a9b      	subs	r3, r3, r2
 800edb8:	009b      	lsls	r3, r3, #2
 800edba:	440b      	add	r3, r1
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7ff fedc 	bl	800eb7c <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 800edc4:	7bfb      	ldrb	r3, [r7, #15]
 800edc6:	4618      	mov	r0, r3
 800edc8:	f001 fc64 	bl	8010694 <USBPDM1_AssertRd>
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      /* Set current state machine to SNK state machine */
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 800edcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edce:	4a0f      	ldr	r2, [pc, #60]	@ (800ee0c <CAD_Init+0x1c0>)
 800edd0:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 800edd2:	7bfa      	ldrb	r2, [r7, #15]
 800edd4:	490b      	ldr	r1, [pc, #44]	@ (800ee04 <CAD_Init+0x1b8>)
 800edd6:	4613      	mov	r3, r2
 800edd8:	011b      	lsls	r3, r3, #4
 800edda:	1a9b      	subs	r3, r3, r2
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	440b      	add	r3, r1
 800ede0:	330c      	adds	r3, #12
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	795b      	ldrb	r3, [r3, #5]
 800ede6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800edea:	b2d9      	uxtb	r1, r3
 800edec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800edee:	7853      	ldrb	r3, [r2, #1]
 800edf0:	f361 13c7 	bfi	r3, r1, #7, #1
 800edf4:	7053      	strb	r3, [r2, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 800edf6:	bf00      	nop
 800edf8:	372c      	adds	r7, #44	@ 0x2c
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd90      	pop	{r4, r7, pc}
 800edfe:	bf00      	nop
 800ee00:	20000574 	.word	0x20000574
 800ee04:	2000058c 	.word	0x2000058c
 800ee08:	48000400 	.word	0x48000400
 800ee0c:	0800eee9 	.word	0x0800eee9

0800ee10 <CAD_Enter_ErrorRecovery>:
  * @brief  Function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b082      	sub	sp, #8
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	4603      	mov	r3, r0
 800ee18:	71fb      	strb	r3, [r7, #7]
  /* Remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 800ee1a:	79fb      	ldrb	r3, [r7, #7]
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f001 fccb 	bl	80107b8 <USBPDM1_EnterErrorRecovery>
  /* Set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 800ee22:	79fa      	ldrb	r2, [r7, #7]
 800ee24:	490b      	ldr	r1, [pc, #44]	@ (800ee54 <CAD_Enter_ErrorRecovery+0x44>)
 800ee26:	4613      	mov	r3, r2
 800ee28:	005b      	lsls	r3, r3, #1
 800ee2a:	4413      	add	r3, r2
 800ee2c:	009b      	lsls	r3, r3, #2
 800ee2e:	18ca      	adds	r2, r1, r3
 800ee30:	7813      	ldrb	r3, [r2, #0]
 800ee32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee36:	7013      	strb	r3, [r2, #0]
  /* Wake up CAD task */
  Ports[PortNum].USBPD_CAD_WakeUp();
 800ee38:	79fa      	ldrb	r2, [r7, #7]
 800ee3a:	4907      	ldr	r1, [pc, #28]	@ (800ee58 <CAD_Enter_ErrorRecovery+0x48>)
 800ee3c:	4613      	mov	r3, r2
 800ee3e:	011b      	lsls	r3, r3, #4
 800ee40:	1a9b      	subs	r3, r3, r2
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	440b      	add	r3, r1
 800ee46:	332c      	adds	r3, #44	@ 0x2c
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	4798      	blx	r3
}
 800ee4c:	bf00      	nop
 800ee4e:	3708      	adds	r7, #8
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	20000574 	.word	0x20000574
 800ee58:	2000058c 	.word	0x2000058c

0800ee5c <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	4603      	mov	r3, r0
 800ee64:	6039      	str	r1, [r7, #0]
 800ee66:	71fb      	strb	r3, [r7, #7]
  /* Update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 800ee68:	79fa      	ldrb	r2, [r7, #7]
 800ee6a:	4915      	ldr	r1, [pc, #84]	@ (800eec0 <CAD_SRC_Set_ResistorRp+0x64>)
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	011b      	lsls	r3, r3, #4
 800ee70:	1a9b      	subs	r3, r3, r2
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	440b      	add	r3, r1
 800ee76:	3310      	adds	r3, #16
 800ee78:	681a      	ldr	r2, [r3, #0]
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	f003 0303 	and.w	r3, r3, #3
 800ee80:	b2d9      	uxtb	r1, r3
 800ee82:	7893      	ldrb	r3, [r2, #2]
 800ee84:	f361 0301 	bfi	r3, r1, #0, #2
 800ee88:	7093      	strb	r3, [r2, #2]

  /* Inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 800ee8a:	79fa      	ldrb	r2, [r7, #7]
 800ee8c:	490d      	ldr	r1, [pc, #52]	@ (800eec4 <CAD_SRC_Set_ResistorRp+0x68>)
 800ee8e:	4613      	mov	r3, r2
 800ee90:	005b      	lsls	r3, r3, #1
 800ee92:	4413      	add	r3, r2
 800ee94:	009b      	lsls	r3, r3, #2
 800ee96:	18ca      	adds	r2, r1, r3
 800ee98:	7853      	ldrb	r3, [r2, #1]
 800ee9a:	f043 0301 	orr.w	r3, r3, #1
 800ee9e:	7053      	strb	r3, [r2, #1]
  /* Wake up CAD task */
  Ports[PortNum].USBPD_CAD_WakeUp();
 800eea0:	79fa      	ldrb	r2, [r7, #7]
 800eea2:	4907      	ldr	r1, [pc, #28]	@ (800eec0 <CAD_SRC_Set_ResistorRp+0x64>)
 800eea4:	4613      	mov	r3, r2
 800eea6:	011b      	lsls	r3, r3, #4
 800eea8:	1a9b      	subs	r3, r3, r2
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	440b      	add	r3, r1
 800eeae:	332c      	adds	r3, #44	@ 0x2c
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4798      	blx	r3
  return 0;
 800eeb4:	2300      	movs	r3, #0
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3708      	adds	r7, #8
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
 800eebe:	bf00      	nop
 800eec0:	2000058c 	.word	0x2000058c
 800eec4:	20000574 	.word	0x20000574

0800eec8 <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
 800eece:	4603      	mov	r3, r0
 800eed0:	6039      	str	r1, [r7, #0]
 800eed2:	71fb      	strb	r3, [r7, #7]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 800eed4:	79fb      	ldrb	r3, [r7, #7]
 800eed6:	6839      	ldr	r1, [r7, #0]
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7ff ffbf 	bl	800ee5c <CAD_SRC_Set_ResistorRp>
 800eede:	4603      	mov	r3, r0
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}

0800eee8 <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* Function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b086      	sub	sp, #24
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	4603      	mov	r3, r0
 800eef0:	60b9      	str	r1, [r7, #8]
 800eef2:	607a      	str	r2, [r7, #4]
 800eef4:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800eef6:	7bfa      	ldrb	r2, [r7, #15]
 800eef8:	4613      	mov	r3, r2
 800eefa:	005b      	lsls	r3, r3, #1
 800eefc:	4413      	add	r3, r2
 800eefe:	009b      	lsls	r3, r3, #2
 800ef00:	4a17      	ldr	r2, [pc, #92]	@ (800ef60 <CAD_StateMachine_SNK+0x78>)
 800ef02:	4413      	add	r3, r2
 800ef04:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800ef06:	2302      	movs	r3, #2
 800ef08:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /* Check CAD STATE */
  switch (_handle->cstate)
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	785b      	ldrb	r3, [r3, #1]
 800ef0e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800ef12:	b2db      	uxtb	r3, r3
 800ef14:	2b03      	cmp	r3, #3
 800ef16:	d014      	beq.n	800ef42 <CAD_StateMachine_SNK+0x5a>
 800ef18:	2b03      	cmp	r3, #3
 800ef1a:	dc1a      	bgt.n	800ef52 <CAD_StateMachine_SNK+0x6a>
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	d002      	beq.n	800ef26 <CAD_StateMachine_SNK+0x3e>
 800ef20:	2b02      	cmp	r3, #2
 800ef22:	d006      	beq.n	800ef32 <CAD_StateMachine_SNK+0x4a>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 800ef24:	e015      	b.n	800ef52 <CAD_StateMachine_SNK+0x6a>
      _timing = ManageStateDetached_SNK(PortNum);
 800ef26:	7bfb      	ldrb	r3, [r7, #15]
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f000 f955 	bl	800f1d8 <ManageStateDetached_SNK>
 800ef2e:	6178      	str	r0, [r7, #20]
      break;
 800ef30:	e010      	b.n	800ef54 <CAD_StateMachine_SNK+0x6c>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 800ef32:	7bfb      	ldrb	r3, [r7, #15]
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	68b9      	ldr	r1, [r7, #8]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f000 f997 	bl	800f26c <ManageStateAttachedWait_SNK>
 800ef3e:	6178      	str	r0, [r7, #20]
      break;
 800ef40:	e008      	b.n	800ef54 <CAD_StateMachine_SNK+0x6c>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 800ef42:	7bfb      	ldrb	r3, [r7, #15]
 800ef44:	687a      	ldr	r2, [r7, #4]
 800ef46:	68b9      	ldr	r1, [r7, #8]
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f000 fa11 	bl	800f370 <ManageStateAttached_SNK>
 800ef4e:	6178      	str	r0, [r7, #20]
      break;
 800ef50:	e000      	b.n	800ef54 <CAD_StateMachine_SNK+0x6c>
      break;
 800ef52:	bf00      	nop
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 800ef54:	697b      	ldr	r3, [r7, #20]
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3718      	adds	r7, #24
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
 800ef5e:	bf00      	nop
 800ef60:	20000574 	.word	0x20000574

0800ef64 <CAD_StateMachine>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b086      	sub	sp, #24
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	60b9      	str	r1, [r7, #8]
 800ef6e:	607a      	str	r2, [r7, #4]
 800ef70:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800ef72:	7bfa      	ldrb	r2, [r7, #15]
 800ef74:	4613      	mov	r3, r2
 800ef76:	005b      	lsls	r3, r3, #1
 800ef78:	4413      	add	r3, r2
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	4a52      	ldr	r2, [pc, #328]	@ (800f0c8 <CAD_StateMachine+0x164>)
 800ef7e:	4413      	add	r3, r2
 800ef80:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800ef82:	2302      	movs	r3, #2
 800ef84:	617b      	str	r3, [r7, #20]

  /* Set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	701a      	strb	r2, [r3, #0]

  /* If a swap is on going, return default timing */
  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 800ef8c:	7bfa      	ldrb	r2, [r7, #15]
 800ef8e:	494f      	ldr	r1, [pc, #316]	@ (800f0cc <CAD_StateMachine+0x168>)
 800ef90:	4613      	mov	r3, r2
 800ef92:	011b      	lsls	r3, r3, #4
 800ef94:	1a9b      	subs	r3, r3, r2
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	440b      	add	r3, r1
 800ef9a:	3310      	adds	r3, #16
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	f003 0310 	and.w	r3, r3, #16
 800efa4:	b2db      	uxtb	r3, r3
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d001      	beq.n	800efae <CAD_StateMachine+0x4a>
  {
    return _timing;
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	e087      	b.n	800f0be <CAD_StateMachine+0x15a>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d00a      	beq.n	800efd2 <CAD_StateMachine+0x6e>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 800efbc:	693a      	ldr	r2, [r7, #16]
 800efbe:	7813      	ldrb	r3, [r2, #0]
 800efc0:	f36f 13c7 	bfc	r3, #7, #1
 800efc4:	7013      	strb	r3, [r2, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 800efc6:	693a      	ldr	r2, [r7, #16]
 800efc8:	7853      	ldrb	r3, [r2, #1]
 800efca:	210c      	movs	r1, #12
 800efcc:	f361 0345 	bfi	r3, r1, #1, #5
 800efd0:	7053      	strb	r3, [r2, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	785b      	ldrb	r3, [r3, #1]
 800efd6:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	2b0d      	cmp	r3, #13
 800efde:	d051      	beq.n	800f084 <CAD_StateMachine+0x120>
 800efe0:	2b0d      	cmp	r3, #13
 800efe2:	dc62      	bgt.n	800f0aa <CAD_StateMachine+0x146>
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d002      	beq.n	800efee <CAD_StateMachine+0x8a>
 800efe8:	2b0c      	cmp	r3, #12
 800efea:	d024      	beq.n	800f036 <CAD_StateMachine+0xd2>
 800efec:	e05d      	b.n	800f0aa <CAD_StateMachine+0x146>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      /* Enable TypeCEvents Interrupts */
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 800efee:	7bfa      	ldrb	r2, [r7, #15]
 800eff0:	4936      	ldr	r1, [pc, #216]	@ (800f0cc <CAD_StateMachine+0x168>)
 800eff2:	4613      	mov	r3, r2
 800eff4:	011b      	lsls	r3, r3, #4
 800eff6:	1a9b      	subs	r3, r3, r2
 800eff8:	009b      	lsls	r3, r3, #2
 800effa:	440b      	add	r3, r1
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	4618      	mov	r0, r3
 800f000:	f7ff fdf4 	bl	800ebec <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 800f004:	7bfa      	ldrb	r2, [r7, #15]
 800f006:	4931      	ldr	r1, [pc, #196]	@ (800f0cc <CAD_StateMachine+0x168>)
 800f008:	4613      	mov	r3, r2
 800f00a:	011b      	lsls	r3, r3, #4
 800f00c:	1a9b      	subs	r3, r3, r2
 800f00e:	009b      	lsls	r3, r3, #2
 800f010:	440b      	add	r3, r1
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	4618      	mov	r0, r3
 800f016:	f7ff fdf9 	bl	800ec0c <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      /* Enable IRQ */
      UCPD_INSTANCE0_ENABLEIRQ;
 800f01a:	2104      	movs	r1, #4
 800f01c:	203f      	movs	r0, #63	@ 0x3f
 800f01e:	f7ff fcf1 	bl	800ea04 <__NVIC_SetPriority>
 800f022:	203f      	movs	r0, #63	@ 0x3f
 800f024:	f7ff fcd0 	bl	800e9c8 <__NVIC_EnableIRQ>
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800f028:	693a      	ldr	r2, [r7, #16]
 800f02a:	7853      	ldrb	r3, [r2, #1]
 800f02c:	2101      	movs	r1, #1
 800f02e:	f361 0345 	bfi	r3, r1, #1, #5
 800f032:	7053      	strb	r3, [r2, #1]
      break;
 800f034:	e042      	b.n	800f0bc <CAD_StateMachine+0x158>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 800f036:	7bfb      	ldrb	r3, [r7, #15]
 800f038:	4618      	mov	r0, r3
 800f03a:	f001 fbbd 	bl	80107b8 <USBPDM1_EnterErrorRecovery>

      /* Forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 800f03e:	7bfa      	ldrb	r2, [r7, #15]
 800f040:	4922      	ldr	r1, [pc, #136]	@ (800f0cc <CAD_StateMachine+0x168>)
 800f042:	4613      	mov	r3, r2
 800f044:	011b      	lsls	r3, r3, #4
 800f046:	1a9b      	subs	r3, r3, r2
 800f048:	009b      	lsls	r3, r3, #2
 800f04a:	440b      	add	r3, r1
 800f04c:	3334      	adds	r3, #52	@ 0x34
 800f04e:	2200      	movs	r2, #0
 800f050:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2200      	movs	r2, #0
 800f056:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 800f058:	693a      	ldr	r2, [r7, #16]
 800f05a:	7813      	ldrb	r3, [r2, #0]
 800f05c:	f36f 0301 	bfc	r3, #0, #2
 800f060:	7013      	strb	r3, [r2, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	2201      	movs	r2, #1
 800f066:	701a      	strb	r2, [r3, #0]

      /* Start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800f068:	f7f7 ffa2 	bl	8006fb0 <HAL_GetTick>
 800f06c:	4602      	mov	r2, r0
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 800f072:	231a      	movs	r3, #26
 800f074:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 800f076:	693a      	ldr	r2, [r7, #16]
 800f078:	7853      	ldrb	r3, [r2, #1]
 800f07a:	210d      	movs	r1, #13
 800f07c:	f361 0345 	bfi	r3, r1, #1, #5
 800f080:	7053      	strb	r3, [r2, #1]
      break;
 800f082:	e01b      	b.n	800f0bc <CAD_StateMachine+0x158>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 800f084:	f7f7 ff94 	bl	8006fb0 <HAL_GetTick>
 800f088:	4602      	mov	r2, r0
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	685b      	ldr	r3, [r3, #4]
 800f08e:	1ad3      	subs	r3, r2, r3
 800f090:	2b1a      	cmp	r3, #26
 800f092:	d912      	bls.n	800f0ba <CAD_StateMachine+0x156>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 800f094:	7bfb      	ldrb	r3, [r7, #15]
 800f096:	4618      	mov	r0, r3
 800f098:	f001 fafc 	bl	8010694 <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* Switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800f09c:	693a      	ldr	r2, [r7, #16]
 800f09e:	7853      	ldrb	r3, [r2, #1]
 800f0a0:	2101      	movs	r1, #1
 800f0a2:	f361 0345 	bfi	r3, r1, #1, #5
 800f0a6:	7053      	strb	r3, [r2, #1]
      }
      break;
 800f0a8:	e007      	b.n	800f0ba <CAD_StateMachine+0x156>
    }

    default:
    {
      /* Call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	689b      	ldr	r3, [r3, #8]
 800f0ae:	7bf8      	ldrb	r0, [r7, #15]
 800f0b0:	687a      	ldr	r2, [r7, #4]
 800f0b2:	68b9      	ldr	r1, [r7, #8]
 800f0b4:	4798      	blx	r3
 800f0b6:	6178      	str	r0, [r7, #20]
      break;
 800f0b8:	e000      	b.n	800f0bc <CAD_StateMachine+0x158>
      break;
 800f0ba:	bf00      	nop
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 800f0bc:	697b      	ldr	r3, [r7, #20]
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3718      	adds	r7, #24
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}
 800f0c6:	bf00      	nop
 800f0c8:	20000574 	.word	0x20000574
 800f0cc:	2000058c 	.word	0x2000058c

0800f0d0 <CAD_Check_HW_SNK>:
  * @brief  Check CCx HW condition
  * @param  PortNum Port
  * @retval none
  */
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b087      	sub	sp, #28
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800f0da:	79fa      	ldrb	r2, [r7, #7]
 800f0dc:	4613      	mov	r3, r2
 800f0de:	005b      	lsls	r3, r3, #1
 800f0e0:	4413      	add	r3, r2
 800f0e2:	009b      	lsls	r3, r3, #2
 800f0e4:	4a3a      	ldr	r2, [pc, #232]	@ (800f1d0 <CAD_Check_HW_SNK+0x100>)
 800f0e6:	4413      	add	r3, r2
 800f0e8:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 800f0ea:	79fa      	ldrb	r2, [r7, #7]
 800f0ec:	4939      	ldr	r1, [pc, #228]	@ (800f1d4 <CAD_Check_HW_SNK+0x104>)
 800f0ee:	4613      	mov	r3, r2
 800f0f0:	011b      	lsls	r3, r3, #4
 800f0f2:	1a9b      	subs	r3, r3, r2
 800f0f4:	009b      	lsls	r3, r3, #2
 800f0f6:	440b      	add	r3, r1
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	695b      	ldr	r3, [r3, #20]
 800f0fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f100:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 800f102:	79fa      	ldrb	r2, [r7, #7]
 800f104:	4933      	ldr	r1, [pc, #204]	@ (800f1d4 <CAD_Check_HW_SNK+0x104>)
 800f106:	4613      	mov	r3, r2
 800f108:	011b      	lsls	r3, r3, #4
 800f10a:	1a9b      	subs	r3, r3, r2
 800f10c:	009b      	lsls	r3, r3, #2
 800f10e:	440b      	add	r3, r1
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	695b      	ldr	r3, [r3, #20]
 800f114:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800f118:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 800f11a:	697a      	ldr	r2, [r7, #20]
 800f11c:	7813      	ldrb	r3, [r2, #0]
 800f11e:	f36f 0301 	bfc	r3, #0, #2
 800f122:	7013      	strb	r3, [r2, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 800f124:	697a      	ldr	r2, [r7, #20]
 800f126:	7813      	ldrb	r3, [r2, #0]
 800f128:	f36f 0384 	bfc	r3, #2, #3
 800f12c:	7013      	strb	r3, [r2, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d021      	beq.n	800f178 <CAD_Check_HW_SNK+0xa8>
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d11e      	bne.n	800f178 <CAD_Check_HW_SNK+0xa8>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 800f13a:	697a      	ldr	r2, [r7, #20]
 800f13c:	7813      	ldrb	r3, [r2, #0]
 800f13e:	2101      	movs	r1, #1
 800f140:	f361 0384 	bfi	r3, r1, #2, #3
 800f144:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC1;
 800f146:	697a      	ldr	r2, [r7, #20]
 800f148:	7813      	ldrb	r3, [r2, #0]
 800f14a:	2101      	movs	r1, #1
 800f14c:	f361 0301 	bfi	r3, r1, #0, #2
 800f150:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	0c18      	lsrs	r0, r3, #16
 800f156:	79fa      	ldrb	r2, [r7, #7]
 800f158:	491e      	ldr	r1, [pc, #120]	@ (800f1d4 <CAD_Check_HW_SNK+0x104>)
 800f15a:	4613      	mov	r3, r2
 800f15c:	011b      	lsls	r3, r3, #4
 800f15e:	1a9b      	subs	r3, r3, r2
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	440b      	add	r3, r1
 800f164:	3310      	adds	r3, #16
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	4603      	mov	r3, r0
 800f16a:	f003 0303 	and.w	r3, r3, #3
 800f16e:	b2d9      	uxtb	r1, r3
 800f170:	7893      	ldrb	r3, [r2, #2]
 800f172:	f361 0383 	bfi	r3, r1, #2, #2
 800f176:	7093      	strb	r3, [r2, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d121      	bne.n	800f1c2 <CAD_Check_HW_SNK+0xf2>
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d01e      	beq.n	800f1c2 <CAD_Check_HW_SNK+0xf2>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 800f184:	697a      	ldr	r2, [r7, #20]
 800f186:	7813      	ldrb	r3, [r2, #0]
 800f188:	2101      	movs	r1, #1
 800f18a:	f361 0384 	bfi	r3, r1, #2, #3
 800f18e:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC2;
 800f190:	697a      	ldr	r2, [r7, #20]
 800f192:	7813      	ldrb	r3, [r2, #0]
 800f194:	2102      	movs	r1, #2
 800f196:	f361 0301 	bfi	r3, r1, #0, #2
 800f19a:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	0c98      	lsrs	r0, r3, #18
 800f1a0:	79fa      	ldrb	r2, [r7, #7]
 800f1a2:	490c      	ldr	r1, [pc, #48]	@ (800f1d4 <CAD_Check_HW_SNK+0x104>)
 800f1a4:	4613      	mov	r3, r2
 800f1a6:	011b      	lsls	r3, r3, #4
 800f1a8:	1a9b      	subs	r3, r3, r2
 800f1aa:	009b      	lsls	r3, r3, #2
 800f1ac:	440b      	add	r3, r1
 800f1ae:	3310      	adds	r3, #16
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	f003 0303 	and.w	r3, r3, #3
 800f1b8:	b2d9      	uxtb	r1, r3
 800f1ba:	7893      	ldrb	r3, [r2, #2]
 800f1bc:	f361 0383 	bfi	r3, r1, #2, #2
 800f1c0:	7093      	strb	r3, [r2, #2]
  }
}
 800f1c2:	bf00      	nop
 800f1c4:	371c      	adds	r7, #28
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr
 800f1ce:	bf00      	nop
 800f1d0:	20000574 	.word	0x20000574
 800f1d4:	2000058c 	.word	0x2000058c

0800f1d8 <ManageStateDetached_SNK>:
  * @brief  Manage the detached state for sink role
  * @param  PortNum Port
  * @retval Timeout value
  */
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	4603      	mov	r3, r0
 800f1e0:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800f1e2:	79fa      	ldrb	r2, [r7, #7]
 800f1e4:	4613      	mov	r3, r2
 800f1e6:	005b      	lsls	r3, r3, #1
 800f1e8:	4413      	add	r3, r2
 800f1ea:	009b      	lsls	r3, r3, #2
 800f1ec:	4a1e      	ldr	r2, [pc, #120]	@ (800f268 <ManageStateDetached_SNK+0x90>)
 800f1ee:	4413      	add	r3, r2
 800f1f0:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800f1f2:	2302      	movs	r3, #2
 800f1f4:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 800f1f6:	79fb      	ldrb	r3, [r7, #7]
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7ff ff69 	bl	800f0d0 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	f003 031c 	and.w	r3, r3, #28
 800f206:	b2db      	uxtb	r3, r3
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d103      	bne.n	800f214 <ManageStateDetached_SNK+0x3c>
    /* Value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 800f20c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f210:	60fb      	str	r3, [r7, #12]
 800f212:	e023      	b.n	800f25c <ManageStateDetached_SNK+0x84>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 800f214:	f7f7 fecc 	bl	8006fb0 <HAL_GetTick>
 800f218:	4602      	mov	r2, r0
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 800f21e:	68ba      	ldr	r2, [r7, #8]
 800f220:	7853      	ldrb	r3, [r2, #1]
 800f222:	2102      	movs	r1, #2
 800f224:	f361 0345 	bfi	r3, r1, #1, #5
 800f228:	7053      	strb	r3, [r2, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 800f22a:	2001      	movs	r0, #1
 800f22c:	f7f7 fecc 	bl	8006fc8 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 800f230:	79fb      	ldrb	r3, [r7, #7]
 800f232:	4618      	mov	r0, r3
 800f234:	f7ff ff4c 	bl	800f0d0 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	f003 031c 	and.w	r3, r3, #28
 800f240:	b2db      	uxtb	r3, r3
 800f242:	2b00      	cmp	r3, #0
 800f244:	d106      	bne.n	800f254 <ManageStateDetached_SNK+0x7c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800f246:	68ba      	ldr	r2, [r7, #8]
 800f248:	7853      	ldrb	r3, [r2, #1]
 800f24a:	2101      	movs	r1, #1
 800f24c:	f361 0345 	bfi	r3, r1, #1, #5
 800f250:	7053      	strb	r3, [r2, #1]
 800f252:	e003      	b.n	800f25c <ManageStateDetached_SNK+0x84>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 800f254:	79fb      	ldrb	r3, [r7, #7]
 800f256:	4618      	mov	r0, r3
 800f258:	f007 f96f 	bl	801653a <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 800f25c:	68fb      	ldr	r3, [r7, #12]
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	20000574 	.word	0x20000574

0800f26c <ManageStateAttachedWait_SNK>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b088      	sub	sp, #32
 800f270:	af00      	add	r7, sp, #0
 800f272:	4603      	mov	r3, r0
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	607a      	str	r2, [r7, #4]
 800f278:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800f27a:	7bfa      	ldrb	r2, [r7, #15]
 800f27c:	4613      	mov	r3, r2
 800f27e:	005b      	lsls	r3, r3, #1
 800f280:	4413      	add	r3, r2
 800f282:	009b      	lsls	r3, r3, #2
 800f284:	4a39      	ldr	r2, [pc, #228]	@ (800f36c <ManageStateAttachedWait_SNK+0x100>)
 800f286:	4413      	add	r3, r2
 800f288:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800f28a:	2302      	movs	r3, #2
 800f28c:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800f28e:	f7f7 fe8f 	bl	8006fb0 <HAL_GetTick>
 800f292:	4602      	mov	r2, r0
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	1ad3      	subs	r3, r2, r3
 800f29a:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 800f29c:	7bfb      	ldrb	r3, [r7, #15]
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7ff ff16 	bl	800f0d0 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 800f2a4:	69bb      	ldr	r3, [r7, #24]
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	f003 031c 	and.w	r3, r3, #28
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	2b04      	cmp	r3, #4
 800f2b0:	d12c      	bne.n	800f30c <ManageStateAttachedWait_SNK+0xa0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUNCE_THRESHOLD)
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	2b78      	cmp	r3, #120	@ 0x78
 800f2b6:	d923      	bls.n	800f300 <ManageStateAttachedWait_SNK+0x94>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 800f2b8:	7bfb      	ldrb	r3, [r7, #15]
 800f2ba:	2101      	movs	r1, #1
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f007 f8ed 	bl	801649c <USBPD_PWR_IF_GetVBUSStatus>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d11b      	bne.n	800f300 <ManageStateAttachedWait_SNK+0x94>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 800f2c8:	69bb      	ldr	r3, [r7, #24]
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	7bfb      	ldrb	r3, [r7, #15]
 800f2d6:	4611      	mov	r1, r2
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f001 fae1 	bl	80108a0 <HW_SignalAttachement>
        /* Go to attached state */
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 800f2de:	69ba      	ldr	r2, [r7, #24]
 800f2e0:	7853      	ldrb	r3, [r2, #1]
 800f2e2:	2103      	movs	r1, #3
 800f2e4:	f361 0345 	bfi	r3, r1, #1, #5
 800f2e8:	7053      	strb	r3, [r2, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	2202      	movs	r2, #2
 800f2ee:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 800f2f0:	69bb      	ldr	r3, [r7, #24]
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800f2f8:	b2db      	uxtb	r3, r3
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800f300:	69ba      	ldr	r2, [r7, #24]
 800f302:	7813      	ldrb	r3, [r2, #0]
 800f304:	f36f 1345 	bfc	r3, #5, #1
 800f308:	7013      	strb	r3, [r2, #0]
 800f30a:	e02a      	b.n	800f362 <ManageStateAttachedWait_SNK+0xf6>
  }
  else
  {
    /* Start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 800f30c:	69bb      	ldr	r3, [r7, #24]
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	f003 0320 	and.w	r3, r3, #32
 800f314:	b2db      	uxtb	r3, r3
 800f316:	2b00      	cmp	r3, #0
 800f318:	d10c      	bne.n	800f334 <ManageStateAttachedWait_SNK+0xc8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800f31a:	f7f7 fe49 	bl	8006fb0 <HAL_GetTick>
 800f31e:	4602      	mov	r2, r0
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 800f324:	69ba      	ldr	r2, [r7, #24]
 800f326:	7813      	ldrb	r3, [r2, #0]
 800f328:	f043 0320 	orr.w	r3, r3, #32
 800f32c:	7013      	strb	r3, [r2, #0]
      _timing = CAD_TPDDEBOUNCE_THRESHOLD;
 800f32e:	230c      	movs	r3, #12
 800f330:	61fb      	str	r3, [r7, #28]
 800f332:	e016      	b.n	800f362 <ManageStateAttachedWait_SNK+0xf6>
    }
    else /* CAD_tDebounce already running */
    {
      /* Evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUNCE_THRESHOLD))
 800f334:	f7f7 fe3c 	bl	8006fb0 <HAL_GetTick>
 800f338:	4602      	mov	r2, r0
 800f33a:	69bb      	ldr	r3, [r7, #24]
 800f33c:	685b      	ldr	r3, [r3, #4]
 800f33e:	1ad3      	subs	r3, r2, r3
 800f340:	2b0c      	cmp	r3, #12
 800f342:	d90e      	bls.n	800f362 <ManageStateAttachedWait_SNK+0xf6>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800f344:	69ba      	ldr	r2, [r7, #24]
 800f346:	7813      	ldrb	r3, [r2, #0]
 800f348:	f36f 1345 	bfc	r3, #5, #1
 800f34c:	7013      	strb	r3, [r2, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800f34e:	69ba      	ldr	r2, [r7, #24]
 800f350:	7853      	ldrb	r3, [r2, #1]
 800f352:	2101      	movs	r1, #1
 800f354:	f361 0345 	bfi	r3, r1, #1, #5
 800f358:	7053      	strb	r3, [r2, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800f35a:	7bfb      	ldrb	r3, [r7, #15]
 800f35c:	4618      	mov	r0, r3
 800f35e:	f007 f8ff 	bl	8016560 <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 800f362:	69fb      	ldr	r3, [r7, #28]
}
 800f364:	4618      	mov	r0, r3
 800f366:	3720      	adds	r7, #32
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	20000574 	.word	0x20000574

0800f370 <ManageStateAttached_SNK>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b088      	sub	sp, #32
 800f374:	af00      	add	r7, sp, #0
 800f376:	4603      	mov	r3, r0
 800f378:	60b9      	str	r1, [r7, #8]
 800f37a:	607a      	str	r2, [r7, #4]
 800f37c:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800f37e:	7bfa      	ldrb	r2, [r7, #15]
 800f380:	4613      	mov	r3, r2
 800f382:	005b      	lsls	r3, r3, #1
 800f384:	4413      	add	r3, r2
 800f386:	009b      	lsls	r3, r3, #2
 800f388:	4a2a      	ldr	r2, [pc, #168]	@ (800f434 <ManageStateAttached_SNK+0xc4>)
 800f38a:	4413      	add	r3, r2
 800f38c:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800f38e:	2302      	movs	r3, #2
 800f390:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 800f392:	2300      	movs	r3, #0
 800f394:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800f396:	7bfa      	ldrb	r2, [r7, #15]
 800f398:	4927      	ldr	r1, [pc, #156]	@ (800f438 <ManageStateAttached_SNK+0xc8>)
 800f39a:	4613      	mov	r3, r2
 800f39c:	011b      	lsls	r3, r3, #4
 800f39e:	1a9b      	subs	r3, r3, r2
 800f3a0:	009b      	lsls	r3, r3, #2
 800f3a2:	440b      	add	r3, r1
 800f3a4:	3334      	adds	r3, #52	@ 0x34
 800f3a6:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800f3a8:	2b01      	cmp	r3, #1
 800f3aa:	d10b      	bne.n	800f3c4 <ManageStateAttached_SNK+0x54>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800f3ac:	7bfa      	ldrb	r2, [r7, #15]
 800f3ae:	4922      	ldr	r1, [pc, #136]	@ (800f438 <ManageStateAttached_SNK+0xc8>)
 800f3b0:	4613      	mov	r3, r2
 800f3b2:	011b      	lsls	r3, r3, #4
 800f3b4:	1a9b      	subs	r3, r3, r2
 800f3b6:	009b      	lsls	r3, r3, #2
 800f3b8:	440b      	add	r3, r1
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	695b      	ldr	r3, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800f3be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f3c2:	e00a      	b.n	800f3da <ManageStateAttached_SNK+0x6a>
 800f3c4:	7bfa      	ldrb	r2, [r7, #15]
 800f3c6:	491c      	ldr	r1, [pc, #112]	@ (800f438 <ManageStateAttached_SNK+0xc8>)
 800f3c8:	4613      	mov	r3, r2
 800f3ca:	011b      	lsls	r3, r3, #4
 800f3cc:	1a9b      	subs	r3, r3, r2
 800f3ce:	009b      	lsls	r3, r3, #2
 800f3d0:	440b      	add	r3, r1
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	695b      	ldr	r3, [r3, #20]
 800f3d6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800f3da:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 800f3dc:	7bfb      	ldrb	r3, [r7, #15]
 800f3de:	2102      	movs	r1, #2
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f007 f85b 	bl	801649c <USBPD_PWR_IF_GetVBUSStatus>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d11b      	bne.n	800f424 <ManageStateAttached_SNK+0xb4>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 800f3ec:	697a      	ldr	r2, [r7, #20]
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d117      	bne.n	800f424 <ManageStateAttached_SNK+0xb4>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 800f3f4:	7bfb      	ldrb	r3, [r7, #15]
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f001 fb9e 	bl	8010b38 <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 800f3fc:	69ba      	ldr	r2, [r7, #24]
 800f3fe:	7813      	ldrb	r3, [r2, #0]
 800f400:	f36f 0384 	bfc	r3, #2, #3
 800f404:	7013      	strb	r3, [r2, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800f406:	69ba      	ldr	r2, [r7, #24]
 800f408:	7853      	ldrb	r3, [r2, #1]
 800f40a:	2101      	movs	r1, #1
 800f40c:	f361 0345 	bfi	r3, r1, #1, #5
 800f410:	7053      	strb	r3, [r2, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	2201      	movs	r2, #1
 800f416:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2200      	movs	r2, #0
 800f41c:	601a      	str	r2, [r3, #0]
    _timing = 0;
 800f41e:	2300      	movs	r3, #0
 800f420:	61fb      	str	r3, [r7, #28]
 800f422:	e001      	b.n	800f428 <ManageStateAttached_SNK+0xb8>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 800f424:	230a      	movs	r3, #10
 800f426:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 800f428:	69fb      	ldr	r3, [r7, #28]
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3720      	adds	r7, #32
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
 800f432:	bf00      	nop
 800f434:	20000574 	.word	0x20000574
 800f438:	2000058c 	.word	0x2000058c

0800f43c <LL_AHB1_GRP1_EnableClock>:
{
 800f43c:	b480      	push	{r7}
 800f43e:	b085      	sub	sp, #20
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800f444:	4b08      	ldr	r3, [pc, #32]	@ (800f468 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800f446:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f448:	4907      	ldr	r1, [pc, #28]	@ (800f468 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	4313      	orrs	r3, r2
 800f44e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800f450:	4b05      	ldr	r3, [pc, #20]	@ (800f468 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800f452:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	4013      	ands	r3, r2
 800f458:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f45a:	68fb      	ldr	r3, [r7, #12]
}
 800f45c:	bf00      	nop
 800f45e:	3714      	adds	r7, #20
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr
 800f468:	40021000 	.word	0x40021000

0800f46c <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b083      	sub	sp, #12
 800f470:	af00      	add	r7, sp, #0
 800f472:	4603      	mov	r3, r0
 800f474:	71fb      	strb	r3, [r7, #7]
  return UCPD_INSTANCE0;
 800f476:	4b03      	ldr	r3, [pc, #12]	@ (800f484 <USBPD_HW_GetUSPDInstance+0x18>)
}
 800f478:	4618      	mov	r0, r3
 800f47a:	370c      	adds	r7, #12
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr
 800f484:	4000a000 	.word	0x4000a000

0800f488 <USBPD_HW_Init_DMARxInstance>:

#if !defined(USBPDCORE_LIB_NO_PD)
DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b08e      	sub	sp, #56	@ 0x38
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	4603      	mov	r3, r0
 800f490:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800f492:	f107 030c 	add.w	r3, r7, #12
 800f496:	4618      	mov	r0, r3
 800f498:	f7fd f9ac 	bl	800c7f4 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800f49c:	2300      	movs	r3, #0
 800f49e:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800f4a8:	2380      	movs	r3, #128	@ 0x80
 800f4aa:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	627b      	str	r3, [r7, #36]	@ 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  DMA_InitStruct.NbData = 0;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	60fb      	str	r3, [r7, #12]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 800f4c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f4c4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 800f4c6:	2001      	movs	r0, #1
 800f4c8:	f7ff ffb8 	bl	800f43c <LL_AHB1_GRP1_EnableClock>

  /* Initialise the DMA */
  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 800f4cc:	2372      	movs	r3, #114	@ 0x72
 800f4ce:	633b      	str	r3, [r7, #48]	@ 0x30

  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 800f4d0:	f107 030c 	add.w	r3, r7, #12
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	2100      	movs	r1, #0
 800f4d8:	4803      	ldr	r0, [pc, #12]	@ (800f4e8 <USBPD_HW_Init_DMARxInstance+0x60>)
 800f4da:	f7fd f94b 	bl	800c774 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 800f4de:	4b03      	ldr	r3, [pc, #12]	@ (800f4ec <USBPD_HW_Init_DMARxInstance+0x64>)
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3738      	adds	r7, #56	@ 0x38
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	40020000 	.word	0x40020000
 800f4ec:	40020008 	.word	0x40020008

0800f4f0 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b083      	sub	sp, #12
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 800f4fa:	bf00      	nop
 800f4fc:	370c      	adds	r7, #12
 800f4fe:	46bd      	mov	sp, r7
 800f500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f504:	4770      	bx	lr
	...

0800f508 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b08e      	sub	sp, #56	@ 0x38
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	4603      	mov	r3, r0
 800f510:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800f512:	f107 030c 	add.w	r3, r7, #12
 800f516:	4618      	mov	r0, r3
 800f518:	f7fd f96c 	bl	800c7f4 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 800f51c:	2310      	movs	r3, #16
 800f51e:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800f520:	2300      	movs	r3, #0
 800f522:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800f524:	2300      	movs	r3, #0
 800f526:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800f528:	2380      	movs	r3, #128	@ 0x80
 800f52a:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800f52c:	2300      	movs	r3, #0
 800f52e:	627b      	str	r3, [r7, #36]	@ 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800f530:	2300      	movs	r3, #0
 800f532:	62bb      	str	r3, [r7, #40]	@ 0x28
  DMA_InitStruct.NbData = 0;
 800f534:	2300      	movs	r3, #0
 800f536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800f538:	2300      	movs	r3, #0
 800f53a:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800f53c:	2300      	movs	r3, #0
 800f53e:	60fb      	str	r3, [r7, #12]

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 800f540:	2001      	movs	r0, #1
 800f542:	f7ff ff7b 	bl	800f43c <LL_AHB1_GRP1_EnableClock>

  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 800f546:	2373      	movs	r3, #115	@ 0x73
 800f548:	633b      	str	r3, [r7, #48]	@ 0x30
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 800f54a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f54e:	637b      	str	r3, [r7, #52]	@ 0x34
  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 800f550:	f107 030c 	add.w	r3, r7, #12
 800f554:	461a      	mov	r2, r3
 800f556:	2101      	movs	r1, #1
 800f558:	4803      	ldr	r0, [pc, #12]	@ (800f568 <USBPD_HW_Init_DMATxInstance+0x60>)
 800f55a:	f7fd f90b 	bl	800c774 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 800f55e:	4b03      	ldr	r3, [pc, #12]	@ (800f56c <USBPD_HW_Init_DMATxInstance+0x64>)
}
 800f560:	4618      	mov	r0, r3
 800f562:	3738      	adds	r7, #56	@ 0x38
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}
 800f568:	40020000 	.word	0x40020000
 800f56c:	4002001c 	.word	0x4002001c

0800f570 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 800f570:	b480      	push	{r7}
 800f572:	b083      	sub	sp, #12
 800f574:	af00      	add	r7, sp, #0
 800f576:	4603      	mov	r3, r0
 800f578:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 800f57a:	bf00      	nop
 800f57c:	370c      	adds	r7, #12
 800f57e:	46bd      	mov	sp, r7
 800f580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f584:	4770      	bx	lr

0800f586 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 800f586:	b480      	push	{r7}
 800f588:	b083      	sub	sp, #12
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	4603      	mov	r3, r0
 800f58e:	460a      	mov	r2, r1
 800f590:	71fb      	strb	r3, [r7, #7]
 800f592:	4613      	mov	r3, r2
 800f594:	71bb      	strb	r3, [r7, #6]
  else
  {
    /* FRS_TX common */
    UCPDFRS_INSTANCE0_FRSCC2;
  }
}
 800f596:	bf00      	nop
 800f598:	370c      	adds	r7, #12
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr

0800f5a2 <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800f5a2:	b480      	push	{r7}
 800f5a4:	b083      	sub	sp, #12
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	699b      	ldr	r3, [r3, #24]
 800f5ae:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	619a      	str	r2, [r3, #24]
}
 800f5b6:	bf00      	nop
 800f5b8:	370c      	adds	r7, #12
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr

0800f5c2 <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800f5c2:	b480      	push	{r7}
 800f5c4:	b083      	sub	sp, #12
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	699b      	ldr	r3, [r3, #24]
 800f5ce:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	619a      	str	r2, [r3, #24]
}
 800f5d6:	bf00      	nop
 800f5d8:	370c      	adds	r7, #12
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e0:	4770      	bx	lr

0800f5e2 <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 800f5e2:	b480      	push	{r7}
 800f5e4:	b083      	sub	sp, #12
 800f5e6:	af00      	add	r7, sp, #0
 800f5e8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	699b      	ldr	r3, [r3, #24]
 800f5ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	619a      	str	r2, [r3, #24]
}
 800f5f6:	bf00      	nop
 800f5f8:	370c      	adds	r7, #12
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr

0800f602 <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 800f602:	b480      	push	{r7}
 800f604:	b083      	sub	sp, #12
 800f606:	af00      	add	r7, sp, #0
 800f608:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	699b      	ldr	r3, [r3, #24]
 800f60e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	619a      	str	r2, [r3, #24]
}
 800f616:	bf00      	nop
 800f618:	370c      	adds	r7, #12
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr

0800f622 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 800f622:	b480      	push	{r7}
 800f624:	b083      	sub	sp, #12
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	699b      	ldr	r3, [r3, #24]
 800f62e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	619a      	str	r2, [r3, #24]
}
 800f636:	bf00      	nop
 800f638:	370c      	adds	r7, #12
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr

0800f642 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 800f642:	b480      	push	{r7}
 800f644:	b083      	sub	sp, #12
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	699b      	ldr	r3, [r3, #24]
 800f64e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	619a      	str	r2, [r3, #24]
}
 800f656:	bf00      	nop
 800f658:	370c      	adds	r7, #12
 800f65a:	46bd      	mov	sp, r7
 800f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f660:	4770      	bx	lr

0800f662 <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 800f662:	b480      	push	{r7}
 800f664:	b083      	sub	sp, #12
 800f666:	af00      	add	r7, sp, #0
 800f668:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	699b      	ldr	r3, [r3, #24]
 800f66e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	619a      	str	r2, [r3, #24]
}
 800f676:	bf00      	nop
 800f678:	370c      	adds	r7, #12
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr

0800f682 <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 800f682:	b480      	push	{r7}
 800f684:	b083      	sub	sp, #12
 800f686:	af00      	add	r7, sp, #0
 800f688:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	699b      	ldr	r3, [r3, #24]
 800f68e:	f043 0220 	orr.w	r2, r3, #32
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	619a      	str	r2, [r3, #24]
}
 800f696:	bf00      	nop
 800f698:	370c      	adds	r7, #12
 800f69a:	46bd      	mov	sp, r7
 800f69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a0:	4770      	bx	lr

0800f6a2 <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 800f6a2:	b480      	push	{r7}
 800f6a4:	b083      	sub	sp, #12
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	699b      	ldr	r3, [r3, #24]
 800f6ae:	f043 0210 	orr.w	r2, r3, #16
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	619a      	str	r2, [r3, #24]
}
 800f6b6:	bf00      	nop
 800f6b8:	370c      	adds	r7, #12
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr

0800f6c2 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 800f6c2:	b480      	push	{r7}
 800f6c4:	b083      	sub	sp, #12
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	699b      	ldr	r3, [r3, #24]
 800f6ce:	f043 0208 	orr.w	r2, r3, #8
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	619a      	str	r2, [r3, #24]
}
 800f6d6:	bf00      	nop
 800f6d8:	370c      	adds	r7, #12
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e0:	4770      	bx	lr

0800f6e2 <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 800f6e2:	b480      	push	{r7}
 800f6e4:	b083      	sub	sp, #12
 800f6e6:	af00      	add	r7, sp, #0
 800f6e8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	699b      	ldr	r3, [r3, #24]
 800f6ee:	f043 0204 	orr.w	r2, r3, #4
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	619a      	str	r2, [r3, #24]
}
 800f6f6:	bf00      	nop
 800f6f8:	370c      	adds	r7, #12
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f700:	4770      	bx	lr

0800f702 <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 800f702:	b480      	push	{r7}
 800f704:	b083      	sub	sp, #12
 800f706:	af00      	add	r7, sp, #0
 800f708:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	699b      	ldr	r3, [r3, #24]
 800f70e:	f043 0202 	orr.w	r2, r3, #2
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	619a      	str	r2, [r3, #24]
}
 800f716:	bf00      	nop
 800f718:	370c      	adds	r7, #12
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr

0800f722 <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 800f722:	b580      	push	{r7, lr}
 800f724:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 800f726:	2000      	movs	r0, #0
 800f728:	f000 f802 	bl	800f730 <PORTx_IRQHandler>
}
 800f72c:	bf00      	nop
 800f72e:	bd80      	pop	{r7, pc}

0800f730 <PORTx_IRQHandler>:

void PORTx_IRQHandler(uint8_t PortNum)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b084      	sub	sp, #16
 800f734:	af00      	add	r7, sp, #0
 800f736:	4603      	mov	r3, r0
 800f738:	71fb      	strb	r3, [r7, #7]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 800f73a:	79fa      	ldrb	r2, [r7, #7]
 800f73c:	4998      	ldr	r1, [pc, #608]	@ (800f9a0 <PORTx_IRQHandler+0x270>)
 800f73e:	4613      	mov	r3, r2
 800f740:	011b      	lsls	r3, r3, #4
 800f742:	1a9b      	subs	r3, r3, r2
 800f744:	009b      	lsls	r3, r3, #2
 800f746:	440b      	add	r3, r1
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	695b      	ldr	r3, [r3, #20]
 800f750:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag = 0;

  if ((hucpd->IMR & _interrupt) != 0u)
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	691a      	ldr	r2, [r3, #16]
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	4013      	ands	r3, r2
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	f000 81ca 	beq.w	800faf4 <PORTx_IRQHandler+0x3c4>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	f003 0302 	and.w	r3, r3, #2
 800f766:	2b00      	cmp	r3, #0
 800f768:	d035      	beq.n	800f7d6 <PORTx_IRQHandler+0xa6>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 800f76a:	68f8      	ldr	r0, [r7, #12]
 800f76c:	f7ff ffc9 	bl	800f702 <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800f770:	79fa      	ldrb	r2, [r7, #7]
 800f772:	498b      	ldr	r1, [pc, #556]	@ (800f9a0 <PORTx_IRQHandler+0x270>)
 800f774:	4613      	mov	r3, r2
 800f776:	011b      	lsls	r3, r3, #4
 800f778:	1a9b      	subs	r3, r3, r2
 800f77a:	009b      	lsls	r3, r3, #2
 800f77c:	440b      	add	r3, r1
 800f77e:	3304      	adds	r3, #4
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	6819      	ldr	r1, [r3, #0]
 800f784:	79fa      	ldrb	r2, [r7, #7]
 800f786:	4886      	ldr	r0, [pc, #536]	@ (800f9a0 <PORTx_IRQHandler+0x270>)
 800f788:	4613      	mov	r3, r2
 800f78a:	011b      	lsls	r3, r3, #4
 800f78c:	1a9b      	subs	r3, r3, r2
 800f78e:	009b      	lsls	r3, r3, #2
 800f790:	4403      	add	r3, r0
 800f792:	3304      	adds	r3, #4
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f021 0201 	bic.w	r2, r1, #1
 800f79a:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 800f79c:	bf00      	nop
 800f79e:	79fa      	ldrb	r2, [r7, #7]
 800f7a0:	497f      	ldr	r1, [pc, #508]	@ (800f9a0 <PORTx_IRQHandler+0x270>)
 800f7a2:	4613      	mov	r3, r2
 800f7a4:	011b      	lsls	r3, r3, #4
 800f7a6:	1a9b      	subs	r3, r3, r2
 800f7a8:	009b      	lsls	r3, r3, #2
 800f7aa:	440b      	add	r3, r1
 800f7ac:	3304      	adds	r3, #4
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f003 0301 	and.w	r3, r3, #1
 800f7b6:	2b01      	cmp	r3, #1
 800f7b8:	d0f1      	beq.n	800f79e <PORTx_IRQHandler+0x6e>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 800f7ba:	79fa      	ldrb	r2, [r7, #7]
 800f7bc:	4978      	ldr	r1, [pc, #480]	@ (800f9a0 <PORTx_IRQHandler+0x270>)
 800f7be:	4613      	mov	r3, r2
 800f7c0:	011b      	lsls	r3, r3, #4
 800f7c2:	1a9b      	subs	r3, r3, r2
 800f7c4:	009b      	lsls	r3, r3, #2
 800f7c6:	440b      	add	r3, r1
 800f7c8:	3314      	adds	r3, #20
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	79fa      	ldrb	r2, [r7, #7]
 800f7ce:	2101      	movs	r1, #1
 800f7d0:	4610      	mov	r0, r2
 800f7d2:	4798      	blx	r3
      return;
 800f7d4:	e18e      	b.n	800faf4 <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	f003 0304 	and.w	r3, r3, #4
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d035      	beq.n	800f84c <PORTx_IRQHandler+0x11c>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 800f7e0:	68f8      	ldr	r0, [r7, #12]
 800f7e2:	f7ff ff7e 	bl	800f6e2 <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800f7e6:	79fa      	ldrb	r2, [r7, #7]
 800f7e8:	496d      	ldr	r1, [pc, #436]	@ (800f9a0 <PORTx_IRQHandler+0x270>)
 800f7ea:	4613      	mov	r3, r2
 800f7ec:	011b      	lsls	r3, r3, #4
 800f7ee:	1a9b      	subs	r3, r3, r2
 800f7f0:	009b      	lsls	r3, r3, #2
 800f7f2:	440b      	add	r3, r1
 800f7f4:	3304      	adds	r3, #4
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	6819      	ldr	r1, [r3, #0]
 800f7fa:	79fa      	ldrb	r2, [r7, #7]
 800f7fc:	4868      	ldr	r0, [pc, #416]	@ (800f9a0 <PORTx_IRQHandler+0x270>)
 800f7fe:	4613      	mov	r3, r2
 800f800:	011b      	lsls	r3, r3, #4
 800f802:	1a9b      	subs	r3, r3, r2
 800f804:	009b      	lsls	r3, r3, #2
 800f806:	4403      	add	r3, r0
 800f808:	3304      	adds	r3, #4
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	f021 0201 	bic.w	r2, r1, #1
 800f810:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 800f812:	bf00      	nop
 800f814:	79fa      	ldrb	r2, [r7, #7]
 800f816:	4962      	ldr	r1, [pc, #392]	@ (800f9a0 <PORTx_IRQHandler+0x270>)
 800f818:	4613      	mov	r3, r2
 800f81a:	011b      	lsls	r3, r3, #4
 800f81c:	1a9b      	subs	r3, r3, r2
 800f81e:	009b      	lsls	r3, r3, #2
 800f820:	440b      	add	r3, r1
 800f822:	3304      	adds	r3, #4
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f003 0301 	and.w	r3, r3, #1
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	d0f1      	beq.n	800f814 <PORTx_IRQHandler+0xe4>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 800f830:	79fa      	ldrb	r2, [r7, #7]
 800f832:	495b      	ldr	r1, [pc, #364]	@ (800f9a0 <PORTx_IRQHandler+0x270>)
 800f834:	4613      	mov	r3, r2
 800f836:	011b      	lsls	r3, r3, #4
 800f838:	1a9b      	subs	r3, r3, r2
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	440b      	add	r3, r1
 800f83e:	3314      	adds	r3, #20
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	79fa      	ldrb	r2, [r7, #7]
 800f844:	2100      	movs	r1, #0
 800f846:	4610      	mov	r0, r2
 800f848:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 800f84a:	e153      	b.n	800faf4 <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	f003 0308 	and.w	r3, r3, #8
 800f852:	2b00      	cmp	r3, #0
 800f854:	d035      	beq.n	800f8c2 <PORTx_IRQHandler+0x192>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 800f856:	68f8      	ldr	r0, [r7, #12]
 800f858:	f7ff ff33 	bl	800f6c2 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800f85c:	79fa      	ldrb	r2, [r7, #7]
 800f85e:	4950      	ldr	r1, [pc, #320]	@ (800f9a0 <PORTx_IRQHandler+0x270>)
 800f860:	4613      	mov	r3, r2
 800f862:	011b      	lsls	r3, r3, #4
 800f864:	1a9b      	subs	r3, r3, r2
 800f866:	009b      	lsls	r3, r3, #2
 800f868:	440b      	add	r3, r1
 800f86a:	3304      	adds	r3, #4
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	6819      	ldr	r1, [r3, #0]
 800f870:	79fa      	ldrb	r2, [r7, #7]
 800f872:	484b      	ldr	r0, [pc, #300]	@ (800f9a0 <PORTx_IRQHandler+0x270>)
 800f874:	4613      	mov	r3, r2
 800f876:	011b      	lsls	r3, r3, #4
 800f878:	1a9b      	subs	r3, r3, r2
 800f87a:	009b      	lsls	r3, r3, #2
 800f87c:	4403      	add	r3, r0
 800f87e:	3304      	adds	r3, #4
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f021 0201 	bic.w	r2, r1, #1
 800f886:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 800f888:	bf00      	nop
 800f88a:	79fa      	ldrb	r2, [r7, #7]
 800f88c:	4944      	ldr	r1, [pc, #272]	@ (800f9a0 <PORTx_IRQHandler+0x270>)
 800f88e:	4613      	mov	r3, r2
 800f890:	011b      	lsls	r3, r3, #4
 800f892:	1a9b      	subs	r3, r3, r2
 800f894:	009b      	lsls	r3, r3, #2
 800f896:	440b      	add	r3, r1
 800f898:	3304      	adds	r3, #4
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	f003 0301 	and.w	r3, r3, #1
 800f8a2:	2b01      	cmp	r3, #1
 800f8a4:	d0f1      	beq.n	800f88a <PORTx_IRQHandler+0x15a>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 800f8a6:	79fa      	ldrb	r2, [r7, #7]
 800f8a8:	493d      	ldr	r1, [pc, #244]	@ (800f9a0 <PORTx_IRQHandler+0x270>)
 800f8aa:	4613      	mov	r3, r2
 800f8ac:	011b      	lsls	r3, r3, #4
 800f8ae:	1a9b      	subs	r3, r3, r2
 800f8b0:	009b      	lsls	r3, r3, #2
 800f8b2:	440b      	add	r3, r1
 800f8b4:	3314      	adds	r3, #20
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	79fa      	ldrb	r2, [r7, #7]
 800f8ba:	2102      	movs	r1, #2
 800f8bc:	4610      	mov	r0, r2
 800f8be:	4798      	blx	r3
      return;
 800f8c0:	e118      	b.n	800faf4 <PORTx_IRQHandler+0x3c4>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	f003 0310 	and.w	r3, r3, #16
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d003      	beq.n	800f8d4 <PORTx_IRQHandler+0x1a4>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 800f8cc:	68f8      	ldr	r0, [r7, #12]
 800f8ce:	f7ff fee8 	bl	800f6a2 <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 800f8d2:	e10f      	b.n	800faf4 <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	f003 0320 	and.w	r3, r3, #32
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d010      	beq.n	800f900 <PORTx_IRQHandler+0x1d0>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 800f8de:	68f8      	ldr	r0, [r7, #12]
 800f8e0:	f7ff fecf 	bl	800f682 <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800f8e4:	79fa      	ldrb	r2, [r7, #7]
 800f8e6:	492e      	ldr	r1, [pc, #184]	@ (800f9a0 <PORTx_IRQHandler+0x270>)
 800f8e8:	4613      	mov	r3, r2
 800f8ea:	011b      	lsls	r3, r3, #4
 800f8ec:	1a9b      	subs	r3, r3, r2
 800f8ee:	009b      	lsls	r3, r3, #2
 800f8f0:	440b      	add	r3, r1
 800f8f2:	3324      	adds	r3, #36	@ 0x24
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	79fa      	ldrb	r2, [r7, #7]
 800f8f8:	2105      	movs	r1, #5
 800f8fa:	4610      	mov	r0, r2
 800f8fc:	4798      	blx	r3
      return;
 800f8fe:	e0f9      	b.n	800faf4 <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f906:	2b00      	cmp	r3, #0
 800f908:	d003      	beq.n	800f912 <PORTx_IRQHandler+0x1e2>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 800f90a:	68f8      	ldr	r0, [r7, #12]
 800f90c:	f7ff fea9 	bl	800f662 <LL_UCPD_ClearFlag_TxUND>
      return;
 800f910:	e0f0      	b.n	800faf4 <PORTx_IRQHandler+0x3c4>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d01e      	beq.n	800f95a <PORTx_IRQHandler+0x22a>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f920:	2b05      	cmp	r3, #5
 800f922:	d10c      	bne.n	800f93e <PORTx_IRQHandler+0x20e>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800f924:	79fa      	ldrb	r2, [r7, #7]
 800f926:	491e      	ldr	r1, [pc, #120]	@ (800f9a0 <PORTx_IRQHandler+0x270>)
 800f928:	4613      	mov	r3, r2
 800f92a:	011b      	lsls	r3, r3, #4
 800f92c:	1a9b      	subs	r3, r3, r2
 800f92e:	009b      	lsls	r3, r3, #2
 800f930:	440b      	add	r3, r1
 800f932:	331c      	adds	r3, #28
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	79fa      	ldrb	r2, [r7, #7]
 800f938:	2106      	movs	r1, #6
 800f93a:	4610      	mov	r0, r2
 800f93c:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 800f93e:	68f8      	ldr	r0, [r7, #12]
 800f940:	f7ff fe7f 	bl	800f642 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 800f944:	79fa      	ldrb	r2, [r7, #7]
 800f946:	4916      	ldr	r1, [pc, #88]	@ (800f9a0 <PORTx_IRQHandler+0x270>)
 800f948:	4613      	mov	r3, r2
 800f94a:	011b      	lsls	r3, r3, #4
 800f94c:	1a9b      	subs	r3, r3, r2
 800f94e:	009b      	lsls	r3, r3, #2
 800f950:	440b      	add	r3, r1
 800f952:	3338      	adds	r3, #56	@ 0x38
 800f954:	2201      	movs	r2, #1
 800f956:	701a      	strb	r2, [r3, #0]
      return;
 800f958:	e0cc      	b.n	800faf4 <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f960:	2b00      	cmp	r3, #0
 800f962:	d010      	beq.n	800f986 <PORTx_IRQHandler+0x256>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800f964:	79fa      	ldrb	r2, [r7, #7]
 800f966:	490e      	ldr	r1, [pc, #56]	@ (800f9a0 <PORTx_IRQHandler+0x270>)
 800f968:	4613      	mov	r3, r2
 800f96a:	011b      	lsls	r3, r3, #4
 800f96c:	1a9b      	subs	r3, r3, r2
 800f96e:	009b      	lsls	r3, r3, #2
 800f970:	440b      	add	r3, r1
 800f972:	331c      	adds	r3, #28
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	79fa      	ldrb	r2, [r7, #7]
 800f978:	2105      	movs	r1, #5
 800f97a:	4610      	mov	r0, r2
 800f97c:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 800f97e:	68f8      	ldr	r0, [r7, #12]
 800f980:	f7ff fe4f 	bl	800f622 <LL_UCPD_ClearFlag_RxHRST>
      return;
 800f984:	e0b6      	b.n	800faf4 <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d00b      	beq.n	800f9a8 <PORTx_IRQHandler+0x278>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag = 1;
 800f990:	4b04      	ldr	r3, [pc, #16]	@ (800f9a4 <PORTx_IRQHandler+0x274>)
 800f992:	2201      	movs	r2, #1
 800f994:	701a      	strb	r2, [r3, #0]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 800f996:	68f8      	ldr	r0, [r7, #12]
 800f998:	f7ff fe33 	bl	800f602 <LL_UCPD_ClearFlag_RxOvr>
      return;
 800f99c:	e0aa      	b.n	800faf4 <PORTx_IRQHandler+0x3c4>
 800f99e:	bf00      	nop
 800f9a0:	2000058c 	.word	0x2000058c
 800f9a4:	20000580 	.word	0x20000580
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	f000 8085 	beq.w	800fabe <PORTx_IRQHandler+0x38e>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 800f9b4:	79fa      	ldrb	r2, [r7, #7]
 800f9b6:	4951      	ldr	r1, [pc, #324]	@ (800fafc <PORTx_IRQHandler+0x3cc>)
 800f9b8:	4613      	mov	r3, r2
 800f9ba:	011b      	lsls	r3, r3, #4
 800f9bc:	1a9b      	subs	r3, r3, r2
 800f9be:	009b      	lsls	r3, r3, #2
 800f9c0:	440b      	add	r3, r1
 800f9c2:	3338      	adds	r3, #56	@ 0x38
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 800f9c8:	68f8      	ldr	r0, [r7, #12]
 800f9ca:	f7ff fe0a 	bl	800f5e2 <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800f9ce:	79fa      	ldrb	r2, [r7, #7]
 800f9d0:	494a      	ldr	r1, [pc, #296]	@ (800fafc <PORTx_IRQHandler+0x3cc>)
 800f9d2:	4613      	mov	r3, r2
 800f9d4:	011b      	lsls	r3, r3, #4
 800f9d6:	1a9b      	subs	r3, r3, r2
 800f9d8:	009b      	lsls	r3, r3, #2
 800f9da:	440b      	add	r3, r1
 800f9dc:	3308      	adds	r3, #8
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	6819      	ldr	r1, [r3, #0]
 800f9e2:	79fa      	ldrb	r2, [r7, #7]
 800f9e4:	4845      	ldr	r0, [pc, #276]	@ (800fafc <PORTx_IRQHandler+0x3cc>)
 800f9e6:	4613      	mov	r3, r2
 800f9e8:	011b      	lsls	r3, r3, #4
 800f9ea:	1a9b      	subs	r3, r3, r2
 800f9ec:	009b      	lsls	r3, r3, #2
 800f9ee:	4403      	add	r3, r0
 800f9f0:	3308      	adds	r3, #8
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	f021 0201 	bic.w	r2, r1, #1
 800f9f8:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 800f9fa:	bf00      	nop
 800f9fc:	79fa      	ldrb	r2, [r7, #7]
 800f9fe:	493f      	ldr	r1, [pc, #252]	@ (800fafc <PORTx_IRQHandler+0x3cc>)
 800fa00:	4613      	mov	r3, r2
 800fa02:	011b      	lsls	r3, r3, #4
 800fa04:	1a9b      	subs	r3, r3, r2
 800fa06:	009b      	lsls	r3, r3, #2
 800fa08:	440b      	add	r3, r1
 800fa0a:	3308      	adds	r3, #8
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	f003 0301 	and.w	r3, r3, #1
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	d0f1      	beq.n	800f9fc <PORTx_IRQHandler+0x2cc>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800fa18:	79fa      	ldrb	r2, [r7, #7]
 800fa1a:	4938      	ldr	r1, [pc, #224]	@ (800fafc <PORTx_IRQHandler+0x3cc>)
 800fa1c:	4613      	mov	r3, r2
 800fa1e:	011b      	lsls	r3, r3, #4
 800fa20:	1a9b      	subs	r3, r3, r2
 800fa22:	009b      	lsls	r3, r3, #2
 800fa24:	440b      	add	r3, r1
 800fa26:	3330      	adds	r3, #48	@ 0x30
 800fa28:	6818      	ldr	r0, [r3, #0]
 800fa2a:	79fa      	ldrb	r2, [r7, #7]
 800fa2c:	4933      	ldr	r1, [pc, #204]	@ (800fafc <PORTx_IRQHandler+0x3cc>)
 800fa2e:	4613      	mov	r3, r2
 800fa30:	011b      	lsls	r3, r3, #4
 800fa32:	1a9b      	subs	r3, r3, r2
 800fa34:	009b      	lsls	r3, r3, #2
 800fa36:	440b      	add	r3, r1
 800fa38:	3308      	adds	r3, #8
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4602      	mov	r2, r0
 800fa3e:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 800fa40:	79fa      	ldrb	r2, [r7, #7]
 800fa42:	492e      	ldr	r1, [pc, #184]	@ (800fafc <PORTx_IRQHandler+0x3cc>)
 800fa44:	4613      	mov	r3, r2
 800fa46:	011b      	lsls	r3, r3, #4
 800fa48:	1a9b      	subs	r3, r3, r2
 800fa4a:	009b      	lsls	r3, r3, #2
 800fa4c:	440b      	add	r3, r1
 800fa4e:	3308      	adds	r3, #8
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800fa56:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800fa58:	79fa      	ldrb	r2, [r7, #7]
 800fa5a:	4928      	ldr	r1, [pc, #160]	@ (800fafc <PORTx_IRQHandler+0x3cc>)
 800fa5c:	4613      	mov	r3, r2
 800fa5e:	011b      	lsls	r3, r3, #4
 800fa60:	1a9b      	subs	r3, r3, r2
 800fa62:	009b      	lsls	r3, r3, #2
 800fa64:	440b      	add	r3, r1
 800fa66:	3308      	adds	r3, #8
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	6819      	ldr	r1, [r3, #0]
 800fa6c:	79fa      	ldrb	r2, [r7, #7]
 800fa6e:	4823      	ldr	r0, [pc, #140]	@ (800fafc <PORTx_IRQHandler+0x3cc>)
 800fa70:	4613      	mov	r3, r2
 800fa72:	011b      	lsls	r3, r3, #4
 800fa74:	1a9b      	subs	r3, r3, r2
 800fa76:	009b      	lsls	r3, r3, #2
 800fa78:	4403      	add	r3, r0
 800fa7a:	3308      	adds	r3, #8
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	f041 0201 	orr.w	r2, r1, #1
 800fa82:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag == 0u))
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d113      	bne.n	800fab6 <PORTx_IRQHandler+0x386>
 800fa8e:	4b1c      	ldr	r3, [pc, #112]	@ (800fb00 <PORTx_IRQHandler+0x3d0>)
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d10f      	bne.n	800fab6 <PORTx_IRQHandler+0x386>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 800fa96:	79fa      	ldrb	r2, [r7, #7]
 800fa98:	4918      	ldr	r1, [pc, #96]	@ (800fafc <PORTx_IRQHandler+0x3cc>)
 800fa9a:	4613      	mov	r3, r2
 800fa9c:	011b      	lsls	r3, r3, #4
 800fa9e:	1a9b      	subs	r3, r3, r2
 800faa0:	009b      	lsls	r3, r3, #2
 800faa2:	440b      	add	r3, r1
 800faa4:	3320      	adds	r3, #32
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	68fa      	ldr	r2, [r7, #12]
 800faaa:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800faac:	f002 0107 	and.w	r1, r2, #7
 800fab0:	79fa      	ldrb	r2, [r7, #7]
 800fab2:	4610      	mov	r0, r2
 800fab4:	4798      	blx	r3
      }
      ovrflag = 0;
 800fab6:	4b12      	ldr	r3, [pc, #72]	@ (800fb00 <PORTx_IRQHandler+0x3d0>)
 800fab8:	2200      	movs	r2, #0
 800faba:	701a      	strb	r2, [r3, #0]
      return;
 800fabc:	e01a      	b.n	800faf4 <PORTx_IRQHandler+0x3c4>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d104      	bne.n	800fad2 <PORTx_IRQHandler+0x3a2>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800face:	2b00      	cmp	r3, #0
 800fad0:	d010      	beq.n	800faf4 <PORTx_IRQHandler+0x3c4>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 800fad2:	68f8      	ldr	r0, [r7, #12]
 800fad4:	f7ff fd75 	bl	800f5c2 <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 800fad8:	68f8      	ldr	r0, [r7, #12]
 800fada:	f7ff fd62 	bl	800f5a2 <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 800fade:	79fa      	ldrb	r2, [r7, #7]
 800fae0:	4906      	ldr	r1, [pc, #24]	@ (800fafc <PORTx_IRQHandler+0x3cc>)
 800fae2:	4613      	mov	r3, r2
 800fae4:	011b      	lsls	r3, r3, #4
 800fae6:	1a9b      	subs	r3, r3, r2
 800fae8:	009b      	lsls	r3, r3, #2
 800faea:	440b      	add	r3, r1
 800faec:	332c      	adds	r3, #44	@ 0x2c
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 800faf2:	bf00      	nop
        }
      }
    }
#endif /* _FRS */
  }
}
 800faf4:	3710      	adds	r7, #16
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	2000058c 	.word	0x2000058c
 800fb00:	20000580 	.word	0x20000580

0800fb04 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 800fb04:	b480      	push	{r7}
 800fb06:	b085      	sub	sp, #20
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	60b9      	str	r1, [r7, #8]
 800fb0c:	607a      	str	r2, [r7, #4]
 800fb0e:	603b      	str	r3, [r7, #0]
 800fb10:	4603      	mov	r3, r0
 800fb12:	73fb      	strb	r3, [r7, #15]
  (void)PowerRole;

  /* Set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 800fb14:	7bfa      	ldrb	r2, [r7, #15]
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	6919      	ldr	r1, [r3, #16]
 800fb1a:	482d      	ldr	r0, [pc, #180]	@ (800fbd0 <USBPD_PHY_Init+0xcc>)
 800fb1c:	4613      	mov	r3, r2
 800fb1e:	011b      	lsls	r3, r3, #4
 800fb20:	1a9b      	subs	r3, r3, r2
 800fb22:	009b      	lsls	r3, r3, #2
 800fb24:	4403      	add	r3, r0
 800fb26:	3314      	adds	r3, #20
 800fb28:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 800fb2a:	7bfa      	ldrb	r2, [r7, #15]
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	68d9      	ldr	r1, [r3, #12]
 800fb30:	4827      	ldr	r0, [pc, #156]	@ (800fbd0 <USBPD_PHY_Init+0xcc>)
 800fb32:	4613      	mov	r3, r2
 800fb34:	011b      	lsls	r3, r3, #4
 800fb36:	1a9b      	subs	r3, r3, r2
 800fb38:	009b      	lsls	r3, r3, #2
 800fb3a:	4403      	add	r3, r0
 800fb3c:	3318      	adds	r3, #24
 800fb3e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 800fb40:	7bfa      	ldrb	r2, [r7, #15]
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	6859      	ldr	r1, [r3, #4]
 800fb46:	4822      	ldr	r0, [pc, #136]	@ (800fbd0 <USBPD_PHY_Init+0xcc>)
 800fb48:	4613      	mov	r3, r2
 800fb4a:	011b      	lsls	r3, r3, #4
 800fb4c:	1a9b      	subs	r3, r3, r2
 800fb4e:	009b      	lsls	r3, r3, #2
 800fb50:	4403      	add	r3, r0
 800fb52:	331c      	adds	r3, #28
 800fb54:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 800fb56:	7bfa      	ldrb	r2, [r7, #15]
 800fb58:	491d      	ldr	r1, [pc, #116]	@ (800fbd0 <USBPD_PHY_Init+0xcc>)
 800fb5a:	4613      	mov	r3, r2
 800fb5c:	011b      	lsls	r3, r3, #4
 800fb5e:	1a9b      	subs	r3, r3, r2
 800fb60:	009b      	lsls	r3, r3, #2
 800fb62:	440b      	add	r3, r1
 800fb64:	3320      	adds	r3, #32
 800fb66:	4a1b      	ldr	r2, [pc, #108]	@ (800fbd4 <USBPD_PHY_Init+0xd0>)
 800fb68:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 800fb6a:	7bfa      	ldrb	r2, [r7, #15]
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	6899      	ldr	r1, [r3, #8]
 800fb70:	4817      	ldr	r0, [pc, #92]	@ (800fbd0 <USBPD_PHY_Init+0xcc>)
 800fb72:	4613      	mov	r3, r2
 800fb74:	011b      	lsls	r3, r3, #4
 800fb76:	1a9b      	subs	r3, r3, r2
 800fb78:	009b      	lsls	r3, r3, #2
 800fb7a:	4403      	add	r3, r0
 800fb7c:	3324      	adds	r3, #36	@ 0x24
 800fb7e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 800fb80:	7bfa      	ldrb	r2, [r7, #15]
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	6959      	ldr	r1, [r3, #20]
 800fb86:	4812      	ldr	r0, [pc, #72]	@ (800fbd0 <USBPD_PHY_Init+0xcc>)
 800fb88:	4613      	mov	r3, r2
 800fb8a:	011b      	lsls	r3, r3, #4
 800fb8c:	1a9b      	subs	r3, r3, r2
 800fb8e:	009b      	lsls	r3, r3, #2
 800fb90:	4403      	add	r3, r0
 800fb92:	3328      	adds	r3, #40	@ 0x28
 800fb94:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 800fb96:	7bfa      	ldrb	r2, [r7, #15]
 800fb98:	490d      	ldr	r1, [pc, #52]	@ (800fbd0 <USBPD_PHY_Init+0xcc>)
 800fb9a:	4613      	mov	r3, r2
 800fb9c:	011b      	lsls	r3, r3, #4
 800fb9e:	1a9b      	subs	r3, r3, r2
 800fba0:	009b      	lsls	r3, r3, #2
 800fba2:	440b      	add	r3, r1
 800fba4:	3330      	adds	r3, #48	@ 0x30
 800fba6:	687a      	ldr	r2, [r7, #4]
 800fba8:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 800fbaa:	7bfb      	ldrb	r3, [r7, #15]
 800fbac:	4a0a      	ldr	r2, [pc, #40]	@ (800fbd8 <USBPD_PHY_Init+0xd4>)
 800fbae:	00db      	lsls	r3, r3, #3
 800fbb0:	4413      	add	r3, r2
 800fbb2:	69ba      	ldr	r2, [r7, #24]
 800fbb4:	605a      	str	r2, [r3, #4]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 800fbb6:	7bfb      	ldrb	r3, [r7, #15]
 800fbb8:	68ba      	ldr	r2, [r7, #8]
 800fbba:	6812      	ldr	r2, [r2, #0]
 800fbbc:	4906      	ldr	r1, [pc, #24]	@ (800fbd8 <USBPD_PHY_Init+0xd4>)
 800fbbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

  return USBPD_OK;
 800fbc2:	2300      	movs	r3, #0
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3714      	adds	r7, #20
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr
 800fbd0:	2000058c 	.word	0x2000058c
 800fbd4:	0800fd85 	.word	0x0800fd85
 800fbd8:	20000584 	.word	0x20000584

0800fbdc <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b083      	sub	sp, #12
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  return 905u;
 800fbe6:	f240 3389 	movw	r3, #905	@ 0x389
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	370c      	adds	r7, #12
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf4:	4770      	bx	lr

0800fbf6 <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 800fbf6:	b480      	push	{r7}
 800fbf8:	b083      	sub	sp, #12
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	71fb      	strb	r3, [r7, #7]
  return 30u;
 800fc00:	231e      	movs	r3, #30
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	370c      	adds	r7, #12
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr

0800fc0e <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 800fc0e:	b480      	push	{r7}
 800fc10:	b083      	sub	sp, #12
 800fc12:	af00      	add	r7, sp, #0
 800fc14:	4603      	mov	r3, r0
 800fc16:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  /* Reset PHY layer   */
  /* Reset HW_IF layer */
}
 800fc18:	bf00      	nop
 800fc1a:	370c      	adds	r7, #12
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr

0800fc24 <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	460a      	mov	r2, r1
 800fc2e:	71fb      	strb	r3, [r7, #7]
 800fc30:	4613      	mov	r3, r2
 800fc32:	71bb      	strb	r3, [r7, #6]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 800fc34:	79b9      	ldrb	r1, [r7, #6]
 800fc36:	79f8      	ldrb	r0, [r7, #7]
 800fc38:	2300      	movs	r3, #0
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	f000 f805 	bl	800fc4a <USBPD_PHY_SendMessage>
 800fc40:	4603      	mov	r3, r0
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3708      	adds	r7, #8
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}

0800fc4a <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 800fc4a:	b580      	push	{r7, lr}
 800fc4c:	b082      	sub	sp, #8
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	603a      	str	r2, [r7, #0]
 800fc52:	461a      	mov	r2, r3
 800fc54:	4603      	mov	r3, r0
 800fc56:	71fb      	strb	r3, [r7, #7]
 800fc58:	460b      	mov	r3, r1
 800fc5a:	71bb      	strb	r3, [r7, #6]
 800fc5c:	4613      	mov	r3, r2
 800fc5e:	80bb      	strh	r3, [r7, #4]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 800fc60:	88bb      	ldrh	r3, [r7, #4]
 800fc62:	79b9      	ldrb	r1, [r7, #6]
 800fc64:	79f8      	ldrb	r0, [r7, #7]
 800fc66:	683a      	ldr	r2, [r7, #0]
 800fc68:	f000 fb0a 	bl	8010280 <USBPD_HW_IF_SendBuffer>
 800fc6c:	4603      	mov	r3, r0
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3708      	adds	r7, #8
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}

0800fc76 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 800fc76:	b580      	push	{r7, lr}
 800fc78:	b082      	sub	sp, #8
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	71fb      	strb	r3, [r7, #7]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 800fc80:	79fb      	ldrb	r3, [r7, #7]
 800fc82:	4618      	mov	r0, r3
 800fc84:	f000 fc42 	bl	801050c <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 800fc88:	2300      	movs	r3, #0
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3708      	adds	r7, #8
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}

0800fc92 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 800fc92:	b580      	push	{r7, lr}
 800fc94:	b082      	sub	sp, #8
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	4603      	mov	r3, r0
 800fc9a:	460a      	mov	r2, r1
 800fc9c:	71fb      	strb	r3, [r7, #7]
 800fc9e:	4613      	mov	r3, r2
 800fca0:	71bb      	strb	r3, [r7, #6]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 800fca2:	79bb      	ldrb	r3, [r7, #6]
 800fca4:	2b07      	cmp	r3, #7
 800fca6:	d103      	bne.n	800fcb0 <USBPD_PHY_ExitTransmit+0x1e>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 800fca8:	79fb      	ldrb	r3, [r7, #7]
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f000 fab0 	bl	8010210 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 800fcb0:	2300      	movs	r3, #0
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3708      	adds	r7, #8
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}

0800fcba <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 800fcba:	b580      	push	{r7, lr}
 800fcbc:	b082      	sub	sp, #8
 800fcbe:	af00      	add	r7, sp, #0
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 800fcc4:	79fb      	ldrb	r3, [r7, #7]
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f000 ffbc 	bl	8010c44 <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 800fccc:	bf00      	nop
 800fcce:	3708      	adds	r7, #8
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}

0800fcd4 <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	4603      	mov	r3, r0
 800fcdc:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 800fcde:	79fb      	ldrb	r3, [r7, #7]
 800fce0:	4618      	mov	r0, r3
 800fce2:	f000 ffc7 	bl	8010c74 <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 800fce6:	bf00      	nop
 800fce8:	3708      	adds	r7, #8
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
	...

0800fcf0 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	6039      	str	r1, [r7, #0]
 800fcfa:	71fb      	strb	r3, [r7, #7]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 800fcfc:	79fb      	ldrb	r3, [r7, #7]
 800fcfe:	4a05      	ldr	r2, [pc, #20]	@ (800fd14 <USBPD_PHY_SOPSupported+0x24>)
 800fd00:	00db      	lsls	r3, r3, #3
 800fd02:	4413      	add	r3, r2
 800fd04:	683a      	ldr	r2, [r7, #0]
 800fd06:	605a      	str	r2, [r3, #4]
}
 800fd08:	bf00      	nop
 800fd0a:	370c      	adds	r7, #12
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd12:	4770      	bx	lr
 800fd14:	20000584 	.word	0x20000584

0800fd18 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b082      	sub	sp, #8
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	4603      	mov	r3, r0
 800fd20:	71fb      	strb	r3, [r7, #7]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 800fd22:	79fb      	ldrb	r3, [r7, #7]
 800fd24:	4618      	mov	r0, r3
 800fd26:	f000 ffbd 	bl	8010ca4 <USBPD_HW_IF_IsResistor_SinkTxOk>
 800fd2a:	4603      	mov	r3, r0
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3708      	adds	r7, #8
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 800fd3e:	79fb      	ldrb	r3, [r7, #7]
 800fd40:	4618      	mov	r0, r3
 800fd42:	f000 ffef 	bl	8010d24 <USBPD_HW_IF_FastRoleSwapSignalling>
}
 800fd46:	bf00      	nop
 800fd48:	3708      	adds	r7, #8
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}

0800fd4e <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 800fd4e:	b580      	push	{r7, lr}
 800fd50:	b082      	sub	sp, #8
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	4603      	mov	r3, r0
 800fd56:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_EnableRX(PortNum);
 800fd58:	79fb      	ldrb	r3, [r7, #7]
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f000 fd74 	bl	8010848 <USBPD_HW_IF_EnableRX>
}
 800fd60:	bf00      	nop
 800fd62:	3708      	adds	r7, #8
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b082      	sub	sp, #8
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	4603      	mov	r3, r0
 800fd70:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_DisableRX(PortNum);
 800fd72:	79fb      	ldrb	r3, [r7, #7]
 800fd74:	4618      	mov	r0, r3
 800fd76:	f000 fd7d 	bl	8010874 <USBPD_HW_IF_DisableRX>
}
 800fd7a:	bf00      	nop
 800fd7c:	3708      	adds	r7, #8
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
	...

0800fd84 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	6039      	str	r1, [r7, #0]
 800fd8e:	71fb      	strb	r3, [r7, #7]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 800fd90:	4a28      	ldr	r2, [pc, #160]	@ (800fe34 <PHY_Rx_Completed+0xb0>)
 800fd92:	f107 0308 	add.w	r3, r7, #8
 800fd96:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd9a:	6018      	str	r0, [r3, #0]
 800fd9c:	3304      	adds	r3, #4
 800fd9e:	8019      	strh	r1, [r3, #0]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 800fda0:	f107 0208 	add.w	r2, r7, #8
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	4413      	add	r3, r2
 800fda8:	781b      	ldrb	r3, [r3, #0]
 800fdaa:	73fb      	strb	r3, [r7, #15]

  /* Check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 800fdac:	7bfb      	ldrb	r3, [r7, #15]
 800fdae:	2b04      	cmp	r3, #4
 800fdb0:	dc02      	bgt.n	800fdb8 <PHY_Rx_Completed+0x34>
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	da19      	bge.n	800fdea <PHY_Rx_Completed+0x66>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 800fdb6:	e034      	b.n	800fe22 <PHY_Rx_Completed+0x9e>
  switch (_msgtype)
 800fdb8:	2b06      	cmp	r3, #6
 800fdba:	d132      	bne.n	800fe22 <PHY_Rx_Completed+0x9e>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 800fdbc:	79fb      	ldrb	r3, [r7, #7]
 800fdbe:	4a1e      	ldr	r2, [pc, #120]	@ (800fe38 <PHY_Rx_Completed+0xb4>)
 800fdc0:	00db      	lsls	r3, r3, #3
 800fdc2:	4413      	add	r3, r2
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	f003 031e 	and.w	r3, r3, #30
 800fdca:	2b1e      	cmp	r3, #30
 800fdcc:	d12b      	bne.n	800fe26 <PHY_Rx_Completed+0xa2>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800fdce:	79fa      	ldrb	r2, [r7, #7]
 800fdd0:	491a      	ldr	r1, [pc, #104]	@ (800fe3c <PHY_Rx_Completed+0xb8>)
 800fdd2:	4613      	mov	r3, r2
 800fdd4:	011b      	lsls	r3, r3, #4
 800fdd6:	1a9b      	subs	r3, r3, r2
 800fdd8:	009b      	lsls	r3, r3, #2
 800fdda:	440b      	add	r3, r1
 800fddc:	331c      	adds	r3, #28
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	79fa      	ldrb	r2, [r7, #7]
 800fde2:	2106      	movs	r1, #6
 800fde4:	4610      	mov	r0, r2
 800fde6:	4798      	blx	r3
      break;
 800fde8:	e01d      	b.n	800fe26 <PHY_Rx_Completed+0xa2>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 800fdea:	7bfb      	ldrb	r3, [r7, #15]
 800fdec:	2201      	movs	r2, #1
 800fdee:	fa02 f303 	lsl.w	r3, r2, r3
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	79fb      	ldrb	r3, [r7, #7]
 800fdf8:	4a0f      	ldr	r2, [pc, #60]	@ (800fe38 <PHY_Rx_Completed+0xb4>)
 800fdfa:	00db      	lsls	r3, r3, #3
 800fdfc:	4413      	add	r3, r2
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	7bfa      	ldrb	r2, [r7, #15]
 800fe02:	2101      	movs	r1, #1
 800fe04:	fa01 f202 	lsl.w	r2, r1, r2
 800fe08:	b2d2      	uxtb	r2, r2
 800fe0a:	4013      	ands	r3, r2
 800fe0c:	4298      	cmp	r0, r3
 800fe0e:	d10c      	bne.n	800fe2a <PHY_Rx_Completed+0xa6>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 800fe10:	79fb      	ldrb	r3, [r7, #7]
 800fe12:	4a09      	ldr	r2, [pc, #36]	@ (800fe38 <PHY_Rx_Completed+0xb4>)
 800fe14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fe18:	7bf9      	ldrb	r1, [r7, #15]
 800fe1a:	79fa      	ldrb	r2, [r7, #7]
 800fe1c:	4610      	mov	r0, r2
 800fe1e:	4798      	blx	r3
      break;
 800fe20:	e003      	b.n	800fe2a <PHY_Rx_Completed+0xa6>
      break;
 800fe22:	bf00      	nop
 800fe24:	e002      	b.n	800fe2c <PHY_Rx_Completed+0xa8>
      break;
 800fe26:	bf00      	nop
 800fe28:	e000      	b.n	800fe2c <PHY_Rx_Completed+0xa8>
      break;
 800fe2a:	bf00      	nop
  }
}
 800fe2c:	bf00      	nop
 800fe2e:	3710      	adds	r7, #16
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	0801730c 	.word	0x0801730c
 800fe38:	20000584 	.word	0x20000584
 800fe3c:	2000058c 	.word	0x2000058c

0800fe40 <LL_AHB1_GRP1_EnableClock>:
{
 800fe40:	b480      	push	{r7}
 800fe42:	b085      	sub	sp, #20
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800fe48:	4b08      	ldr	r3, [pc, #32]	@ (800fe6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800fe4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fe4c:	4907      	ldr	r1, [pc, #28]	@ (800fe6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	4313      	orrs	r3, r2
 800fe52:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800fe54:	4b05      	ldr	r3, [pc, #20]	@ (800fe6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800fe56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	4013      	ands	r3, r2
 800fe5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
}
 800fe60:	bf00      	nop
 800fe62:	3714      	adds	r7, #20
 800fe64:	46bd      	mov	sp, r7
 800fe66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6a:	4770      	bx	lr
 800fe6c:	40021000 	.word	0x40021000

0800fe70 <LL_APB1_GRP1_EnableClock>:
{
 800fe70:	b480      	push	{r7}
 800fe72:	b085      	sub	sp, #20
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800fe78:	4b08      	ldr	r3, [pc, #32]	@ (800fe9c <LL_APB1_GRP1_EnableClock+0x2c>)
 800fe7a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fe7c:	4907      	ldr	r1, [pc, #28]	@ (800fe9c <LL_APB1_GRP1_EnableClock+0x2c>)
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	4313      	orrs	r3, r2
 800fe82:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800fe84:	4b05      	ldr	r3, [pc, #20]	@ (800fe9c <LL_APB1_GRP1_EnableClock+0x2c>)
 800fe86:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	4013      	ands	r3, r2
 800fe8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
}
 800fe90:	bf00      	nop
 800fe92:	3714      	adds	r7, #20
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr
 800fe9c:	40021000 	.word	0x40021000

0800fea0 <LL_UCPD_Enable>:
{
 800fea0:	b480      	push	{r7}
 800fea2:	b083      	sub	sp, #12
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	601a      	str	r2, [r3, #0]
}
 800feb4:	bf00      	nop
 800feb6:	370c      	adds	r7, #12
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr

0800fec0 <LL_UCPD_Disable>:
{
 800fec0:	b480      	push	{r7}
 800fec2:	b083      	sub	sp, #12
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	601a      	str	r2, [r3, #0]
}
 800fed4:	bf00      	nop
 800fed6:	370c      	adds	r7, #12
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr

0800fee0 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 800fee0:	b480      	push	{r7}
 800fee2:	b083      	sub	sp, #12
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	68db      	ldr	r3, [r3, #12]
 800feec:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	60da      	str	r2, [r3, #12]
}
 800fef4:	bf00      	nop
 800fef6:	370c      	adds	r7, #12
 800fef8:	46bd      	mov	sp, r7
 800fefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefe:	4770      	bx	lr

0800ff00 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	60da      	str	r2, [r3, #12]
}
 800ff14:	bf00      	nop
 800ff16:	370c      	adds	r7, #12
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr

0800ff20 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 800ff20:	b480      	push	{r7}
 800ff22:	b083      	sub	sp, #12
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	60da      	str	r2, [r3, #12]
}
 800ff34:	bf00      	nop
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr

0800ff40 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	68db      	ldr	r3, [r3, #12]
 800ff4c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	60da      	str	r2, [r3, #12]
}
 800ff54:	bf00      	nop
 800ff56:	370c      	adds	r7, #12
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr

0800ff60 <LL_UCPD_SignalFRSTX>:
{
 800ff60:	b480      	push	{r7}
 800ff62:	b083      	sub	sp, #12
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	68db      	ldr	r3, [r3, #12]
 800ff6c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	60da      	str	r2, [r3, #12]
}
 800ff74:	bf00      	nop
 800ff76:	370c      	adds	r7, #12
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr

0800ff80 <LL_UCPD_FRSDetectionEnable>:
{
 800ff80:	b480      	push	{r7}
 800ff82:	b083      	sub	sp, #12
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	68db      	ldr	r3, [r3, #12]
 800ff8c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	60da      	str	r2, [r3, #12]
}
 800ff94:	bf00      	nop
 800ff96:	370c      	adds	r7, #12
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr

0800ffa0 <LL_UCPD_FRSDetectionDisable>:
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b083      	sub	sp, #12
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	68db      	ldr	r3, [r3, #12]
 800ffac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	60da      	str	r2, [r3, #12]
}
 800ffb4:	bf00      	nop
 800ffb6:	370c      	adds	r7, #12
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbe:	4770      	bx	lr

0800ffc0 <LL_UCPD_SetccEnable>:
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b083      	sub	sp, #12
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	68db      	ldr	r3, [r3, #12]
 800ffce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	431a      	orrs	r2, r3
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	60da      	str	r2, [r3, #12]
}
 800ffda:	bf00      	nop
 800ffdc:	370c      	adds	r7, #12
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr

0800ffe6 <LL_UCPD_SetSNKRole>:
{
 800ffe6:	b480      	push	{r7}
 800ffe8:	b083      	sub	sp, #12
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	68db      	ldr	r3, [r3, #12]
 800fff2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	60da      	str	r2, [r3, #12]
}
 800fffa:	bf00      	nop
 800fffc:	370c      	adds	r7, #12
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr

08010006 <LL_UCPD_SetSRCRole>:
{
 8010006:	b480      	push	{r7}
 8010008:	b083      	sub	sp, #12
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	68db      	ldr	r3, [r3, #12]
 8010012:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	60da      	str	r2, [r3, #12]
}
 801001a:	bf00      	nop
 801001c:	370c      	adds	r7, #12
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr

08010026 <LL_UCPD_SetRpResistor>:
{
 8010026:	b480      	push	{r7}
 8010028:	b083      	sub	sp, #12
 801002a:	af00      	add	r7, sp, #0
 801002c:	6078      	str	r0, [r7, #4]
 801002e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	431a      	orrs	r2, r3
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	60da      	str	r2, [r3, #12]
}
 8010040:	bf00      	nop
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <LL_UCPD_SetCCPin>:
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
 8010054:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	68db      	ldr	r3, [r3, #12]
 801005a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	431a      	orrs	r2, r3
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	60da      	str	r2, [r3, #12]
}
 8010066:	bf00      	nop
 8010068:	370c      	adds	r7, #12
 801006a:	46bd      	mov	sp, r7
 801006c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010070:	4770      	bx	lr

08010072 <LL_UCPD_RxEnable>:
{
 8010072:	b480      	push	{r7}
 8010074:	b083      	sub	sp, #12
 8010076:	af00      	add	r7, sp, #0
 8010078:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	68db      	ldr	r3, [r3, #12]
 801007e:	f043 0220 	orr.w	r2, r3, #32
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	60da      	str	r2, [r3, #12]
}
 8010086:	bf00      	nop
 8010088:	370c      	adds	r7, #12
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr

08010092 <LL_UCPD_RxDisable>:
{
 8010092:	b480      	push	{r7}
 8010094:	b083      	sub	sp, #12
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	68db      	ldr	r3, [r3, #12]
 801009e:	f023 0220 	bic.w	r2, r3, #32
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	60da      	str	r2, [r3, #12]
}
 80100a6:	bf00      	nop
 80100a8:	370c      	adds	r7, #12
 80100aa:	46bd      	mov	sp, r7
 80100ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b0:	4770      	bx	lr

080100b2 <LL_UCPD_SetRxMode>:
{
 80100b2:	b480      	push	{r7}
 80100b4:	b083      	sub	sp, #12
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	6078      	str	r0, [r7, #4]
 80100ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	68db      	ldr	r3, [r3, #12]
 80100c0:	f023 0210 	bic.w	r2, r3, #16
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	431a      	orrs	r2, r3
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	60da      	str	r2, [r3, #12]
}
 80100cc:	bf00      	nop
 80100ce:	370c      	adds	r7, #12
 80100d0:	46bd      	mov	sp, r7
 80100d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d6:	4770      	bx	lr

080100d8 <LL_UCPD_SendHardReset>:
{
 80100d8:	b480      	push	{r7}
 80100da:	b083      	sub	sp, #12
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	68db      	ldr	r3, [r3, #12]
 80100e4:	f043 0208 	orr.w	r2, r3, #8
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	60da      	str	r2, [r3, #12]
}
 80100ec:	bf00      	nop
 80100ee:	370c      	adds	r7, #12
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr

080100f8 <LL_UCPD_SendMessage>:
{
 80100f8:	b480      	push	{r7}
 80100fa:	b083      	sub	sp, #12
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	f043 0204 	orr.w	r2, r3, #4
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	60da      	str	r2, [r3, #12]
}
 801010c:	bf00      	nop
 801010e:	370c      	adds	r7, #12
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr

08010118 <LL_UCPD_SetTxMode>:
{
 8010118:	b480      	push	{r7}
 801011a:	b083      	sub	sp, #12
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	68db      	ldr	r3, [r3, #12]
 8010126:	f023 0203 	bic.w	r2, r3, #3
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	431a      	orrs	r2, r3
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	60da      	str	r2, [r3, #12]
}
 8010132:	bf00      	nop
 8010134:	370c      	adds	r7, #12
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr

0801013e <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 801013e:	b480      	push	{r7}
 8010140:	b083      	sub	sp, #12
 8010142:	af00      	add	r7, sp, #0
 8010144:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	601a      	str	r2, [r3, #0]
}
 8010152:	bf00      	nop
 8010154:	370c      	adds	r7, #12
 8010156:	46bd      	mov	sp, r7
 8010158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015c:	4770      	bx	lr

0801015e <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 801015e:	b480      	push	{r7}
 8010160:	b083      	sub	sp, #12
 8010162:	af00      	add	r7, sp, #0
 8010164:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	601a      	str	r2, [r3, #0]
}
 8010172:	bf00      	nop
 8010174:	370c      	adds	r7, #12
 8010176:	46bd      	mov	sp, r7
 8010178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017c:	4770      	bx	lr

0801017e <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 801017e:	b480      	push	{r7}
 8010180:	b083      	sub	sp, #12
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	601a      	str	r2, [r3, #0]
}
 8010192:	bf00      	nop
 8010194:	370c      	adds	r7, #12
 8010196:	46bd      	mov	sp, r7
 8010198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019c:	4770      	bx	lr

0801019e <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 801019e:	b480      	push	{r7}
 80101a0:	b083      	sub	sp, #12
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	601a      	str	r2, [r3, #0]
}
 80101b2:	bf00      	nop
 80101b4:	370c      	adds	r7, #12
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr

080101be <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 80101be:	b480      	push	{r7}
 80101c0:	b083      	sub	sp, #12
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
 80101c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	683a      	ldr	r2, [r7, #0]
 80101cc:	61da      	str	r2, [r3, #28]
}
 80101ce:	bf00      	nop
 80101d0:	370c      	adds	r7, #12
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr

080101da <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 80101da:	b480      	push	{r7}
 80101dc:	b083      	sub	sp, #12
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
 80101e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	683a      	ldr	r2, [r7, #0]
 80101e8:	621a      	str	r2, [r3, #32]
}
 80101ea:	bf00      	nop
 80101ec:	370c      	adds	r7, #12
 80101ee:	46bd      	mov	sp, r7
 80101f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f4:	4770      	bx	lr

080101f6 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 80101f6:	b580      	push	{r7, lr}
 80101f8:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80101fa:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80101fe:	f7ff fe37 	bl	800fe70 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8010202:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8010206:	f7ff fe1b 	bl	800fe40 <LL_AHB1_GRP1_EnableClock>

}
 801020a:	bf00      	nop
 801020c:	bd80      	pop	{r7, pc}
	...

08010210 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b084      	sub	sp, #16
 8010214:	af00      	add	r7, sp, #0
 8010216:	4603      	mov	r3, r0
 8010218:	71fb      	strb	r3, [r7, #7]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 801021a:	79fa      	ldrb	r2, [r7, #7]
 801021c:	4917      	ldr	r1, [pc, #92]	@ (801027c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 801021e:	4613      	mov	r3, r2
 8010220:	011b      	lsls	r3, r3, #4
 8010222:	1a9b      	subs	r3, r3, r2
 8010224:	009b      	lsls	r3, r3, #2
 8010226:	440b      	add	r3, r1
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	68db      	ldr	r3, [r3, #12]
 801022c:	f023 0307 	bic.w	r3, r3, #7
 8010230:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 8010232:	79fa      	ldrb	r2, [r7, #7]
 8010234:	4911      	ldr	r1, [pc, #68]	@ (801027c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8010236:	4613      	mov	r3, r2
 8010238:	011b      	lsls	r3, r3, #4
 801023a:	1a9b      	subs	r3, r3, r2
 801023c:	009b      	lsls	r3, r3, #2
 801023e:	440b      	add	r3, r1
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	4618      	mov	r0, r3
 8010244:	f7ff fe3c 	bl	800fec0 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8010248:	79fa      	ldrb	r2, [r7, #7]
 801024a:	490c      	ldr	r1, [pc, #48]	@ (801027c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 801024c:	4613      	mov	r3, r2
 801024e:	011b      	lsls	r3, r3, #4
 8010250:	1a9b      	subs	r3, r3, r2
 8010252:	009b      	lsls	r3, r3, #2
 8010254:	440b      	add	r3, r1
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	4618      	mov	r0, r3
 801025a:	f7ff fe21 	bl	800fea0 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 801025e:	79fa      	ldrb	r2, [r7, #7]
 8010260:	4906      	ldr	r1, [pc, #24]	@ (801027c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8010262:	4613      	mov	r3, r2
 8010264:	011b      	lsls	r3, r3, #4
 8010266:	1a9b      	subs	r3, r3, r2
 8010268:	009b      	lsls	r3, r3, #2
 801026a:	440b      	add	r3, r1
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	68fa      	ldr	r2, [r7, #12]
 8010270:	60da      	str	r2, [r3, #12]
}
 8010272:	bf00      	nop
 8010274:	3710      	adds	r7, #16
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}
 801027a:	bf00      	nop
 801027c:	2000058c 	.word	0x2000058c

08010280 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b08a      	sub	sp, #40	@ 0x28
 8010284:	af00      	add	r7, sp, #0
 8010286:	60ba      	str	r2, [r7, #8]
 8010288:	607b      	str	r3, [r7, #4]
 801028a:	4603      	mov	r3, r0
 801028c:	73fb      	strb	r3, [r7, #15]
 801028e:	460b      	mov	r3, r1
 8010290:	73bb      	strb	r3, [r7, #14]
  USBPD_StatusTypeDef _status = USBPD_OK;
 8010292:	2300      	movs	r3, #0
 8010294:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 8010298:	7bbb      	ldrb	r3, [r7, #14]
 801029a:	2b05      	cmp	r3, #5
 801029c:	d10b      	bne.n	80102b6 <USBPD_HW_IF_SendBuffer+0x36>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 801029e:	7bfa      	ldrb	r2, [r7, #15]
 80102a0:	4996      	ldr	r1, [pc, #600]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 80102a2:	4613      	mov	r3, r2
 80102a4:	011b      	lsls	r3, r3, #4
 80102a6:	1a9b      	subs	r3, r3, r2
 80102a8:	009b      	lsls	r3, r3, #2
 80102aa:	440b      	add	r3, r1
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7ff ff12 	bl	80100d8 <LL_UCPD_SendHardReset>
 80102b4:	e11b      	b.n	80104ee <USBPD_HW_IF_SendBuffer+0x26e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102b6:	f3ef 8310 	mrs	r3, PRIMASK
 80102ba:	61fb      	str	r3, [r7, #28]
  return(result);
 80102bc:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 80102be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80102c0:	b672      	cpsid	i
}
 80102c2:	bf00      	nop

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 80102c4:	7bfa      	ldrb	r2, [r7, #15]
 80102c6:	498d      	ldr	r1, [pc, #564]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 80102c8:	4613      	mov	r3, r2
 80102ca:	011b      	lsls	r3, r3, #4
 80102cc:	1a9b      	subs	r3, r3, r2
 80102ce:	009b      	lsls	r3, r3, #2
 80102d0:	440b      	add	r3, r1
 80102d2:	3338      	adds	r3, #56	@ 0x38
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d00d      	beq.n	80102f8 <USBPD_HW_IF_SendBuffer+0x78>
 80102dc:	7bfa      	ldrb	r2, [r7, #15]
 80102de:	4987      	ldr	r1, [pc, #540]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 80102e0:	4613      	mov	r3, r2
 80102e2:	011b      	lsls	r3, r3, #4
 80102e4:	1a9b      	subs	r3, r3, r2
 80102e6:	009b      	lsls	r3, r3, #2
 80102e8:	440b      	add	r3, r1
 80102ea:	3304      	adds	r3, #4
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	f003 0301 	and.w	r3, r3, #1
 80102f4:	2b01      	cmp	r3, #1
 80102f6:	d109      	bne.n	801030c <USBPD_HW_IF_SendBuffer+0x8c>
 80102f8:	6a3b      	ldr	r3, [r7, #32]
 80102fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102fc:	69bb      	ldr	r3, [r7, #24]
 80102fe:	f383 8810 	msr	PRIMASK, r3
}
 8010302:	bf00      	nop
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 8010304:	2302      	movs	r3, #2
 8010306:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801030a:	e0f0      	b.n	80104ee <USBPD_HW_IF_SendBuffer+0x26e>
 801030c:	6a3b      	ldr	r3, [r7, #32]
 801030e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	f383 8810 	msr	PRIMASK, r3
}
 8010316:	bf00      	nop
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 8010318:	7bbb      	ldrb	r3, [r7, #14]
 801031a:	2b07      	cmp	r3, #7
 801031c:	d877      	bhi.n	801040e <USBPD_HW_IF_SendBuffer+0x18e>
 801031e:	a201      	add	r2, pc, #4	@ (adr r2, 8010324 <USBPD_HW_IF_SendBuffer+0xa4>)
 8010320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010324:	08010345 	.word	0x08010345
 8010328:	08010377 	.word	0x08010377
 801032c:	080103a9 	.word	0x080103a9
 8010330:	0801040f 	.word	0x0801040f
 8010334:	0801040f 	.word	0x0801040f
 8010338:	0801040f 	.word	0x0801040f
 801033c:	080103db 	.word	0x080103db
 8010340:	080103f5 	.word	0x080103f5
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 8010344:	7bfa      	ldrb	r2, [r7, #15]
 8010346:	496d      	ldr	r1, [pc, #436]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8010348:	4613      	mov	r3, r2
 801034a:	011b      	lsls	r3, r3, #4
 801034c:	1a9b      	subs	r3, r3, r2
 801034e:	009b      	lsls	r3, r3, #2
 8010350:	440b      	add	r3, r1
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	496a      	ldr	r1, [pc, #424]	@ (8010500 <USBPD_HW_IF_SendBuffer+0x280>)
 8010356:	4618      	mov	r0, r3
 8010358:	f7ff ff31 	bl	80101be <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 801035c:	7bfa      	ldrb	r2, [r7, #15]
 801035e:	4967      	ldr	r1, [pc, #412]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8010360:	4613      	mov	r3, r2
 8010362:	011b      	lsls	r3, r3, #4
 8010364:	1a9b      	subs	r3, r3, r2
 8010366:	009b      	lsls	r3, r3, #2
 8010368:	440b      	add	r3, r1
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	2100      	movs	r1, #0
 801036e:	4618      	mov	r0, r3
 8010370:	f7ff fed2 	bl	8010118 <LL_UCPD_SetTxMode>
          break;
 8010374:	e04f      	b.n	8010416 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 8010376:	7bfa      	ldrb	r2, [r7, #15]
 8010378:	4960      	ldr	r1, [pc, #384]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 801037a:	4613      	mov	r3, r2
 801037c:	011b      	lsls	r3, r3, #4
 801037e:	1a9b      	subs	r3, r3, r2
 8010380:	009b      	lsls	r3, r3, #2
 8010382:	440b      	add	r3, r1
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	495f      	ldr	r1, [pc, #380]	@ (8010504 <USBPD_HW_IF_SendBuffer+0x284>)
 8010388:	4618      	mov	r0, r3
 801038a:	f7ff ff18 	bl	80101be <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 801038e:	7bfa      	ldrb	r2, [r7, #15]
 8010390:	495a      	ldr	r1, [pc, #360]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8010392:	4613      	mov	r3, r2
 8010394:	011b      	lsls	r3, r3, #4
 8010396:	1a9b      	subs	r3, r3, r2
 8010398:	009b      	lsls	r3, r3, #2
 801039a:	440b      	add	r3, r1
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	2100      	movs	r1, #0
 80103a0:	4618      	mov	r0, r3
 80103a2:	f7ff feb9 	bl	8010118 <LL_UCPD_SetTxMode>
          break;
 80103a6:	e036      	b.n	8010416 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 80103a8:	7bfa      	ldrb	r2, [r7, #15]
 80103aa:	4954      	ldr	r1, [pc, #336]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 80103ac:	4613      	mov	r3, r2
 80103ae:	011b      	lsls	r3, r3, #4
 80103b0:	1a9b      	subs	r3, r3, r2
 80103b2:	009b      	lsls	r3, r3, #2
 80103b4:	440b      	add	r3, r1
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	4953      	ldr	r1, [pc, #332]	@ (8010508 <USBPD_HW_IF_SendBuffer+0x288>)
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7ff feff 	bl	80101be <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 80103c0:	7bfa      	ldrb	r2, [r7, #15]
 80103c2:	494e      	ldr	r1, [pc, #312]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 80103c4:	4613      	mov	r3, r2
 80103c6:	011b      	lsls	r3, r3, #4
 80103c8:	1a9b      	subs	r3, r3, r2
 80103ca:	009b      	lsls	r3, r3, #2
 80103cc:	440b      	add	r3, r1
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	2100      	movs	r1, #0
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7ff fea0 	bl	8010118 <LL_UCPD_SetTxMode>
          break;
 80103d8:	e01d      	b.n	8010416 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 80103da:	7bfa      	ldrb	r2, [r7, #15]
 80103dc:	4947      	ldr	r1, [pc, #284]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 80103de:	4613      	mov	r3, r2
 80103e0:	011b      	lsls	r3, r3, #4
 80103e2:	1a9b      	subs	r3, r3, r2
 80103e4:	009b      	lsls	r3, r3, #2
 80103e6:	440b      	add	r3, r1
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	2101      	movs	r1, #1
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7ff fe93 	bl	8010118 <LL_UCPD_SetTxMode>
          break;
 80103f2:	e010      	b.n	8010416 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 80103f4:	7bfa      	ldrb	r2, [r7, #15]
 80103f6:	4941      	ldr	r1, [pc, #260]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 80103f8:	4613      	mov	r3, r2
 80103fa:	011b      	lsls	r3, r3, #4
 80103fc:	1a9b      	subs	r3, r3, r2
 80103fe:	009b      	lsls	r3, r3, #2
 8010400:	440b      	add	r3, r1
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	2102      	movs	r1, #2
 8010406:	4618      	mov	r0, r3
 8010408:	f7ff fe86 	bl	8010118 <LL_UCPD_SetTxMode>
          break;
 801040c:	e003      	b.n	8010416 <USBPD_HW_IF_SendBuffer+0x196>
        }
        default :
          _status = USBPD_ERROR;
 801040e:	2302      	movs	r3, #2
 8010410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8010414:	bf00      	nop
      }

      if (USBPD_OK == _status)
 8010416:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801041a:	2b00      	cmp	r3, #0
 801041c:	d167      	bne.n	80104ee <USBPD_HW_IF_SendBuffer+0x26e>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 801041e:	7bfa      	ldrb	r2, [r7, #15]
 8010420:	4936      	ldr	r1, [pc, #216]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8010422:	4613      	mov	r3, r2
 8010424:	011b      	lsls	r3, r3, #4
 8010426:	1a9b      	subs	r3, r3, r2
 8010428:	009b      	lsls	r3, r3, #2
 801042a:	440b      	add	r3, r1
 801042c:	3304      	adds	r3, #4
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	6819      	ldr	r1, [r3, #0]
 8010432:	7bfa      	ldrb	r2, [r7, #15]
 8010434:	4831      	ldr	r0, [pc, #196]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8010436:	4613      	mov	r3, r2
 8010438:	011b      	lsls	r3, r3, #4
 801043a:	1a9b      	subs	r3, r3, r2
 801043c:	009b      	lsls	r3, r3, #2
 801043e:	4403      	add	r3, r0
 8010440:	3304      	adds	r3, #4
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	f021 0201 	bic.w	r2, r1, #1
 8010448:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 801044a:	bf00      	nop
 801044c:	7bfa      	ldrb	r2, [r7, #15]
 801044e:	492b      	ldr	r1, [pc, #172]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8010450:	4613      	mov	r3, r2
 8010452:	011b      	lsls	r3, r3, #4
 8010454:	1a9b      	subs	r3, r3, r2
 8010456:	009b      	lsls	r3, r3, #2
 8010458:	440b      	add	r3, r1
 801045a:	3304      	adds	r3, #4
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	f003 0301 	and.w	r3, r3, #1
 8010464:	2b01      	cmp	r3, #1
 8010466:	d0f1      	beq.n	801044c <USBPD_HW_IF_SendBuffer+0x1cc>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 8010468:	7bfa      	ldrb	r2, [r7, #15]
 801046a:	4924      	ldr	r1, [pc, #144]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 801046c:	4613      	mov	r3, r2
 801046e:	011b      	lsls	r3, r3, #4
 8010470:	1a9b      	subs	r3, r3, r2
 8010472:	009b      	lsls	r3, r3, #2
 8010474:	440b      	add	r3, r1
 8010476:	3304      	adds	r3, #4
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	68ba      	ldr	r2, [r7, #8]
 801047c:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 801047e:	7bfa      	ldrb	r2, [r7, #15]
 8010480:	491e      	ldr	r1, [pc, #120]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8010482:	4613      	mov	r3, r2
 8010484:	011b      	lsls	r3, r3, #4
 8010486:	1a9b      	subs	r3, r3, r2
 8010488:	009b      	lsls	r3, r3, #2
 801048a:	440b      	add	r3, r1
 801048c:	3304      	adds	r3, #4
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8010494:	7bfa      	ldrb	r2, [r7, #15]
 8010496:	4919      	ldr	r1, [pc, #100]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8010498:	4613      	mov	r3, r2
 801049a:	011b      	lsls	r3, r3, #4
 801049c:	1a9b      	subs	r3, r3, r2
 801049e:	009b      	lsls	r3, r3, #2
 80104a0:	440b      	add	r3, r1
 80104a2:	3304      	adds	r3, #4
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	6819      	ldr	r1, [r3, #0]
 80104a8:	7bfa      	ldrb	r2, [r7, #15]
 80104aa:	4814      	ldr	r0, [pc, #80]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 80104ac:	4613      	mov	r3, r2
 80104ae:	011b      	lsls	r3, r3, #4
 80104b0:	1a9b      	subs	r3, r3, r2
 80104b2:	009b      	lsls	r3, r3, #2
 80104b4:	4403      	add	r3, r0
 80104b6:	3304      	adds	r3, #4
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f041 0201 	orr.w	r2, r1, #1
 80104be:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 80104c0:	7bfa      	ldrb	r2, [r7, #15]
 80104c2:	490e      	ldr	r1, [pc, #56]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 80104c4:	4613      	mov	r3, r2
 80104c6:	011b      	lsls	r3, r3, #4
 80104c8:	1a9b      	subs	r3, r3, r2
 80104ca:	009b      	lsls	r3, r3, #2
 80104cc:	440b      	add	r3, r1
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	6879      	ldr	r1, [r7, #4]
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7ff fe81 	bl	80101da <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 80104d8:	7bfa      	ldrb	r2, [r7, #15]
 80104da:	4908      	ldr	r1, [pc, #32]	@ (80104fc <USBPD_HW_IF_SendBuffer+0x27c>)
 80104dc:	4613      	mov	r3, r2
 80104de:	011b      	lsls	r3, r3, #4
 80104e0:	1a9b      	subs	r3, r3, r2
 80104e2:	009b      	lsls	r3, r3, #2
 80104e4:	440b      	add	r3, r1
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	4618      	mov	r0, r3
 80104ea:	f7ff fe05 	bl	80100f8 <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 80104ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3728      	adds	r7, #40	@ 0x28
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}
 80104fa:	bf00      	nop
 80104fc:	2000058c 	.word	0x2000058c
 8010500:	0008e318 	.word	0x0008e318
 8010504:	00031b18 	.word	0x00031b18
 8010508:	000360d8 	.word	0x000360d8

0801050c <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
 8010512:	4603      	mov	r3, r0
 8010514:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8010516:	79fa      	ldrb	r2, [r7, #7]
 8010518:	490c      	ldr	r1, [pc, #48]	@ (801054c <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 801051a:	4613      	mov	r3, r2
 801051c:	011b      	lsls	r3, r3, #4
 801051e:	1a9b      	subs	r3, r3, r2
 8010520:	009b      	lsls	r3, r3, #2
 8010522:	440b      	add	r3, r1
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	2102      	movs	r1, #2
 8010528:	4618      	mov	r0, r3
 801052a:	f7ff fdf5 	bl	8010118 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 801052e:	79fa      	ldrb	r2, [r7, #7]
 8010530:	4906      	ldr	r1, [pc, #24]	@ (801054c <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 8010532:	4613      	mov	r3, r2
 8010534:	011b      	lsls	r3, r3, #4
 8010536:	1a9b      	subs	r3, r3, r2
 8010538:	009b      	lsls	r3, r3, #2
 801053a:	440b      	add	r3, r1
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	4618      	mov	r0, r3
 8010540:	f7ff fdda 	bl	80100f8 <LL_UCPD_SendMessage>
}
 8010544:	bf00      	nop
 8010546:	3708      	adds	r7, #8
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}
 801054c:	2000058c 	.word	0x2000058c

08010550 <USBPDM1_AssertRp>:
  * @brief  Assert Rp resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_AssertRp(uint8_t PortNum)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
 8010556:	4603      	mov	r3, r0
 8010558:	71fb      	strb	r3, [r7, #7]
  switch (Ports[PortNum].params->RpResistor)
 801055a:	79fa      	ldrb	r2, [r7, #7]
 801055c:	4946      	ldr	r1, [pc, #280]	@ (8010678 <USBPDM1_AssertRp+0x128>)
 801055e:	4613      	mov	r3, r2
 8010560:	011b      	lsls	r3, r3, #4
 8010562:	1a9b      	subs	r3, r3, r2
 8010564:	009b      	lsls	r3, r3, #2
 8010566:	440b      	add	r3, r1
 8010568:	3310      	adds	r3, #16
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	789b      	ldrb	r3, [r3, #2]
 801056e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010572:	b2db      	uxtb	r3, r3
 8010574:	2b02      	cmp	r3, #2
 8010576:	d021      	beq.n	80105bc <USBPDM1_AssertRp+0x6c>
 8010578:	2b02      	cmp	r3, #2
 801057a:	dc2d      	bgt.n	80105d8 <USBPDM1_AssertRp+0x88>
 801057c:	2b00      	cmp	r3, #0
 801057e:	d002      	beq.n	8010586 <USBPDM1_AssertRp+0x36>
 8010580:	2b01      	cmp	r3, #1
 8010582:	d00d      	beq.n	80105a0 <USBPDM1_AssertRp+0x50>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 8010584:	e028      	b.n	80105d8 <USBPDM1_AssertRp+0x88>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 8010586:	79fa      	ldrb	r2, [r7, #7]
 8010588:	493b      	ldr	r1, [pc, #236]	@ (8010678 <USBPDM1_AssertRp+0x128>)
 801058a:	4613      	mov	r3, r2
 801058c:	011b      	lsls	r3, r3, #4
 801058e:	1a9b      	subs	r3, r3, r2
 8010590:	009b      	lsls	r3, r3, #2
 8010592:	440b      	add	r3, r1
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	2180      	movs	r1, #128	@ 0x80
 8010598:	4618      	mov	r0, r3
 801059a:	f7ff fd44 	bl	8010026 <LL_UCPD_SetRpResistor>
      break;
 801059e:	e01c      	b.n	80105da <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 80105a0:	79fa      	ldrb	r2, [r7, #7]
 80105a2:	4935      	ldr	r1, [pc, #212]	@ (8010678 <USBPDM1_AssertRp+0x128>)
 80105a4:	4613      	mov	r3, r2
 80105a6:	011b      	lsls	r3, r3, #4
 80105a8:	1a9b      	subs	r3, r3, r2
 80105aa:	009b      	lsls	r3, r3, #2
 80105ac:	440b      	add	r3, r1
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7ff fd36 	bl	8010026 <LL_UCPD_SetRpResistor>
      break;
 80105ba:	e00e      	b.n	80105da <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 80105bc:	79fa      	ldrb	r2, [r7, #7]
 80105be:	492e      	ldr	r1, [pc, #184]	@ (8010678 <USBPDM1_AssertRp+0x128>)
 80105c0:	4613      	mov	r3, r2
 80105c2:	011b      	lsls	r3, r3, #4
 80105c4:	1a9b      	subs	r3, r3, r2
 80105c6:	009b      	lsls	r3, r3, #2
 80105c8:	440b      	add	r3, r1
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7ff fd28 	bl	8010026 <LL_UCPD_SetRpResistor>
      break;
 80105d6:	e000      	b.n	80105da <USBPDM1_AssertRp+0x8a>
      break;
 80105d8:	bf00      	nop
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 80105da:	79fa      	ldrb	r2, [r7, #7]
 80105dc:	4926      	ldr	r1, [pc, #152]	@ (8010678 <USBPDM1_AssertRp+0x128>)
 80105de:	4613      	mov	r3, r2
 80105e0:	011b      	lsls	r3, r3, #4
 80105e2:	1a9b      	subs	r3, r3, r2
 80105e4:	009b      	lsls	r3, r3, #2
 80105e6:	440b      	add	r3, r1
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	2100      	movs	r1, #0
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7ff fce7 	bl	800ffc0 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 80105f2:	79fa      	ldrb	r2, [r7, #7]
 80105f4:	4920      	ldr	r1, [pc, #128]	@ (8010678 <USBPDM1_AssertRp+0x128>)
 80105f6:	4613      	mov	r3, r2
 80105f8:	011b      	lsls	r3, r3, #4
 80105fa:	1a9b      	subs	r3, r3, r2
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	440b      	add	r3, r1
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	4618      	mov	r0, r3
 8010604:	f7ff fcff 	bl	8010006 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 8010608:	79fa      	ldrb	r2, [r7, #7]
 801060a:	491b      	ldr	r1, [pc, #108]	@ (8010678 <USBPDM1_AssertRp+0x128>)
 801060c:	4613      	mov	r3, r2
 801060e:	011b      	lsls	r3, r3, #4
 8010610:	1a9b      	subs	r3, r3, r2
 8010612:	009b      	lsls	r3, r3, #2
 8010614:	440b      	add	r3, r1
 8010616:	3334      	adds	r3, #52	@ 0x34
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d10d      	bne.n	801063a <USBPDM1_AssertRp+0xea>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 801061e:	79fa      	ldrb	r2, [r7, #7]
 8010620:	4915      	ldr	r1, [pc, #84]	@ (8010678 <USBPDM1_AssertRp+0x128>)
 8010622:	4613      	mov	r3, r2
 8010624:	011b      	lsls	r3, r3, #4
 8010626:	1a9b      	subs	r3, r3, r2
 8010628:	009b      	lsls	r3, r3, #2
 801062a:	440b      	add	r3, r1
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8010632:	4618      	mov	r0, r3
 8010634:	f7ff fcc4 	bl	800ffc0 <LL_UCPD_SetccEnable>
  }

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 8010638:	e01a      	b.n	8010670 <USBPDM1_AssertRp+0x120>
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 801063a:	79fa      	ldrb	r2, [r7, #7]
 801063c:	490e      	ldr	r1, [pc, #56]	@ (8010678 <USBPDM1_AssertRp+0x128>)
 801063e:	4613      	mov	r3, r2
 8010640:	011b      	lsls	r3, r3, #4
 8010642:	1a9b      	subs	r3, r3, r2
 8010644:	009b      	lsls	r3, r3, #2
 8010646:	440b      	add	r3, r1
 8010648:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 801064a:	79fa      	ldrb	r2, [r7, #7]
 801064c:	490a      	ldr	r1, [pc, #40]	@ (8010678 <USBPDM1_AssertRp+0x128>)
 801064e:	4613      	mov	r3, r2
 8010650:	011b      	lsls	r3, r3, #4
 8010652:	1a9b      	subs	r3, r3, r2
 8010654:	009b      	lsls	r3, r3, #2
 8010656:	440b      	add	r3, r1
 8010658:	3334      	adds	r3, #52	@ 0x34
 801065a:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 801065c:	2b01      	cmp	r3, #1
 801065e:	d102      	bne.n	8010666 <USBPDM1_AssertRp+0x116>
 8010660:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010664:	e001      	b.n	801066a <USBPDM1_AssertRp+0x11a>
 8010666:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801066a:	4619      	mov	r1, r3
 801066c:	f7ff fca8 	bl	800ffc0 <LL_UCPD_SetccEnable>
}
 8010670:	bf00      	nop
 8010672:	3708      	adds	r7, #8
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}
 8010678:	2000058c 	.word	0x2000058c

0801067c <USBPDM1_DeAssertRp>:
  * @brief  De-assert Rp resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 801067c:	b480      	push	{r7}
 801067e:	b083      	sub	sp, #12
 8010680:	af00      	add	r7, sp, #0
 8010682:	4603      	mov	r3, r0
 8010684:	71fb      	strb	r3, [r7, #7]
  /* Not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8010686:	bf00      	nop
 8010688:	370c      	adds	r7, #12
 801068a:	46bd      	mov	sp, r7
 801068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010690:	4770      	bx	lr
	...

08010694 <USBPDM1_AssertRd>:
  * @brief  Assert Rd resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_AssertRd(uint8_t PortNum)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b082      	sub	sp, #8
 8010698:	af00      	add	r7, sp, #0
 801069a:	4603      	mov	r3, r0
 801069c:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 801069e:	79fa      	ldrb	r2, [r7, #7]
 80106a0:	493e      	ldr	r1, [pc, #248]	@ (801079c <USBPDM1_AssertRd+0x108>)
 80106a2:	4613      	mov	r3, r2
 80106a4:	011b      	lsls	r3, r3, #4
 80106a6:	1a9b      	subs	r3, r3, r2
 80106a8:	009b      	lsls	r3, r3, #2
 80106aa:	440b      	add	r3, r1
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	4618      	mov	r0, r3
 80106b0:	f7ff fc26 	bl	800ff00 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 80106b4:	79fa      	ldrb	r2, [r7, #7]
 80106b6:	4939      	ldr	r1, [pc, #228]	@ (801079c <USBPDM1_AssertRd+0x108>)
 80106b8:	4613      	mov	r3, r2
 80106ba:	011b      	lsls	r3, r3, #4
 80106bc:	1a9b      	subs	r3, r3, r2
 80106be:	009b      	lsls	r3, r3, #2
 80106c0:	440b      	add	r3, r1
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	4618      	mov	r0, r3
 80106c6:	f7ff fc3b 	bl	800ff40 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 80106ca:	79fa      	ldrb	r2, [r7, #7]
 80106cc:	4933      	ldr	r1, [pc, #204]	@ (801079c <USBPDM1_AssertRd+0x108>)
 80106ce:	4613      	mov	r3, r2
 80106d0:	011b      	lsls	r3, r3, #4
 80106d2:	1a9b      	subs	r3, r3, r2
 80106d4:	009b      	lsls	r3, r3, #2
 80106d6:	440b      	add	r3, r1
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	2100      	movs	r1, #0
 80106dc:	4618      	mov	r0, r3
 80106de:	f7ff fc6f 	bl	800ffc0 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 80106e2:	79fa      	ldrb	r2, [r7, #7]
 80106e4:	492d      	ldr	r1, [pc, #180]	@ (801079c <USBPDM1_AssertRd+0x108>)
 80106e6:	4613      	mov	r3, r2
 80106e8:	011b      	lsls	r3, r3, #4
 80106ea:	1a9b      	subs	r3, r3, r2
 80106ec:	009b      	lsls	r3, r3, #2
 80106ee:	440b      	add	r3, r1
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7ff fc77 	bl	800ffe6 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 80106f8:	79fa      	ldrb	r2, [r7, #7]
 80106fa:	4928      	ldr	r1, [pc, #160]	@ (801079c <USBPDM1_AssertRd+0x108>)
 80106fc:	4613      	mov	r3, r2
 80106fe:	011b      	lsls	r3, r3, #4
 8010700:	1a9b      	subs	r3, r3, r2
 8010702:	009b      	lsls	r3, r3, #2
 8010704:	440b      	add	r3, r1
 8010706:	3334      	adds	r3, #52	@ 0x34
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d10d      	bne.n	801072a <USBPDM1_AssertRd+0x96>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 801070e:	79fa      	ldrb	r2, [r7, #7]
 8010710:	4922      	ldr	r1, [pc, #136]	@ (801079c <USBPDM1_AssertRd+0x108>)
 8010712:	4613      	mov	r3, r2
 8010714:	011b      	lsls	r3, r3, #4
 8010716:	1a9b      	subs	r3, r3, r2
 8010718:	009b      	lsls	r3, r3, #2
 801071a:	440b      	add	r3, r1
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8010722:	4618      	mov	r0, r3
 8010724:	f7ff fc4c 	bl	800ffc0 <LL_UCPD_SetccEnable>
 8010728:	e01a      	b.n	8010760 <USBPDM1_AssertRd+0xcc>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 801072a:	79fa      	ldrb	r2, [r7, #7]
 801072c:	491b      	ldr	r1, [pc, #108]	@ (801079c <USBPDM1_AssertRd+0x108>)
 801072e:	4613      	mov	r3, r2
 8010730:	011b      	lsls	r3, r3, #4
 8010732:	1a9b      	subs	r3, r3, r2
 8010734:	009b      	lsls	r3, r3, #2
 8010736:	440b      	add	r3, r1
 8010738:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 801073a:	79fa      	ldrb	r2, [r7, #7]
 801073c:	4917      	ldr	r1, [pc, #92]	@ (801079c <USBPDM1_AssertRd+0x108>)
 801073e:	4613      	mov	r3, r2
 8010740:	011b      	lsls	r3, r3, #4
 8010742:	1a9b      	subs	r3, r3, r2
 8010744:	009b      	lsls	r3, r3, #2
 8010746:	440b      	add	r3, r1
 8010748:	3334      	adds	r3, #52	@ 0x34
 801074a:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 801074c:	2b01      	cmp	r3, #1
 801074e:	d102      	bne.n	8010756 <USBPDM1_AssertRd+0xc2>
 8010750:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010754:	e001      	b.n	801075a <USBPDM1_AssertRd+0xc6>
 8010756:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801075a:	4619      	mov	r1, r3
 801075c:	f7ff fc30 	bl	800ffc0 <LL_UCPD_SetccEnable>
  }

  HAL_Delay(1);
 8010760:	2001      	movs	r0, #1
 8010762:	f7f6 fc31 	bl	8006fc8 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 8010766:	79fa      	ldrb	r2, [r7, #7]
 8010768:	490c      	ldr	r1, [pc, #48]	@ (801079c <USBPDM1_AssertRd+0x108>)
 801076a:	4613      	mov	r3, r2
 801076c:	011b      	lsls	r3, r3, #4
 801076e:	1a9b      	subs	r3, r3, r2
 8010770:	009b      	lsls	r3, r3, #2
 8010772:	440b      	add	r3, r1
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4618      	mov	r0, r3
 8010778:	f7ff fbb2 	bl	800fee0 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 801077c:	79fa      	ldrb	r2, [r7, #7]
 801077e:	4907      	ldr	r1, [pc, #28]	@ (801079c <USBPDM1_AssertRd+0x108>)
 8010780:	4613      	mov	r3, r2
 8010782:	011b      	lsls	r3, r3, #4
 8010784:	1a9b      	subs	r3, r3, r2
 8010786:	009b      	lsls	r3, r3, #2
 8010788:	440b      	add	r3, r1
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	4618      	mov	r0, r3
 801078e:	f7ff fbc7 	bl	800ff20 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 8010792:	bf00      	nop
 8010794:	3708      	adds	r7, #8
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	2000058c 	.word	0x2000058c

080107a0 <USBPDM1_DeAssertRd>:
  * @brief  Assert Rd resistors
  * @param  PortNum Port
  * @retval none
  */
void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	4603      	mov	r3, r0
 80107a8:	71fb      	strb	r3, [r7, #7]
  /* Not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 80107aa:	bf00      	nop
 80107ac:	370c      	adds	r7, #12
 80107ae:	46bd      	mov	sp, r7
 80107b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b4:	4770      	bx	lr
	...

080107b8 <USBPDM1_EnterErrorRecovery>:
  * @brief  Enter error recovery
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b082      	sub	sp, #8
 80107bc:	af00      	add	r7, sp, #0
 80107be:	4603      	mov	r3, r0
 80107c0:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 80107c2:	79fa      	ldrb	r2, [r7, #7]
 80107c4:	491f      	ldr	r1, [pc, #124]	@ (8010844 <USBPDM1_EnterErrorRecovery+0x8c>)
 80107c6:	4613      	mov	r3, r2
 80107c8:	011b      	lsls	r3, r3, #4
 80107ca:	1a9b      	subs	r3, r3, r2
 80107cc:	009b      	lsls	r3, r3, #2
 80107ce:	440b      	add	r3, r1
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	4618      	mov	r0, r3
 80107d4:	f7ff fc17 	bl	8010006 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 80107d8:	79fa      	ldrb	r2, [r7, #7]
 80107da:	491a      	ldr	r1, [pc, #104]	@ (8010844 <USBPDM1_EnterErrorRecovery+0x8c>)
 80107dc:	4613      	mov	r3, r2
 80107de:	011b      	lsls	r3, r3, #4
 80107e0:	1a9b      	subs	r3, r3, r2
 80107e2:	009b      	lsls	r3, r3, #2
 80107e4:	440b      	add	r3, r1
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	2100      	movs	r1, #0
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7ff fc1b 	bl	8010026 <LL_UCPD_SetRpResistor>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 80107f0:	79fa      	ldrb	r2, [r7, #7]
 80107f2:	4914      	ldr	r1, [pc, #80]	@ (8010844 <USBPDM1_EnterErrorRecovery+0x8c>)
 80107f4:	4613      	mov	r3, r2
 80107f6:	011b      	lsls	r3, r3, #4
 80107f8:	1a9b      	subs	r3, r3, r2
 80107fa:	009b      	lsls	r3, r3, #2
 80107fc:	440b      	add	r3, r1
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	4618      	mov	r0, r3
 8010802:	f7ff fc46 	bl	8010092 <LL_UCPD_RxDisable>

#if !defined(USBPDCORE_LIB_NO_PD)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8010806:	79fa      	ldrb	r2, [r7, #7]
 8010808:	490e      	ldr	r1, [pc, #56]	@ (8010844 <USBPDM1_EnterErrorRecovery+0x8c>)
 801080a:	4613      	mov	r3, r2
 801080c:	011b      	lsls	r3, r3, #4
 801080e:	1a9b      	subs	r3, r3, r2
 8010810:	009b      	lsls	r3, r3, #2
 8010812:	440b      	add	r3, r1
 8010814:	330c      	adds	r3, #12
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	7a1b      	ldrb	r3, [r3, #8]
 801081a:	f003 0302 	and.w	r3, r3, #2
 801081e:	b2db      	uxtb	r3, r3
 8010820:	2b00      	cmp	r3, #0
 8010822:	d00a      	beq.n	801083a <USBPDM1_EnterErrorRecovery+0x82>
  {
    /* Set GPIO to disallow the FRS RX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8010824:	79fa      	ldrb	r2, [r7, #7]
 8010826:	4907      	ldr	r1, [pc, #28]	@ (8010844 <USBPDM1_EnterErrorRecovery+0x8c>)
 8010828:	4613      	mov	r3, r2
 801082a:	011b      	lsls	r3, r3, #4
 801082c:	1a9b      	subs	r3, r3, r2
 801082e:	009b      	lsls	r3, r3, #2
 8010830:	440b      	add	r3, r1
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	4618      	mov	r0, r3
 8010836:	f7ff fbb3 	bl	800ffa0 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPDCORE_LIB_NO_PD */
}
 801083a:	bf00      	nop
 801083c:	3708      	adds	r7, #8
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}
 8010842:	bf00      	nop
 8010844:	2000058c 	.word	0x2000058c

08010848 <USBPD_HW_IF_EnableRX>:
  * @brief  Enable RX
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b082      	sub	sp, #8
 801084c:	af00      	add	r7, sp, #0
 801084e:	4603      	mov	r3, r0
 8010850:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 8010852:	79fa      	ldrb	r2, [r7, #7]
 8010854:	4906      	ldr	r1, [pc, #24]	@ (8010870 <USBPD_HW_IF_EnableRX+0x28>)
 8010856:	4613      	mov	r3, r2
 8010858:	011b      	lsls	r3, r3, #4
 801085a:	1a9b      	subs	r3, r3, r2
 801085c:	009b      	lsls	r3, r3, #2
 801085e:	440b      	add	r3, r1
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	4618      	mov	r0, r3
 8010864:	f7ff fc05 	bl	8010072 <LL_UCPD_RxEnable>
}
 8010868:	bf00      	nop
 801086a:	3708      	adds	r7, #8
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}
 8010870:	2000058c 	.word	0x2000058c

08010874 <USBPD_HW_IF_DisableRX>:
  * @brief  Disable RX
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b082      	sub	sp, #8
 8010878:	af00      	add	r7, sp, #0
 801087a:	4603      	mov	r3, r0
 801087c:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 801087e:	79fa      	ldrb	r2, [r7, #7]
 8010880:	4906      	ldr	r1, [pc, #24]	@ (801089c <USBPD_HW_IF_DisableRX+0x28>)
 8010882:	4613      	mov	r3, r2
 8010884:	011b      	lsls	r3, r3, #4
 8010886:	1a9b      	subs	r3, r3, r2
 8010888:	009b      	lsls	r3, r3, #2
 801088a:	440b      	add	r3, r1
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	4618      	mov	r0, r3
 8010890:	f7ff fbff 	bl	8010092 <LL_UCPD_RxDisable>
}
 8010894:	bf00      	nop
 8010896:	3708      	adds	r7, #8
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}
 801089c:	2000058c 	.word	0x2000058c

080108a0 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 80108a0:	b590      	push	{r4, r7, lr}
 80108a2:	b085      	sub	sp, #20
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	4603      	mov	r3, r0
 80108a8:	6039      	str	r1, [r7, #0]
 80108aa:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 80108ac:	f000 fc4e 	bl	801114c <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 80108b0:	79fc      	ldrb	r4, [r7, #7]
 80108b2:	79fb      	ldrb	r3, [r7, #7]
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7fe fe27 	bl	800f508 <USBPD_HW_Init_DMATxInstance>
 80108ba:	4602      	mov	r2, r0
 80108bc:	499d      	ldr	r1, [pc, #628]	@ (8010b34 <HW_SignalAttachement+0x294>)
 80108be:	4623      	mov	r3, r4
 80108c0:	011b      	lsls	r3, r3, #4
 80108c2:	1b1b      	subs	r3, r3, r4
 80108c4:	009b      	lsls	r3, r3, #2
 80108c6:	440b      	add	r3, r1
 80108c8:	3304      	adds	r3, #4
 80108ca:	601a      	str	r2, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 80108cc:	79fc      	ldrb	r4, [r7, #7]
 80108ce:	79fb      	ldrb	r3, [r7, #7]
 80108d0:	4618      	mov	r0, r3
 80108d2:	f7fe fdd9 	bl	800f488 <USBPD_HW_Init_DMARxInstance>
 80108d6:	4602      	mov	r2, r0
 80108d8:	4996      	ldr	r1, [pc, #600]	@ (8010b34 <HW_SignalAttachement+0x294>)
 80108da:	4623      	mov	r3, r4
 80108dc:	011b      	lsls	r3, r3, #4
 80108de:	1b1b      	subs	r3, r3, r4
 80108e0:	009b      	lsls	r3, r3, #2
 80108e2:	440b      	add	r3, r1
 80108e4:	3308      	adds	r3, #8
 80108e6:	601a      	str	r2, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 80108e8:	79fa      	ldrb	r2, [r7, #7]
 80108ea:	4992      	ldr	r1, [pc, #584]	@ (8010b34 <HW_SignalAttachement+0x294>)
 80108ec:	4613      	mov	r3, r2
 80108ee:	011b      	lsls	r3, r3, #4
 80108f0:	1a9b      	subs	r3, r3, r2
 80108f2:	009b      	lsls	r3, r3, #2
 80108f4:	440b      	add	r3, r1
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	3330      	adds	r3, #48	@ 0x30
 80108fa:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 80108fc:	79fa      	ldrb	r2, [r7, #7]
 80108fe:	498d      	ldr	r1, [pc, #564]	@ (8010b34 <HW_SignalAttachement+0x294>)
 8010900:	4613      	mov	r3, r2
 8010902:	011b      	lsls	r3, r3, #4
 8010904:	1a9b      	subs	r3, r3, r2
 8010906:	009b      	lsls	r3, r3, #2
 8010908:	440b      	add	r3, r1
 801090a:	3308      	adds	r3, #8
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	68fa      	ldr	r2, [r7, #12]
 8010910:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8010912:	79fa      	ldrb	r2, [r7, #7]
 8010914:	4987      	ldr	r1, [pc, #540]	@ (8010b34 <HW_SignalAttachement+0x294>)
 8010916:	4613      	mov	r3, r2
 8010918:	011b      	lsls	r3, r3, #4
 801091a:	1a9b      	subs	r3, r3, r2
 801091c:	009b      	lsls	r3, r3, #2
 801091e:	440b      	add	r3, r1
 8010920:	3330      	adds	r3, #48	@ 0x30
 8010922:	6818      	ldr	r0, [r3, #0]
 8010924:	79fa      	ldrb	r2, [r7, #7]
 8010926:	4983      	ldr	r1, [pc, #524]	@ (8010b34 <HW_SignalAttachement+0x294>)
 8010928:	4613      	mov	r3, r2
 801092a:	011b      	lsls	r3, r3, #4
 801092c:	1a9b      	subs	r3, r3, r2
 801092e:	009b      	lsls	r3, r3, #2
 8010930:	440b      	add	r3, r1
 8010932:	3308      	adds	r3, #8
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	4602      	mov	r2, r0
 8010938:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 801093a:	79fa      	ldrb	r2, [r7, #7]
 801093c:	497d      	ldr	r1, [pc, #500]	@ (8010b34 <HW_SignalAttachement+0x294>)
 801093e:	4613      	mov	r3, r2
 8010940:	011b      	lsls	r3, r3, #4
 8010942:	1a9b      	subs	r3, r3, r2
 8010944:	009b      	lsls	r3, r3, #2
 8010946:	440b      	add	r3, r1
 8010948:	3308      	adds	r3, #8
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8010950:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 8010952:	79fa      	ldrb	r2, [r7, #7]
 8010954:	4977      	ldr	r1, [pc, #476]	@ (8010b34 <HW_SignalAttachement+0x294>)
 8010956:	4613      	mov	r3, r2
 8010958:	011b      	lsls	r3, r3, #4
 801095a:	1a9b      	subs	r3, r3, r2
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	440b      	add	r3, r1
 8010960:	3308      	adds	r3, #8
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	6819      	ldr	r1, [r3, #0]
 8010966:	79fa      	ldrb	r2, [r7, #7]
 8010968:	4872      	ldr	r0, [pc, #456]	@ (8010b34 <HW_SignalAttachement+0x294>)
 801096a:	4613      	mov	r3, r2
 801096c:	011b      	lsls	r3, r3, #4
 801096e:	1a9b      	subs	r3, r3, r2
 8010970:	009b      	lsls	r3, r3, #2
 8010972:	4403      	add	r3, r0
 8010974:	3308      	adds	r3, #8
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f041 0201 	orr.w	r2, r1, #1
 801097c:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 801097e:	79fa      	ldrb	r2, [r7, #7]
 8010980:	496c      	ldr	r1, [pc, #432]	@ (8010b34 <HW_SignalAttachement+0x294>)
 8010982:	4613      	mov	r3, r2
 8010984:	011b      	lsls	r3, r3, #4
 8010986:	1a9b      	subs	r3, r3, r2
 8010988:	009b      	lsls	r3, r3, #2
 801098a:	440b      	add	r3, r1
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	3324      	adds	r3, #36	@ 0x24
 8010990:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 8010992:	79fa      	ldrb	r2, [r7, #7]
 8010994:	4967      	ldr	r1, [pc, #412]	@ (8010b34 <HW_SignalAttachement+0x294>)
 8010996:	4613      	mov	r3, r2
 8010998:	011b      	lsls	r3, r3, #4
 801099a:	1a9b      	subs	r3, r3, r2
 801099c:	009b      	lsls	r3, r3, #2
 801099e:	440b      	add	r3, r1
 80109a0:	3304      	adds	r3, #4
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	68fa      	ldr	r2, [r7, #12]
 80109a6:	609a      	str	r2, [r3, #8]
  /* Disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 80109a8:	79fa      	ldrb	r2, [r7, #7]
 80109aa:	4962      	ldr	r1, [pc, #392]	@ (8010b34 <HW_SignalAttachement+0x294>)
 80109ac:	4613      	mov	r3, r2
 80109ae:	011b      	lsls	r3, r3, #4
 80109b0:	1a9b      	subs	r3, r3, r2
 80109b2:	009b      	lsls	r3, r3, #2
 80109b4:	440b      	add	r3, r1
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	6919      	ldr	r1, [r3, #16]
 80109ba:	79fa      	ldrb	r2, [r7, #7]
 80109bc:	485d      	ldr	r0, [pc, #372]	@ (8010b34 <HW_SignalAttachement+0x294>)
 80109be:	4613      	mov	r3, r2
 80109c0:	011b      	lsls	r3, r3, #4
 80109c2:	1a9b      	subs	r3, r3, r2
 80109c4:	009b      	lsls	r3, r3, #2
 80109c6:	4403      	add	r3, r0
 80109c8:	681a      	ldr	r2, [r3, #0]
 80109ca:	f441 53f3 	orr.w	r3, r1, #7776	@ 0x1e60
 80109ce:	f043 031e 	orr.w	r3, r3, #30
 80109d2:	6113      	str	r3, [r2, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 80109d4:	79fa      	ldrb	r2, [r7, #7]
 80109d6:	4957      	ldr	r1, [pc, #348]	@ (8010b34 <HW_SignalAttachement+0x294>)
 80109d8:	4613      	mov	r3, r2
 80109da:	011b      	lsls	r3, r3, #4
 80109dc:	1a9b      	subs	r3, r3, r2
 80109de:	009b      	lsls	r3, r3, #2
 80109e0:	440b      	add	r3, r1
 80109e2:	3334      	adds	r3, #52	@ 0x34
 80109e4:	683a      	ldr	r2, [r7, #0]
 80109e6:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 80109e8:	79fa      	ldrb	r2, [r7, #7]
 80109ea:	4952      	ldr	r1, [pc, #328]	@ (8010b34 <HW_SignalAttachement+0x294>)
 80109ec:	4613      	mov	r3, r2
 80109ee:	011b      	lsls	r3, r3, #4
 80109f0:	1a9b      	subs	r3, r3, r2
 80109f2:	009b      	lsls	r3, r3, #2
 80109f4:	440b      	add	r3, r1
 80109f6:	6818      	ldr	r0, [r3, #0]
 80109f8:	79fa      	ldrb	r2, [r7, #7]
 80109fa:	494e      	ldr	r1, [pc, #312]	@ (8010b34 <HW_SignalAttachement+0x294>)
 80109fc:	4613      	mov	r3, r2
 80109fe:	011b      	lsls	r3, r3, #4
 8010a00:	1a9b      	subs	r3, r3, r2
 8010a02:	009b      	lsls	r3, r3, #2
 8010a04:	440b      	add	r3, r1
 8010a06:	3334      	adds	r3, #52	@ 0x34
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	2b01      	cmp	r3, #1
 8010a0c:	d101      	bne.n	8010a12 <HW_SignalAttachement+0x172>
 8010a0e:	2300      	movs	r3, #0
 8010a10:	e000      	b.n	8010a14 <HW_SignalAttachement+0x174>
 8010a12:	2340      	movs	r3, #64	@ 0x40
 8010a14:	4619      	mov	r1, r3
 8010a16:	f7ff fb19 	bl	801004c <LL_UCPD_SetCCPin>
#if defined(_VCONN_SUPPORT)
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8010a1a:	79fa      	ldrb	r2, [r7, #7]
 8010a1c:	4945      	ldr	r1, [pc, #276]	@ (8010b34 <HW_SignalAttachement+0x294>)
 8010a1e:	4613      	mov	r3, r2
 8010a20:	011b      	lsls	r3, r3, #4
 8010a22:	1a9b      	subs	r3, r3, r2
 8010a24:	009b      	lsls	r3, r3, #2
 8010a26:	440b      	add	r3, r1
 8010a28:	330c      	adds	r3, #12
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	7a1b      	ldrb	r3, [r3, #8]
 8010a2e:	f003 0302 	and.w	r3, r3, #2
 8010a32:	b2db      	uxtb	r3, r3
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d031      	beq.n	8010a9c <HW_SignalAttachement+0x1fc>
  {
    /* Set GPIO to allow the FRS TX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 8010a38:	79fa      	ldrb	r2, [r7, #7]
 8010a3a:	493e      	ldr	r1, [pc, #248]	@ (8010b34 <HW_SignalAttachement+0x294>)
 8010a3c:	4613      	mov	r3, r2
 8010a3e:	011b      	lsls	r3, r3, #4
 8010a40:	1a9b      	subs	r3, r3, r2
 8010a42:	009b      	lsls	r3, r3, #2
 8010a44:	440b      	add	r3, r1
 8010a46:	3334      	adds	r3, #52	@ 0x34
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	2b01      	cmp	r3, #1
 8010a4c:	d101      	bne.n	8010a52 <HW_SignalAttachement+0x1b2>
 8010a4e:	2201      	movs	r2, #1
 8010a50:	e000      	b.n	8010a54 <HW_SignalAttachement+0x1b4>
 8010a52:	2202      	movs	r2, #2
 8010a54:	79fb      	ldrb	r3, [r7, #7]
 8010a56:	4611      	mov	r1, r2
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f7fe fd94 	bl	800f586 <USBPD_HW_SetFRSSignalling>
    /* Enable FRS RX */
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 8010a5e:	79fa      	ldrb	r2, [r7, #7]
 8010a60:	4934      	ldr	r1, [pc, #208]	@ (8010b34 <HW_SignalAttachement+0x294>)
 8010a62:	4613      	mov	r3, r2
 8010a64:	011b      	lsls	r3, r3, #4
 8010a66:	1a9b      	subs	r3, r3, r2
 8010a68:	009b      	lsls	r3, r3, #2
 8010a6a:	440b      	add	r3, r1
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f7ff fa86 	bl	800ff80 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 8010a74:	79fa      	ldrb	r2, [r7, #7]
 8010a76:	492f      	ldr	r1, [pc, #188]	@ (8010b34 <HW_SignalAttachement+0x294>)
 8010a78:	4613      	mov	r3, r2
 8010a7a:	011b      	lsls	r3, r3, #4
 8010a7c:	1a9b      	subs	r3, r3, r2
 8010a7e:	009b      	lsls	r3, r3, #2
 8010a80:	440b      	add	r3, r1
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	6919      	ldr	r1, [r3, #16]
 8010a86:	79fa      	ldrb	r2, [r7, #7]
 8010a88:	482a      	ldr	r0, [pc, #168]	@ (8010b34 <HW_SignalAttachement+0x294>)
 8010a8a:	4613      	mov	r3, r2
 8010a8c:	011b      	lsls	r3, r3, #4
 8010a8e:	1a9b      	subs	r3, r3, r2
 8010a90:	009b      	lsls	r3, r3, #2
 8010a92:	4403      	add	r3, r0
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	f441 1280 	orr.w	r2, r1, #1048576	@ 0x100000
 8010a9a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 8010a9c:	79fa      	ldrb	r2, [r7, #7]
 8010a9e:	4925      	ldr	r1, [pc, #148]	@ (8010b34 <HW_SignalAttachement+0x294>)
 8010aa0:	4613      	mov	r3, r2
 8010aa2:	011b      	lsls	r3, r3, #4
 8010aa4:	1a9b      	subs	r3, r3, r2
 8010aa6:	009b      	lsls	r3, r3, #2
 8010aa8:	440b      	add	r3, r1
 8010aaa:	3334      	adds	r3, #52	@ 0x34
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	2b01      	cmp	r3, #1
 8010ab0:	d10d      	bne.n	8010ace <HW_SignalAttachement+0x22e>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 8010ab2:	79fa      	ldrb	r2, [r7, #7]
 8010ab4:	491f      	ldr	r1, [pc, #124]	@ (8010b34 <HW_SignalAttachement+0x294>)
 8010ab6:	4613      	mov	r3, r2
 8010ab8:	011b      	lsls	r3, r3, #4
 8010aba:	1a9b      	subs	r3, r3, r2
 8010abc:	009b      	lsls	r3, r3, #2
 8010abe:	440b      	add	r3, r1
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7ff fa7a 	bl	800ffc0 <LL_UCPD_SetccEnable>
 8010acc:	e00c      	b.n	8010ae8 <HW_SignalAttachement+0x248>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 8010ace:	79fa      	ldrb	r2, [r7, #7]
 8010ad0:	4918      	ldr	r1, [pc, #96]	@ (8010b34 <HW_SignalAttachement+0x294>)
 8010ad2:	4613      	mov	r3, r2
 8010ad4:	011b      	lsls	r3, r3, #4
 8010ad6:	1a9b      	subs	r3, r3, r2
 8010ad8:	009b      	lsls	r3, r3, #2
 8010ada:	440b      	add	r3, r1
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7ff fa6c 	bl	800ffc0 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 8010ae8:	79fa      	ldrb	r2, [r7, #7]
 8010aea:	4912      	ldr	r1, [pc, #72]	@ (8010b34 <HW_SignalAttachement+0x294>)
 8010aec:	4613      	mov	r3, r2
 8010aee:	011b      	lsls	r3, r3, #4
 8010af0:	1a9b      	subs	r3, r3, r2
 8010af2:	009b      	lsls	r3, r3, #2
 8010af4:	440b      	add	r3, r1
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	2100      	movs	r1, #0
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7ff fad9 	bl	80100b2 <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 8010b00:	79fa      	ldrb	r2, [r7, #7]
 8010b02:	490c      	ldr	r1, [pc, #48]	@ (8010b34 <HW_SignalAttachement+0x294>)
 8010b04:	4613      	mov	r3, r2
 8010b06:	011b      	lsls	r3, r3, #4
 8010b08:	1a9b      	subs	r3, r3, r2
 8010b0a:	009b      	lsls	r3, r3, #2
 8010b0c:	440b      	add	r3, r1
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7ff fb14 	bl	801013e <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 8010b16:	79fa      	ldrb	r2, [r7, #7]
 8010b18:	4906      	ldr	r1, [pc, #24]	@ (8010b34 <HW_SignalAttachement+0x294>)
 8010b1a:	4613      	mov	r3, r2
 8010b1c:	011b      	lsls	r3, r3, #4
 8010b1e:	1a9b      	subs	r3, r3, r2
 8010b20:	009b      	lsls	r3, r3, #2
 8010b22:	440b      	add	r3, r1
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7ff fb29 	bl	801017e <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 8010b2c:	bf00      	nop
 8010b2e:	3714      	adds	r7, #20
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd90      	pop	{r4, r7, pc}
 8010b34:	2000058c 	.word	0x2000058c

08010b38 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	4603      	mov	r3, r0
 8010b40:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* Stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 8010b42:	79fa      	ldrb	r2, [r7, #7]
 8010b44:	493e      	ldr	r1, [pc, #248]	@ (8010c40 <HW_SignalDetachment+0x108>)
 8010b46:	4613      	mov	r3, r2
 8010b48:	011b      	lsls	r3, r3, #4
 8010b4a:	1a9b      	subs	r3, r3, r2
 8010b4c:	009b      	lsls	r3, r3, #2
 8010b4e:	440b      	add	r3, r1
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7ff fb03 	bl	801015e <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 8010b58:	79fa      	ldrb	r2, [r7, #7]
 8010b5a:	4939      	ldr	r1, [pc, #228]	@ (8010c40 <HW_SignalDetachment+0x108>)
 8010b5c:	4613      	mov	r3, r2
 8010b5e:	011b      	lsls	r3, r3, #4
 8010b60:	1a9b      	subs	r3, r3, r2
 8010b62:	009b      	lsls	r3, r3, #2
 8010b64:	440b      	add	r3, r1
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7ff fb18 	bl	801019e <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8010b6e:	79fa      	ldrb	r2, [r7, #7]
 8010b70:	4933      	ldr	r1, [pc, #204]	@ (8010c40 <HW_SignalDetachment+0x108>)
 8010b72:	4613      	mov	r3, r2
 8010b74:	011b      	lsls	r3, r3, #4
 8010b76:	1a9b      	subs	r3, r3, r2
 8010b78:	009b      	lsls	r3, r3, #2
 8010b7a:	440b      	add	r3, r1
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7ff fa87 	bl	8010092 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 8010b84:	79fa      	ldrb	r2, [r7, #7]
 8010b86:	492e      	ldr	r1, [pc, #184]	@ (8010c40 <HW_SignalDetachment+0x108>)
 8010b88:	4613      	mov	r3, r2
 8010b8a:	011b      	lsls	r3, r3, #4
 8010b8c:	1a9b      	subs	r3, r3, r2
 8010b8e:	009b      	lsls	r3, r3, #2
 8010b90:	440b      	add	r3, r1
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8010b98:	611a      	str	r2, [r3, #16]
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_DRP */
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 8010b9a:	79fb      	ldrb	r3, [r7, #7]
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7fe fce7 	bl	800f570 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 8010ba2:	79fb      	ldrb	r3, [r7, #7]
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7fe fca3 	bl	800f4f0 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8010baa:	79fa      	ldrb	r2, [r7, #7]
 8010bac:	4924      	ldr	r1, [pc, #144]	@ (8010c40 <HW_SignalDetachment+0x108>)
 8010bae:	4613      	mov	r3, r2
 8010bb0:	011b      	lsls	r3, r3, #4
 8010bb2:	1a9b      	subs	r3, r3, r2
 8010bb4:	009b      	lsls	r3, r3, #2
 8010bb6:	440b      	add	r3, r1
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f7ff f9fe 	bl	800ffc0 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 8010bc4:	79fa      	ldrb	r2, [r7, #7]
 8010bc6:	491e      	ldr	r1, [pc, #120]	@ (8010c40 <HW_SignalDetachment+0x108>)
 8010bc8:	4613      	mov	r3, r2
 8010bca:	011b      	lsls	r3, r3, #4
 8010bcc:	1a9b      	subs	r3, r3, r2
 8010bce:	009b      	lsls	r3, r3, #2
 8010bd0:	440b      	add	r3, r1
 8010bd2:	3310      	adds	r3, #16
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	f003 0304 	and.w	r3, r3, #4
 8010bdc:	b2db      	uxtb	r3, r3
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d103      	bne.n	8010bea <HW_SignalDetachment+0xb2>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8010be2:	79fb      	ldrb	r3, [r7, #7]
 8010be4:	4618      	mov	r0, r3
 8010be6:	f005 fcbb 	bl	8016560 <BSP_USBPD_PWR_VBUSDeInit>
  }

  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8010bea:	79fa      	ldrb	r2, [r7, #7]
 8010bec:	4914      	ldr	r1, [pc, #80]	@ (8010c40 <HW_SignalDetachment+0x108>)
 8010bee:	4613      	mov	r3, r2
 8010bf0:	011b      	lsls	r3, r3, #4
 8010bf2:	1a9b      	subs	r3, r3, r2
 8010bf4:	009b      	lsls	r3, r3, #2
 8010bf6:	440b      	add	r3, r1
 8010bf8:	330c      	adds	r3, #12
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	7a1b      	ldrb	r3, [r3, #8]
 8010bfe:	f003 0302 	and.w	r3, r3, #2
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d00a      	beq.n	8010c1e <HW_SignalDetachment+0xe6>
  {
    /* Set GPIO to disallow the FRS RX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8010c08:	79fa      	ldrb	r2, [r7, #7]
 8010c0a:	490d      	ldr	r1, [pc, #52]	@ (8010c40 <HW_SignalDetachment+0x108>)
 8010c0c:	4613      	mov	r3, r2
 8010c0e:	011b      	lsls	r3, r3, #4
 8010c10:	1a9b      	subs	r3, r3, r2
 8010c12:	009b      	lsls	r3, r3, #2
 8010c14:	440b      	add	r3, r1
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7ff f9c1 	bl	800ffa0 <LL_UCPD_FRSDetectionDisable>
  }

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 8010c1e:	79fa      	ldrb	r2, [r7, #7]
 8010c20:	4907      	ldr	r1, [pc, #28]	@ (8010c40 <HW_SignalDetachment+0x108>)
 8010c22:	4613      	mov	r3, r2
 8010c24:	011b      	lsls	r3, r3, #4
 8010c26:	1a9b      	subs	r3, r3, r2
 8010c28:	009b      	lsls	r3, r3, #2
 8010c2a:	440b      	add	r3, r1
 8010c2c:	3334      	adds	r3, #52	@ 0x34
 8010c2e:	2200      	movs	r2, #0
 8010c30:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 8010c32:	f000 fb13 	bl	801125c <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 8010c36:	bf00      	nop
 8010c38:	3708      	adds	r7, #8
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}
 8010c3e:	bf00      	nop
 8010c40:	2000058c 	.word	0x2000058c

08010c44 <USBPD_HW_IF_SetResistor_SinkTxNG>:
  * @brief  Set resistors to SinkTxNG
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b082      	sub	sp, #8
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	71fb      	strb	r3, [r7, #7]
  /* Set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8010c4e:	79fa      	ldrb	r2, [r7, #7]
 8010c50:	4907      	ldr	r1, [pc, #28]	@ (8010c70 <USBPD_HW_IF_SetResistor_SinkTxNG+0x2c>)
 8010c52:	4613      	mov	r3, r2
 8010c54:	011b      	lsls	r3, r3, #4
 8010c56:	1a9b      	subs	r3, r3, r2
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	440b      	add	r3, r1
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7ff f9df 	bl	8010026 <LL_UCPD_SetRpResistor>
}
 8010c68:	bf00      	nop
 8010c6a:	3708      	adds	r7, #8
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}
 8010c70:	2000058c 	.word	0x2000058c

08010c74 <USBPD_HW_IF_SetResistor_SinkTxOK>:
  * @brief  Set resistors to SinkTxOk
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	71fb      	strb	r3, [r7, #7]
  /* Set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8010c7e:	79fa      	ldrb	r2, [r7, #7]
 8010c80:	4907      	ldr	r1, [pc, #28]	@ (8010ca0 <USBPD_HW_IF_SetResistor_SinkTxOK+0x2c>)
 8010c82:	4613      	mov	r3, r2
 8010c84:	011b      	lsls	r3, r3, #4
 8010c86:	1a9b      	subs	r3, r3, r2
 8010c88:	009b      	lsls	r3, r3, #2
 8010c8a:	440b      	add	r3, r1
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7ff f9c7 	bl	8010026 <LL_UCPD_SetRpResistor>
}
 8010c98:	bf00      	nop
 8010c9a:	3708      	adds	r7, #8
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}
 8010ca0:	2000058c 	.word	0x2000058c

08010ca4 <USBPD_HW_IF_IsResistor_SinkTxOk>:
  * @brief  Check if resistors are set to SinkTxOk
  * @param  PortNum Port
  * @retval USBPD_TRUE if resistor is set to SinkTxOk, else USBPD_FALSE
  */
uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8010ca4:	b480      	push	{r7}
 8010ca6:	b083      	sub	sp, #12
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	4603      	mov	r3, r0
 8010cac:	71fb      	strb	r3, [r7, #7]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 8010cae:	79fa      	ldrb	r2, [r7, #7]
 8010cb0:	491b      	ldr	r1, [pc, #108]	@ (8010d20 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 8010cb2:	4613      	mov	r3, r2
 8010cb4:	011b      	lsls	r3, r3, #4
 8010cb6:	1a9b      	subs	r3, r3, r2
 8010cb8:	009b      	lsls	r3, r3, #2
 8010cba:	440b      	add	r3, r1
 8010cbc:	3334      	adds	r3, #52	@ 0x34
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	2b01      	cmp	r3, #1
 8010cc2:	d002      	beq.n	8010cca <USBPD_HW_IF_IsResistor_SinkTxOk+0x26>
 8010cc4:	2b02      	cmp	r3, #2
 8010cc6:	d010      	beq.n	8010cea <USBPD_HW_IF_IsResistor_SinkTxOk+0x46>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 8010cc8:	e022      	b.n	8010d10 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 8010cca:	79fa      	ldrb	r2, [r7, #7]
 8010ccc:	4914      	ldr	r1, [pc, #80]	@ (8010d20 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 8010cce:	4613      	mov	r3, r2
 8010cd0:	011b      	lsls	r3, r3, #4
 8010cd2:	1a9b      	subs	r3, r3, r2
 8010cd4:	009b      	lsls	r3, r3, #2
 8010cd6:	440b      	add	r3, r1
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	695b      	ldr	r3, [r3, #20]
 8010cdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8010ce0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010ce4:	d111      	bne.n	8010d0a <USBPD_HW_IF_IsResistor_SinkTxOk+0x66>
        return USBPD_TRUE;
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	e013      	b.n	8010d12 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 8010cea:	79fa      	ldrb	r2, [r7, #7]
 8010cec:	490c      	ldr	r1, [pc, #48]	@ (8010d20 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 8010cee:	4613      	mov	r3, r2
 8010cf0:	011b      	lsls	r3, r3, #4
 8010cf2:	1a9b      	subs	r3, r3, r2
 8010cf4:	009b      	lsls	r3, r3, #2
 8010cf6:	440b      	add	r3, r1
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	695b      	ldr	r3, [r3, #20]
 8010cfc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8010d00:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8010d04:	d103      	bne.n	8010d0e <USBPD_HW_IF_IsResistor_SinkTxOk+0x6a>
        return USBPD_TRUE;
 8010d06:	2301      	movs	r3, #1
 8010d08:	e003      	b.n	8010d12 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      break;
 8010d0a:	bf00      	nop
 8010d0c:	e000      	b.n	8010d10 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      break;
 8010d0e:	bf00      	nop
  }

  return USBPD_FALSE;
 8010d10:	2300      	movs	r3, #0
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	370c      	adds	r7, #12
 8010d16:	46bd      	mov	sp, r7
 8010d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1c:	4770      	bx	lr
 8010d1e:	bf00      	nop
 8010d20:	2000058c 	.word	0x2000058c

08010d24 <USBPD_HW_IF_FastRoleSwapSignalling>:
  * @brief  Signal a Fast Role Swap
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b082      	sub	sp, #8
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 8010d2e:	79fa      	ldrb	r2, [r7, #7]
 8010d30:	4906      	ldr	r1, [pc, #24]	@ (8010d4c <USBPD_HW_IF_FastRoleSwapSignalling+0x28>)
 8010d32:	4613      	mov	r3, r2
 8010d34:	011b      	lsls	r3, r3, #4
 8010d36:	1a9b      	subs	r3, r3, r2
 8010d38:	009b      	lsls	r3, r3, #2
 8010d3a:	440b      	add	r3, r1
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7ff f90e 	bl	800ff60 <LL_UCPD_SignalFRSTX>
}
 8010d44:	bf00      	nop
 8010d46:	3708      	adds	r7, #8
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}
 8010d4c:	2000058c 	.word	0x2000058c

08010d50 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	4603      	mov	r3, r0
 8010d58:	71fb      	strb	r3, [r7, #7]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8010d5a:	79fb      	ldrb	r3, [r7, #7]
 8010d5c:	f107 020c 	add.w	r2, r7, #12
 8010d60:	4611      	mov	r1, r2
 8010d62:	4618      	mov	r0, r3
 8010d64:	f005 fc10 	bl	8016588 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	b29b      	uxth	r3, r3
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3710      	adds	r7, #16
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}

08010d74 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8010d74:	b480      	push	{r7}
 8010d76:	b085      	sub	sp, #20
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8010d7c:	4b08      	ldr	r3, [pc, #32]	@ (8010da0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8010d7e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8010d80:	4907      	ldr	r1, [pc, #28]	@ (8010da0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	4313      	orrs	r3, r2
 8010d86:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8010d88:	4b05      	ldr	r3, [pc, #20]	@ (8010da0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8010d8a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	4013      	ands	r3, r2
 8010d90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010d92:	68fb      	ldr	r3, [r7, #12]
}
 8010d94:	bf00      	nop
 8010d96:	3714      	adds	r7, #20
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9e:	4770      	bx	lr
 8010da0:	40021000 	.word	0x40021000

08010da4 <LL_APB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8010da4:	b480      	push	{r7}
 8010da6:	b083      	sub	sp, #12
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8010dac:	4b06      	ldr	r3, [pc, #24]	@ (8010dc8 <LL_APB2_GRP1_DisableClock+0x24>)
 8010dae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	43db      	mvns	r3, r3
 8010db4:	4904      	ldr	r1, [pc, #16]	@ (8010dc8 <LL_APB2_GRP1_DisableClock+0x24>)
 8010db6:	4013      	ands	r3, r2
 8010db8:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8010dba:	bf00      	nop
 8010dbc:	370c      	adds	r7, #12
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc4:	4770      	bx	lr
 8010dc6:	bf00      	nop
 8010dc8:	40021000 	.word	0x40021000

08010dcc <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8010dcc:	b480      	push	{r7}
 8010dce:	b083      	sub	sp, #12
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	f043 0201 	orr.w	r2, r3, #1
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	601a      	str	r2, [r3, #0]
}
 8010de0:	bf00      	nop
 8010de2:	370c      	adds	r7, #12
 8010de4:	46bd      	mov	sp, r7
 8010de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dea:	4770      	bx	lr

08010dec <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b083      	sub	sp, #12
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	431a      	orrs	r2, r3
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	601a      	str	r2, [r3, #0]
}
 8010e06:	bf00      	nop
 8010e08:	370c      	adds	r7, #12
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e10:	4770      	bx	lr

08010e12 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8010e12:	b480      	push	{r7}
 8010e14:	b083      	sub	sp, #12
 8010e16:	af00      	add	r7, sp, #0
 8010e18:	6078      	str	r0, [r7, #4]
 8010e1a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	683a      	ldr	r2, [r7, #0]
 8010e20:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8010e22:	bf00      	nop
 8010e24:	370c      	adds	r7, #12
 8010e26:	46bd      	mov	sp, r7
 8010e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2c:	4770      	bx	lr

08010e2e <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 8010e2e:	b480      	push	{r7}
 8010e30:	b083      	sub	sp, #12
 8010e32:	af00      	add	r7, sp, #0
 8010e34:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	370c      	adds	r7, #12
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e44:	4770      	bx	lr

08010e46 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8010e46:	b480      	push	{r7}
 8010e48:	b083      	sub	sp, #12
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	6078      	str	r0, [r7, #4]
 8010e4e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	683a      	ldr	r2, [r7, #0]
 8010e54:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8010e56:	bf00      	nop
 8010e58:	370c      	adds	r7, #12
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e60:	4770      	bx	lr
	...

08010e64 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PULSE_ON_COMPARE   (for channel 3 or channel 4 only)
  *         @arg @ref LL_TIM_OCMODE_DIRECTION_OUTPUT   (for channel 3 or channel 4 only)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8010e64:	b480      	push	{r7}
 8010e66:	b087      	sub	sp, #28
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	60f8      	str	r0, [r7, #12]
 8010e6c:	60b9      	str	r1, [r7, #8]
 8010e6e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	2b01      	cmp	r3, #1
 8010e74:	d02e      	beq.n	8010ed4 <LL_TIM_OC_SetMode+0x70>
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	2b04      	cmp	r3, #4
 8010e7a:	d029      	beq.n	8010ed0 <LL_TIM_OC_SetMode+0x6c>
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	2b10      	cmp	r3, #16
 8010e80:	d024      	beq.n	8010ecc <LL_TIM_OC_SetMode+0x68>
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	2b40      	cmp	r3, #64	@ 0x40
 8010e86:	d01f      	beq.n	8010ec8 <LL_TIM_OC_SetMode+0x64>
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010e8e:	d019      	beq.n	8010ec4 <LL_TIM_OC_SetMode+0x60>
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010e96:	d013      	beq.n	8010ec0 <LL_TIM_OC_SetMode+0x5c>
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010e9e:	d00d      	beq.n	8010ebc <LL_TIM_OC_SetMode+0x58>
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010ea6:	d007      	beq.n	8010eb8 <LL_TIM_OC_SetMode+0x54>
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010eae:	d101      	bne.n	8010eb4 <LL_TIM_OC_SetMode+0x50>
 8010eb0:	2308      	movs	r3, #8
 8010eb2:	e010      	b.n	8010ed6 <LL_TIM_OC_SetMode+0x72>
 8010eb4:	2309      	movs	r3, #9
 8010eb6:	e00e      	b.n	8010ed6 <LL_TIM_OC_SetMode+0x72>
 8010eb8:	2307      	movs	r3, #7
 8010eba:	e00c      	b.n	8010ed6 <LL_TIM_OC_SetMode+0x72>
 8010ebc:	2306      	movs	r3, #6
 8010ebe:	e00a      	b.n	8010ed6 <LL_TIM_OC_SetMode+0x72>
 8010ec0:	2305      	movs	r3, #5
 8010ec2:	e008      	b.n	8010ed6 <LL_TIM_OC_SetMode+0x72>
 8010ec4:	2304      	movs	r3, #4
 8010ec6:	e006      	b.n	8010ed6 <LL_TIM_OC_SetMode+0x72>
 8010ec8:	2303      	movs	r3, #3
 8010eca:	e004      	b.n	8010ed6 <LL_TIM_OC_SetMode+0x72>
 8010ecc:	2302      	movs	r3, #2
 8010ece:	e002      	b.n	8010ed6 <LL_TIM_OC_SetMode+0x72>
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	e000      	b.n	8010ed6 <LL_TIM_OC_SetMode+0x72>
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	3318      	adds	r3, #24
 8010edc:	4619      	mov	r1, r3
 8010ede:	7dfb      	ldrb	r3, [r7, #23]
 8010ee0:	4a0e      	ldr	r2, [pc, #56]	@ (8010f1c <LL_TIM_OC_SetMode+0xb8>)
 8010ee2:	5cd3      	ldrb	r3, [r2, r3]
 8010ee4:	440b      	add	r3, r1
 8010ee6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	681a      	ldr	r2, [r3, #0]
 8010eec:	7dfb      	ldrb	r3, [r7, #23]
 8010eee:	490c      	ldr	r1, [pc, #48]	@ (8010f20 <LL_TIM_OC_SetMode+0xbc>)
 8010ef0:	5ccb      	ldrb	r3, [r1, r3]
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8010f24 <LL_TIM_OC_SetMode+0xc0>)
 8010ef6:	408b      	lsls	r3, r1
 8010ef8:	43db      	mvns	r3, r3
 8010efa:	401a      	ands	r2, r3
 8010efc:	7dfb      	ldrb	r3, [r7, #23]
 8010efe:	4908      	ldr	r1, [pc, #32]	@ (8010f20 <LL_TIM_OC_SetMode+0xbc>)
 8010f00:	5ccb      	ldrb	r3, [r1, r3]
 8010f02:	4619      	mov	r1, r3
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	408b      	lsls	r3, r1
 8010f08:	431a      	orrs	r2, r3
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	601a      	str	r2, [r3, #0]
}
 8010f0e:	bf00      	nop
 8010f10:	371c      	adds	r7, #28
 8010f12:	46bd      	mov	sp, r7
 8010f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f18:	4770      	bx	lr
 8010f1a:	bf00      	nop
 8010f1c:	08017420 	.word	0x08017420
 8010f20:	0801742c 	.word	0x0801742c
 8010f24:	00010073 	.word	0x00010073

08010f28 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b087      	sub	sp, #28
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	60f8      	str	r0, [r7, #12]
 8010f30:	60b9      	str	r1, [r7, #8]
 8010f32:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	2b01      	cmp	r3, #1
 8010f38:	d02e      	beq.n	8010f98 <LL_TIM_OC_SetPolarity+0x70>
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	2b04      	cmp	r3, #4
 8010f3e:	d029      	beq.n	8010f94 <LL_TIM_OC_SetPolarity+0x6c>
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	2b10      	cmp	r3, #16
 8010f44:	d024      	beq.n	8010f90 <LL_TIM_OC_SetPolarity+0x68>
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	2b40      	cmp	r3, #64	@ 0x40
 8010f4a:	d01f      	beq.n	8010f8c <LL_TIM_OC_SetPolarity+0x64>
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010f52:	d019      	beq.n	8010f88 <LL_TIM_OC_SetPolarity+0x60>
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010f5a:	d013      	beq.n	8010f84 <LL_TIM_OC_SetPolarity+0x5c>
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010f62:	d00d      	beq.n	8010f80 <LL_TIM_OC_SetPolarity+0x58>
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010f6a:	d007      	beq.n	8010f7c <LL_TIM_OC_SetPolarity+0x54>
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010f72:	d101      	bne.n	8010f78 <LL_TIM_OC_SetPolarity+0x50>
 8010f74:	2308      	movs	r3, #8
 8010f76:	e010      	b.n	8010f9a <LL_TIM_OC_SetPolarity+0x72>
 8010f78:	2309      	movs	r3, #9
 8010f7a:	e00e      	b.n	8010f9a <LL_TIM_OC_SetPolarity+0x72>
 8010f7c:	2307      	movs	r3, #7
 8010f7e:	e00c      	b.n	8010f9a <LL_TIM_OC_SetPolarity+0x72>
 8010f80:	2306      	movs	r3, #6
 8010f82:	e00a      	b.n	8010f9a <LL_TIM_OC_SetPolarity+0x72>
 8010f84:	2305      	movs	r3, #5
 8010f86:	e008      	b.n	8010f9a <LL_TIM_OC_SetPolarity+0x72>
 8010f88:	2304      	movs	r3, #4
 8010f8a:	e006      	b.n	8010f9a <LL_TIM_OC_SetPolarity+0x72>
 8010f8c:	2303      	movs	r3, #3
 8010f8e:	e004      	b.n	8010f9a <LL_TIM_OC_SetPolarity+0x72>
 8010f90:	2302      	movs	r3, #2
 8010f92:	e002      	b.n	8010f9a <LL_TIM_OC_SetPolarity+0x72>
 8010f94:	2301      	movs	r3, #1
 8010f96:	e000      	b.n	8010f9a <LL_TIM_OC_SetPolarity+0x72>
 8010f98:	2300      	movs	r3, #0
 8010f9a:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	6a1a      	ldr	r2, [r3, #32]
 8010fa0:	7dfb      	ldrb	r3, [r7, #23]
 8010fa2:	490b      	ldr	r1, [pc, #44]	@ (8010fd0 <LL_TIM_OC_SetPolarity+0xa8>)
 8010fa4:	5ccb      	ldrb	r3, [r1, r3]
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	2302      	movs	r3, #2
 8010faa:	408b      	lsls	r3, r1
 8010fac:	43db      	mvns	r3, r3
 8010fae:	401a      	ands	r2, r3
 8010fb0:	7dfb      	ldrb	r3, [r7, #23]
 8010fb2:	4907      	ldr	r1, [pc, #28]	@ (8010fd0 <LL_TIM_OC_SetPolarity+0xa8>)
 8010fb4:	5ccb      	ldrb	r3, [r1, r3]
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	408b      	lsls	r3, r1
 8010fbc:	431a      	orrs	r2, r3
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	621a      	str	r2, [r3, #32]
}
 8010fc2:	bf00      	nop
 8010fc4:	371c      	adds	r7, #28
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fcc:	4770      	bx	lr
 8010fce:	bf00      	nop
 8010fd0:	08017438 	.word	0x08017438

08010fd4 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	683a      	ldr	r2, [r7, #0]
 8010fe2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8010fe4:	bf00      	nop
 8010fe6:	370c      	adds	r7, #12
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fee:	4770      	bx	lr

08010ff0 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b083      	sub	sp, #12
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	683a      	ldr	r2, [r7, #0]
 8010ffe:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8011000:	bf00      	nop
 8011002:	370c      	adds	r7, #12
 8011004:	46bd      	mov	sp, r7
 8011006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100a:	4770      	bx	lr

0801100c <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 801100c:	b480      	push	{r7}
 801100e:	b083      	sub	sp, #12
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	683a      	ldr	r2, [r7, #0]
 801101a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 801101c:	bf00      	nop
 801101e:	370c      	adds	r7, #12
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr

08011028 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8011028:	b480      	push	{r7}
 801102a:	b083      	sub	sp, #12
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	683a      	ldr	r2, [r7, #0]
 8011036:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8011038:	bf00      	nop
 801103a:	370c      	adds	r7, #12
 801103c:	46bd      	mov	sp, r7
 801103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011042:	4770      	bx	lr

08011044 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8011044:	b480      	push	{r7}
 8011046:	b083      	sub	sp, #12
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f06f 0202 	mvn.w	r2, #2
 8011052:	611a      	str	r2, [r3, #16]
}
 8011054:	bf00      	nop
 8011056:	370c      	adds	r7, #12
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr

08011060 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 8011060:	b480      	push	{r7}
 8011062:	b083      	sub	sp, #12
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	691b      	ldr	r3, [r3, #16]
 801106c:	f003 0302 	and.w	r3, r3, #2
 8011070:	2b02      	cmp	r3, #2
 8011072:	d101      	bne.n	8011078 <LL_TIM_IsActiveFlag_CC1+0x18>
 8011074:	2301      	movs	r3, #1
 8011076:	e000      	b.n	801107a <LL_TIM_IsActiveFlag_CC1+0x1a>
 8011078:	2300      	movs	r3, #0
}
 801107a:	4618      	mov	r0, r3
 801107c:	370c      	adds	r7, #12
 801107e:	46bd      	mov	sp, r7
 8011080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011084:	4770      	bx	lr

08011086 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 8011086:	b480      	push	{r7}
 8011088:	b083      	sub	sp, #12
 801108a:	af00      	add	r7, sp, #0
 801108c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f06f 0204 	mvn.w	r2, #4
 8011094:	611a      	str	r2, [r3, #16]
}
 8011096:	bf00      	nop
 8011098:	370c      	adds	r7, #12
 801109a:	46bd      	mov	sp, r7
 801109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a0:	4770      	bx	lr

080110a2 <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 80110a2:	b480      	push	{r7}
 80110a4:	b083      	sub	sp, #12
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	691b      	ldr	r3, [r3, #16]
 80110ae:	f003 0304 	and.w	r3, r3, #4
 80110b2:	2b04      	cmp	r3, #4
 80110b4:	d101      	bne.n	80110ba <LL_TIM_IsActiveFlag_CC2+0x18>
 80110b6:	2301      	movs	r3, #1
 80110b8:	e000      	b.n	80110bc <LL_TIM_IsActiveFlag_CC2+0x1a>
 80110ba:	2300      	movs	r3, #0
}
 80110bc:	4618      	mov	r0, r3
 80110be:	370c      	adds	r7, #12
 80110c0:	46bd      	mov	sp, r7
 80110c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c6:	4770      	bx	lr

080110c8 <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 80110c8:	b480      	push	{r7}
 80110ca:	b083      	sub	sp, #12
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f06f 0208 	mvn.w	r2, #8
 80110d6:	611a      	str	r2, [r3, #16]
}
 80110d8:	bf00      	nop
 80110da:	370c      	adds	r7, #12
 80110dc:	46bd      	mov	sp, r7
 80110de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e2:	4770      	bx	lr

080110e4 <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b083      	sub	sp, #12
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	691b      	ldr	r3, [r3, #16]
 80110f0:	f003 0308 	and.w	r3, r3, #8
 80110f4:	2b08      	cmp	r3, #8
 80110f6:	d101      	bne.n	80110fc <LL_TIM_IsActiveFlag_CC3+0x18>
 80110f8:	2301      	movs	r3, #1
 80110fa:	e000      	b.n	80110fe <LL_TIM_IsActiveFlag_CC3+0x1a>
 80110fc:	2300      	movs	r3, #0
}
 80110fe:	4618      	mov	r0, r3
 8011100:	370c      	adds	r7, #12
 8011102:	46bd      	mov	sp, r7
 8011104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011108:	4770      	bx	lr

0801110a <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 801110a:	b480      	push	{r7}
 801110c:	b083      	sub	sp, #12
 801110e:	af00      	add	r7, sp, #0
 8011110:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f06f 0210 	mvn.w	r2, #16
 8011118:	611a      	str	r2, [r3, #16]
}
 801111a:	bf00      	nop
 801111c:	370c      	adds	r7, #12
 801111e:	46bd      	mov	sp, r7
 8011120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011124:	4770      	bx	lr

08011126 <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 8011126:	b480      	push	{r7}
 8011128:	b083      	sub	sp, #12
 801112a:	af00      	add	r7, sp, #0
 801112c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	691b      	ldr	r3, [r3, #16]
 8011132:	f003 0310 	and.w	r3, r3, #16
 8011136:	2b10      	cmp	r3, #16
 8011138:	d101      	bne.n	801113e <LL_TIM_IsActiveFlag_CC4+0x18>
 801113a:	2301      	movs	r3, #1
 801113c:	e000      	b.n	8011140 <LL_TIM_IsActiveFlag_CC4+0x1a>
 801113e:	2300      	movs	r3, #0
}
 8011140:	4618      	mov	r0, r3
 8011142:	370c      	adds	r7, #12
 8011144:	46bd      	mov	sp, r7
 8011146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114a:	4770      	bx	lr

0801114c <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 801114c:	b598      	push	{r3, r4, r7, lr}
 801114e:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 8011150:	4b3d      	ldr	r3, [pc, #244]	@ (8011248 <USBPD_TIM_Init+0xfc>)
 8011152:	f993 3000 	ldrsb.w	r3, [r3]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d16a      	bne.n	8011230 <USBPD_TIM_Init+0xe4>
  {
    TIMX_CLK_ENABLE;
 801115a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801115e:	f7ff fe09 	bl	8010d74 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 8011162:	2100      	movs	r1, #0
 8011164:	4839      	ldr	r0, [pc, #228]	@ (801124c <USBPD_TIM_Init+0x100>)
 8011166:	f7ff fe41 	bl	8010dec <LL_TIM_SetCounterMode>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(TIMX_CLK_FREQ, LL_TIM_GetPrescaler(TIMX), 100u));
#else
    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 801116a:	4b39      	ldr	r3, [pc, #228]	@ (8011250 <USBPD_TIM_Init+0x104>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	4a39      	ldr	r2, [pc, #228]	@ (8011254 <USBPD_TIM_Init+0x108>)
 8011170:	4293      	cmp	r3, r2
 8011172:	d90b      	bls.n	801118c <USBPD_TIM_Init+0x40>
 8011174:	4b36      	ldr	r3, [pc, #216]	@ (8011250 <USBPD_TIM_Init+0x104>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	f503 23f4 	add.w	r3, r3, #499712	@ 0x7a000
 801117c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011180:	4a35      	ldr	r2, [pc, #212]	@ (8011258 <USBPD_TIM_Init+0x10c>)
 8011182:	fba2 2303 	umull	r2, r3, r2, r3
 8011186:	0c9b      	lsrs	r3, r3, #18
 8011188:	3b01      	subs	r3, #1
 801118a:	e000      	b.n	801118e <USBPD_TIM_Init+0x42>
 801118c:	2300      	movs	r3, #0
 801118e:	4619      	mov	r1, r3
 8011190:	482e      	ldr	r0, [pc, #184]	@ (801124c <USBPD_TIM_Init+0x100>)
 8011192:	f7ff fe3e 	bl	8010e12 <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 8011196:	4b2e      	ldr	r3, [pc, #184]	@ (8011250 <USBPD_TIM_Init+0x104>)
 8011198:	681c      	ldr	r4, [r3, #0]
 801119a:	482c      	ldr	r0, [pc, #176]	@ (801124c <USBPD_TIM_Init+0x100>)
 801119c:	f7ff fe47 	bl	8010e2e <LL_TIM_GetPrescaler>
 80111a0:	4603      	mov	r3, r0
 80111a2:	3301      	adds	r3, #1
 80111a4:	fbb4 f3f3 	udiv	r3, r4, r3
 80111a8:	2b63      	cmp	r3, #99	@ 0x63
 80111aa:	d90d      	bls.n	80111c8 <USBPD_TIM_Init+0x7c>
 80111ac:	4b28      	ldr	r3, [pc, #160]	@ (8011250 <USBPD_TIM_Init+0x104>)
 80111ae:	681c      	ldr	r4, [r3, #0]
 80111b0:	4826      	ldr	r0, [pc, #152]	@ (801124c <USBPD_TIM_Init+0x100>)
 80111b2:	f7ff fe3c 	bl	8010e2e <LL_TIM_GetPrescaler>
 80111b6:	4603      	mov	r3, r0
 80111b8:	3301      	adds	r3, #1
 80111ba:	2264      	movs	r2, #100	@ 0x64
 80111bc:	fb02 f303 	mul.w	r3, r2, r3
 80111c0:	fbb4 f3f3 	udiv	r3, r4, r3
 80111c4:	3b01      	subs	r3, #1
 80111c6:	e000      	b.n	80111ca <USBPD_TIM_Init+0x7e>
 80111c8:	2300      	movs	r3, #0
 80111ca:	4619      	mov	r1, r3
 80111cc:	481f      	ldr	r0, [pc, #124]	@ (801124c <USBPD_TIM_Init+0x100>)
 80111ce:	f7ff fe3a 	bl	8010e46 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 80111d2:	2230      	movs	r2, #48	@ 0x30
 80111d4:	2101      	movs	r1, #1
 80111d6:	481d      	ldr	r0, [pc, #116]	@ (801124c <USBPD_TIM_Init+0x100>)
 80111d8:	f7ff fe44 	bl	8010e64 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 80111dc:	2230      	movs	r2, #48	@ 0x30
 80111de:	2110      	movs	r1, #16
 80111e0:	481a      	ldr	r0, [pc, #104]	@ (801124c <USBPD_TIM_Init+0x100>)
 80111e2:	f7ff fe3f 	bl	8010e64 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 80111e6:	2230      	movs	r2, #48	@ 0x30
 80111e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80111ec:	4817      	ldr	r0, [pc, #92]	@ (801124c <USBPD_TIM_Init+0x100>)
 80111ee:	f7ff fe39 	bl	8010e64 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 80111f2:	2230      	movs	r2, #48	@ 0x30
 80111f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80111f8:	4814      	ldr	r0, [pc, #80]	@ (801124c <USBPD_TIM_Init+0x100>)
 80111fa:	f7ff fe33 	bl	8010e64 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 80111fe:	2200      	movs	r2, #0
 8011200:	2101      	movs	r1, #1
 8011202:	4812      	ldr	r0, [pc, #72]	@ (801124c <USBPD_TIM_Init+0x100>)
 8011204:	f7ff fe90 	bl	8010f28 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 8011208:	2200      	movs	r2, #0
 801120a:	2110      	movs	r1, #16
 801120c:	480f      	ldr	r0, [pc, #60]	@ (801124c <USBPD_TIM_Init+0x100>)
 801120e:	f7ff fe8b 	bl	8010f28 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 8011212:	2200      	movs	r2, #0
 8011214:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011218:	480c      	ldr	r0, [pc, #48]	@ (801124c <USBPD_TIM_Init+0x100>)
 801121a:	f7ff fe85 	bl	8010f28 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 801121e:	2200      	movs	r2, #0
 8011220:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011224:	4809      	ldr	r0, [pc, #36]	@ (801124c <USBPD_TIM_Init+0x100>)
 8011226:	f7ff fe7f 	bl	8010f28 <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 801122a:	4808      	ldr	r0, [pc, #32]	@ (801124c <USBPD_TIM_Init+0x100>)
 801122c:	f7ff fdce 	bl	8010dcc <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 8011230:	4b05      	ldr	r3, [pc, #20]	@ (8011248 <USBPD_TIM_Init+0xfc>)
 8011232:	f993 3000 	ldrsb.w	r3, [r3]
 8011236:	b2db      	uxtb	r3, r3
 8011238:	3301      	adds	r3, #1
 801123a:	b2db      	uxtb	r3, r3
 801123c:	b25a      	sxtb	r2, r3
 801123e:	4b02      	ldr	r3, [pc, #8]	@ (8011248 <USBPD_TIM_Init+0xfc>)
 8011240:	701a      	strb	r2, [r3, #0]
}
 8011242:	bf00      	nop
 8011244:	bd98      	pop	{r3, r4, r7, pc}
 8011246:	bf00      	nop
 8011248:	200005c8 	.word	0x200005c8
 801124c:	40012c00 	.word	0x40012c00
 8011250:	20000004 	.word	0x20000004
 8011254:	000f423f 	.word	0x000f423f
 8011258:	431bde83 	.word	0x431bde83

0801125c <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	af00      	add	r7, sp, #0
  timer_initcounter--;
 8011260:	4b09      	ldr	r3, [pc, #36]	@ (8011288 <USBPD_TIM_DeInit+0x2c>)
 8011262:	f993 3000 	ldrsb.w	r3, [r3]
 8011266:	b2db      	uxtb	r3, r3
 8011268:	3b01      	subs	r3, #1
 801126a:	b2db      	uxtb	r3, r3
 801126c:	b25a      	sxtb	r2, r3
 801126e:	4b06      	ldr	r3, [pc, #24]	@ (8011288 <USBPD_TIM_DeInit+0x2c>)
 8011270:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 8011272:	4b05      	ldr	r3, [pc, #20]	@ (8011288 <USBPD_TIM_DeInit+0x2c>)
 8011274:	f993 3000 	ldrsb.w	r3, [r3]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d103      	bne.n	8011284 <USBPD_TIM_DeInit+0x28>
  {
    TIMX_CLK_DISABLE;
 801127c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8011280:	f7ff fd90 	bl	8010da4 <LL_APB2_GRP1_DisableClock>
  }
}
 8011284:	bf00      	nop
 8011286:	bd80      	pop	{r7, pc}
 8011288:	200005c8 	.word	0x200005c8

0801128c <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	4603      	mov	r3, r0
 8011294:	6039      	str	r1, [r7, #0]
 8011296:	71fb      	strb	r3, [r7, #7]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 8011298:	79fb      	ldrb	r3, [r7, #7]
 801129a:	2b03      	cmp	r3, #3
 801129c:	d85e      	bhi.n	801135c <USBPD_TIM_Start+0xd0>
 801129e:	a201      	add	r2, pc, #4	@ (adr r2, 80112a4 <USBPD_TIM_Start+0x18>)
 80112a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a4:	080112b5 	.word	0x080112b5
 80112a8:	080112df 	.word	0x080112df
 80112ac:	08011309 	.word	0x08011309
 80112b0:	08011333 	.word	0x08011333
  {
    case TIM_PORT0_CRC:
      TIMX_CHANNEL1_SETEVENT;
 80112b4:	4b2c      	ldr	r3, [pc, #176]	@ (8011368 <USBPD_TIM_Start+0xdc>)
 80112b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	441a      	add	r2, r3
 80112bc:	4b2b      	ldr	r3, [pc, #172]	@ (801136c <USBPD_TIM_Start+0xe0>)
 80112be:	fba3 1302 	umull	r1, r3, r3, r2
 80112c2:	0b5b      	lsrs	r3, r3, #13
 80112c4:	f242 7110 	movw	r1, #10000	@ 0x2710
 80112c8:	fb01 f303 	mul.w	r3, r1, r3
 80112cc:	1ad3      	subs	r3, r2, r3
 80112ce:	4619      	mov	r1, r3
 80112d0:	4825      	ldr	r0, [pc, #148]	@ (8011368 <USBPD_TIM_Start+0xdc>)
 80112d2:	f7ff fe7f 	bl	8010fd4 <LL_TIM_OC_SetCompareCH1>
 80112d6:	4824      	ldr	r0, [pc, #144]	@ (8011368 <USBPD_TIM_Start+0xdc>)
 80112d8:	f7ff feb4 	bl	8011044 <LL_TIM_ClearFlag_CC1>
      break;
 80112dc:	e03f      	b.n	801135e <USBPD_TIM_Start+0xd2>
    case TIM_PORT0_RETRY:
      TIMX_CHANNEL2_SETEVENT;
 80112de:	4b22      	ldr	r3, [pc, #136]	@ (8011368 <USBPD_TIM_Start+0xdc>)
 80112e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	441a      	add	r2, r3
 80112e6:	4b21      	ldr	r3, [pc, #132]	@ (801136c <USBPD_TIM_Start+0xe0>)
 80112e8:	fba3 1302 	umull	r1, r3, r3, r2
 80112ec:	0b5b      	lsrs	r3, r3, #13
 80112ee:	f242 7110 	movw	r1, #10000	@ 0x2710
 80112f2:	fb01 f303 	mul.w	r3, r1, r3
 80112f6:	1ad3      	subs	r3, r2, r3
 80112f8:	4619      	mov	r1, r3
 80112fa:	481b      	ldr	r0, [pc, #108]	@ (8011368 <USBPD_TIM_Start+0xdc>)
 80112fc:	f7ff fe78 	bl	8010ff0 <LL_TIM_OC_SetCompareCH2>
 8011300:	4819      	ldr	r0, [pc, #100]	@ (8011368 <USBPD_TIM_Start+0xdc>)
 8011302:	f7ff fec0 	bl	8011086 <LL_TIM_ClearFlag_CC2>
      break;
 8011306:	e02a      	b.n	801135e <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_CRC:
      TIMX_CHANNEL3_SETEVENT;
 8011308:	4b17      	ldr	r3, [pc, #92]	@ (8011368 <USBPD_TIM_Start+0xdc>)
 801130a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	441a      	add	r2, r3
 8011310:	4b16      	ldr	r3, [pc, #88]	@ (801136c <USBPD_TIM_Start+0xe0>)
 8011312:	fba3 1302 	umull	r1, r3, r3, r2
 8011316:	0b5b      	lsrs	r3, r3, #13
 8011318:	f242 7110 	movw	r1, #10000	@ 0x2710
 801131c:	fb01 f303 	mul.w	r3, r1, r3
 8011320:	1ad3      	subs	r3, r2, r3
 8011322:	4619      	mov	r1, r3
 8011324:	4810      	ldr	r0, [pc, #64]	@ (8011368 <USBPD_TIM_Start+0xdc>)
 8011326:	f7ff fe71 	bl	801100c <LL_TIM_OC_SetCompareCH3>
 801132a:	480f      	ldr	r0, [pc, #60]	@ (8011368 <USBPD_TIM_Start+0xdc>)
 801132c:	f7ff fecc 	bl	80110c8 <LL_TIM_ClearFlag_CC3>
      break;
 8011330:	e015      	b.n	801135e <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
 8011332:	4b0d      	ldr	r3, [pc, #52]	@ (8011368 <USBPD_TIM_Start+0xdc>)
 8011334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	441a      	add	r2, r3
 801133a:	4b0c      	ldr	r3, [pc, #48]	@ (801136c <USBPD_TIM_Start+0xe0>)
 801133c:	fba3 1302 	umull	r1, r3, r3, r2
 8011340:	0b5b      	lsrs	r3, r3, #13
 8011342:	f242 7110 	movw	r1, #10000	@ 0x2710
 8011346:	fb01 f303 	mul.w	r3, r1, r3
 801134a:	1ad3      	subs	r3, r2, r3
 801134c:	4619      	mov	r1, r3
 801134e:	4806      	ldr	r0, [pc, #24]	@ (8011368 <USBPD_TIM_Start+0xdc>)
 8011350:	f7ff fe6a 	bl	8011028 <LL_TIM_OC_SetCompareCH4>
 8011354:	4804      	ldr	r0, [pc, #16]	@ (8011368 <USBPD_TIM_Start+0xdc>)
 8011356:	f7ff fed8 	bl	801110a <LL_TIM_ClearFlag_CC4>
      break;
 801135a:	e000      	b.n	801135e <USBPD_TIM_Start+0xd2>
    default:
      break;
 801135c:	bf00      	nop
  }
}
 801135e:	bf00      	nop
 8011360:	3708      	adds	r7, #8
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}
 8011366:	bf00      	nop
 8011368:	40012c00 	.word	0x40012c00
 801136c:	d1b71759 	.word	0xd1b71759

08011370 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b084      	sub	sp, #16
 8011374:	af00      	add	r7, sp, #0
 8011376:	4603      	mov	r3, r0
 8011378:	71fb      	strb	r3, [r7, #7]
  uint32_t _expired = 1u;
 801137a:	2301      	movs	r3, #1
 801137c:	60fb      	str	r3, [r7, #12]
  switch (Id)
 801137e:	79fb      	ldrb	r3, [r7, #7]
 8011380:	2b03      	cmp	r3, #3
 8011382:	d81f      	bhi.n	80113c4 <USBPD_TIM_IsExpired+0x54>
 8011384:	a201      	add	r2, pc, #4	@ (adr r2, 801138c <USBPD_TIM_IsExpired+0x1c>)
 8011386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801138a:	bf00      	nop
 801138c:	0801139d 	.word	0x0801139d
 8011390:	080113a7 	.word	0x080113a7
 8011394:	080113b1 	.word	0x080113b1
 8011398:	080113bb 	.word	0x080113bb
  {
    case TIM_PORT0_CRC:
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 801139c:	480c      	ldr	r0, [pc, #48]	@ (80113d0 <USBPD_TIM_IsExpired+0x60>)
 801139e:	f7ff fe5f 	bl	8011060 <LL_TIM_IsActiveFlag_CC1>
 80113a2:	60f8      	str	r0, [r7, #12]
      break;
 80113a4:	e00f      	b.n	80113c6 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT0_RETRY:
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 80113a6:	480a      	ldr	r0, [pc, #40]	@ (80113d0 <USBPD_TIM_IsExpired+0x60>)
 80113a8:	f7ff fe7b 	bl	80110a2 <LL_TIM_IsActiveFlag_CC2>
 80113ac:	60f8      	str	r0, [r7, #12]
      break;
 80113ae:	e00a      	b.n	80113c6 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_CRC:
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 80113b0:	4807      	ldr	r0, [pc, #28]	@ (80113d0 <USBPD_TIM_IsExpired+0x60>)
 80113b2:	f7ff fe97 	bl	80110e4 <LL_TIM_IsActiveFlag_CC3>
 80113b6:	60f8      	str	r0, [r7, #12]
      break;
 80113b8:	e005      	b.n	80113c6 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 80113ba:	4805      	ldr	r0, [pc, #20]	@ (80113d0 <USBPD_TIM_IsExpired+0x60>)
 80113bc:	f7ff feb3 	bl	8011126 <LL_TIM_IsActiveFlag_CC4>
 80113c0:	60f8      	str	r0, [r7, #12]
      break;
 80113c2:	e000      	b.n	80113c6 <USBPD_TIM_IsExpired+0x56>
    default:
      break;
 80113c4:	bf00      	nop
  }
  return _expired;
 80113c6:	68fb      	ldr	r3, [r7, #12]
}
 80113c8:	4618      	mov	r0, r3
 80113ca:	3710      	adds	r7, #16
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}
 80113d0:	40012c00 	.word	0x40012c00

080113d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b084      	sub	sp, #16
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
 80113dc:	460b      	mov	r3, r1
 80113de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80113e0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80113e4:	f005 fd88 	bl	8016ef8 <USBD_static_malloc>
 80113e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d105      	bne.n	80113fc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2200      	movs	r2, #0
 80113f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80113f8:	2302      	movs	r3, #2
 80113fa:	e066      	b.n	80114ca <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	68fa      	ldr	r2, [r7, #12]
 8011400:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	7c1b      	ldrb	r3, [r3, #16]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d119      	bne.n	8011440 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801140c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011410:	2202      	movs	r2, #2
 8011412:	2181      	movs	r1, #129	@ 0x81
 8011414:	6878      	ldr	r0, [r7, #4]
 8011416:	f005 fc16 	bl	8016c46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2201      	movs	r2, #1
 801141e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011420:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011424:	2202      	movs	r2, #2
 8011426:	2101      	movs	r1, #1
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f005 fc0c 	bl	8016c46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2201      	movs	r2, #1
 8011432:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2210      	movs	r2, #16
 801143a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 801143e:	e016      	b.n	801146e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011440:	2340      	movs	r3, #64	@ 0x40
 8011442:	2202      	movs	r2, #2
 8011444:	2181      	movs	r1, #129	@ 0x81
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f005 fbfd 	bl	8016c46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2201      	movs	r2, #1
 8011450:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011452:	2340      	movs	r3, #64	@ 0x40
 8011454:	2202      	movs	r2, #2
 8011456:	2101      	movs	r1, #1
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f005 fbf4 	bl	8016c46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2201      	movs	r2, #1
 8011462:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	2210      	movs	r2, #16
 801146a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801146e:	2308      	movs	r3, #8
 8011470:	2203      	movs	r2, #3
 8011472:	2182      	movs	r1, #130	@ 0x82
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f005 fbe6 	bl	8016c46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	2201      	movs	r2, #1
 801147e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	2200      	movs	r2, #0
 8011490:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	2200      	movs	r2, #0
 8011498:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	7c1b      	ldrb	r3, [r3, #16]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d109      	bne.n	80114b8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80114aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80114ae:	2101      	movs	r1, #1
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f005 fcb7 	bl	8016e24 <USBD_LL_PrepareReceive>
 80114b6:	e007      	b.n	80114c8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80114be:	2340      	movs	r3, #64	@ 0x40
 80114c0:	2101      	movs	r1, #1
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f005 fcae 	bl	8016e24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80114c8:	2300      	movs	r3, #0
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3710      	adds	r7, #16
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}

080114d2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80114d2:	b580      	push	{r7, lr}
 80114d4:	b082      	sub	sp, #8
 80114d6:	af00      	add	r7, sp, #0
 80114d8:	6078      	str	r0, [r7, #4]
 80114da:	460b      	mov	r3, r1
 80114dc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80114de:	2181      	movs	r1, #129	@ 0x81
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f005 fbd6 	bl	8016c92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2200      	movs	r2, #0
 80114ea:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80114ec:	2101      	movs	r1, #1
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f005 fbcf 	bl	8016c92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2200      	movs	r2, #0
 80114f8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80114fc:	2182      	movs	r1, #130	@ 0x82
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f005 fbc7 	bl	8016c92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2200      	movs	r2, #0
 8011508:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2200      	movs	r2, #0
 8011510:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801151a:	2b00      	cmp	r3, #0
 801151c:	d00e      	beq.n	801153c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011524:	685b      	ldr	r3, [r3, #4]
 8011526:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801152e:	4618      	mov	r0, r3
 8011530:	f005 fcf0 	bl	8016f14 <USBD_static_free>
    pdev->pClassData = NULL;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2200      	movs	r2, #0
 8011538:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 801153c:	2300      	movs	r3, #0
}
 801153e:	4618      	mov	r0, r3
 8011540:	3708      	adds	r7, #8
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}
	...

08011548 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b086      	sub	sp, #24
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
 8011550:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011558:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801155a:	2300      	movs	r3, #0
 801155c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801155e:	2300      	movs	r3, #0
 8011560:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011562:	2300      	movs	r3, #0
 8011564:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d101      	bne.n	8011570 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801156c:	2303      	movs	r3, #3
 801156e:	e0af      	b.n	80116d0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011570:	683b      	ldr	r3, [r7, #0]
 8011572:	781b      	ldrb	r3, [r3, #0]
 8011574:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011578:	2b00      	cmp	r3, #0
 801157a:	d03f      	beq.n	80115fc <USBD_CDC_Setup+0xb4>
 801157c:	2b20      	cmp	r3, #32
 801157e:	f040 809f 	bne.w	80116c0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	88db      	ldrh	r3, [r3, #6]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d02e      	beq.n	80115e8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	b25b      	sxtb	r3, r3
 8011590:	2b00      	cmp	r3, #0
 8011592:	da16      	bge.n	80115c2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801159a:	689b      	ldr	r3, [r3, #8]
 801159c:	683a      	ldr	r2, [r7, #0]
 801159e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80115a0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80115a2:	683a      	ldr	r2, [r7, #0]
 80115a4:	88d2      	ldrh	r2, [r2, #6]
 80115a6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	88db      	ldrh	r3, [r3, #6]
 80115ac:	2b07      	cmp	r3, #7
 80115ae:	bf28      	it	cs
 80115b0:	2307      	movcs	r3, #7
 80115b2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	89fa      	ldrh	r2, [r7, #14]
 80115b8:	4619      	mov	r1, r3
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f001 fa9d 	bl	8012afa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80115c0:	e085      	b.n	80116ce <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	785a      	ldrb	r2, [r3, #1]
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	88db      	ldrh	r3, [r3, #6]
 80115d0:	b2da      	uxtb	r2, r3
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80115d8:	6939      	ldr	r1, [r7, #16]
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	88db      	ldrh	r3, [r3, #6]
 80115de:	461a      	mov	r2, r3
 80115e0:	6878      	ldr	r0, [r7, #4]
 80115e2:	f001 fab6 	bl	8012b52 <USBD_CtlPrepareRx>
      break;
 80115e6:	e072      	b.n	80116ce <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80115ee:	689b      	ldr	r3, [r3, #8]
 80115f0:	683a      	ldr	r2, [r7, #0]
 80115f2:	7850      	ldrb	r0, [r2, #1]
 80115f4:	2200      	movs	r2, #0
 80115f6:	6839      	ldr	r1, [r7, #0]
 80115f8:	4798      	blx	r3
      break;
 80115fa:	e068      	b.n	80116ce <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	785b      	ldrb	r3, [r3, #1]
 8011600:	2b0b      	cmp	r3, #11
 8011602:	d852      	bhi.n	80116aa <USBD_CDC_Setup+0x162>
 8011604:	a201      	add	r2, pc, #4	@ (adr r2, 801160c <USBD_CDC_Setup+0xc4>)
 8011606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801160a:	bf00      	nop
 801160c:	0801163d 	.word	0x0801163d
 8011610:	080116b9 	.word	0x080116b9
 8011614:	080116ab 	.word	0x080116ab
 8011618:	080116ab 	.word	0x080116ab
 801161c:	080116ab 	.word	0x080116ab
 8011620:	080116ab 	.word	0x080116ab
 8011624:	080116ab 	.word	0x080116ab
 8011628:	080116ab 	.word	0x080116ab
 801162c:	080116ab 	.word	0x080116ab
 8011630:	080116ab 	.word	0x080116ab
 8011634:	08011667 	.word	0x08011667
 8011638:	08011691 	.word	0x08011691
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011642:	b2db      	uxtb	r3, r3
 8011644:	2b03      	cmp	r3, #3
 8011646:	d107      	bne.n	8011658 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011648:	f107 030a 	add.w	r3, r7, #10
 801164c:	2202      	movs	r2, #2
 801164e:	4619      	mov	r1, r3
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f001 fa52 	bl	8012afa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011656:	e032      	b.n	80116be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011658:	6839      	ldr	r1, [r7, #0]
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f001 f9dc 	bl	8012a18 <USBD_CtlError>
            ret = USBD_FAIL;
 8011660:	2303      	movs	r3, #3
 8011662:	75fb      	strb	r3, [r7, #23]
          break;
 8011664:	e02b      	b.n	80116be <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801166c:	b2db      	uxtb	r3, r3
 801166e:	2b03      	cmp	r3, #3
 8011670:	d107      	bne.n	8011682 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011672:	f107 030d 	add.w	r3, r7, #13
 8011676:	2201      	movs	r2, #1
 8011678:	4619      	mov	r1, r3
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f001 fa3d 	bl	8012afa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011680:	e01d      	b.n	80116be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011682:	6839      	ldr	r1, [r7, #0]
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f001 f9c7 	bl	8012a18 <USBD_CtlError>
            ret = USBD_FAIL;
 801168a:	2303      	movs	r3, #3
 801168c:	75fb      	strb	r3, [r7, #23]
          break;
 801168e:	e016      	b.n	80116be <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011696:	b2db      	uxtb	r3, r3
 8011698:	2b03      	cmp	r3, #3
 801169a:	d00f      	beq.n	80116bc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801169c:	6839      	ldr	r1, [r7, #0]
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f001 f9ba 	bl	8012a18 <USBD_CtlError>
            ret = USBD_FAIL;
 80116a4:	2303      	movs	r3, #3
 80116a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80116a8:	e008      	b.n	80116bc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80116aa:	6839      	ldr	r1, [r7, #0]
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f001 f9b3 	bl	8012a18 <USBD_CtlError>
          ret = USBD_FAIL;
 80116b2:	2303      	movs	r3, #3
 80116b4:	75fb      	strb	r3, [r7, #23]
          break;
 80116b6:	e002      	b.n	80116be <USBD_CDC_Setup+0x176>
          break;
 80116b8:	bf00      	nop
 80116ba:	e008      	b.n	80116ce <USBD_CDC_Setup+0x186>
          break;
 80116bc:	bf00      	nop
      }
      break;
 80116be:	e006      	b.n	80116ce <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80116c0:	6839      	ldr	r1, [r7, #0]
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f001 f9a8 	bl	8012a18 <USBD_CtlError>
      ret = USBD_FAIL;
 80116c8:	2303      	movs	r3, #3
 80116ca:	75fb      	strb	r3, [r7, #23]
      break;
 80116cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80116ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	3718      	adds	r7, #24
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}

080116d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b084      	sub	sp, #16
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
 80116e0:	460b      	mov	r3, r1
 80116e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80116ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d101      	bne.n	80116fa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80116f6:	2303      	movs	r3, #3
 80116f8:	e04f      	b.n	801179a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011700:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011702:	78fa      	ldrb	r2, [r7, #3]
 8011704:	6879      	ldr	r1, [r7, #4]
 8011706:	4613      	mov	r3, r2
 8011708:	009b      	lsls	r3, r3, #2
 801170a:	4413      	add	r3, r2
 801170c:	009b      	lsls	r3, r3, #2
 801170e:	440b      	add	r3, r1
 8011710:	3318      	adds	r3, #24
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d029      	beq.n	801176c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011718:	78fa      	ldrb	r2, [r7, #3]
 801171a:	6879      	ldr	r1, [r7, #4]
 801171c:	4613      	mov	r3, r2
 801171e:	009b      	lsls	r3, r3, #2
 8011720:	4413      	add	r3, r2
 8011722:	009b      	lsls	r3, r3, #2
 8011724:	440b      	add	r3, r1
 8011726:	3318      	adds	r3, #24
 8011728:	681a      	ldr	r2, [r3, #0]
 801172a:	78f9      	ldrb	r1, [r7, #3]
 801172c:	68f8      	ldr	r0, [r7, #12]
 801172e:	460b      	mov	r3, r1
 8011730:	009b      	lsls	r3, r3, #2
 8011732:	440b      	add	r3, r1
 8011734:	00db      	lsls	r3, r3, #3
 8011736:	4403      	add	r3, r0
 8011738:	3320      	adds	r3, #32
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	fbb2 f1f3 	udiv	r1, r2, r3
 8011740:	fb01 f303 	mul.w	r3, r1, r3
 8011744:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011746:	2b00      	cmp	r3, #0
 8011748:	d110      	bne.n	801176c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801174a:	78fa      	ldrb	r2, [r7, #3]
 801174c:	6879      	ldr	r1, [r7, #4]
 801174e:	4613      	mov	r3, r2
 8011750:	009b      	lsls	r3, r3, #2
 8011752:	4413      	add	r3, r2
 8011754:	009b      	lsls	r3, r3, #2
 8011756:	440b      	add	r3, r1
 8011758:	3318      	adds	r3, #24
 801175a:	2200      	movs	r2, #0
 801175c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801175e:	78f9      	ldrb	r1, [r7, #3]
 8011760:	2300      	movs	r3, #0
 8011762:	2200      	movs	r2, #0
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f005 fb3c 	bl	8016de2 <USBD_LL_Transmit>
 801176a:	e015      	b.n	8011798 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	2200      	movs	r2, #0
 8011770:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801177a:	691b      	ldr	r3, [r3, #16]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d00b      	beq.n	8011798 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011786:	691b      	ldr	r3, [r3, #16]
 8011788:	68ba      	ldr	r2, [r7, #8]
 801178a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801178e:	68ba      	ldr	r2, [r7, #8]
 8011790:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8011794:	78fa      	ldrb	r2, [r7, #3]
 8011796:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011798:	2300      	movs	r3, #0
}
 801179a:	4618      	mov	r0, r3
 801179c:	3710      	adds	r7, #16
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}

080117a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80117a2:	b580      	push	{r7, lr}
 80117a4:	b084      	sub	sp, #16
 80117a6:	af00      	add	r7, sp, #0
 80117a8:	6078      	str	r0, [r7, #4]
 80117aa:	460b      	mov	r3, r1
 80117ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80117b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d101      	bne.n	80117c4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80117c0:	2303      	movs	r3, #3
 80117c2:	e015      	b.n	80117f0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80117c4:	78fb      	ldrb	r3, [r7, #3]
 80117c6:	4619      	mov	r1, r3
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f005 fb4c 	bl	8016e66 <USBD_LL_GetRxDataSize>
 80117ce:	4602      	mov	r2, r0
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80117dc:	68db      	ldr	r3, [r3, #12]
 80117de:	68fa      	ldr	r2, [r7, #12]
 80117e0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80117e4:	68fa      	ldr	r2, [r7, #12]
 80117e6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80117ea:	4611      	mov	r1, r2
 80117ec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80117ee:	2300      	movs	r3, #0
}
 80117f0:	4618      	mov	r0, r3
 80117f2:	3710      	adds	r7, #16
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}

080117f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b084      	sub	sp, #16
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011806:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d101      	bne.n	8011812 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801180e:	2303      	movs	r3, #3
 8011810:	e01a      	b.n	8011848 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8011818:	2b00      	cmp	r3, #0
 801181a:	d014      	beq.n	8011846 <USBD_CDC_EP0_RxReady+0x4e>
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8011822:	2bff      	cmp	r3, #255	@ 0xff
 8011824:	d00f      	beq.n	8011846 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801182c:	689b      	ldr	r3, [r3, #8]
 801182e:	68fa      	ldr	r2, [r7, #12]
 8011830:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8011834:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011836:	68fa      	ldr	r2, [r7, #12]
 8011838:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801183c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	22ff      	movs	r2, #255	@ 0xff
 8011842:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8011846:	2300      	movs	r3, #0
}
 8011848:	4618      	mov	r0, r3
 801184a:	3710      	adds	r7, #16
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}

08011850 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011850:	b480      	push	{r7}
 8011852:	b083      	sub	sp, #12
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2243      	movs	r2, #67	@ 0x43
 801185c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801185e:	4b03      	ldr	r3, [pc, #12]	@ (801186c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011860:	4618      	mov	r0, r3
 8011862:	370c      	adds	r7, #12
 8011864:	46bd      	mov	sp, r7
 8011866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186a:	4770      	bx	lr
 801186c:	20000098 	.word	0x20000098

08011870 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011870:	b480      	push	{r7}
 8011872:	b083      	sub	sp, #12
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2243      	movs	r2, #67	@ 0x43
 801187c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801187e:	4b03      	ldr	r3, [pc, #12]	@ (801188c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011880:	4618      	mov	r0, r3
 8011882:	370c      	adds	r7, #12
 8011884:	46bd      	mov	sp, r7
 8011886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188a:	4770      	bx	lr
 801188c:	20000054 	.word	0x20000054

08011890 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011890:	b480      	push	{r7}
 8011892:	b083      	sub	sp, #12
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2243      	movs	r2, #67	@ 0x43
 801189c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801189e:	4b03      	ldr	r3, [pc, #12]	@ (80118ac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	370c      	adds	r7, #12
 80118a4:	46bd      	mov	sp, r7
 80118a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118aa:	4770      	bx	lr
 80118ac:	200000dc 	.word	0x200000dc

080118b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80118b0:	b480      	push	{r7}
 80118b2:	b083      	sub	sp, #12
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	220a      	movs	r2, #10
 80118bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80118be:	4b03      	ldr	r3, [pc, #12]	@ (80118cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	370c      	adds	r7, #12
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr
 80118cc:	20000010 	.word	0x20000010

080118d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80118d0:	b480      	push	{r7}
 80118d2:	b083      	sub	sp, #12
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
 80118d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d101      	bne.n	80118e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80118e0:	2303      	movs	r3, #3
 80118e2:	e004      	b.n	80118ee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	683a      	ldr	r2, [r7, #0]
 80118e8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80118ec:	2300      	movs	r3, #0
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	370c      	adds	r7, #12
 80118f2:	46bd      	mov	sp, r7
 80118f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f8:	4770      	bx	lr

080118fa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80118fa:	b480      	push	{r7}
 80118fc:	b087      	sub	sp, #28
 80118fe:	af00      	add	r7, sp, #0
 8011900:	60f8      	str	r0, [r7, #12]
 8011902:	60b9      	str	r1, [r7, #8]
 8011904:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801190c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801190e:	697b      	ldr	r3, [r7, #20]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d101      	bne.n	8011918 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011914:	2303      	movs	r3, #3
 8011916:	e008      	b.n	801192a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	68ba      	ldr	r2, [r7, #8]
 801191c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	687a      	ldr	r2, [r7, #4]
 8011924:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8011928:	2300      	movs	r3, #0
}
 801192a:	4618      	mov	r0, r3
 801192c:	371c      	adds	r7, #28
 801192e:	46bd      	mov	sp, r7
 8011930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011934:	4770      	bx	lr

08011936 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011936:	b480      	push	{r7}
 8011938:	b085      	sub	sp, #20
 801193a:	af00      	add	r7, sp, #0
 801193c:	6078      	str	r0, [r7, #4]
 801193e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011946:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d101      	bne.n	8011952 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801194e:	2303      	movs	r3, #3
 8011950:	e004      	b.n	801195c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	683a      	ldr	r2, [r7, #0]
 8011956:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801195a:	2300      	movs	r3, #0
}
 801195c:	4618      	mov	r0, r3
 801195e:	3714      	adds	r7, #20
 8011960:	46bd      	mov	sp, r7
 8011962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011966:	4770      	bx	lr

08011968 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b084      	sub	sp, #16
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011976:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801197e:	2b00      	cmp	r3, #0
 8011980:	d101      	bne.n	8011986 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011982:	2303      	movs	r3, #3
 8011984:	e016      	b.n	80119b4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	7c1b      	ldrb	r3, [r3, #16]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d109      	bne.n	80119a2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011994:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011998:	2101      	movs	r1, #1
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f005 fa42 	bl	8016e24 <USBD_LL_PrepareReceive>
 80119a0:	e007      	b.n	80119b2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80119a8:	2340      	movs	r3, #64	@ 0x40
 80119aa:	2101      	movs	r1, #1
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f005 fa39 	bl	8016e24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80119b2:	2300      	movs	r3, #0
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	3710      	adds	r7, #16
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}

080119bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b086      	sub	sp, #24
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	60f8      	str	r0, [r7, #12]
 80119c4:	60b9      	str	r1, [r7, #8]
 80119c6:	4613      	mov	r3, r2
 80119c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d101      	bne.n	80119d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80119d0:	2303      	movs	r3, #3
 80119d2:	e01f      	b.n	8011a14 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	2200      	movs	r2, #0
 80119d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	2200      	movs	r2, #0
 80119e0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	2200      	movs	r2, #0
 80119e8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d003      	beq.n	80119fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	68ba      	ldr	r2, [r7, #8]
 80119f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	2201      	movs	r2, #1
 80119fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	79fa      	ldrb	r2, [r7, #7]
 8011a06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011a08:	68f8      	ldr	r0, [r7, #12]
 8011a0a:	f005 f8a1 	bl	8016b50 <USBD_LL_Init>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3718      	adds	r7, #24
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}

08011a1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b084      	sub	sp, #16
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
 8011a24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011a26:	2300      	movs	r3, #0
 8011a28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d101      	bne.n	8011a34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011a30:	2303      	movs	r3, #3
 8011a32:	e016      	b.n	8011a62 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	683a      	ldr	r2, [r7, #0]
 8011a38:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d00b      	beq.n	8011a60 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a50:	f107 020e 	add.w	r2, r7, #14
 8011a54:	4610      	mov	r0, r2
 8011a56:	4798      	blx	r3
 8011a58:	4602      	mov	r2, r0
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011a60:	2300      	movs	r3, #0
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3710      	adds	r7, #16
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}

08011a6a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011a6a:	b580      	push	{r7, lr}
 8011a6c:	b082      	sub	sp, #8
 8011a6e:	af00      	add	r7, sp, #0
 8011a70:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f005 f8cc 	bl	8016c10 <USBD_LL_Start>
 8011a78:	4603      	mov	r3, r0
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3708      	adds	r7, #8
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}

08011a82 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011a82:	b480      	push	{r7}
 8011a84:	b083      	sub	sp, #12
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011a8a:	2300      	movs	r3, #0
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	370c      	adds	r7, #12
 8011a90:	46bd      	mov	sp, r7
 8011a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a96:	4770      	bx	lr

08011a98 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b084      	sub	sp, #16
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011aa4:	2303      	movs	r3, #3
 8011aa6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d009      	beq.n	8011ac6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	78fa      	ldrb	r2, [r7, #3]
 8011abc:	4611      	mov	r1, r2
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	4798      	blx	r3
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3710      	adds	r7, #16
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}

08011ad0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b082      	sub	sp, #8
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	460b      	mov	r3, r1
 8011ada:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d007      	beq.n	8011af6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011aec:	685b      	ldr	r3, [r3, #4]
 8011aee:	78fa      	ldrb	r2, [r7, #3]
 8011af0:	4611      	mov	r1, r2
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	4798      	blx	r3
  }

  return USBD_OK;
 8011af6:	2300      	movs	r3, #0
}
 8011af8:	4618      	mov	r0, r3
 8011afa:	3708      	adds	r7, #8
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}

08011b00 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b084      	sub	sp, #16
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
 8011b08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011b10:	6839      	ldr	r1, [r7, #0]
 8011b12:	4618      	mov	r0, r3
 8011b14:	f000 ff46 	bl	80129a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2201      	movs	r2, #1
 8011b1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011b26:	461a      	mov	r2, r3
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011b34:	f003 031f 	and.w	r3, r3, #31
 8011b38:	2b02      	cmp	r3, #2
 8011b3a:	d01a      	beq.n	8011b72 <USBD_LL_SetupStage+0x72>
 8011b3c:	2b02      	cmp	r3, #2
 8011b3e:	d822      	bhi.n	8011b86 <USBD_LL_SetupStage+0x86>
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d002      	beq.n	8011b4a <USBD_LL_SetupStage+0x4a>
 8011b44:	2b01      	cmp	r3, #1
 8011b46:	d00a      	beq.n	8011b5e <USBD_LL_SetupStage+0x5e>
 8011b48:	e01d      	b.n	8011b86 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011b50:	4619      	mov	r1, r3
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f000 f9ee 	bl	8011f34 <USBD_StdDevReq>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8011b5c:	e020      	b.n	8011ba0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011b64:	4619      	mov	r1, r3
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f000 fa52 	bl	8012010 <USBD_StdItfReq>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8011b70:	e016      	b.n	8011ba0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011b78:	4619      	mov	r1, r3
 8011b7a:	6878      	ldr	r0, [r7, #4]
 8011b7c:	f000 fa91 	bl	80120a2 <USBD_StdEPReq>
 8011b80:	4603      	mov	r3, r0
 8011b82:	73fb      	strb	r3, [r7, #15]
      break;
 8011b84:	e00c      	b.n	8011ba0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011b8c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011b90:	b2db      	uxtb	r3, r3
 8011b92:	4619      	mov	r1, r3
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f005 f89b 	bl	8016cd0 <USBD_LL_StallEP>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8011b9e:	bf00      	nop
  }

  return ret;
 8011ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3710      	adds	r7, #16
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}

08011baa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011baa:	b580      	push	{r7, lr}
 8011bac:	b086      	sub	sp, #24
 8011bae:	af00      	add	r7, sp, #0
 8011bb0:	60f8      	str	r0, [r7, #12]
 8011bb2:	460b      	mov	r3, r1
 8011bb4:	607a      	str	r2, [r7, #4]
 8011bb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011bb8:	7afb      	ldrb	r3, [r7, #11]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d138      	bne.n	8011c30 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8011bc4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011bcc:	2b03      	cmp	r3, #3
 8011bce:	d14a      	bne.n	8011c66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	689a      	ldr	r2, [r3, #8]
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	68db      	ldr	r3, [r3, #12]
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d913      	bls.n	8011c04 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	689a      	ldr	r2, [r3, #8]
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	68db      	ldr	r3, [r3, #12]
 8011be4:	1ad2      	subs	r2, r2, r3
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011bea:	693b      	ldr	r3, [r7, #16]
 8011bec:	68da      	ldr	r2, [r3, #12]
 8011bee:	693b      	ldr	r3, [r7, #16]
 8011bf0:	689b      	ldr	r3, [r3, #8]
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	bf28      	it	cs
 8011bf6:	4613      	movcs	r3, r2
 8011bf8:	461a      	mov	r2, r3
 8011bfa:	6879      	ldr	r1, [r7, #4]
 8011bfc:	68f8      	ldr	r0, [r7, #12]
 8011bfe:	f000 ffc5 	bl	8012b8c <USBD_CtlContinueRx>
 8011c02:	e030      	b.n	8011c66 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c0a:	b2db      	uxtb	r3, r3
 8011c0c:	2b03      	cmp	r3, #3
 8011c0e:	d10b      	bne.n	8011c28 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011c16:	691b      	ldr	r3, [r3, #16]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d005      	beq.n	8011c28 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011c22:	691b      	ldr	r3, [r3, #16]
 8011c24:	68f8      	ldr	r0, [r7, #12]
 8011c26:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011c28:	68f8      	ldr	r0, [r7, #12]
 8011c2a:	f000 ffc0 	bl	8012bae <USBD_CtlSendStatus>
 8011c2e:	e01a      	b.n	8011c66 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c36:	b2db      	uxtb	r3, r3
 8011c38:	2b03      	cmp	r3, #3
 8011c3a:	d114      	bne.n	8011c66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011c42:	699b      	ldr	r3, [r3, #24]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d00e      	beq.n	8011c66 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011c4e:	699b      	ldr	r3, [r3, #24]
 8011c50:	7afa      	ldrb	r2, [r7, #11]
 8011c52:	4611      	mov	r1, r2
 8011c54:	68f8      	ldr	r0, [r7, #12]
 8011c56:	4798      	blx	r3
 8011c58:	4603      	mov	r3, r0
 8011c5a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011c5c:	7dfb      	ldrb	r3, [r7, #23]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d001      	beq.n	8011c66 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8011c62:	7dfb      	ldrb	r3, [r7, #23]
 8011c64:	e000      	b.n	8011c68 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8011c66:	2300      	movs	r3, #0
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3718      	adds	r7, #24
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}

08011c70 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b086      	sub	sp, #24
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	60f8      	str	r0, [r7, #12]
 8011c78:	460b      	mov	r3, r1
 8011c7a:	607a      	str	r2, [r7, #4]
 8011c7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011c7e:	7afb      	ldrb	r3, [r7, #11]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d16b      	bne.n	8011d5c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	3314      	adds	r3, #20
 8011c88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011c90:	2b02      	cmp	r3, #2
 8011c92:	d156      	bne.n	8011d42 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	689a      	ldr	r2, [r3, #8]
 8011c98:	693b      	ldr	r3, [r7, #16]
 8011c9a:	68db      	ldr	r3, [r3, #12]
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d914      	bls.n	8011cca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	689a      	ldr	r2, [r3, #8]
 8011ca4:	693b      	ldr	r3, [r7, #16]
 8011ca6:	68db      	ldr	r3, [r3, #12]
 8011ca8:	1ad2      	subs	r2, r2, r3
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	689b      	ldr	r3, [r3, #8]
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	6879      	ldr	r1, [r7, #4]
 8011cb6:	68f8      	ldr	r0, [r7, #12]
 8011cb8:	f000 ff3a 	bl	8012b30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	2100      	movs	r1, #0
 8011cc2:	68f8      	ldr	r0, [r7, #12]
 8011cc4:	f005 f8ae 	bl	8016e24 <USBD_LL_PrepareReceive>
 8011cc8:	e03b      	b.n	8011d42 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	68da      	ldr	r2, [r3, #12]
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	689b      	ldr	r3, [r3, #8]
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d11c      	bne.n	8011d10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	685a      	ldr	r2, [r3, #4]
 8011cda:	693b      	ldr	r3, [r7, #16]
 8011cdc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	d316      	bcc.n	8011d10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011ce2:	693b      	ldr	r3, [r7, #16]
 8011ce4:	685a      	ldr	r2, [r3, #4]
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011cec:	429a      	cmp	r2, r3
 8011cee:	d20f      	bcs.n	8011d10 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	2100      	movs	r1, #0
 8011cf4:	68f8      	ldr	r0, [r7, #12]
 8011cf6:	f000 ff1b 	bl	8012b30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011d02:	2300      	movs	r3, #0
 8011d04:	2200      	movs	r2, #0
 8011d06:	2100      	movs	r1, #0
 8011d08:	68f8      	ldr	r0, [r7, #12]
 8011d0a:	f005 f88b 	bl	8016e24 <USBD_LL_PrepareReceive>
 8011d0e:	e018      	b.n	8011d42 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d16:	b2db      	uxtb	r3, r3
 8011d18:	2b03      	cmp	r3, #3
 8011d1a:	d10b      	bne.n	8011d34 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011d22:	68db      	ldr	r3, [r3, #12]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d005      	beq.n	8011d34 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011d2e:	68db      	ldr	r3, [r3, #12]
 8011d30:	68f8      	ldr	r0, [r7, #12]
 8011d32:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011d34:	2180      	movs	r1, #128	@ 0x80
 8011d36:	68f8      	ldr	r0, [r7, #12]
 8011d38:	f004 ffca 	bl	8016cd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011d3c:	68f8      	ldr	r0, [r7, #12]
 8011d3e:	f000 ff49 	bl	8012bd4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8011d48:	2b01      	cmp	r3, #1
 8011d4a:	d122      	bne.n	8011d92 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011d4c:	68f8      	ldr	r0, [r7, #12]
 8011d4e:	f7ff fe98 	bl	8011a82 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	2200      	movs	r2, #0
 8011d56:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8011d5a:	e01a      	b.n	8011d92 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d62:	b2db      	uxtb	r3, r3
 8011d64:	2b03      	cmp	r3, #3
 8011d66:	d114      	bne.n	8011d92 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011d6e:	695b      	ldr	r3, [r3, #20]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d00e      	beq.n	8011d92 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011d7a:	695b      	ldr	r3, [r3, #20]
 8011d7c:	7afa      	ldrb	r2, [r7, #11]
 8011d7e:	4611      	mov	r1, r2
 8011d80:	68f8      	ldr	r0, [r7, #12]
 8011d82:	4798      	blx	r3
 8011d84:	4603      	mov	r3, r0
 8011d86:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011d88:	7dfb      	ldrb	r3, [r7, #23]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d001      	beq.n	8011d92 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8011d8e:	7dfb      	ldrb	r3, [r7, #23]
 8011d90:	e000      	b.n	8011d94 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8011d92:	2300      	movs	r3, #0
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	3718      	adds	r7, #24
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}

08011d9c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b082      	sub	sp, #8
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2201      	movs	r2, #1
 8011da8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2200      	movs	r2, #0
 8011db0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	2200      	movs	r2, #0
 8011db8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d101      	bne.n	8011dd0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8011dcc:	2303      	movs	r3, #3
 8011dce:	e02f      	b.n	8011e30 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d00f      	beq.n	8011dfa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011de0:	685b      	ldr	r3, [r3, #4]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d009      	beq.n	8011dfa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011dec:	685b      	ldr	r3, [r3, #4]
 8011dee:	687a      	ldr	r2, [r7, #4]
 8011df0:	6852      	ldr	r2, [r2, #4]
 8011df2:	b2d2      	uxtb	r2, r2
 8011df4:	4611      	mov	r1, r2
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011dfa:	2340      	movs	r3, #64	@ 0x40
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	2100      	movs	r1, #0
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f004 ff20 	bl	8016c46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2201      	movs	r2, #1
 8011e0a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2240      	movs	r2, #64	@ 0x40
 8011e12:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011e16:	2340      	movs	r3, #64	@ 0x40
 8011e18:	2200      	movs	r2, #0
 8011e1a:	2180      	movs	r1, #128	@ 0x80
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f004 ff12 	bl	8016c46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2201      	movs	r2, #1
 8011e26:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2240      	movs	r2, #64	@ 0x40
 8011e2c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011e2e:	2300      	movs	r3, #0
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3708      	adds	r7, #8
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}

08011e38 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011e38:	b480      	push	{r7}
 8011e3a:	b083      	sub	sp, #12
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
 8011e40:	460b      	mov	r3, r1
 8011e42:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	78fa      	ldrb	r2, [r7, #3]
 8011e48:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011e4a:	2300      	movs	r3, #0
}
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	370c      	adds	r7, #12
 8011e50:	46bd      	mov	sp, r7
 8011e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e56:	4770      	bx	lr

08011e58 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011e58:	b480      	push	{r7}
 8011e5a:	b083      	sub	sp, #12
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011e66:	b2da      	uxtb	r2, r3
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2204      	movs	r2, #4
 8011e72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8011e76:	2300      	movs	r3, #0
}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	370c      	adds	r7, #12
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e82:	4770      	bx	lr

08011e84 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011e84:	b480      	push	{r7}
 8011e86:	b083      	sub	sp, #12
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011e92:	b2db      	uxtb	r3, r3
 8011e94:	2b04      	cmp	r3, #4
 8011e96:	d106      	bne.n	8011ea6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8011e9e:	b2da      	uxtb	r2, r3
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8011ea6:	2300      	movs	r3, #0
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	370c      	adds	r7, #12
 8011eac:	46bd      	mov	sp, r7
 8011eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb2:	4770      	bx	lr

08011eb4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b082      	sub	sp, #8
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d101      	bne.n	8011eca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8011ec6:	2303      	movs	r3, #3
 8011ec8:	e012      	b.n	8011ef0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ed0:	b2db      	uxtb	r3, r3
 8011ed2:	2b03      	cmp	r3, #3
 8011ed4:	d10b      	bne.n	8011eee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011edc:	69db      	ldr	r3, [r3, #28]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d005      	beq.n	8011eee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ee8:	69db      	ldr	r3, [r3, #28]
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011eee:	2300      	movs	r3, #0
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3708      	adds	r7, #8
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b087      	sub	sp, #28
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	781b      	ldrb	r3, [r3, #0]
 8011f08:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	3301      	adds	r3, #1
 8011f0e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011f10:	697b      	ldr	r3, [r7, #20]
 8011f12:	781b      	ldrb	r3, [r3, #0]
 8011f14:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011f16:	8a3b      	ldrh	r3, [r7, #16]
 8011f18:	021b      	lsls	r3, r3, #8
 8011f1a:	b21a      	sxth	r2, r3
 8011f1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011f20:	4313      	orrs	r3, r2
 8011f22:	b21b      	sxth	r3, r3
 8011f24:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011f26:	89fb      	ldrh	r3, [r7, #14]
}
 8011f28:	4618      	mov	r0, r3
 8011f2a:	371c      	adds	r7, #28
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f32:	4770      	bx	lr

08011f34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b084      	sub	sp, #16
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
 8011f3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	781b      	ldrb	r3, [r3, #0]
 8011f46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011f4a:	2b40      	cmp	r3, #64	@ 0x40
 8011f4c:	d005      	beq.n	8011f5a <USBD_StdDevReq+0x26>
 8011f4e:	2b40      	cmp	r3, #64	@ 0x40
 8011f50:	d853      	bhi.n	8011ffa <USBD_StdDevReq+0xc6>
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d00b      	beq.n	8011f6e <USBD_StdDevReq+0x3a>
 8011f56:	2b20      	cmp	r3, #32
 8011f58:	d14f      	bne.n	8011ffa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011f60:	689b      	ldr	r3, [r3, #8]
 8011f62:	6839      	ldr	r1, [r7, #0]
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	4798      	blx	r3
 8011f68:	4603      	mov	r3, r0
 8011f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8011f6c:	e04a      	b.n	8012004 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	785b      	ldrb	r3, [r3, #1]
 8011f72:	2b09      	cmp	r3, #9
 8011f74:	d83b      	bhi.n	8011fee <USBD_StdDevReq+0xba>
 8011f76:	a201      	add	r2, pc, #4	@ (adr r2, 8011f7c <USBD_StdDevReq+0x48>)
 8011f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f7c:	08011fd1 	.word	0x08011fd1
 8011f80:	08011fe5 	.word	0x08011fe5
 8011f84:	08011fef 	.word	0x08011fef
 8011f88:	08011fdb 	.word	0x08011fdb
 8011f8c:	08011fef 	.word	0x08011fef
 8011f90:	08011faf 	.word	0x08011faf
 8011f94:	08011fa5 	.word	0x08011fa5
 8011f98:	08011fef 	.word	0x08011fef
 8011f9c:	08011fc7 	.word	0x08011fc7
 8011fa0:	08011fb9 	.word	0x08011fb9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011fa4:	6839      	ldr	r1, [r7, #0]
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f000 f9de 	bl	8012368 <USBD_GetDescriptor>
          break;
 8011fac:	e024      	b.n	8011ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011fae:	6839      	ldr	r1, [r7, #0]
 8011fb0:	6878      	ldr	r0, [r7, #4]
 8011fb2:	f000 fb6d 	bl	8012690 <USBD_SetAddress>
          break;
 8011fb6:	e01f      	b.n	8011ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011fb8:	6839      	ldr	r1, [r7, #0]
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f000 fbac 	bl	8012718 <USBD_SetConfig>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	73fb      	strb	r3, [r7, #15]
          break;
 8011fc4:	e018      	b.n	8011ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011fc6:	6839      	ldr	r1, [r7, #0]
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f000 fc4b 	bl	8012864 <USBD_GetConfig>
          break;
 8011fce:	e013      	b.n	8011ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011fd0:	6839      	ldr	r1, [r7, #0]
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f000 fc7c 	bl	80128d0 <USBD_GetStatus>
          break;
 8011fd8:	e00e      	b.n	8011ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011fda:	6839      	ldr	r1, [r7, #0]
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f000 fcab 	bl	8012938 <USBD_SetFeature>
          break;
 8011fe2:	e009      	b.n	8011ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011fe4:	6839      	ldr	r1, [r7, #0]
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f000 fcba 	bl	8012960 <USBD_ClrFeature>
          break;
 8011fec:	e004      	b.n	8011ff8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8011fee:	6839      	ldr	r1, [r7, #0]
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f000 fd11 	bl	8012a18 <USBD_CtlError>
          break;
 8011ff6:	bf00      	nop
      }
      break;
 8011ff8:	e004      	b.n	8012004 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8011ffa:	6839      	ldr	r1, [r7, #0]
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	f000 fd0b 	bl	8012a18 <USBD_CtlError>
      break;
 8012002:	bf00      	nop
  }

  return ret;
 8012004:	7bfb      	ldrb	r3, [r7, #15]
}
 8012006:	4618      	mov	r0, r3
 8012008:	3710      	adds	r7, #16
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}
 801200e:	bf00      	nop

08012010 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b084      	sub	sp, #16
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
 8012018:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801201a:	2300      	movs	r3, #0
 801201c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012026:	2b40      	cmp	r3, #64	@ 0x40
 8012028:	d005      	beq.n	8012036 <USBD_StdItfReq+0x26>
 801202a:	2b40      	cmp	r3, #64	@ 0x40
 801202c:	d82f      	bhi.n	801208e <USBD_StdItfReq+0x7e>
 801202e:	2b00      	cmp	r3, #0
 8012030:	d001      	beq.n	8012036 <USBD_StdItfReq+0x26>
 8012032:	2b20      	cmp	r3, #32
 8012034:	d12b      	bne.n	801208e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801203c:	b2db      	uxtb	r3, r3
 801203e:	3b01      	subs	r3, #1
 8012040:	2b02      	cmp	r3, #2
 8012042:	d81d      	bhi.n	8012080 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	889b      	ldrh	r3, [r3, #4]
 8012048:	b2db      	uxtb	r3, r3
 801204a:	2b01      	cmp	r3, #1
 801204c:	d813      	bhi.n	8012076 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012054:	689b      	ldr	r3, [r3, #8]
 8012056:	6839      	ldr	r1, [r7, #0]
 8012058:	6878      	ldr	r0, [r7, #4]
 801205a:	4798      	blx	r3
 801205c:	4603      	mov	r3, r0
 801205e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	88db      	ldrh	r3, [r3, #6]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d110      	bne.n	801208a <USBD_StdItfReq+0x7a>
 8012068:	7bfb      	ldrb	r3, [r7, #15]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d10d      	bne.n	801208a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f000 fd9d 	bl	8012bae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012074:	e009      	b.n	801208a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8012076:	6839      	ldr	r1, [r7, #0]
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f000 fccd 	bl	8012a18 <USBD_CtlError>
          break;
 801207e:	e004      	b.n	801208a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8012080:	6839      	ldr	r1, [r7, #0]
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f000 fcc8 	bl	8012a18 <USBD_CtlError>
          break;
 8012088:	e000      	b.n	801208c <USBD_StdItfReq+0x7c>
          break;
 801208a:	bf00      	nop
      }
      break;
 801208c:	e004      	b.n	8012098 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801208e:	6839      	ldr	r1, [r7, #0]
 8012090:	6878      	ldr	r0, [r7, #4]
 8012092:	f000 fcc1 	bl	8012a18 <USBD_CtlError>
      break;
 8012096:	bf00      	nop
  }

  return ret;
 8012098:	7bfb      	ldrb	r3, [r7, #15]
}
 801209a:	4618      	mov	r0, r3
 801209c:	3710      	adds	r7, #16
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}

080120a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120a2:	b580      	push	{r7, lr}
 80120a4:	b084      	sub	sp, #16
 80120a6:	af00      	add	r7, sp, #0
 80120a8:	6078      	str	r0, [r7, #4]
 80120aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80120ac:	2300      	movs	r3, #0
 80120ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	889b      	ldrh	r3, [r3, #4]
 80120b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80120be:	2b40      	cmp	r3, #64	@ 0x40
 80120c0:	d007      	beq.n	80120d2 <USBD_StdEPReq+0x30>
 80120c2:	2b40      	cmp	r3, #64	@ 0x40
 80120c4:	f200 8145 	bhi.w	8012352 <USBD_StdEPReq+0x2b0>
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d00c      	beq.n	80120e6 <USBD_StdEPReq+0x44>
 80120cc:	2b20      	cmp	r3, #32
 80120ce:	f040 8140 	bne.w	8012352 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80120d8:	689b      	ldr	r3, [r3, #8]
 80120da:	6839      	ldr	r1, [r7, #0]
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	4798      	blx	r3
 80120e0:	4603      	mov	r3, r0
 80120e2:	73fb      	strb	r3, [r7, #15]
      break;
 80120e4:	e13a      	b.n	801235c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	785b      	ldrb	r3, [r3, #1]
 80120ea:	2b03      	cmp	r3, #3
 80120ec:	d007      	beq.n	80120fe <USBD_StdEPReq+0x5c>
 80120ee:	2b03      	cmp	r3, #3
 80120f0:	f300 8129 	bgt.w	8012346 <USBD_StdEPReq+0x2a4>
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d07f      	beq.n	80121f8 <USBD_StdEPReq+0x156>
 80120f8:	2b01      	cmp	r3, #1
 80120fa:	d03c      	beq.n	8012176 <USBD_StdEPReq+0xd4>
 80120fc:	e123      	b.n	8012346 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012104:	b2db      	uxtb	r3, r3
 8012106:	2b02      	cmp	r3, #2
 8012108:	d002      	beq.n	8012110 <USBD_StdEPReq+0x6e>
 801210a:	2b03      	cmp	r3, #3
 801210c:	d016      	beq.n	801213c <USBD_StdEPReq+0x9a>
 801210e:	e02c      	b.n	801216a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012110:	7bbb      	ldrb	r3, [r7, #14]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d00d      	beq.n	8012132 <USBD_StdEPReq+0x90>
 8012116:	7bbb      	ldrb	r3, [r7, #14]
 8012118:	2b80      	cmp	r3, #128	@ 0x80
 801211a:	d00a      	beq.n	8012132 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801211c:	7bbb      	ldrb	r3, [r7, #14]
 801211e:	4619      	mov	r1, r3
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f004 fdd5 	bl	8016cd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012126:	2180      	movs	r1, #128	@ 0x80
 8012128:	6878      	ldr	r0, [r7, #4]
 801212a:	f004 fdd1 	bl	8016cd0 <USBD_LL_StallEP>
 801212e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012130:	e020      	b.n	8012174 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8012132:	6839      	ldr	r1, [r7, #0]
 8012134:	6878      	ldr	r0, [r7, #4]
 8012136:	f000 fc6f 	bl	8012a18 <USBD_CtlError>
              break;
 801213a:	e01b      	b.n	8012174 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	885b      	ldrh	r3, [r3, #2]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d10e      	bne.n	8012162 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012144:	7bbb      	ldrb	r3, [r7, #14]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d00b      	beq.n	8012162 <USBD_StdEPReq+0xc0>
 801214a:	7bbb      	ldrb	r3, [r7, #14]
 801214c:	2b80      	cmp	r3, #128	@ 0x80
 801214e:	d008      	beq.n	8012162 <USBD_StdEPReq+0xc0>
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	88db      	ldrh	r3, [r3, #6]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d104      	bne.n	8012162 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012158:	7bbb      	ldrb	r3, [r7, #14]
 801215a:	4619      	mov	r1, r3
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f004 fdb7 	bl	8016cd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f000 fd23 	bl	8012bae <USBD_CtlSendStatus>

              break;
 8012168:	e004      	b.n	8012174 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801216a:	6839      	ldr	r1, [r7, #0]
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f000 fc53 	bl	8012a18 <USBD_CtlError>
              break;
 8012172:	bf00      	nop
          }
          break;
 8012174:	e0ec      	b.n	8012350 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801217c:	b2db      	uxtb	r3, r3
 801217e:	2b02      	cmp	r3, #2
 8012180:	d002      	beq.n	8012188 <USBD_StdEPReq+0xe6>
 8012182:	2b03      	cmp	r3, #3
 8012184:	d016      	beq.n	80121b4 <USBD_StdEPReq+0x112>
 8012186:	e030      	b.n	80121ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012188:	7bbb      	ldrb	r3, [r7, #14]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d00d      	beq.n	80121aa <USBD_StdEPReq+0x108>
 801218e:	7bbb      	ldrb	r3, [r7, #14]
 8012190:	2b80      	cmp	r3, #128	@ 0x80
 8012192:	d00a      	beq.n	80121aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012194:	7bbb      	ldrb	r3, [r7, #14]
 8012196:	4619      	mov	r1, r3
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f004 fd99 	bl	8016cd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801219e:	2180      	movs	r1, #128	@ 0x80
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f004 fd95 	bl	8016cd0 <USBD_LL_StallEP>
 80121a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80121a8:	e025      	b.n	80121f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80121aa:	6839      	ldr	r1, [r7, #0]
 80121ac:	6878      	ldr	r0, [r7, #4]
 80121ae:	f000 fc33 	bl	8012a18 <USBD_CtlError>
              break;
 80121b2:	e020      	b.n	80121f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	885b      	ldrh	r3, [r3, #2]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d11b      	bne.n	80121f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80121bc:	7bbb      	ldrb	r3, [r7, #14]
 80121be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d004      	beq.n	80121d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80121c6:	7bbb      	ldrb	r3, [r7, #14]
 80121c8:	4619      	mov	r1, r3
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f004 fd9f 	bl	8016d0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	f000 fcec 	bl	8012bae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80121dc:	689b      	ldr	r3, [r3, #8]
 80121de:	6839      	ldr	r1, [r7, #0]
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	4798      	blx	r3
 80121e4:	4603      	mov	r3, r0
 80121e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80121e8:	e004      	b.n	80121f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80121ea:	6839      	ldr	r1, [r7, #0]
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f000 fc13 	bl	8012a18 <USBD_CtlError>
              break;
 80121f2:	e000      	b.n	80121f6 <USBD_StdEPReq+0x154>
              break;
 80121f4:	bf00      	nop
          }
          break;
 80121f6:	e0ab      	b.n	8012350 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80121fe:	b2db      	uxtb	r3, r3
 8012200:	2b02      	cmp	r3, #2
 8012202:	d002      	beq.n	801220a <USBD_StdEPReq+0x168>
 8012204:	2b03      	cmp	r3, #3
 8012206:	d032      	beq.n	801226e <USBD_StdEPReq+0x1cc>
 8012208:	e097      	b.n	801233a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801220a:	7bbb      	ldrb	r3, [r7, #14]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d007      	beq.n	8012220 <USBD_StdEPReq+0x17e>
 8012210:	7bbb      	ldrb	r3, [r7, #14]
 8012212:	2b80      	cmp	r3, #128	@ 0x80
 8012214:	d004      	beq.n	8012220 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8012216:	6839      	ldr	r1, [r7, #0]
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f000 fbfd 	bl	8012a18 <USBD_CtlError>
                break;
 801221e:	e091      	b.n	8012344 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012224:	2b00      	cmp	r3, #0
 8012226:	da0b      	bge.n	8012240 <USBD_StdEPReq+0x19e>
 8012228:	7bbb      	ldrb	r3, [r7, #14]
 801222a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801222e:	4613      	mov	r3, r2
 8012230:	009b      	lsls	r3, r3, #2
 8012232:	4413      	add	r3, r2
 8012234:	009b      	lsls	r3, r3, #2
 8012236:	3310      	adds	r3, #16
 8012238:	687a      	ldr	r2, [r7, #4]
 801223a:	4413      	add	r3, r2
 801223c:	3304      	adds	r3, #4
 801223e:	e00b      	b.n	8012258 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012240:	7bbb      	ldrb	r3, [r7, #14]
 8012242:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012246:	4613      	mov	r3, r2
 8012248:	009b      	lsls	r3, r3, #2
 801224a:	4413      	add	r3, r2
 801224c:	009b      	lsls	r3, r3, #2
 801224e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012252:	687a      	ldr	r2, [r7, #4]
 8012254:	4413      	add	r3, r2
 8012256:	3304      	adds	r3, #4
 8012258:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	2200      	movs	r2, #0
 801225e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	2202      	movs	r2, #2
 8012264:	4619      	mov	r1, r3
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f000 fc47 	bl	8012afa <USBD_CtlSendData>
              break;
 801226c:	e06a      	b.n	8012344 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801226e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012272:	2b00      	cmp	r3, #0
 8012274:	da11      	bge.n	801229a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012276:	7bbb      	ldrb	r3, [r7, #14]
 8012278:	f003 020f 	and.w	r2, r3, #15
 801227c:	6879      	ldr	r1, [r7, #4]
 801227e:	4613      	mov	r3, r2
 8012280:	009b      	lsls	r3, r3, #2
 8012282:	4413      	add	r3, r2
 8012284:	009b      	lsls	r3, r3, #2
 8012286:	440b      	add	r3, r1
 8012288:	3324      	adds	r3, #36	@ 0x24
 801228a:	881b      	ldrh	r3, [r3, #0]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d117      	bne.n	80122c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012290:	6839      	ldr	r1, [r7, #0]
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f000 fbc0 	bl	8012a18 <USBD_CtlError>
                  break;
 8012298:	e054      	b.n	8012344 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801229a:	7bbb      	ldrb	r3, [r7, #14]
 801229c:	f003 020f 	and.w	r2, r3, #15
 80122a0:	6879      	ldr	r1, [r7, #4]
 80122a2:	4613      	mov	r3, r2
 80122a4:	009b      	lsls	r3, r3, #2
 80122a6:	4413      	add	r3, r2
 80122a8:	009b      	lsls	r3, r3, #2
 80122aa:	440b      	add	r3, r1
 80122ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80122b0:	881b      	ldrh	r3, [r3, #0]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d104      	bne.n	80122c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80122b6:	6839      	ldr	r1, [r7, #0]
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 fbad 	bl	8012a18 <USBD_CtlError>
                  break;
 80122be:	e041      	b.n	8012344 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80122c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	da0b      	bge.n	80122e0 <USBD_StdEPReq+0x23e>
 80122c8:	7bbb      	ldrb	r3, [r7, #14]
 80122ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80122ce:	4613      	mov	r3, r2
 80122d0:	009b      	lsls	r3, r3, #2
 80122d2:	4413      	add	r3, r2
 80122d4:	009b      	lsls	r3, r3, #2
 80122d6:	3310      	adds	r3, #16
 80122d8:	687a      	ldr	r2, [r7, #4]
 80122da:	4413      	add	r3, r2
 80122dc:	3304      	adds	r3, #4
 80122de:	e00b      	b.n	80122f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80122e0:	7bbb      	ldrb	r3, [r7, #14]
 80122e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80122e6:	4613      	mov	r3, r2
 80122e8:	009b      	lsls	r3, r3, #2
 80122ea:	4413      	add	r3, r2
 80122ec:	009b      	lsls	r3, r3, #2
 80122ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80122f2:	687a      	ldr	r2, [r7, #4]
 80122f4:	4413      	add	r3, r2
 80122f6:	3304      	adds	r3, #4
 80122f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80122fa:	7bbb      	ldrb	r3, [r7, #14]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d002      	beq.n	8012306 <USBD_StdEPReq+0x264>
 8012300:	7bbb      	ldrb	r3, [r7, #14]
 8012302:	2b80      	cmp	r3, #128	@ 0x80
 8012304:	d103      	bne.n	801230e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	2200      	movs	r2, #0
 801230a:	601a      	str	r2, [r3, #0]
 801230c:	e00e      	b.n	801232c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801230e:	7bbb      	ldrb	r3, [r7, #14]
 8012310:	4619      	mov	r1, r3
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f004 fd1a 	bl	8016d4c <USBD_LL_IsStallEP>
 8012318:	4603      	mov	r3, r0
 801231a:	2b00      	cmp	r3, #0
 801231c:	d003      	beq.n	8012326 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	2201      	movs	r2, #1
 8012322:	601a      	str	r2, [r3, #0]
 8012324:	e002      	b.n	801232c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	2200      	movs	r2, #0
 801232a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801232c:	68bb      	ldr	r3, [r7, #8]
 801232e:	2202      	movs	r2, #2
 8012330:	4619      	mov	r1, r3
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f000 fbe1 	bl	8012afa <USBD_CtlSendData>
              break;
 8012338:	e004      	b.n	8012344 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801233a:	6839      	ldr	r1, [r7, #0]
 801233c:	6878      	ldr	r0, [r7, #4]
 801233e:	f000 fb6b 	bl	8012a18 <USBD_CtlError>
              break;
 8012342:	bf00      	nop
          }
          break;
 8012344:	e004      	b.n	8012350 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8012346:	6839      	ldr	r1, [r7, #0]
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f000 fb65 	bl	8012a18 <USBD_CtlError>
          break;
 801234e:	bf00      	nop
      }
      break;
 8012350:	e004      	b.n	801235c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8012352:	6839      	ldr	r1, [r7, #0]
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f000 fb5f 	bl	8012a18 <USBD_CtlError>
      break;
 801235a:	bf00      	nop
  }

  return ret;
 801235c:	7bfb      	ldrb	r3, [r7, #15]
}
 801235e:	4618      	mov	r0, r3
 8012360:	3710      	adds	r7, #16
 8012362:	46bd      	mov	sp, r7
 8012364:	bd80      	pop	{r7, pc}
	...

08012368 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b084      	sub	sp, #16
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012372:	2300      	movs	r3, #0
 8012374:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012376:	2300      	movs	r3, #0
 8012378:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801237a:	2300      	movs	r3, #0
 801237c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	885b      	ldrh	r3, [r3, #2]
 8012382:	0a1b      	lsrs	r3, r3, #8
 8012384:	b29b      	uxth	r3, r3
 8012386:	3b01      	subs	r3, #1
 8012388:	2b0e      	cmp	r3, #14
 801238a:	f200 8152 	bhi.w	8012632 <USBD_GetDescriptor+0x2ca>
 801238e:	a201      	add	r2, pc, #4	@ (adr r2, 8012394 <USBD_GetDescriptor+0x2c>)
 8012390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012394:	08012405 	.word	0x08012405
 8012398:	0801241d 	.word	0x0801241d
 801239c:	0801245d 	.word	0x0801245d
 80123a0:	08012633 	.word	0x08012633
 80123a4:	08012633 	.word	0x08012633
 80123a8:	080125d3 	.word	0x080125d3
 80123ac:	080125ff 	.word	0x080125ff
 80123b0:	08012633 	.word	0x08012633
 80123b4:	08012633 	.word	0x08012633
 80123b8:	08012633 	.word	0x08012633
 80123bc:	08012633 	.word	0x08012633
 80123c0:	08012633 	.word	0x08012633
 80123c4:	08012633 	.word	0x08012633
 80123c8:	08012633 	.word	0x08012633
 80123cc:	080123d1 	.word	0x080123d1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80123d6:	69db      	ldr	r3, [r3, #28]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d00b      	beq.n	80123f4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80123e2:	69db      	ldr	r3, [r3, #28]
 80123e4:	687a      	ldr	r2, [r7, #4]
 80123e6:	7c12      	ldrb	r2, [r2, #16]
 80123e8:	f107 0108 	add.w	r1, r7, #8
 80123ec:	4610      	mov	r0, r2
 80123ee:	4798      	blx	r3
 80123f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80123f2:	e126      	b.n	8012642 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80123f4:	6839      	ldr	r1, [r7, #0]
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f000 fb0e 	bl	8012a18 <USBD_CtlError>
        err++;
 80123fc:	7afb      	ldrb	r3, [r7, #11]
 80123fe:	3301      	adds	r3, #1
 8012400:	72fb      	strb	r3, [r7, #11]
      break;
 8012402:	e11e      	b.n	8012642 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	687a      	ldr	r2, [r7, #4]
 801240e:	7c12      	ldrb	r2, [r2, #16]
 8012410:	f107 0108 	add.w	r1, r7, #8
 8012414:	4610      	mov	r0, r2
 8012416:	4798      	blx	r3
 8012418:	60f8      	str	r0, [r7, #12]
      break;
 801241a:	e112      	b.n	8012642 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	7c1b      	ldrb	r3, [r3, #16]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d10d      	bne.n	8012440 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801242a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801242c:	f107 0208 	add.w	r2, r7, #8
 8012430:	4610      	mov	r0, r2
 8012432:	4798      	blx	r3
 8012434:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	3301      	adds	r3, #1
 801243a:	2202      	movs	r2, #2
 801243c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801243e:	e100      	b.n	8012642 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012448:	f107 0208 	add.w	r2, r7, #8
 801244c:	4610      	mov	r0, r2
 801244e:	4798      	blx	r3
 8012450:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	3301      	adds	r3, #1
 8012456:	2202      	movs	r2, #2
 8012458:	701a      	strb	r2, [r3, #0]
      break;
 801245a:	e0f2      	b.n	8012642 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	885b      	ldrh	r3, [r3, #2]
 8012460:	b2db      	uxtb	r3, r3
 8012462:	2b05      	cmp	r3, #5
 8012464:	f200 80ac 	bhi.w	80125c0 <USBD_GetDescriptor+0x258>
 8012468:	a201      	add	r2, pc, #4	@ (adr r2, 8012470 <USBD_GetDescriptor+0x108>)
 801246a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801246e:	bf00      	nop
 8012470:	08012489 	.word	0x08012489
 8012474:	080124bd 	.word	0x080124bd
 8012478:	080124f1 	.word	0x080124f1
 801247c:	08012525 	.word	0x08012525
 8012480:	08012559 	.word	0x08012559
 8012484:	0801258d 	.word	0x0801258d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801248e:	685b      	ldr	r3, [r3, #4]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d00b      	beq.n	80124ac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801249a:	685b      	ldr	r3, [r3, #4]
 801249c:	687a      	ldr	r2, [r7, #4]
 801249e:	7c12      	ldrb	r2, [r2, #16]
 80124a0:	f107 0108 	add.w	r1, r7, #8
 80124a4:	4610      	mov	r0, r2
 80124a6:	4798      	blx	r3
 80124a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80124aa:	e091      	b.n	80125d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80124ac:	6839      	ldr	r1, [r7, #0]
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f000 fab2 	bl	8012a18 <USBD_CtlError>
            err++;
 80124b4:	7afb      	ldrb	r3, [r7, #11]
 80124b6:	3301      	adds	r3, #1
 80124b8:	72fb      	strb	r3, [r7, #11]
          break;
 80124ba:	e089      	b.n	80125d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80124c2:	689b      	ldr	r3, [r3, #8]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d00b      	beq.n	80124e0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80124ce:	689b      	ldr	r3, [r3, #8]
 80124d0:	687a      	ldr	r2, [r7, #4]
 80124d2:	7c12      	ldrb	r2, [r2, #16]
 80124d4:	f107 0108 	add.w	r1, r7, #8
 80124d8:	4610      	mov	r0, r2
 80124da:	4798      	blx	r3
 80124dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80124de:	e077      	b.n	80125d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80124e0:	6839      	ldr	r1, [r7, #0]
 80124e2:	6878      	ldr	r0, [r7, #4]
 80124e4:	f000 fa98 	bl	8012a18 <USBD_CtlError>
            err++;
 80124e8:	7afb      	ldrb	r3, [r7, #11]
 80124ea:	3301      	adds	r3, #1
 80124ec:	72fb      	strb	r3, [r7, #11]
          break;
 80124ee:	e06f      	b.n	80125d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80124f6:	68db      	ldr	r3, [r3, #12]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d00b      	beq.n	8012514 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012502:	68db      	ldr	r3, [r3, #12]
 8012504:	687a      	ldr	r2, [r7, #4]
 8012506:	7c12      	ldrb	r2, [r2, #16]
 8012508:	f107 0108 	add.w	r1, r7, #8
 801250c:	4610      	mov	r0, r2
 801250e:	4798      	blx	r3
 8012510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012512:	e05d      	b.n	80125d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012514:	6839      	ldr	r1, [r7, #0]
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	f000 fa7e 	bl	8012a18 <USBD_CtlError>
            err++;
 801251c:	7afb      	ldrb	r3, [r7, #11]
 801251e:	3301      	adds	r3, #1
 8012520:	72fb      	strb	r3, [r7, #11]
          break;
 8012522:	e055      	b.n	80125d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801252a:	691b      	ldr	r3, [r3, #16]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d00b      	beq.n	8012548 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012536:	691b      	ldr	r3, [r3, #16]
 8012538:	687a      	ldr	r2, [r7, #4]
 801253a:	7c12      	ldrb	r2, [r2, #16]
 801253c:	f107 0108 	add.w	r1, r7, #8
 8012540:	4610      	mov	r0, r2
 8012542:	4798      	blx	r3
 8012544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012546:	e043      	b.n	80125d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012548:	6839      	ldr	r1, [r7, #0]
 801254a:	6878      	ldr	r0, [r7, #4]
 801254c:	f000 fa64 	bl	8012a18 <USBD_CtlError>
            err++;
 8012550:	7afb      	ldrb	r3, [r7, #11]
 8012552:	3301      	adds	r3, #1
 8012554:	72fb      	strb	r3, [r7, #11]
          break;
 8012556:	e03b      	b.n	80125d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801255e:	695b      	ldr	r3, [r3, #20]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d00b      	beq.n	801257c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801256a:	695b      	ldr	r3, [r3, #20]
 801256c:	687a      	ldr	r2, [r7, #4]
 801256e:	7c12      	ldrb	r2, [r2, #16]
 8012570:	f107 0108 	add.w	r1, r7, #8
 8012574:	4610      	mov	r0, r2
 8012576:	4798      	blx	r3
 8012578:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801257a:	e029      	b.n	80125d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801257c:	6839      	ldr	r1, [r7, #0]
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f000 fa4a 	bl	8012a18 <USBD_CtlError>
            err++;
 8012584:	7afb      	ldrb	r3, [r7, #11]
 8012586:	3301      	adds	r3, #1
 8012588:	72fb      	strb	r3, [r7, #11]
          break;
 801258a:	e021      	b.n	80125d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012592:	699b      	ldr	r3, [r3, #24]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d00b      	beq.n	80125b0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801259e:	699b      	ldr	r3, [r3, #24]
 80125a0:	687a      	ldr	r2, [r7, #4]
 80125a2:	7c12      	ldrb	r2, [r2, #16]
 80125a4:	f107 0108 	add.w	r1, r7, #8
 80125a8:	4610      	mov	r0, r2
 80125aa:	4798      	blx	r3
 80125ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80125ae:	e00f      	b.n	80125d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80125b0:	6839      	ldr	r1, [r7, #0]
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f000 fa30 	bl	8012a18 <USBD_CtlError>
            err++;
 80125b8:	7afb      	ldrb	r3, [r7, #11]
 80125ba:	3301      	adds	r3, #1
 80125bc:	72fb      	strb	r3, [r7, #11]
          break;
 80125be:	e007      	b.n	80125d0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80125c0:	6839      	ldr	r1, [r7, #0]
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f000 fa28 	bl	8012a18 <USBD_CtlError>
          err++;
 80125c8:	7afb      	ldrb	r3, [r7, #11]
 80125ca:	3301      	adds	r3, #1
 80125cc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80125ce:	bf00      	nop
      }
      break;
 80125d0:	e037      	b.n	8012642 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	7c1b      	ldrb	r3, [r3, #16]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d109      	bne.n	80125ee <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80125e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80125e2:	f107 0208 	add.w	r2, r7, #8
 80125e6:	4610      	mov	r0, r2
 80125e8:	4798      	blx	r3
 80125ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80125ec:	e029      	b.n	8012642 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80125ee:	6839      	ldr	r1, [r7, #0]
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f000 fa11 	bl	8012a18 <USBD_CtlError>
        err++;
 80125f6:	7afb      	ldrb	r3, [r7, #11]
 80125f8:	3301      	adds	r3, #1
 80125fa:	72fb      	strb	r3, [r7, #11]
      break;
 80125fc:	e021      	b.n	8012642 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	7c1b      	ldrb	r3, [r3, #16]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d10d      	bne.n	8012622 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801260e:	f107 0208 	add.w	r2, r7, #8
 8012612:	4610      	mov	r0, r2
 8012614:	4798      	blx	r3
 8012616:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	3301      	adds	r3, #1
 801261c:	2207      	movs	r2, #7
 801261e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012620:	e00f      	b.n	8012642 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012622:	6839      	ldr	r1, [r7, #0]
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f000 f9f7 	bl	8012a18 <USBD_CtlError>
        err++;
 801262a:	7afb      	ldrb	r3, [r7, #11]
 801262c:	3301      	adds	r3, #1
 801262e:	72fb      	strb	r3, [r7, #11]
      break;
 8012630:	e007      	b.n	8012642 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012632:	6839      	ldr	r1, [r7, #0]
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f000 f9ef 	bl	8012a18 <USBD_CtlError>
      err++;
 801263a:	7afb      	ldrb	r3, [r7, #11]
 801263c:	3301      	adds	r3, #1
 801263e:	72fb      	strb	r3, [r7, #11]
      break;
 8012640:	bf00      	nop
  }

  if (err != 0U)
 8012642:	7afb      	ldrb	r3, [r7, #11]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d11e      	bne.n	8012686 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	88db      	ldrh	r3, [r3, #6]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d016      	beq.n	801267e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012650:	893b      	ldrh	r3, [r7, #8]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d00e      	beq.n	8012674 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	88da      	ldrh	r2, [r3, #6]
 801265a:	893b      	ldrh	r3, [r7, #8]
 801265c:	4293      	cmp	r3, r2
 801265e:	bf28      	it	cs
 8012660:	4613      	movcs	r3, r2
 8012662:	b29b      	uxth	r3, r3
 8012664:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012666:	893b      	ldrh	r3, [r7, #8]
 8012668:	461a      	mov	r2, r3
 801266a:	68f9      	ldr	r1, [r7, #12]
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	f000 fa44 	bl	8012afa <USBD_CtlSendData>
 8012672:	e009      	b.n	8012688 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012674:	6839      	ldr	r1, [r7, #0]
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f000 f9ce 	bl	8012a18 <USBD_CtlError>
 801267c:	e004      	b.n	8012688 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801267e:	6878      	ldr	r0, [r7, #4]
 8012680:	f000 fa95 	bl	8012bae <USBD_CtlSendStatus>
 8012684:	e000      	b.n	8012688 <USBD_GetDescriptor+0x320>
    return;
 8012686:	bf00      	nop
  }
}
 8012688:	3710      	adds	r7, #16
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}
 801268e:	bf00      	nop

08012690 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b084      	sub	sp, #16
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
 8012698:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801269a:	683b      	ldr	r3, [r7, #0]
 801269c:	889b      	ldrh	r3, [r3, #4]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d131      	bne.n	8012706 <USBD_SetAddress+0x76>
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	88db      	ldrh	r3, [r3, #6]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d12d      	bne.n	8012706 <USBD_SetAddress+0x76>
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	885b      	ldrh	r3, [r3, #2]
 80126ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80126b0:	d829      	bhi.n	8012706 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	885b      	ldrh	r3, [r3, #2]
 80126b6:	b2db      	uxtb	r3, r3
 80126b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80126bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80126c4:	b2db      	uxtb	r3, r3
 80126c6:	2b03      	cmp	r3, #3
 80126c8:	d104      	bne.n	80126d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80126ca:	6839      	ldr	r1, [r7, #0]
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f000 f9a3 	bl	8012a18 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80126d2:	e01d      	b.n	8012710 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	7bfa      	ldrb	r2, [r7, #15]
 80126d8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80126dc:	7bfb      	ldrb	r3, [r7, #15]
 80126de:	4619      	mov	r1, r3
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f004 fb5f 	bl	8016da4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80126e6:	6878      	ldr	r0, [r7, #4]
 80126e8:	f000 fa61 	bl	8012bae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80126ec:	7bfb      	ldrb	r3, [r7, #15]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d004      	beq.n	80126fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	2202      	movs	r2, #2
 80126f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80126fa:	e009      	b.n	8012710 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	2201      	movs	r2, #1
 8012700:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012704:	e004      	b.n	8012710 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012706:	6839      	ldr	r1, [r7, #0]
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f000 f985 	bl	8012a18 <USBD_CtlError>
  }
}
 801270e:	bf00      	nop
 8012710:	bf00      	nop
 8012712:	3710      	adds	r7, #16
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}

08012718 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b084      	sub	sp, #16
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012722:	2300      	movs	r3, #0
 8012724:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	885b      	ldrh	r3, [r3, #2]
 801272a:	b2da      	uxtb	r2, r3
 801272c:	4b4c      	ldr	r3, [pc, #304]	@ (8012860 <USBD_SetConfig+0x148>)
 801272e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012730:	4b4b      	ldr	r3, [pc, #300]	@ (8012860 <USBD_SetConfig+0x148>)
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	2b01      	cmp	r3, #1
 8012736:	d905      	bls.n	8012744 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012738:	6839      	ldr	r1, [r7, #0]
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f000 f96c 	bl	8012a18 <USBD_CtlError>
    return USBD_FAIL;
 8012740:	2303      	movs	r3, #3
 8012742:	e088      	b.n	8012856 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801274a:	b2db      	uxtb	r3, r3
 801274c:	2b02      	cmp	r3, #2
 801274e:	d002      	beq.n	8012756 <USBD_SetConfig+0x3e>
 8012750:	2b03      	cmp	r3, #3
 8012752:	d025      	beq.n	80127a0 <USBD_SetConfig+0x88>
 8012754:	e071      	b.n	801283a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012756:	4b42      	ldr	r3, [pc, #264]	@ (8012860 <USBD_SetConfig+0x148>)
 8012758:	781b      	ldrb	r3, [r3, #0]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d01c      	beq.n	8012798 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801275e:	4b40      	ldr	r3, [pc, #256]	@ (8012860 <USBD_SetConfig+0x148>)
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	461a      	mov	r2, r3
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012768:	4b3d      	ldr	r3, [pc, #244]	@ (8012860 <USBD_SetConfig+0x148>)
 801276a:	781b      	ldrb	r3, [r3, #0]
 801276c:	4619      	mov	r1, r3
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	f7ff f992 	bl	8011a98 <USBD_SetClassConfig>
 8012774:	4603      	mov	r3, r0
 8012776:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012778:	7bfb      	ldrb	r3, [r7, #15]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d004      	beq.n	8012788 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801277e:	6839      	ldr	r1, [r7, #0]
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f000 f949 	bl	8012a18 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012786:	e065      	b.n	8012854 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f000 fa10 	bl	8012bae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2203      	movs	r2, #3
 8012792:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012796:	e05d      	b.n	8012854 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f000 fa08 	bl	8012bae <USBD_CtlSendStatus>
      break;
 801279e:	e059      	b.n	8012854 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80127a0:	4b2f      	ldr	r3, [pc, #188]	@ (8012860 <USBD_SetConfig+0x148>)
 80127a2:	781b      	ldrb	r3, [r3, #0]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d112      	bne.n	80127ce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2202      	movs	r2, #2
 80127ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80127b0:	4b2b      	ldr	r3, [pc, #172]	@ (8012860 <USBD_SetConfig+0x148>)
 80127b2:	781b      	ldrb	r3, [r3, #0]
 80127b4:	461a      	mov	r2, r3
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80127ba:	4b29      	ldr	r3, [pc, #164]	@ (8012860 <USBD_SetConfig+0x148>)
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	4619      	mov	r1, r3
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f7ff f985 	bl	8011ad0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f000 f9f1 	bl	8012bae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80127cc:	e042      	b.n	8012854 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80127ce:	4b24      	ldr	r3, [pc, #144]	@ (8012860 <USBD_SetConfig+0x148>)
 80127d0:	781b      	ldrb	r3, [r3, #0]
 80127d2:	461a      	mov	r2, r3
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	685b      	ldr	r3, [r3, #4]
 80127d8:	429a      	cmp	r2, r3
 80127da:	d02a      	beq.n	8012832 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	685b      	ldr	r3, [r3, #4]
 80127e0:	b2db      	uxtb	r3, r3
 80127e2:	4619      	mov	r1, r3
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	f7ff f973 	bl	8011ad0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80127ea:	4b1d      	ldr	r3, [pc, #116]	@ (8012860 <USBD_SetConfig+0x148>)
 80127ec:	781b      	ldrb	r3, [r3, #0]
 80127ee:	461a      	mov	r2, r3
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80127f4:	4b1a      	ldr	r3, [pc, #104]	@ (8012860 <USBD_SetConfig+0x148>)
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	4619      	mov	r1, r3
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f7ff f94c 	bl	8011a98 <USBD_SetClassConfig>
 8012800:	4603      	mov	r3, r0
 8012802:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012804:	7bfb      	ldrb	r3, [r7, #15]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d00f      	beq.n	801282a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801280a:	6839      	ldr	r1, [r7, #0]
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f000 f903 	bl	8012a18 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	685b      	ldr	r3, [r3, #4]
 8012816:	b2db      	uxtb	r3, r3
 8012818:	4619      	mov	r1, r3
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f7ff f958 	bl	8011ad0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	2202      	movs	r2, #2
 8012824:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012828:	e014      	b.n	8012854 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801282a:	6878      	ldr	r0, [r7, #4]
 801282c:	f000 f9bf 	bl	8012bae <USBD_CtlSendStatus>
      break;
 8012830:	e010      	b.n	8012854 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f000 f9bb 	bl	8012bae <USBD_CtlSendStatus>
      break;
 8012838:	e00c      	b.n	8012854 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801283a:	6839      	ldr	r1, [r7, #0]
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f000 f8eb 	bl	8012a18 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012842:	4b07      	ldr	r3, [pc, #28]	@ (8012860 <USBD_SetConfig+0x148>)
 8012844:	781b      	ldrb	r3, [r3, #0]
 8012846:	4619      	mov	r1, r3
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f7ff f941 	bl	8011ad0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801284e:	2303      	movs	r3, #3
 8012850:	73fb      	strb	r3, [r7, #15]
      break;
 8012852:	bf00      	nop
  }

  return ret;
 8012854:	7bfb      	ldrb	r3, [r7, #15]
}
 8012856:	4618      	mov	r0, r3
 8012858:	3710      	adds	r7, #16
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}
 801285e:	bf00      	nop
 8012860:	200005c9 	.word	0x200005c9

08012864 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b082      	sub	sp, #8
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	88db      	ldrh	r3, [r3, #6]
 8012872:	2b01      	cmp	r3, #1
 8012874:	d004      	beq.n	8012880 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012876:	6839      	ldr	r1, [r7, #0]
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f000 f8cd 	bl	8012a18 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801287e:	e023      	b.n	80128c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012886:	b2db      	uxtb	r3, r3
 8012888:	2b02      	cmp	r3, #2
 801288a:	dc02      	bgt.n	8012892 <USBD_GetConfig+0x2e>
 801288c:	2b00      	cmp	r3, #0
 801288e:	dc03      	bgt.n	8012898 <USBD_GetConfig+0x34>
 8012890:	e015      	b.n	80128be <USBD_GetConfig+0x5a>
 8012892:	2b03      	cmp	r3, #3
 8012894:	d00b      	beq.n	80128ae <USBD_GetConfig+0x4a>
 8012896:	e012      	b.n	80128be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2200      	movs	r2, #0
 801289c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	3308      	adds	r3, #8
 80128a2:	2201      	movs	r2, #1
 80128a4:	4619      	mov	r1, r3
 80128a6:	6878      	ldr	r0, [r7, #4]
 80128a8:	f000 f927 	bl	8012afa <USBD_CtlSendData>
        break;
 80128ac:	e00c      	b.n	80128c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	3304      	adds	r3, #4
 80128b2:	2201      	movs	r2, #1
 80128b4:	4619      	mov	r1, r3
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f000 f91f 	bl	8012afa <USBD_CtlSendData>
        break;
 80128bc:	e004      	b.n	80128c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80128be:	6839      	ldr	r1, [r7, #0]
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f000 f8a9 	bl	8012a18 <USBD_CtlError>
        break;
 80128c6:	bf00      	nop
}
 80128c8:	bf00      	nop
 80128ca:	3708      	adds	r7, #8
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}

080128d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
 80128d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80128e0:	b2db      	uxtb	r3, r3
 80128e2:	3b01      	subs	r3, #1
 80128e4:	2b02      	cmp	r3, #2
 80128e6:	d81e      	bhi.n	8012926 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	88db      	ldrh	r3, [r3, #6]
 80128ec:	2b02      	cmp	r3, #2
 80128ee:	d004      	beq.n	80128fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80128f0:	6839      	ldr	r1, [r7, #0]
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f000 f890 	bl	8012a18 <USBD_CtlError>
        break;
 80128f8:	e01a      	b.n	8012930 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2201      	movs	r2, #1
 80128fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8012906:	2b00      	cmp	r3, #0
 8012908:	d005      	beq.n	8012916 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	68db      	ldr	r3, [r3, #12]
 801290e:	f043 0202 	orr.w	r2, r3, #2
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	330c      	adds	r3, #12
 801291a:	2202      	movs	r2, #2
 801291c:	4619      	mov	r1, r3
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f000 f8eb 	bl	8012afa <USBD_CtlSendData>
      break;
 8012924:	e004      	b.n	8012930 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012926:	6839      	ldr	r1, [r7, #0]
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f000 f875 	bl	8012a18 <USBD_CtlError>
      break;
 801292e:	bf00      	nop
  }
}
 8012930:	bf00      	nop
 8012932:	3708      	adds	r7, #8
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}

08012938 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b082      	sub	sp, #8
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
 8012940:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012942:	683b      	ldr	r3, [r7, #0]
 8012944:	885b      	ldrh	r3, [r3, #2]
 8012946:	2b01      	cmp	r3, #1
 8012948:	d106      	bne.n	8012958 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	2201      	movs	r2, #1
 801294e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f000 f92b 	bl	8012bae <USBD_CtlSendStatus>
  }
}
 8012958:	bf00      	nop
 801295a:	3708      	adds	r7, #8
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}

08012960 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b082      	sub	sp, #8
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012970:	b2db      	uxtb	r3, r3
 8012972:	3b01      	subs	r3, #1
 8012974:	2b02      	cmp	r3, #2
 8012976:	d80b      	bhi.n	8012990 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012978:	683b      	ldr	r3, [r7, #0]
 801297a:	885b      	ldrh	r3, [r3, #2]
 801297c:	2b01      	cmp	r3, #1
 801297e:	d10c      	bne.n	801299a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2200      	movs	r2, #0
 8012984:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f000 f910 	bl	8012bae <USBD_CtlSendStatus>
      }
      break;
 801298e:	e004      	b.n	801299a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012990:	6839      	ldr	r1, [r7, #0]
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f000 f840 	bl	8012a18 <USBD_CtlError>
      break;
 8012998:	e000      	b.n	801299c <USBD_ClrFeature+0x3c>
      break;
 801299a:	bf00      	nop
  }
}
 801299c:	bf00      	nop
 801299e:	3708      	adds	r7, #8
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}

080129a4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b084      	sub	sp, #16
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
 80129ac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	781a      	ldrb	r2, [r3, #0]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	3301      	adds	r3, #1
 80129be:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	781a      	ldrb	r2, [r3, #0]
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	3301      	adds	r3, #1
 80129cc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80129ce:	68f8      	ldr	r0, [r7, #12]
 80129d0:	f7ff fa92 	bl	8011ef8 <SWAPBYTE>
 80129d4:	4603      	mov	r3, r0
 80129d6:	461a      	mov	r2, r3
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	3301      	adds	r3, #1
 80129e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	3301      	adds	r3, #1
 80129e6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80129e8:	68f8      	ldr	r0, [r7, #12]
 80129ea:	f7ff fa85 	bl	8011ef8 <SWAPBYTE>
 80129ee:	4603      	mov	r3, r0
 80129f0:	461a      	mov	r2, r3
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	3301      	adds	r3, #1
 80129fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	3301      	adds	r3, #1
 8012a00:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012a02:	68f8      	ldr	r0, [r7, #12]
 8012a04:	f7ff fa78 	bl	8011ef8 <SWAPBYTE>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	461a      	mov	r2, r3
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	80da      	strh	r2, [r3, #6]
}
 8012a10:	bf00      	nop
 8012a12:	3710      	adds	r7, #16
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}

08012a18 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b082      	sub	sp, #8
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
 8012a20:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012a22:	2180      	movs	r1, #128	@ 0x80
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f004 f953 	bl	8016cd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012a2a:	2100      	movs	r1, #0
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f004 f94f 	bl	8016cd0 <USBD_LL_StallEP>
}
 8012a32:	bf00      	nop
 8012a34:	3708      	adds	r7, #8
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}

08012a3a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012a3a:	b580      	push	{r7, lr}
 8012a3c:	b086      	sub	sp, #24
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	60f8      	str	r0, [r7, #12]
 8012a42:	60b9      	str	r1, [r7, #8]
 8012a44:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012a46:	2300      	movs	r3, #0
 8012a48:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d036      	beq.n	8012abe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012a54:	6938      	ldr	r0, [r7, #16]
 8012a56:	f000 f836 	bl	8012ac6 <USBD_GetLen>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	3301      	adds	r3, #1
 8012a5e:	b29b      	uxth	r3, r3
 8012a60:	005b      	lsls	r3, r3, #1
 8012a62:	b29a      	uxth	r2, r3
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012a68:	7dfb      	ldrb	r3, [r7, #23]
 8012a6a:	68ba      	ldr	r2, [r7, #8]
 8012a6c:	4413      	add	r3, r2
 8012a6e:	687a      	ldr	r2, [r7, #4]
 8012a70:	7812      	ldrb	r2, [r2, #0]
 8012a72:	701a      	strb	r2, [r3, #0]
  idx++;
 8012a74:	7dfb      	ldrb	r3, [r7, #23]
 8012a76:	3301      	adds	r3, #1
 8012a78:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012a7a:	7dfb      	ldrb	r3, [r7, #23]
 8012a7c:	68ba      	ldr	r2, [r7, #8]
 8012a7e:	4413      	add	r3, r2
 8012a80:	2203      	movs	r2, #3
 8012a82:	701a      	strb	r2, [r3, #0]
  idx++;
 8012a84:	7dfb      	ldrb	r3, [r7, #23]
 8012a86:	3301      	adds	r3, #1
 8012a88:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012a8a:	e013      	b.n	8012ab4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012a8c:	7dfb      	ldrb	r3, [r7, #23]
 8012a8e:	68ba      	ldr	r2, [r7, #8]
 8012a90:	4413      	add	r3, r2
 8012a92:	693a      	ldr	r2, [r7, #16]
 8012a94:	7812      	ldrb	r2, [r2, #0]
 8012a96:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	3301      	adds	r3, #1
 8012a9c:	613b      	str	r3, [r7, #16]
    idx++;
 8012a9e:	7dfb      	ldrb	r3, [r7, #23]
 8012aa0:	3301      	adds	r3, #1
 8012aa2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012aa4:	7dfb      	ldrb	r3, [r7, #23]
 8012aa6:	68ba      	ldr	r2, [r7, #8]
 8012aa8:	4413      	add	r3, r2
 8012aaa:	2200      	movs	r2, #0
 8012aac:	701a      	strb	r2, [r3, #0]
    idx++;
 8012aae:	7dfb      	ldrb	r3, [r7, #23]
 8012ab0:	3301      	adds	r3, #1
 8012ab2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012ab4:	693b      	ldr	r3, [r7, #16]
 8012ab6:	781b      	ldrb	r3, [r3, #0]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d1e7      	bne.n	8012a8c <USBD_GetString+0x52>
 8012abc:	e000      	b.n	8012ac0 <USBD_GetString+0x86>
    return;
 8012abe:	bf00      	nop
  }
}
 8012ac0:	3718      	adds	r7, #24
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}

08012ac6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012ac6:	b480      	push	{r7}
 8012ac8:	b085      	sub	sp, #20
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012ad6:	e005      	b.n	8012ae4 <USBD_GetLen+0x1e>
  {
    len++;
 8012ad8:	7bfb      	ldrb	r3, [r7, #15]
 8012ada:	3301      	adds	r3, #1
 8012adc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	3301      	adds	r3, #1
 8012ae2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012ae4:	68bb      	ldr	r3, [r7, #8]
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d1f5      	bne.n	8012ad8 <USBD_GetLen+0x12>
  }

  return len;
 8012aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3714      	adds	r7, #20
 8012af2:	46bd      	mov	sp, r7
 8012af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af8:	4770      	bx	lr

08012afa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012afa:	b580      	push	{r7, lr}
 8012afc:	b084      	sub	sp, #16
 8012afe:	af00      	add	r7, sp, #0
 8012b00:	60f8      	str	r0, [r7, #12]
 8012b02:	60b9      	str	r1, [r7, #8]
 8012b04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	2202      	movs	r2, #2
 8012b0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	687a      	ldr	r2, [r7, #4]
 8012b12:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	687a      	ldr	r2, [r7, #4]
 8012b18:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	68ba      	ldr	r2, [r7, #8]
 8012b1e:	2100      	movs	r1, #0
 8012b20:	68f8      	ldr	r0, [r7, #12]
 8012b22:	f004 f95e 	bl	8016de2 <USBD_LL_Transmit>

  return USBD_OK;
 8012b26:	2300      	movs	r3, #0
}
 8012b28:	4618      	mov	r0, r3
 8012b2a:	3710      	adds	r7, #16
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}

08012b30 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b084      	sub	sp, #16
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	60f8      	str	r0, [r7, #12]
 8012b38:	60b9      	str	r1, [r7, #8]
 8012b3a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	68ba      	ldr	r2, [r7, #8]
 8012b40:	2100      	movs	r1, #0
 8012b42:	68f8      	ldr	r0, [r7, #12]
 8012b44:	f004 f94d 	bl	8016de2 <USBD_LL_Transmit>

  return USBD_OK;
 8012b48:	2300      	movs	r3, #0
}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3710      	adds	r7, #16
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}

08012b52 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012b52:	b580      	push	{r7, lr}
 8012b54:	b084      	sub	sp, #16
 8012b56:	af00      	add	r7, sp, #0
 8012b58:	60f8      	str	r0, [r7, #12]
 8012b5a:	60b9      	str	r1, [r7, #8]
 8012b5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	2203      	movs	r2, #3
 8012b62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	687a      	ldr	r2, [r7, #4]
 8012b6a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	687a      	ldr	r2, [r7, #4]
 8012b72:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	68ba      	ldr	r2, [r7, #8]
 8012b7a:	2100      	movs	r1, #0
 8012b7c:	68f8      	ldr	r0, [r7, #12]
 8012b7e:	f004 f951 	bl	8016e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012b82:	2300      	movs	r3, #0
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	3710      	adds	r7, #16
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}

08012b8c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b084      	sub	sp, #16
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	60f8      	str	r0, [r7, #12]
 8012b94:	60b9      	str	r1, [r7, #8]
 8012b96:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	68ba      	ldr	r2, [r7, #8]
 8012b9c:	2100      	movs	r1, #0
 8012b9e:	68f8      	ldr	r0, [r7, #12]
 8012ba0:	f004 f940 	bl	8016e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012ba4:	2300      	movs	r3, #0
}
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	3710      	adds	r7, #16
 8012baa:	46bd      	mov	sp, r7
 8012bac:	bd80      	pop	{r7, pc}

08012bae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012bae:	b580      	push	{r7, lr}
 8012bb0:	b082      	sub	sp, #8
 8012bb2:	af00      	add	r7, sp, #0
 8012bb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2204      	movs	r2, #4
 8012bba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	2100      	movs	r1, #0
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f004 f90c 	bl	8016de2 <USBD_LL_Transmit>

  return USBD_OK;
 8012bca:	2300      	movs	r3, #0
}
 8012bcc:	4618      	mov	r0, r3
 8012bce:	3708      	adds	r7, #8
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	bd80      	pop	{r7, pc}

08012bd4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b082      	sub	sp, #8
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2205      	movs	r2, #5
 8012be0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012be4:	2300      	movs	r3, #0
 8012be6:	2200      	movs	r2, #0
 8012be8:	2100      	movs	r1, #0
 8012bea:	6878      	ldr	r0, [r7, #4]
 8012bec:	f004 f91a 	bl	8016e24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012bf0:	2300      	movs	r3, #0
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	3708      	adds	r7, #8
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}
	...

08012bfc <__NVIC_SetPriority>:
{
 8012bfc:	b480      	push	{r7}
 8012bfe:	b083      	sub	sp, #12
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	4603      	mov	r3, r0
 8012c04:	6039      	str	r1, [r7, #0]
 8012c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	db0a      	blt.n	8012c26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	b2da      	uxtb	r2, r3
 8012c14:	490c      	ldr	r1, [pc, #48]	@ (8012c48 <__NVIC_SetPriority+0x4c>)
 8012c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c1a:	0112      	lsls	r2, r2, #4
 8012c1c:	b2d2      	uxtb	r2, r2
 8012c1e:	440b      	add	r3, r1
 8012c20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8012c24:	e00a      	b.n	8012c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	b2da      	uxtb	r2, r3
 8012c2a:	4908      	ldr	r1, [pc, #32]	@ (8012c4c <__NVIC_SetPriority+0x50>)
 8012c2c:	79fb      	ldrb	r3, [r7, #7]
 8012c2e:	f003 030f 	and.w	r3, r3, #15
 8012c32:	3b04      	subs	r3, #4
 8012c34:	0112      	lsls	r2, r2, #4
 8012c36:	b2d2      	uxtb	r2, r2
 8012c38:	440b      	add	r3, r1
 8012c3a:	761a      	strb	r2, [r3, #24]
}
 8012c3c:	bf00      	nop
 8012c3e:	370c      	adds	r7, #12
 8012c40:	46bd      	mov	sp, r7
 8012c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c46:	4770      	bx	lr
 8012c48:	e000e100 	.word	0xe000e100
 8012c4c:	e000ed00 	.word	0xe000ed00

08012c50 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012c50:	b580      	push	{r7, lr}
 8012c52:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012c54:	4b05      	ldr	r3, [pc, #20]	@ (8012c6c <SysTick_Handler+0x1c>)
 8012c56:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012c58:	f002 f83e 	bl	8014cd8 <xTaskGetSchedulerState>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	2b01      	cmp	r3, #1
 8012c60:	d001      	beq.n	8012c66 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012c62:	f002 fe39 	bl	80158d8 <xPortSysTickHandler>
  }
}
 8012c66:	bf00      	nop
 8012c68:	bd80      	pop	{r7, pc}
 8012c6a:	bf00      	nop
 8012c6c:	e000e010 	.word	0xe000e010

08012c70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012c70:	b580      	push	{r7, lr}
 8012c72:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012c74:	2100      	movs	r1, #0
 8012c76:	f06f 0004 	mvn.w	r0, #4
 8012c7a:	f7ff ffbf 	bl	8012bfc <__NVIC_SetPriority>
#endif
}
 8012c7e:	bf00      	nop
 8012c80:	bd80      	pop	{r7, pc}
	...

08012c84 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012c84:	b480      	push	{r7}
 8012c86:	b083      	sub	sp, #12
 8012c88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c8a:	f3ef 8305 	mrs	r3, IPSR
 8012c8e:	603b      	str	r3, [r7, #0]
  return(result);
 8012c90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d003      	beq.n	8012c9e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012c96:	f06f 0305 	mvn.w	r3, #5
 8012c9a:	607b      	str	r3, [r7, #4]
 8012c9c:	e00c      	b.n	8012cb8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8012cc8 <osKernelInitialize+0x44>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d105      	bne.n	8012cb2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012ca6:	4b08      	ldr	r3, [pc, #32]	@ (8012cc8 <osKernelInitialize+0x44>)
 8012ca8:	2201      	movs	r2, #1
 8012caa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012cac:	2300      	movs	r3, #0
 8012cae:	607b      	str	r3, [r7, #4]
 8012cb0:	e002      	b.n	8012cb8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012cb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012cb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012cb8:	687b      	ldr	r3, [r7, #4]
}
 8012cba:	4618      	mov	r0, r3
 8012cbc:	370c      	adds	r7, #12
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc4:	4770      	bx	lr
 8012cc6:	bf00      	nop
 8012cc8:	200005cc 	.word	0x200005cc

08012ccc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b082      	sub	sp, #8
 8012cd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012cd2:	f3ef 8305 	mrs	r3, IPSR
 8012cd6:	603b      	str	r3, [r7, #0]
  return(result);
 8012cd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d003      	beq.n	8012ce6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8012cde:	f06f 0305 	mvn.w	r3, #5
 8012ce2:	607b      	str	r3, [r7, #4]
 8012ce4:	e010      	b.n	8012d08 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8012d14 <osKernelStart+0x48>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	2b01      	cmp	r3, #1
 8012cec:	d109      	bne.n	8012d02 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012cee:	f7ff ffbf 	bl	8012c70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012cf2:	4b08      	ldr	r3, [pc, #32]	@ (8012d14 <osKernelStart+0x48>)
 8012cf4:	2202      	movs	r2, #2
 8012cf6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012cf8:	f001 fb8a 	bl	8014410 <vTaskStartScheduler>
      stat = osOK;
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	607b      	str	r3, [r7, #4]
 8012d00:	e002      	b.n	8012d08 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012d02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012d06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012d08:	687b      	ldr	r3, [r7, #4]
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3708      	adds	r7, #8
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}
 8012d12:	bf00      	nop
 8012d14:	200005cc 	.word	0x200005cc

08012d18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b08e      	sub	sp, #56	@ 0x38
 8012d1c:	af04      	add	r7, sp, #16
 8012d1e:	60f8      	str	r0, [r7, #12]
 8012d20:	60b9      	str	r1, [r7, #8]
 8012d22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012d24:	2300      	movs	r3, #0
 8012d26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d28:	f3ef 8305 	mrs	r3, IPSR
 8012d2c:	617b      	str	r3, [r7, #20]
  return(result);
 8012d2e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d17e      	bne.n	8012e32 <osThreadNew+0x11a>
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d07b      	beq.n	8012e32 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012d3a:	2380      	movs	r3, #128	@ 0x80
 8012d3c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012d3e:	2318      	movs	r3, #24
 8012d40:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012d42:	2300      	movs	r3, #0
 8012d44:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8012d46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012d4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d045      	beq.n	8012dde <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d002      	beq.n	8012d60 <osThreadNew+0x48>
        name = attr->name;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	699b      	ldr	r3, [r3, #24]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d002      	beq.n	8012d6e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	699b      	ldr	r3, [r3, #24]
 8012d6c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012d6e:	69fb      	ldr	r3, [r7, #28]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d008      	beq.n	8012d86 <osThreadNew+0x6e>
 8012d74:	69fb      	ldr	r3, [r7, #28]
 8012d76:	2b38      	cmp	r3, #56	@ 0x38
 8012d78:	d805      	bhi.n	8012d86 <osThreadNew+0x6e>
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	685b      	ldr	r3, [r3, #4]
 8012d7e:	f003 0301 	and.w	r3, r3, #1
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d001      	beq.n	8012d8a <osThreadNew+0x72>
        return (NULL);
 8012d86:	2300      	movs	r3, #0
 8012d88:	e054      	b.n	8012e34 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	695b      	ldr	r3, [r3, #20]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d003      	beq.n	8012d9a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	695b      	ldr	r3, [r3, #20]
 8012d96:	089b      	lsrs	r3, r3, #2
 8012d98:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	689b      	ldr	r3, [r3, #8]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d00e      	beq.n	8012dc0 <osThreadNew+0xa8>
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	68db      	ldr	r3, [r3, #12]
 8012da6:	2ba7      	cmp	r3, #167	@ 0xa7
 8012da8:	d90a      	bls.n	8012dc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d006      	beq.n	8012dc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	695b      	ldr	r3, [r3, #20]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d002      	beq.n	8012dc0 <osThreadNew+0xa8>
        mem = 1;
 8012dba:	2301      	movs	r3, #1
 8012dbc:	61bb      	str	r3, [r7, #24]
 8012dbe:	e010      	b.n	8012de2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	689b      	ldr	r3, [r3, #8]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d10c      	bne.n	8012de2 <osThreadNew+0xca>
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	68db      	ldr	r3, [r3, #12]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d108      	bne.n	8012de2 <osThreadNew+0xca>
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	691b      	ldr	r3, [r3, #16]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d104      	bne.n	8012de2 <osThreadNew+0xca>
          mem = 0;
 8012dd8:	2300      	movs	r3, #0
 8012dda:	61bb      	str	r3, [r7, #24]
 8012ddc:	e001      	b.n	8012de2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012dde:	2300      	movs	r3, #0
 8012de0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012de2:	69bb      	ldr	r3, [r7, #24]
 8012de4:	2b01      	cmp	r3, #1
 8012de6:	d110      	bne.n	8012e0a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012dec:	687a      	ldr	r2, [r7, #4]
 8012dee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012df0:	9202      	str	r2, [sp, #8]
 8012df2:	9301      	str	r3, [sp, #4]
 8012df4:	69fb      	ldr	r3, [r7, #28]
 8012df6:	9300      	str	r3, [sp, #0]
 8012df8:	68bb      	ldr	r3, [r7, #8]
 8012dfa:	6a3a      	ldr	r2, [r7, #32]
 8012dfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012dfe:	68f8      	ldr	r0, [r7, #12]
 8012e00:	f001 f836 	bl	8013e70 <xTaskCreateStatic>
 8012e04:	4603      	mov	r3, r0
 8012e06:	613b      	str	r3, [r7, #16]
 8012e08:	e013      	b.n	8012e32 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012e0a:	69bb      	ldr	r3, [r7, #24]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d110      	bne.n	8012e32 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012e10:	6a3b      	ldr	r3, [r7, #32]
 8012e12:	b29a      	uxth	r2, r3
 8012e14:	f107 0310 	add.w	r3, r7, #16
 8012e18:	9301      	str	r3, [sp, #4]
 8012e1a:	69fb      	ldr	r3, [r7, #28]
 8012e1c:	9300      	str	r3, [sp, #0]
 8012e1e:	68bb      	ldr	r3, [r7, #8]
 8012e20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012e22:	68f8      	ldr	r0, [r7, #12]
 8012e24:	f001 f884 	bl	8013f30 <xTaskCreate>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	2b01      	cmp	r3, #1
 8012e2c:	d001      	beq.n	8012e32 <osThreadNew+0x11a>
            hTask = NULL;
 8012e2e:	2300      	movs	r3, #0
 8012e30:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012e32:	693b      	ldr	r3, [r7, #16]
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	3728      	adds	r7, #40	@ 0x28
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}

08012e3c <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b086      	sub	sp, #24
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e48:	f3ef 8305 	mrs	r3, IPSR
 8012e4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8012e4e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d003      	beq.n	8012e5c <osThreadTerminate+0x20>
    stat = osErrorISR;
 8012e54:	f06f 0305 	mvn.w	r3, #5
 8012e58:	617b      	str	r3, [r7, #20]
 8012e5a:	e017      	b.n	8012e8c <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d103      	bne.n	8012e6a <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8012e62:	f06f 0303 	mvn.w	r3, #3
 8012e66:	617b      	str	r3, [r7, #20]
 8012e68:	e010      	b.n	8012e8c <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8012e6a:	6938      	ldr	r0, [r7, #16]
 8012e6c:	f001 fa68 	bl	8014340 <eTaskGetState>
 8012e70:	4603      	mov	r3, r0
 8012e72:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8012e74:	7bfb      	ldrb	r3, [r7, #15]
 8012e76:	2b04      	cmp	r3, #4
 8012e78:	d005      	beq.n	8012e86 <osThreadTerminate+0x4a>
      stat = osOK;
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8012e7e:	6938      	ldr	r0, [r7, #16]
 8012e80:	f001 f9b4 	bl	80141ec <vTaskDelete>
 8012e84:	e002      	b.n	8012e8c <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8012e86:	f06f 0302 	mvn.w	r3, #2
 8012e8a:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8012e8c:	697b      	ldr	r3, [r7, #20]
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3718      	adds	r7, #24
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}

08012e96 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012e96:	b580      	push	{r7, lr}
 8012e98:	b084      	sub	sp, #16
 8012e9a:	af00      	add	r7, sp, #0
 8012e9c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e9e:	f3ef 8305 	mrs	r3, IPSR
 8012ea2:	60bb      	str	r3, [r7, #8]
  return(result);
 8012ea4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d003      	beq.n	8012eb2 <osDelay+0x1c>
    stat = osErrorISR;
 8012eaa:	f06f 0305 	mvn.w	r3, #5
 8012eae:	60fb      	str	r3, [r7, #12]
 8012eb0:	e007      	b.n	8012ec2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d002      	beq.n	8012ec2 <osDelay+0x2c>
      vTaskDelay(ticks);
 8012ebc:	6878      	ldr	r0, [r7, #4]
 8012ebe:	f001 fa09 	bl	80142d4 <vTaskDelay>
    }
  }

  return (stat);
 8012ec2:	68fb      	ldr	r3, [r7, #12]
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3710      	adds	r7, #16
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}

08012ecc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b08a      	sub	sp, #40	@ 0x28
 8012ed0:	af02      	add	r7, sp, #8
 8012ed2:	60f8      	str	r0, [r7, #12]
 8012ed4:	60b9      	str	r1, [r7, #8]
 8012ed6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012edc:	f3ef 8305 	mrs	r3, IPSR
 8012ee0:	613b      	str	r3, [r7, #16]
  return(result);
 8012ee2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d15f      	bne.n	8012fa8 <osMessageQueueNew+0xdc>
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d05c      	beq.n	8012fa8 <osMessageQueueNew+0xdc>
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d059      	beq.n	8012fa8 <osMessageQueueNew+0xdc>
    mem = -1;
 8012ef4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012ef8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d029      	beq.n	8012f54 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	689b      	ldr	r3, [r3, #8]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d012      	beq.n	8012f2e <osMessageQueueNew+0x62>
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	68db      	ldr	r3, [r3, #12]
 8012f0c:	2b4f      	cmp	r3, #79	@ 0x4f
 8012f0e:	d90e      	bls.n	8012f2e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d00a      	beq.n	8012f2e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	695a      	ldr	r2, [r3, #20]
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	68b9      	ldr	r1, [r7, #8]
 8012f20:	fb01 f303 	mul.w	r3, r1, r3
 8012f24:	429a      	cmp	r2, r3
 8012f26:	d302      	bcc.n	8012f2e <osMessageQueueNew+0x62>
        mem = 1;
 8012f28:	2301      	movs	r3, #1
 8012f2a:	61bb      	str	r3, [r7, #24]
 8012f2c:	e014      	b.n	8012f58 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	689b      	ldr	r3, [r3, #8]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d110      	bne.n	8012f58 <osMessageQueueNew+0x8c>
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	68db      	ldr	r3, [r3, #12]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d10c      	bne.n	8012f58 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d108      	bne.n	8012f58 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	695b      	ldr	r3, [r3, #20]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d104      	bne.n	8012f58 <osMessageQueueNew+0x8c>
          mem = 0;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	61bb      	str	r3, [r7, #24]
 8012f52:	e001      	b.n	8012f58 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012f54:	2300      	movs	r3, #0
 8012f56:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012f58:	69bb      	ldr	r3, [r7, #24]
 8012f5a:	2b01      	cmp	r3, #1
 8012f5c:	d10b      	bne.n	8012f76 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	691a      	ldr	r2, [r3, #16]
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	689b      	ldr	r3, [r3, #8]
 8012f66:	2100      	movs	r1, #0
 8012f68:	9100      	str	r1, [sp, #0]
 8012f6a:	68b9      	ldr	r1, [r7, #8]
 8012f6c:	68f8      	ldr	r0, [r7, #12]
 8012f6e:	f000 fa31 	bl	80133d4 <xQueueGenericCreateStatic>
 8012f72:	61f8      	str	r0, [r7, #28]
 8012f74:	e008      	b.n	8012f88 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8012f76:	69bb      	ldr	r3, [r7, #24]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d105      	bne.n	8012f88 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	68b9      	ldr	r1, [r7, #8]
 8012f80:	68f8      	ldr	r0, [r7, #12]
 8012f82:	f000 faa4 	bl	80134ce <xQueueGenericCreate>
 8012f86:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012f88:	69fb      	ldr	r3, [r7, #28]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d00c      	beq.n	8012fa8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d003      	beq.n	8012f9c <osMessageQueueNew+0xd0>
        name = attr->name;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	617b      	str	r3, [r7, #20]
 8012f9a:	e001      	b.n	8012fa0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012fa0:	6979      	ldr	r1, [r7, #20]
 8012fa2:	69f8      	ldr	r0, [r7, #28]
 8012fa4:	f000 ff06 	bl	8013db4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012fa8:	69fb      	ldr	r3, [r7, #28]
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3720      	adds	r7, #32
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}
	...

08012fb4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b088      	sub	sp, #32
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	60f8      	str	r0, [r7, #12]
 8012fbc:	60b9      	str	r1, [r7, #8]
 8012fbe:	603b      	str	r3, [r7, #0]
 8012fc0:	4613      	mov	r3, r2
 8012fc2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012fcc:	f3ef 8305 	mrs	r3, IPSR
 8012fd0:	617b      	str	r3, [r7, #20]
  return(result);
 8012fd2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d028      	beq.n	801302a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012fd8:	69bb      	ldr	r3, [r7, #24]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d005      	beq.n	8012fea <osMessageQueuePut+0x36>
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d002      	beq.n	8012fea <osMessageQueuePut+0x36>
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d003      	beq.n	8012ff2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8012fea:	f06f 0303 	mvn.w	r3, #3
 8012fee:	61fb      	str	r3, [r7, #28]
 8012ff0:	e038      	b.n	8013064 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012ff6:	f107 0210 	add.w	r2, r7, #16
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	68b9      	ldr	r1, [r7, #8]
 8012ffe:	69b8      	ldr	r0, [r7, #24]
 8013000:	f000 fbc6 	bl	8013790 <xQueueGenericSendFromISR>
 8013004:	4603      	mov	r3, r0
 8013006:	2b01      	cmp	r3, #1
 8013008:	d003      	beq.n	8013012 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801300a:	f06f 0302 	mvn.w	r3, #2
 801300e:	61fb      	str	r3, [r7, #28]
 8013010:	e028      	b.n	8013064 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8013012:	693b      	ldr	r3, [r7, #16]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d025      	beq.n	8013064 <osMessageQueuePut+0xb0>
 8013018:	4b15      	ldr	r3, [pc, #84]	@ (8013070 <osMessageQueuePut+0xbc>)
 801301a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801301e:	601a      	str	r2, [r3, #0]
 8013020:	f3bf 8f4f 	dsb	sy
 8013024:	f3bf 8f6f 	isb	sy
 8013028:	e01c      	b.n	8013064 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801302a:	69bb      	ldr	r3, [r7, #24]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d002      	beq.n	8013036 <osMessageQueuePut+0x82>
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d103      	bne.n	801303e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8013036:	f06f 0303 	mvn.w	r3, #3
 801303a:	61fb      	str	r3, [r7, #28]
 801303c:	e012      	b.n	8013064 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801303e:	2300      	movs	r3, #0
 8013040:	683a      	ldr	r2, [r7, #0]
 8013042:	68b9      	ldr	r1, [r7, #8]
 8013044:	69b8      	ldr	r0, [r7, #24]
 8013046:	f000 faa1 	bl	801358c <xQueueGenericSend>
 801304a:	4603      	mov	r3, r0
 801304c:	2b01      	cmp	r3, #1
 801304e:	d009      	beq.n	8013064 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d003      	beq.n	801305e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8013056:	f06f 0301 	mvn.w	r3, #1
 801305a:	61fb      	str	r3, [r7, #28]
 801305c:	e002      	b.n	8013064 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801305e:	f06f 0302 	mvn.w	r3, #2
 8013062:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013064:	69fb      	ldr	r3, [r7, #28]
}
 8013066:	4618      	mov	r0, r3
 8013068:	3720      	adds	r7, #32
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}
 801306e:	bf00      	nop
 8013070:	e000ed04 	.word	0xe000ed04

08013074 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013074:	b580      	push	{r7, lr}
 8013076:	b088      	sub	sp, #32
 8013078:	af00      	add	r7, sp, #0
 801307a:	60f8      	str	r0, [r7, #12]
 801307c:	60b9      	str	r1, [r7, #8]
 801307e:	607a      	str	r2, [r7, #4]
 8013080:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013086:	2300      	movs	r3, #0
 8013088:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801308a:	f3ef 8305 	mrs	r3, IPSR
 801308e:	617b      	str	r3, [r7, #20]
  return(result);
 8013090:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013092:	2b00      	cmp	r3, #0
 8013094:	d028      	beq.n	80130e8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013096:	69bb      	ldr	r3, [r7, #24]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d005      	beq.n	80130a8 <osMessageQueueGet+0x34>
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d002      	beq.n	80130a8 <osMessageQueueGet+0x34>
 80130a2:	683b      	ldr	r3, [r7, #0]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d003      	beq.n	80130b0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80130a8:	f06f 0303 	mvn.w	r3, #3
 80130ac:	61fb      	str	r3, [r7, #28]
 80130ae:	e037      	b.n	8013120 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80130b0:	2300      	movs	r3, #0
 80130b2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80130b4:	f107 0310 	add.w	r3, r7, #16
 80130b8:	461a      	mov	r2, r3
 80130ba:	68b9      	ldr	r1, [r7, #8]
 80130bc:	69b8      	ldr	r0, [r7, #24]
 80130be:	f000 fce7 	bl	8013a90 <xQueueReceiveFromISR>
 80130c2:	4603      	mov	r3, r0
 80130c4:	2b01      	cmp	r3, #1
 80130c6:	d003      	beq.n	80130d0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80130c8:	f06f 0302 	mvn.w	r3, #2
 80130cc:	61fb      	str	r3, [r7, #28]
 80130ce:	e027      	b.n	8013120 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80130d0:	693b      	ldr	r3, [r7, #16]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d024      	beq.n	8013120 <osMessageQueueGet+0xac>
 80130d6:	4b15      	ldr	r3, [pc, #84]	@ (801312c <osMessageQueueGet+0xb8>)
 80130d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80130dc:	601a      	str	r2, [r3, #0]
 80130de:	f3bf 8f4f 	dsb	sy
 80130e2:	f3bf 8f6f 	isb	sy
 80130e6:	e01b      	b.n	8013120 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80130e8:	69bb      	ldr	r3, [r7, #24]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d002      	beq.n	80130f4 <osMessageQueueGet+0x80>
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d103      	bne.n	80130fc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80130f4:	f06f 0303 	mvn.w	r3, #3
 80130f8:	61fb      	str	r3, [r7, #28]
 80130fa:	e011      	b.n	8013120 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80130fc:	683a      	ldr	r2, [r7, #0]
 80130fe:	68b9      	ldr	r1, [r7, #8]
 8013100:	69b8      	ldr	r0, [r7, #24]
 8013102:	f000 fbe3 	bl	80138cc <xQueueReceive>
 8013106:	4603      	mov	r3, r0
 8013108:	2b01      	cmp	r3, #1
 801310a:	d009      	beq.n	8013120 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 801310c:	683b      	ldr	r3, [r7, #0]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d003      	beq.n	801311a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8013112:	f06f 0301 	mvn.w	r3, #1
 8013116:	61fb      	str	r3, [r7, #28]
 8013118:	e002      	b.n	8013120 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801311a:	f06f 0302 	mvn.w	r3, #2
 801311e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013120:	69fb      	ldr	r3, [r7, #28]
}
 8013122:	4618      	mov	r0, r3
 8013124:	3720      	adds	r7, #32
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}
 801312a:	bf00      	nop
 801312c:	e000ed04 	.word	0xe000ed04

08013130 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013130:	b480      	push	{r7}
 8013132:	b085      	sub	sp, #20
 8013134:	af00      	add	r7, sp, #0
 8013136:	60f8      	str	r0, [r7, #12]
 8013138:	60b9      	str	r1, [r7, #8]
 801313a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	4a07      	ldr	r2, [pc, #28]	@ (801315c <vApplicationGetIdleTaskMemory+0x2c>)
 8013140:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	4a06      	ldr	r2, [pc, #24]	@ (8013160 <vApplicationGetIdleTaskMemory+0x30>)
 8013146:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2280      	movs	r2, #128	@ 0x80
 801314c:	601a      	str	r2, [r3, #0]
}
 801314e:	bf00      	nop
 8013150:	3714      	adds	r7, #20
 8013152:	46bd      	mov	sp, r7
 8013154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013158:	4770      	bx	lr
 801315a:	bf00      	nop
 801315c:	200005d0 	.word	0x200005d0
 8013160:	20000678 	.word	0x20000678

08013164 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013164:	b480      	push	{r7}
 8013166:	b085      	sub	sp, #20
 8013168:	af00      	add	r7, sp, #0
 801316a:	60f8      	str	r0, [r7, #12]
 801316c:	60b9      	str	r1, [r7, #8]
 801316e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	4a07      	ldr	r2, [pc, #28]	@ (8013190 <vApplicationGetTimerTaskMemory+0x2c>)
 8013174:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	4a06      	ldr	r2, [pc, #24]	@ (8013194 <vApplicationGetTimerTaskMemory+0x30>)
 801317a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013182:	601a      	str	r2, [r3, #0]
}
 8013184:	bf00      	nop
 8013186:	3714      	adds	r7, #20
 8013188:	46bd      	mov	sp, r7
 801318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318e:	4770      	bx	lr
 8013190:	20000878 	.word	0x20000878
 8013194:	20000920 	.word	0x20000920

08013198 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013198:	b480      	push	{r7}
 801319a:	b083      	sub	sp, #12
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	f103 0208 	add.w	r2, r3, #8
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80131b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f103 0208 	add.w	r2, r3, #8
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	f103 0208 	add.w	r2, r3, #8
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2200      	movs	r2, #0
 80131ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80131cc:	bf00      	nop
 80131ce:	370c      	adds	r7, #12
 80131d0:	46bd      	mov	sp, r7
 80131d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d6:	4770      	bx	lr

080131d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80131d8:	b480      	push	{r7}
 80131da:	b083      	sub	sp, #12
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2200      	movs	r2, #0
 80131e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80131e6:	bf00      	nop
 80131e8:	370c      	adds	r7, #12
 80131ea:	46bd      	mov	sp, r7
 80131ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f0:	4770      	bx	lr

080131f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80131f2:	b480      	push	{r7}
 80131f4:	b085      	sub	sp, #20
 80131f6:	af00      	add	r7, sp, #0
 80131f8:	6078      	str	r0, [r7, #4]
 80131fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	685b      	ldr	r3, [r3, #4]
 8013200:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	68fa      	ldr	r2, [r7, #12]
 8013206:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	689a      	ldr	r2, [r3, #8]
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	689b      	ldr	r3, [r3, #8]
 8013214:	683a      	ldr	r2, [r7, #0]
 8013216:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	683a      	ldr	r2, [r7, #0]
 801321c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	687a      	ldr	r2, [r7, #4]
 8013222:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	1c5a      	adds	r2, r3, #1
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	601a      	str	r2, [r3, #0]
}
 801322e:	bf00      	nop
 8013230:	3714      	adds	r7, #20
 8013232:	46bd      	mov	sp, r7
 8013234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013238:	4770      	bx	lr

0801323a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801323a:	b480      	push	{r7}
 801323c:	b085      	sub	sp, #20
 801323e:	af00      	add	r7, sp, #0
 8013240:	6078      	str	r0, [r7, #4]
 8013242:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013250:	d103      	bne.n	801325a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	691b      	ldr	r3, [r3, #16]
 8013256:	60fb      	str	r3, [r7, #12]
 8013258:	e00c      	b.n	8013274 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	3308      	adds	r3, #8
 801325e:	60fb      	str	r3, [r7, #12]
 8013260:	e002      	b.n	8013268 <vListInsert+0x2e>
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	685b      	ldr	r3, [r3, #4]
 8013266:	60fb      	str	r3, [r7, #12]
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	685b      	ldr	r3, [r3, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	68ba      	ldr	r2, [r7, #8]
 8013270:	429a      	cmp	r2, r3
 8013272:	d2f6      	bcs.n	8013262 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	685a      	ldr	r2, [r3, #4]
 8013278:	683b      	ldr	r3, [r7, #0]
 801327a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	685b      	ldr	r3, [r3, #4]
 8013280:	683a      	ldr	r2, [r7, #0]
 8013282:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	68fa      	ldr	r2, [r7, #12]
 8013288:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	683a      	ldr	r2, [r7, #0]
 801328e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	687a      	ldr	r2, [r7, #4]
 8013294:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	1c5a      	adds	r2, r3, #1
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	601a      	str	r2, [r3, #0]
}
 80132a0:	bf00      	nop
 80132a2:	3714      	adds	r7, #20
 80132a4:	46bd      	mov	sp, r7
 80132a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132aa:	4770      	bx	lr

080132ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80132ac:	b480      	push	{r7}
 80132ae:	b085      	sub	sp, #20
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	691b      	ldr	r3, [r3, #16]
 80132b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	685b      	ldr	r3, [r3, #4]
 80132be:	687a      	ldr	r2, [r7, #4]
 80132c0:	6892      	ldr	r2, [r2, #8]
 80132c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	689b      	ldr	r3, [r3, #8]
 80132c8:	687a      	ldr	r2, [r7, #4]
 80132ca:	6852      	ldr	r2, [r2, #4]
 80132cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	685b      	ldr	r3, [r3, #4]
 80132d2:	687a      	ldr	r2, [r7, #4]
 80132d4:	429a      	cmp	r2, r3
 80132d6:	d103      	bne.n	80132e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	689a      	ldr	r2, [r3, #8]
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	2200      	movs	r2, #0
 80132e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	1e5a      	subs	r2, r3, #1
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	681b      	ldr	r3, [r3, #0]
}
 80132f4:	4618      	mov	r0, r3
 80132f6:	3714      	adds	r7, #20
 80132f8:	46bd      	mov	sp, r7
 80132fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fe:	4770      	bx	lr

08013300 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b084      	sub	sp, #16
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
 8013308:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d10b      	bne.n	801332c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013318:	f383 8811 	msr	BASEPRI, r3
 801331c:	f3bf 8f6f 	isb	sy
 8013320:	f3bf 8f4f 	dsb	sy
 8013324:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013326:	bf00      	nop
 8013328:	bf00      	nop
 801332a:	e7fd      	b.n	8013328 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801332c:	f002 fa44 	bl	80157b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	681a      	ldr	r2, [r3, #0]
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013338:	68f9      	ldr	r1, [r7, #12]
 801333a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801333c:	fb01 f303 	mul.w	r3, r1, r3
 8013340:	441a      	add	r2, r3
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	2200      	movs	r2, #0
 801334a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	681a      	ldr	r2, [r3, #0]
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	681a      	ldr	r2, [r3, #0]
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801335c:	3b01      	subs	r3, #1
 801335e:	68f9      	ldr	r1, [r7, #12]
 8013360:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013362:	fb01 f303 	mul.w	r3, r1, r3
 8013366:	441a      	add	r2, r3
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	22ff      	movs	r2, #255	@ 0xff
 8013370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	22ff      	movs	r2, #255	@ 0xff
 8013378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d114      	bne.n	80133ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	691b      	ldr	r3, [r3, #16]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d01a      	beq.n	80133c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	3310      	adds	r3, #16
 801338e:	4618      	mov	r0, r3
 8013390:	f001 fadc 	bl	801494c <xTaskRemoveFromEventList>
 8013394:	4603      	mov	r3, r0
 8013396:	2b00      	cmp	r3, #0
 8013398:	d012      	beq.n	80133c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801339a:	4b0d      	ldr	r3, [pc, #52]	@ (80133d0 <xQueueGenericReset+0xd0>)
 801339c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80133a0:	601a      	str	r2, [r3, #0]
 80133a2:	f3bf 8f4f 	dsb	sy
 80133a6:	f3bf 8f6f 	isb	sy
 80133aa:	e009      	b.n	80133c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	3310      	adds	r3, #16
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7ff fef1 	bl	8013198 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	3324      	adds	r3, #36	@ 0x24
 80133ba:	4618      	mov	r0, r3
 80133bc:	f7ff feec 	bl	8013198 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80133c0:	f002 fa2c 	bl	801581c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80133c4:	2301      	movs	r3, #1
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	3710      	adds	r7, #16
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bd80      	pop	{r7, pc}
 80133ce:	bf00      	nop
 80133d0:	e000ed04 	.word	0xe000ed04

080133d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b08e      	sub	sp, #56	@ 0x38
 80133d8:	af02      	add	r7, sp, #8
 80133da:	60f8      	str	r0, [r7, #12]
 80133dc:	60b9      	str	r1, [r7, #8]
 80133de:	607a      	str	r2, [r7, #4]
 80133e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d10b      	bne.n	8013400 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80133e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133ec:	f383 8811 	msr	BASEPRI, r3
 80133f0:	f3bf 8f6f 	isb	sy
 80133f4:	f3bf 8f4f 	dsb	sy
 80133f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80133fa:	bf00      	nop
 80133fc:	bf00      	nop
 80133fe:	e7fd      	b.n	80133fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d10b      	bne.n	801341e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8013406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801340a:	f383 8811 	msr	BASEPRI, r3
 801340e:	f3bf 8f6f 	isb	sy
 8013412:	f3bf 8f4f 	dsb	sy
 8013416:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013418:	bf00      	nop
 801341a:	bf00      	nop
 801341c:	e7fd      	b.n	801341a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d002      	beq.n	801342a <xQueueGenericCreateStatic+0x56>
 8013424:	68bb      	ldr	r3, [r7, #8]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d001      	beq.n	801342e <xQueueGenericCreateStatic+0x5a>
 801342a:	2301      	movs	r3, #1
 801342c:	e000      	b.n	8013430 <xQueueGenericCreateStatic+0x5c>
 801342e:	2300      	movs	r3, #0
 8013430:	2b00      	cmp	r3, #0
 8013432:	d10b      	bne.n	801344c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8013434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013438:	f383 8811 	msr	BASEPRI, r3
 801343c:	f3bf 8f6f 	isb	sy
 8013440:	f3bf 8f4f 	dsb	sy
 8013444:	623b      	str	r3, [r7, #32]
}
 8013446:	bf00      	nop
 8013448:	bf00      	nop
 801344a:	e7fd      	b.n	8013448 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d102      	bne.n	8013458 <xQueueGenericCreateStatic+0x84>
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d101      	bne.n	801345c <xQueueGenericCreateStatic+0x88>
 8013458:	2301      	movs	r3, #1
 801345a:	e000      	b.n	801345e <xQueueGenericCreateStatic+0x8a>
 801345c:	2300      	movs	r3, #0
 801345e:	2b00      	cmp	r3, #0
 8013460:	d10b      	bne.n	801347a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8013462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013466:	f383 8811 	msr	BASEPRI, r3
 801346a:	f3bf 8f6f 	isb	sy
 801346e:	f3bf 8f4f 	dsb	sy
 8013472:	61fb      	str	r3, [r7, #28]
}
 8013474:	bf00      	nop
 8013476:	bf00      	nop
 8013478:	e7fd      	b.n	8013476 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801347a:	2350      	movs	r3, #80	@ 0x50
 801347c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801347e:	697b      	ldr	r3, [r7, #20]
 8013480:	2b50      	cmp	r3, #80	@ 0x50
 8013482:	d00b      	beq.n	801349c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8013484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013488:	f383 8811 	msr	BASEPRI, r3
 801348c:	f3bf 8f6f 	isb	sy
 8013490:	f3bf 8f4f 	dsb	sy
 8013494:	61bb      	str	r3, [r7, #24]
}
 8013496:	bf00      	nop
 8013498:	bf00      	nop
 801349a:	e7fd      	b.n	8013498 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801349c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80134a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d00d      	beq.n	80134c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80134a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134aa:	2201      	movs	r2, #1
 80134ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80134b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80134b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134b6:	9300      	str	r3, [sp, #0]
 80134b8:	4613      	mov	r3, r2
 80134ba:	687a      	ldr	r2, [r7, #4]
 80134bc:	68b9      	ldr	r1, [r7, #8]
 80134be:	68f8      	ldr	r0, [r7, #12]
 80134c0:	f000 f840 	bl	8013544 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80134c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80134c6:	4618      	mov	r0, r3
 80134c8:	3730      	adds	r7, #48	@ 0x30
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}

080134ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80134ce:	b580      	push	{r7, lr}
 80134d0:	b08a      	sub	sp, #40	@ 0x28
 80134d2:	af02      	add	r7, sp, #8
 80134d4:	60f8      	str	r0, [r7, #12]
 80134d6:	60b9      	str	r1, [r7, #8]
 80134d8:	4613      	mov	r3, r2
 80134da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d10b      	bne.n	80134fa <xQueueGenericCreate+0x2c>
	__asm volatile
 80134e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134e6:	f383 8811 	msr	BASEPRI, r3
 80134ea:	f3bf 8f6f 	isb	sy
 80134ee:	f3bf 8f4f 	dsb	sy
 80134f2:	613b      	str	r3, [r7, #16]
}
 80134f4:	bf00      	nop
 80134f6:	bf00      	nop
 80134f8:	e7fd      	b.n	80134f6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	68ba      	ldr	r2, [r7, #8]
 80134fe:	fb02 f303 	mul.w	r3, r2, r3
 8013502:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013504:	69fb      	ldr	r3, [r7, #28]
 8013506:	3350      	adds	r3, #80	@ 0x50
 8013508:	4618      	mov	r0, r3
 801350a:	f002 fa77 	bl	80159fc <pvPortMalloc>
 801350e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013510:	69bb      	ldr	r3, [r7, #24]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d011      	beq.n	801353a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013516:	69bb      	ldr	r3, [r7, #24]
 8013518:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801351a:	697b      	ldr	r3, [r7, #20]
 801351c:	3350      	adds	r3, #80	@ 0x50
 801351e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013520:	69bb      	ldr	r3, [r7, #24]
 8013522:	2200      	movs	r2, #0
 8013524:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013528:	79fa      	ldrb	r2, [r7, #7]
 801352a:	69bb      	ldr	r3, [r7, #24]
 801352c:	9300      	str	r3, [sp, #0]
 801352e:	4613      	mov	r3, r2
 8013530:	697a      	ldr	r2, [r7, #20]
 8013532:	68b9      	ldr	r1, [r7, #8]
 8013534:	68f8      	ldr	r0, [r7, #12]
 8013536:	f000 f805 	bl	8013544 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801353a:	69bb      	ldr	r3, [r7, #24]
	}
 801353c:	4618      	mov	r0, r3
 801353e:	3720      	adds	r7, #32
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}

08013544 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b084      	sub	sp, #16
 8013548:	af00      	add	r7, sp, #0
 801354a:	60f8      	str	r0, [r7, #12]
 801354c:	60b9      	str	r1, [r7, #8]
 801354e:	607a      	str	r2, [r7, #4]
 8013550:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013552:	68bb      	ldr	r3, [r7, #8]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d103      	bne.n	8013560 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013558:	69bb      	ldr	r3, [r7, #24]
 801355a:	69ba      	ldr	r2, [r7, #24]
 801355c:	601a      	str	r2, [r3, #0]
 801355e:	e002      	b.n	8013566 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013560:	69bb      	ldr	r3, [r7, #24]
 8013562:	687a      	ldr	r2, [r7, #4]
 8013564:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013566:	69bb      	ldr	r3, [r7, #24]
 8013568:	68fa      	ldr	r2, [r7, #12]
 801356a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801356c:	69bb      	ldr	r3, [r7, #24]
 801356e:	68ba      	ldr	r2, [r7, #8]
 8013570:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013572:	2101      	movs	r1, #1
 8013574:	69b8      	ldr	r0, [r7, #24]
 8013576:	f7ff fec3 	bl	8013300 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801357a:	69bb      	ldr	r3, [r7, #24]
 801357c:	78fa      	ldrb	r2, [r7, #3]
 801357e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013582:	bf00      	nop
 8013584:	3710      	adds	r7, #16
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}
	...

0801358c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b08e      	sub	sp, #56	@ 0x38
 8013590:	af00      	add	r7, sp, #0
 8013592:	60f8      	str	r0, [r7, #12]
 8013594:	60b9      	str	r1, [r7, #8]
 8013596:	607a      	str	r2, [r7, #4]
 8013598:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801359a:	2300      	movs	r3, #0
 801359c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80135a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d10b      	bne.n	80135c0 <xQueueGenericSend+0x34>
	__asm volatile
 80135a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135ac:	f383 8811 	msr	BASEPRI, r3
 80135b0:	f3bf 8f6f 	isb	sy
 80135b4:	f3bf 8f4f 	dsb	sy
 80135b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80135ba:	bf00      	nop
 80135bc:	bf00      	nop
 80135be:	e7fd      	b.n	80135bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d103      	bne.n	80135ce <xQueueGenericSend+0x42>
 80135c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d101      	bne.n	80135d2 <xQueueGenericSend+0x46>
 80135ce:	2301      	movs	r3, #1
 80135d0:	e000      	b.n	80135d4 <xQueueGenericSend+0x48>
 80135d2:	2300      	movs	r3, #0
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d10b      	bne.n	80135f0 <xQueueGenericSend+0x64>
	__asm volatile
 80135d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135dc:	f383 8811 	msr	BASEPRI, r3
 80135e0:	f3bf 8f6f 	isb	sy
 80135e4:	f3bf 8f4f 	dsb	sy
 80135e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80135ea:	bf00      	nop
 80135ec:	bf00      	nop
 80135ee:	e7fd      	b.n	80135ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80135f0:	683b      	ldr	r3, [r7, #0]
 80135f2:	2b02      	cmp	r3, #2
 80135f4:	d103      	bne.n	80135fe <xQueueGenericSend+0x72>
 80135f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80135fa:	2b01      	cmp	r3, #1
 80135fc:	d101      	bne.n	8013602 <xQueueGenericSend+0x76>
 80135fe:	2301      	movs	r3, #1
 8013600:	e000      	b.n	8013604 <xQueueGenericSend+0x78>
 8013602:	2300      	movs	r3, #0
 8013604:	2b00      	cmp	r3, #0
 8013606:	d10b      	bne.n	8013620 <xQueueGenericSend+0x94>
	__asm volatile
 8013608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801360c:	f383 8811 	msr	BASEPRI, r3
 8013610:	f3bf 8f6f 	isb	sy
 8013614:	f3bf 8f4f 	dsb	sy
 8013618:	623b      	str	r3, [r7, #32]
}
 801361a:	bf00      	nop
 801361c:	bf00      	nop
 801361e:	e7fd      	b.n	801361c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013620:	f001 fb5a 	bl	8014cd8 <xTaskGetSchedulerState>
 8013624:	4603      	mov	r3, r0
 8013626:	2b00      	cmp	r3, #0
 8013628:	d102      	bne.n	8013630 <xQueueGenericSend+0xa4>
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d101      	bne.n	8013634 <xQueueGenericSend+0xa8>
 8013630:	2301      	movs	r3, #1
 8013632:	e000      	b.n	8013636 <xQueueGenericSend+0xaa>
 8013634:	2300      	movs	r3, #0
 8013636:	2b00      	cmp	r3, #0
 8013638:	d10b      	bne.n	8013652 <xQueueGenericSend+0xc6>
	__asm volatile
 801363a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801363e:	f383 8811 	msr	BASEPRI, r3
 8013642:	f3bf 8f6f 	isb	sy
 8013646:	f3bf 8f4f 	dsb	sy
 801364a:	61fb      	str	r3, [r7, #28]
}
 801364c:	bf00      	nop
 801364e:	bf00      	nop
 8013650:	e7fd      	b.n	801364e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013652:	f002 f8b1 	bl	80157b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013658:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801365c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801365e:	429a      	cmp	r2, r3
 8013660:	d302      	bcc.n	8013668 <xQueueGenericSend+0xdc>
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	2b02      	cmp	r3, #2
 8013666:	d129      	bne.n	80136bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013668:	683a      	ldr	r2, [r7, #0]
 801366a:	68b9      	ldr	r1, [r7, #8]
 801366c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801366e:	f000 fa91 	bl	8013b94 <prvCopyDataToQueue>
 8013672:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013678:	2b00      	cmp	r3, #0
 801367a:	d010      	beq.n	801369e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801367c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801367e:	3324      	adds	r3, #36	@ 0x24
 8013680:	4618      	mov	r0, r3
 8013682:	f001 f963 	bl	801494c <xTaskRemoveFromEventList>
 8013686:	4603      	mov	r3, r0
 8013688:	2b00      	cmp	r3, #0
 801368a:	d013      	beq.n	80136b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801368c:	4b3f      	ldr	r3, [pc, #252]	@ (801378c <xQueueGenericSend+0x200>)
 801368e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013692:	601a      	str	r2, [r3, #0]
 8013694:	f3bf 8f4f 	dsb	sy
 8013698:	f3bf 8f6f 	isb	sy
 801369c:	e00a      	b.n	80136b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801369e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d007      	beq.n	80136b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80136a4:	4b39      	ldr	r3, [pc, #228]	@ (801378c <xQueueGenericSend+0x200>)
 80136a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80136aa:	601a      	str	r2, [r3, #0]
 80136ac:	f3bf 8f4f 	dsb	sy
 80136b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80136b4:	f002 f8b2 	bl	801581c <vPortExitCritical>
				return pdPASS;
 80136b8:	2301      	movs	r3, #1
 80136ba:	e063      	b.n	8013784 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d103      	bne.n	80136ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80136c2:	f002 f8ab 	bl	801581c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80136c6:	2300      	movs	r3, #0
 80136c8:	e05c      	b.n	8013784 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80136ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d106      	bne.n	80136de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80136d0:	f107 0314 	add.w	r3, r7, #20
 80136d4:	4618      	mov	r0, r3
 80136d6:	f001 f99d 	bl	8014a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80136da:	2301      	movs	r3, #1
 80136dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80136de:	f002 f89d 	bl	801581c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80136e2:	f000 ff05 	bl	80144f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80136e6:	f002 f867 	bl	80157b8 <vPortEnterCritical>
 80136ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80136f0:	b25b      	sxtb	r3, r3
 80136f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80136f6:	d103      	bne.n	8013700 <xQueueGenericSend+0x174>
 80136f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136fa:	2200      	movs	r2, #0
 80136fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013702:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013706:	b25b      	sxtb	r3, r3
 8013708:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801370c:	d103      	bne.n	8013716 <xQueueGenericSend+0x18a>
 801370e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013710:	2200      	movs	r2, #0
 8013712:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013716:	f002 f881 	bl	801581c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801371a:	1d3a      	adds	r2, r7, #4
 801371c:	f107 0314 	add.w	r3, r7, #20
 8013720:	4611      	mov	r1, r2
 8013722:	4618      	mov	r0, r3
 8013724:	f001 f98c 	bl	8014a40 <xTaskCheckForTimeOut>
 8013728:	4603      	mov	r3, r0
 801372a:	2b00      	cmp	r3, #0
 801372c:	d124      	bne.n	8013778 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801372e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013730:	f000 fb28 	bl	8013d84 <prvIsQueueFull>
 8013734:	4603      	mov	r3, r0
 8013736:	2b00      	cmp	r3, #0
 8013738:	d018      	beq.n	801376c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801373c:	3310      	adds	r3, #16
 801373e:	687a      	ldr	r2, [r7, #4]
 8013740:	4611      	mov	r1, r2
 8013742:	4618      	mov	r0, r3
 8013744:	f001 f8b0 	bl	80148a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013748:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801374a:	f000 fab3 	bl	8013cb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801374e:	f000 fedd 	bl	801450c <xTaskResumeAll>
 8013752:	4603      	mov	r3, r0
 8013754:	2b00      	cmp	r3, #0
 8013756:	f47f af7c 	bne.w	8013652 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801375a:	4b0c      	ldr	r3, [pc, #48]	@ (801378c <xQueueGenericSend+0x200>)
 801375c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013760:	601a      	str	r2, [r3, #0]
 8013762:	f3bf 8f4f 	dsb	sy
 8013766:	f3bf 8f6f 	isb	sy
 801376a:	e772      	b.n	8013652 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801376c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801376e:	f000 faa1 	bl	8013cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013772:	f000 fecb 	bl	801450c <xTaskResumeAll>
 8013776:	e76c      	b.n	8013652 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013778:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801377a:	f000 fa9b 	bl	8013cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801377e:	f000 fec5 	bl	801450c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013782:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013784:	4618      	mov	r0, r3
 8013786:	3738      	adds	r7, #56	@ 0x38
 8013788:	46bd      	mov	sp, r7
 801378a:	bd80      	pop	{r7, pc}
 801378c:	e000ed04 	.word	0xe000ed04

08013790 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b090      	sub	sp, #64	@ 0x40
 8013794:	af00      	add	r7, sp, #0
 8013796:	60f8      	str	r0, [r7, #12]
 8013798:	60b9      	str	r1, [r7, #8]
 801379a:	607a      	str	r2, [r7, #4]
 801379c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80137a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d10b      	bne.n	80137c0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80137a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137ac:	f383 8811 	msr	BASEPRI, r3
 80137b0:	f3bf 8f6f 	isb	sy
 80137b4:	f3bf 8f4f 	dsb	sy
 80137b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80137ba:	bf00      	nop
 80137bc:	bf00      	nop
 80137be:	e7fd      	b.n	80137bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d103      	bne.n	80137ce <xQueueGenericSendFromISR+0x3e>
 80137c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d101      	bne.n	80137d2 <xQueueGenericSendFromISR+0x42>
 80137ce:	2301      	movs	r3, #1
 80137d0:	e000      	b.n	80137d4 <xQueueGenericSendFromISR+0x44>
 80137d2:	2300      	movs	r3, #0
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d10b      	bne.n	80137f0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80137d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137dc:	f383 8811 	msr	BASEPRI, r3
 80137e0:	f3bf 8f6f 	isb	sy
 80137e4:	f3bf 8f4f 	dsb	sy
 80137e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80137ea:	bf00      	nop
 80137ec:	bf00      	nop
 80137ee:	e7fd      	b.n	80137ec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	2b02      	cmp	r3, #2
 80137f4:	d103      	bne.n	80137fe <xQueueGenericSendFromISR+0x6e>
 80137f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80137fa:	2b01      	cmp	r3, #1
 80137fc:	d101      	bne.n	8013802 <xQueueGenericSendFromISR+0x72>
 80137fe:	2301      	movs	r3, #1
 8013800:	e000      	b.n	8013804 <xQueueGenericSendFromISR+0x74>
 8013802:	2300      	movs	r3, #0
 8013804:	2b00      	cmp	r3, #0
 8013806:	d10b      	bne.n	8013820 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8013808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801380c:	f383 8811 	msr	BASEPRI, r3
 8013810:	f3bf 8f6f 	isb	sy
 8013814:	f3bf 8f4f 	dsb	sy
 8013818:	623b      	str	r3, [r7, #32]
}
 801381a:	bf00      	nop
 801381c:	bf00      	nop
 801381e:	e7fd      	b.n	801381c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013820:	f002 f8aa 	bl	8015978 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013824:	f3ef 8211 	mrs	r2, BASEPRI
 8013828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801382c:	f383 8811 	msr	BASEPRI, r3
 8013830:	f3bf 8f6f 	isb	sy
 8013834:	f3bf 8f4f 	dsb	sy
 8013838:	61fa      	str	r2, [r7, #28]
 801383a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801383c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801383e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013842:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013848:	429a      	cmp	r2, r3
 801384a:	d302      	bcc.n	8013852 <xQueueGenericSendFromISR+0xc2>
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	2b02      	cmp	r3, #2
 8013850:	d12f      	bne.n	80138b2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013854:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013858:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801385c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801385e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013860:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013862:	683a      	ldr	r2, [r7, #0]
 8013864:	68b9      	ldr	r1, [r7, #8]
 8013866:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013868:	f000 f994 	bl	8013b94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801386c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8013870:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013874:	d112      	bne.n	801389c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801387a:	2b00      	cmp	r3, #0
 801387c:	d016      	beq.n	80138ac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801387e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013880:	3324      	adds	r3, #36	@ 0x24
 8013882:	4618      	mov	r0, r3
 8013884:	f001 f862 	bl	801494c <xTaskRemoveFromEventList>
 8013888:	4603      	mov	r3, r0
 801388a:	2b00      	cmp	r3, #0
 801388c:	d00e      	beq.n	80138ac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d00b      	beq.n	80138ac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	2201      	movs	r2, #1
 8013898:	601a      	str	r2, [r3, #0]
 801389a:	e007      	b.n	80138ac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801389c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80138a0:	3301      	adds	r3, #1
 80138a2:	b2db      	uxtb	r3, r3
 80138a4:	b25a      	sxtb	r2, r3
 80138a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80138ac:	2301      	movs	r3, #1
 80138ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80138b0:	e001      	b.n	80138b6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80138b2:	2300      	movs	r3, #0
 80138b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138b8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80138ba:	697b      	ldr	r3, [r7, #20]
 80138bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80138c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80138c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80138c4:	4618      	mov	r0, r3
 80138c6:	3740      	adds	r7, #64	@ 0x40
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}

080138cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b08c      	sub	sp, #48	@ 0x30
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	60f8      	str	r0, [r7, #12]
 80138d4:	60b9      	str	r1, [r7, #8]
 80138d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80138d8:	2300      	movs	r3, #0
 80138da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80138e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d10b      	bne.n	80138fe <xQueueReceive+0x32>
	__asm volatile
 80138e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138ea:	f383 8811 	msr	BASEPRI, r3
 80138ee:	f3bf 8f6f 	isb	sy
 80138f2:	f3bf 8f4f 	dsb	sy
 80138f6:	623b      	str	r3, [r7, #32]
}
 80138f8:	bf00      	nop
 80138fa:	bf00      	nop
 80138fc:	e7fd      	b.n	80138fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d103      	bne.n	801390c <xQueueReceive+0x40>
 8013904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013908:	2b00      	cmp	r3, #0
 801390a:	d101      	bne.n	8013910 <xQueueReceive+0x44>
 801390c:	2301      	movs	r3, #1
 801390e:	e000      	b.n	8013912 <xQueueReceive+0x46>
 8013910:	2300      	movs	r3, #0
 8013912:	2b00      	cmp	r3, #0
 8013914:	d10b      	bne.n	801392e <xQueueReceive+0x62>
	__asm volatile
 8013916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801391a:	f383 8811 	msr	BASEPRI, r3
 801391e:	f3bf 8f6f 	isb	sy
 8013922:	f3bf 8f4f 	dsb	sy
 8013926:	61fb      	str	r3, [r7, #28]
}
 8013928:	bf00      	nop
 801392a:	bf00      	nop
 801392c:	e7fd      	b.n	801392a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801392e:	f001 f9d3 	bl	8014cd8 <xTaskGetSchedulerState>
 8013932:	4603      	mov	r3, r0
 8013934:	2b00      	cmp	r3, #0
 8013936:	d102      	bne.n	801393e <xQueueReceive+0x72>
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d101      	bne.n	8013942 <xQueueReceive+0x76>
 801393e:	2301      	movs	r3, #1
 8013940:	e000      	b.n	8013944 <xQueueReceive+0x78>
 8013942:	2300      	movs	r3, #0
 8013944:	2b00      	cmp	r3, #0
 8013946:	d10b      	bne.n	8013960 <xQueueReceive+0x94>
	__asm volatile
 8013948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801394c:	f383 8811 	msr	BASEPRI, r3
 8013950:	f3bf 8f6f 	isb	sy
 8013954:	f3bf 8f4f 	dsb	sy
 8013958:	61bb      	str	r3, [r7, #24]
}
 801395a:	bf00      	nop
 801395c:	bf00      	nop
 801395e:	e7fd      	b.n	801395c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013960:	f001 ff2a 	bl	80157b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013968:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801396c:	2b00      	cmp	r3, #0
 801396e:	d01f      	beq.n	80139b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013970:	68b9      	ldr	r1, [r7, #8]
 8013972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013974:	f000 f978 	bl	8013c68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801397a:	1e5a      	subs	r2, r3, #1
 801397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801397e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013982:	691b      	ldr	r3, [r3, #16]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d00f      	beq.n	80139a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801398a:	3310      	adds	r3, #16
 801398c:	4618      	mov	r0, r3
 801398e:	f000 ffdd 	bl	801494c <xTaskRemoveFromEventList>
 8013992:	4603      	mov	r3, r0
 8013994:	2b00      	cmp	r3, #0
 8013996:	d007      	beq.n	80139a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013998:	4b3c      	ldr	r3, [pc, #240]	@ (8013a8c <xQueueReceive+0x1c0>)
 801399a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801399e:	601a      	str	r2, [r3, #0]
 80139a0:	f3bf 8f4f 	dsb	sy
 80139a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80139a8:	f001 ff38 	bl	801581c <vPortExitCritical>
				return pdPASS;
 80139ac:	2301      	movs	r3, #1
 80139ae:	e069      	b.n	8013a84 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d103      	bne.n	80139be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80139b6:	f001 ff31 	bl	801581c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80139ba:	2300      	movs	r3, #0
 80139bc:	e062      	b.n	8013a84 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80139be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d106      	bne.n	80139d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80139c4:	f107 0310 	add.w	r3, r7, #16
 80139c8:	4618      	mov	r0, r3
 80139ca:	f001 f823 	bl	8014a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80139ce:	2301      	movs	r3, #1
 80139d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80139d2:	f001 ff23 	bl	801581c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80139d6:	f000 fd8b 	bl	80144f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80139da:	f001 feed 	bl	80157b8 <vPortEnterCritical>
 80139de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80139e4:	b25b      	sxtb	r3, r3
 80139e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80139ea:	d103      	bne.n	80139f4 <xQueueReceive+0x128>
 80139ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139ee:	2200      	movs	r2, #0
 80139f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80139f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80139fa:	b25b      	sxtb	r3, r3
 80139fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013a00:	d103      	bne.n	8013a0a <xQueueReceive+0x13e>
 8013a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a04:	2200      	movs	r2, #0
 8013a06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013a0a:	f001 ff07 	bl	801581c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013a0e:	1d3a      	adds	r2, r7, #4
 8013a10:	f107 0310 	add.w	r3, r7, #16
 8013a14:	4611      	mov	r1, r2
 8013a16:	4618      	mov	r0, r3
 8013a18:	f001 f812 	bl	8014a40 <xTaskCheckForTimeOut>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d123      	bne.n	8013a6a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013a22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a24:	f000 f998 	bl	8013d58 <prvIsQueueEmpty>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d017      	beq.n	8013a5e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a30:	3324      	adds	r3, #36	@ 0x24
 8013a32:	687a      	ldr	r2, [r7, #4]
 8013a34:	4611      	mov	r1, r2
 8013a36:	4618      	mov	r0, r3
 8013a38:	f000 ff36 	bl	80148a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013a3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a3e:	f000 f939 	bl	8013cb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013a42:	f000 fd63 	bl	801450c <xTaskResumeAll>
 8013a46:	4603      	mov	r3, r0
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d189      	bne.n	8013960 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8013a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8013a8c <xQueueReceive+0x1c0>)
 8013a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a52:	601a      	str	r2, [r3, #0]
 8013a54:	f3bf 8f4f 	dsb	sy
 8013a58:	f3bf 8f6f 	isb	sy
 8013a5c:	e780      	b.n	8013960 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013a5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a60:	f000 f928 	bl	8013cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013a64:	f000 fd52 	bl	801450c <xTaskResumeAll>
 8013a68:	e77a      	b.n	8013960 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013a6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a6c:	f000 f922 	bl	8013cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013a70:	f000 fd4c 	bl	801450c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013a74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a76:	f000 f96f 	bl	8013d58 <prvIsQueueEmpty>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	f43f af6f 	beq.w	8013960 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013a82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013a84:	4618      	mov	r0, r3
 8013a86:	3730      	adds	r7, #48	@ 0x30
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}
 8013a8c:	e000ed04 	.word	0xe000ed04

08013a90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b08e      	sub	sp, #56	@ 0x38
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	60f8      	str	r0, [r7, #12]
 8013a98:	60b9      	str	r1, [r7, #8]
 8013a9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d10b      	bne.n	8013abe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8013aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013aaa:	f383 8811 	msr	BASEPRI, r3
 8013aae:	f3bf 8f6f 	isb	sy
 8013ab2:	f3bf 8f4f 	dsb	sy
 8013ab6:	623b      	str	r3, [r7, #32]
}
 8013ab8:	bf00      	nop
 8013aba:	bf00      	nop
 8013abc:	e7fd      	b.n	8013aba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d103      	bne.n	8013acc <xQueueReceiveFromISR+0x3c>
 8013ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d101      	bne.n	8013ad0 <xQueueReceiveFromISR+0x40>
 8013acc:	2301      	movs	r3, #1
 8013ace:	e000      	b.n	8013ad2 <xQueueReceiveFromISR+0x42>
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d10b      	bne.n	8013aee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8013ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ada:	f383 8811 	msr	BASEPRI, r3
 8013ade:	f3bf 8f6f 	isb	sy
 8013ae2:	f3bf 8f4f 	dsb	sy
 8013ae6:	61fb      	str	r3, [r7, #28]
}
 8013ae8:	bf00      	nop
 8013aea:	bf00      	nop
 8013aec:	e7fd      	b.n	8013aea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013aee:	f001 ff43 	bl	8015978 <vPortValidateInterruptPriority>
	__asm volatile
 8013af2:	f3ef 8211 	mrs	r2, BASEPRI
 8013af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013afa:	f383 8811 	msr	BASEPRI, r3
 8013afe:	f3bf 8f6f 	isb	sy
 8013b02:	f3bf 8f4f 	dsb	sy
 8013b06:	61ba      	str	r2, [r7, #24]
 8013b08:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013b0a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b12:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d02f      	beq.n	8013b7a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013b20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013b24:	68b9      	ldr	r1, [r7, #8]
 8013b26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013b28:	f000 f89e 	bl	8013c68 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b2e:	1e5a      	subs	r2, r3, #1
 8013b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b32:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013b34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013b38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013b3c:	d112      	bne.n	8013b64 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b40:	691b      	ldr	r3, [r3, #16]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d016      	beq.n	8013b74 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b48:	3310      	adds	r3, #16
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f000 fefe 	bl	801494c <xTaskRemoveFromEventList>
 8013b50:	4603      	mov	r3, r0
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d00e      	beq.n	8013b74 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d00b      	beq.n	8013b74 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2201      	movs	r2, #1
 8013b60:	601a      	str	r2, [r3, #0]
 8013b62:	e007      	b.n	8013b74 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013b64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013b68:	3301      	adds	r3, #1
 8013b6a:	b2db      	uxtb	r3, r3
 8013b6c:	b25a      	sxtb	r2, r3
 8013b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013b74:	2301      	movs	r3, #1
 8013b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b78:	e001      	b.n	8013b7e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b80:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013b82:	693b      	ldr	r3, [r7, #16]
 8013b84:	f383 8811 	msr	BASEPRI, r3
}
 8013b88:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	3738      	adds	r7, #56	@ 0x38
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}

08013b94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b086      	sub	sp, #24
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	60f8      	str	r0, [r7, #12]
 8013b9c:	60b9      	str	r1, [r7, #8]
 8013b9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ba8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d10d      	bne.n	8013bce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d14d      	bne.n	8013c56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	689b      	ldr	r3, [r3, #8]
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f001 f8a8 	bl	8014d14 <xTaskPriorityDisinherit>
 8013bc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	2200      	movs	r2, #0
 8013bca:	609a      	str	r2, [r3, #8]
 8013bcc:	e043      	b.n	8013c56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d119      	bne.n	8013c08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	6858      	ldr	r0, [r3, #4]
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bdc:	461a      	mov	r2, r3
 8013bde:	68b9      	ldr	r1, [r7, #8]
 8013be0:	f003 fb27 	bl	8017232 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	685a      	ldr	r2, [r3, #4]
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bec:	441a      	add	r2, r3
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	685a      	ldr	r2, [r3, #4]
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	689b      	ldr	r3, [r3, #8]
 8013bfa:	429a      	cmp	r2, r3
 8013bfc:	d32b      	bcc.n	8013c56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	681a      	ldr	r2, [r3, #0]
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	605a      	str	r2, [r3, #4]
 8013c06:	e026      	b.n	8013c56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	68d8      	ldr	r0, [r3, #12]
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c10:	461a      	mov	r2, r3
 8013c12:	68b9      	ldr	r1, [r7, #8]
 8013c14:	f003 fb0d 	bl	8017232 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	68da      	ldr	r2, [r3, #12]
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c20:	425b      	negs	r3, r3
 8013c22:	441a      	add	r2, r3
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	68da      	ldr	r2, [r3, #12]
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	429a      	cmp	r2, r3
 8013c32:	d207      	bcs.n	8013c44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	689a      	ldr	r2, [r3, #8]
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c3c:	425b      	negs	r3, r3
 8013c3e:	441a      	add	r2, r3
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2b02      	cmp	r3, #2
 8013c48:	d105      	bne.n	8013c56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c4a:	693b      	ldr	r3, [r7, #16]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d002      	beq.n	8013c56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013c50:	693b      	ldr	r3, [r7, #16]
 8013c52:	3b01      	subs	r3, #1
 8013c54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013c56:	693b      	ldr	r3, [r7, #16]
 8013c58:	1c5a      	adds	r2, r3, #1
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013c5e:	697b      	ldr	r3, [r7, #20]
}
 8013c60:	4618      	mov	r0, r3
 8013c62:	3718      	adds	r7, #24
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}

08013c68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
 8013c70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d018      	beq.n	8013cac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	68da      	ldr	r2, [r3, #12]
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c82:	441a      	add	r2, r3
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	68da      	ldr	r2, [r3, #12]
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	689b      	ldr	r3, [r3, #8]
 8013c90:	429a      	cmp	r2, r3
 8013c92:	d303      	bcc.n	8013c9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681a      	ldr	r2, [r3, #0]
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	68d9      	ldr	r1, [r3, #12]
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ca4:	461a      	mov	r2, r3
 8013ca6:	6838      	ldr	r0, [r7, #0]
 8013ca8:	f003 fac3 	bl	8017232 <memcpy>
	}
}
 8013cac:	bf00      	nop
 8013cae:	3708      	adds	r7, #8
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd80      	pop	{r7, pc}

08013cb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b084      	sub	sp, #16
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013cbc:	f001 fd7c 	bl	80157b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013cc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013cc8:	e011      	b.n	8013cee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d012      	beq.n	8013cf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	3324      	adds	r3, #36	@ 0x24
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f000 fe38 	bl	801494c <xTaskRemoveFromEventList>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d001      	beq.n	8013ce6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013ce2:	f000 ff11 	bl	8014b08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013ce6:	7bfb      	ldrb	r3, [r7, #15]
 8013ce8:	3b01      	subs	r3, #1
 8013cea:	b2db      	uxtb	r3, r3
 8013cec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	dce9      	bgt.n	8013cca <prvUnlockQueue+0x16>
 8013cf6:	e000      	b.n	8013cfa <prvUnlockQueue+0x46>
					break;
 8013cf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	22ff      	movs	r2, #255	@ 0xff
 8013cfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013d02:	f001 fd8b 	bl	801581c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013d06:	f001 fd57 	bl	80157b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013d10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013d12:	e011      	b.n	8013d38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	691b      	ldr	r3, [r3, #16]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d012      	beq.n	8013d42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	3310      	adds	r3, #16
 8013d20:	4618      	mov	r0, r3
 8013d22:	f000 fe13 	bl	801494c <xTaskRemoveFromEventList>
 8013d26:	4603      	mov	r3, r0
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d001      	beq.n	8013d30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013d2c:	f000 feec 	bl	8014b08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013d30:	7bbb      	ldrb	r3, [r7, #14]
 8013d32:	3b01      	subs	r3, #1
 8013d34:	b2db      	uxtb	r3, r3
 8013d36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	dce9      	bgt.n	8013d14 <prvUnlockQueue+0x60>
 8013d40:	e000      	b.n	8013d44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013d42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	22ff      	movs	r2, #255	@ 0xff
 8013d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013d4c:	f001 fd66 	bl	801581c <vPortExitCritical>
}
 8013d50:	bf00      	nop
 8013d52:	3710      	adds	r7, #16
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bd80      	pop	{r7, pc}

08013d58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b084      	sub	sp, #16
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013d60:	f001 fd2a 	bl	80157b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d102      	bne.n	8013d72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	60fb      	str	r3, [r7, #12]
 8013d70:	e001      	b.n	8013d76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013d72:	2300      	movs	r3, #0
 8013d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013d76:	f001 fd51 	bl	801581c <vPortExitCritical>

	return xReturn;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3710      	adds	r7, #16
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}

08013d84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b084      	sub	sp, #16
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013d8c:	f001 fd14 	bl	80157b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013d98:	429a      	cmp	r2, r3
 8013d9a:	d102      	bne.n	8013da2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013d9c:	2301      	movs	r3, #1
 8013d9e:	60fb      	str	r3, [r7, #12]
 8013da0:	e001      	b.n	8013da6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013da2:	2300      	movs	r3, #0
 8013da4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013da6:	f001 fd39 	bl	801581c <vPortExitCritical>

	return xReturn;
 8013daa:	68fb      	ldr	r3, [r7, #12]
}
 8013dac:	4618      	mov	r0, r3
 8013dae:	3710      	adds	r7, #16
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}

08013db4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013db4:	b480      	push	{r7}
 8013db6:	b085      	sub	sp, #20
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
 8013dbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	60fb      	str	r3, [r7, #12]
 8013dc2:	e014      	b.n	8013dee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8013e04 <vQueueAddToRegistry+0x50>)
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d10b      	bne.n	8013de8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013dd0:	490c      	ldr	r1, [pc, #48]	@ (8013e04 <vQueueAddToRegistry+0x50>)
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	683a      	ldr	r2, [r7, #0]
 8013dd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013dda:	4a0a      	ldr	r2, [pc, #40]	@ (8013e04 <vQueueAddToRegistry+0x50>)
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	00db      	lsls	r3, r3, #3
 8013de0:	4413      	add	r3, r2
 8013de2:	687a      	ldr	r2, [r7, #4]
 8013de4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013de6:	e006      	b.n	8013df6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	3301      	adds	r3, #1
 8013dec:	60fb      	str	r3, [r7, #12]
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	2b07      	cmp	r3, #7
 8013df2:	d9e7      	bls.n	8013dc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013df4:	bf00      	nop
 8013df6:	bf00      	nop
 8013df8:	3714      	adds	r7, #20
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e00:	4770      	bx	lr
 8013e02:	bf00      	nop
 8013e04:	20000d20 	.word	0x20000d20

08013e08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b086      	sub	sp, #24
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	60f8      	str	r0, [r7, #12]
 8013e10:	60b9      	str	r1, [r7, #8]
 8013e12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013e18:	f001 fcce 	bl	80157b8 <vPortEnterCritical>
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013e22:	b25b      	sxtb	r3, r3
 8013e24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013e28:	d103      	bne.n	8013e32 <vQueueWaitForMessageRestricted+0x2a>
 8013e2a:	697b      	ldr	r3, [r7, #20]
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013e32:	697b      	ldr	r3, [r7, #20]
 8013e34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013e38:	b25b      	sxtb	r3, r3
 8013e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013e3e:	d103      	bne.n	8013e48 <vQueueWaitForMessageRestricted+0x40>
 8013e40:	697b      	ldr	r3, [r7, #20]
 8013e42:	2200      	movs	r2, #0
 8013e44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013e48:	f001 fce8 	bl	801581c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013e4c:	697b      	ldr	r3, [r7, #20]
 8013e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d106      	bne.n	8013e62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013e54:	697b      	ldr	r3, [r7, #20]
 8013e56:	3324      	adds	r3, #36	@ 0x24
 8013e58:	687a      	ldr	r2, [r7, #4]
 8013e5a:	68b9      	ldr	r1, [r7, #8]
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	f000 fd49 	bl	80148f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013e62:	6978      	ldr	r0, [r7, #20]
 8013e64:	f7ff ff26 	bl	8013cb4 <prvUnlockQueue>
	}
 8013e68:	bf00      	nop
 8013e6a:	3718      	adds	r7, #24
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}

08013e70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b08e      	sub	sp, #56	@ 0x38
 8013e74:	af04      	add	r7, sp, #16
 8013e76:	60f8      	str	r0, [r7, #12]
 8013e78:	60b9      	str	r1, [r7, #8]
 8013e7a:	607a      	str	r2, [r7, #4]
 8013e7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d10b      	bne.n	8013e9c <xTaskCreateStatic+0x2c>
	__asm volatile
 8013e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e88:	f383 8811 	msr	BASEPRI, r3
 8013e8c:	f3bf 8f6f 	isb	sy
 8013e90:	f3bf 8f4f 	dsb	sy
 8013e94:	623b      	str	r3, [r7, #32]
}
 8013e96:	bf00      	nop
 8013e98:	bf00      	nop
 8013e9a:	e7fd      	b.n	8013e98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d10b      	bne.n	8013eba <xTaskCreateStatic+0x4a>
	__asm volatile
 8013ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ea6:	f383 8811 	msr	BASEPRI, r3
 8013eaa:	f3bf 8f6f 	isb	sy
 8013eae:	f3bf 8f4f 	dsb	sy
 8013eb2:	61fb      	str	r3, [r7, #28]
}
 8013eb4:	bf00      	nop
 8013eb6:	bf00      	nop
 8013eb8:	e7fd      	b.n	8013eb6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013eba:	23a8      	movs	r3, #168	@ 0xa8
 8013ebc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013ebe:	693b      	ldr	r3, [r7, #16]
 8013ec0:	2ba8      	cmp	r3, #168	@ 0xa8
 8013ec2:	d00b      	beq.n	8013edc <xTaskCreateStatic+0x6c>
	__asm volatile
 8013ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ec8:	f383 8811 	msr	BASEPRI, r3
 8013ecc:	f3bf 8f6f 	isb	sy
 8013ed0:	f3bf 8f4f 	dsb	sy
 8013ed4:	61bb      	str	r3, [r7, #24]
}
 8013ed6:	bf00      	nop
 8013ed8:	bf00      	nop
 8013eda:	e7fd      	b.n	8013ed8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013edc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d01e      	beq.n	8013f22 <xTaskCreateStatic+0xb2>
 8013ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d01b      	beq.n	8013f22 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013eec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ef2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef6:	2202      	movs	r2, #2
 8013ef8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013efc:	2300      	movs	r3, #0
 8013efe:	9303      	str	r3, [sp, #12]
 8013f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f02:	9302      	str	r3, [sp, #8]
 8013f04:	f107 0314 	add.w	r3, r7, #20
 8013f08:	9301      	str	r3, [sp, #4]
 8013f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f0c:	9300      	str	r3, [sp, #0]
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	687a      	ldr	r2, [r7, #4]
 8013f12:	68b9      	ldr	r1, [r7, #8]
 8013f14:	68f8      	ldr	r0, [r7, #12]
 8013f16:	f000 f851 	bl	8013fbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013f1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013f1c:	f000 f8f6 	bl	801410c <prvAddNewTaskToReadyList>
 8013f20:	e001      	b.n	8013f26 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8013f22:	2300      	movs	r3, #0
 8013f24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013f26:	697b      	ldr	r3, [r7, #20]
	}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3728      	adds	r7, #40	@ 0x28
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}

08013f30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b08c      	sub	sp, #48	@ 0x30
 8013f34:	af04      	add	r7, sp, #16
 8013f36:	60f8      	str	r0, [r7, #12]
 8013f38:	60b9      	str	r1, [r7, #8]
 8013f3a:	603b      	str	r3, [r7, #0]
 8013f3c:	4613      	mov	r3, r2
 8013f3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013f40:	88fb      	ldrh	r3, [r7, #6]
 8013f42:	009b      	lsls	r3, r3, #2
 8013f44:	4618      	mov	r0, r3
 8013f46:	f001 fd59 	bl	80159fc <pvPortMalloc>
 8013f4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013f4c:	697b      	ldr	r3, [r7, #20]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d00e      	beq.n	8013f70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013f52:	20a8      	movs	r0, #168	@ 0xa8
 8013f54:	f001 fd52 	bl	80159fc <pvPortMalloc>
 8013f58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013f5a:	69fb      	ldr	r3, [r7, #28]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d003      	beq.n	8013f68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013f60:	69fb      	ldr	r3, [r7, #28]
 8013f62:	697a      	ldr	r2, [r7, #20]
 8013f64:	631a      	str	r2, [r3, #48]	@ 0x30
 8013f66:	e005      	b.n	8013f74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013f68:	6978      	ldr	r0, [r7, #20]
 8013f6a:	f001 fe15 	bl	8015b98 <vPortFree>
 8013f6e:	e001      	b.n	8013f74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013f70:	2300      	movs	r3, #0
 8013f72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013f74:	69fb      	ldr	r3, [r7, #28]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d017      	beq.n	8013faa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013f7a:	69fb      	ldr	r3, [r7, #28]
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013f82:	88fa      	ldrh	r2, [r7, #6]
 8013f84:	2300      	movs	r3, #0
 8013f86:	9303      	str	r3, [sp, #12]
 8013f88:	69fb      	ldr	r3, [r7, #28]
 8013f8a:	9302      	str	r3, [sp, #8]
 8013f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f8e:	9301      	str	r3, [sp, #4]
 8013f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f92:	9300      	str	r3, [sp, #0]
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	68b9      	ldr	r1, [r7, #8]
 8013f98:	68f8      	ldr	r0, [r7, #12]
 8013f9a:	f000 f80f 	bl	8013fbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013f9e:	69f8      	ldr	r0, [r7, #28]
 8013fa0:	f000 f8b4 	bl	801410c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	61bb      	str	r3, [r7, #24]
 8013fa8:	e002      	b.n	8013fb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013fae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013fb0:	69bb      	ldr	r3, [r7, #24]
	}
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	3720      	adds	r7, #32
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}
	...

08013fbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b088      	sub	sp, #32
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	60f8      	str	r0, [r7, #12]
 8013fc4:	60b9      	str	r1, [r7, #8]
 8013fc6:	607a      	str	r2, [r7, #4]
 8013fc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fcc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	009b      	lsls	r3, r3, #2
 8013fd2:	461a      	mov	r2, r3
 8013fd4:	21a5      	movs	r1, #165	@ 0xa5
 8013fd6:	f003 f88f 	bl	80170f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013fe4:	3b01      	subs	r3, #1
 8013fe6:	009b      	lsls	r3, r3, #2
 8013fe8:	4413      	add	r3, r2
 8013fea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013fec:	69bb      	ldr	r3, [r7, #24]
 8013fee:	f023 0307 	bic.w	r3, r3, #7
 8013ff2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013ff4:	69bb      	ldr	r3, [r7, #24]
 8013ff6:	f003 0307 	and.w	r3, r3, #7
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d00b      	beq.n	8014016 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8013ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014002:	f383 8811 	msr	BASEPRI, r3
 8014006:	f3bf 8f6f 	isb	sy
 801400a:	f3bf 8f4f 	dsb	sy
 801400e:	617b      	str	r3, [r7, #20]
}
 8014010:	bf00      	nop
 8014012:	bf00      	nop
 8014014:	e7fd      	b.n	8014012 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d01f      	beq.n	801405c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801401c:	2300      	movs	r3, #0
 801401e:	61fb      	str	r3, [r7, #28]
 8014020:	e012      	b.n	8014048 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014022:	68ba      	ldr	r2, [r7, #8]
 8014024:	69fb      	ldr	r3, [r7, #28]
 8014026:	4413      	add	r3, r2
 8014028:	7819      	ldrb	r1, [r3, #0]
 801402a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801402c:	69fb      	ldr	r3, [r7, #28]
 801402e:	4413      	add	r3, r2
 8014030:	3334      	adds	r3, #52	@ 0x34
 8014032:	460a      	mov	r2, r1
 8014034:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014036:	68ba      	ldr	r2, [r7, #8]
 8014038:	69fb      	ldr	r3, [r7, #28]
 801403a:	4413      	add	r3, r2
 801403c:	781b      	ldrb	r3, [r3, #0]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d006      	beq.n	8014050 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014042:	69fb      	ldr	r3, [r7, #28]
 8014044:	3301      	adds	r3, #1
 8014046:	61fb      	str	r3, [r7, #28]
 8014048:	69fb      	ldr	r3, [r7, #28]
 801404a:	2b0f      	cmp	r3, #15
 801404c:	d9e9      	bls.n	8014022 <prvInitialiseNewTask+0x66>
 801404e:	e000      	b.n	8014052 <prvInitialiseNewTask+0x96>
			{
				break;
 8014050:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014054:	2200      	movs	r2, #0
 8014056:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801405a:	e003      	b.n	8014064 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801405c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801405e:	2200      	movs	r2, #0
 8014060:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014066:	2b37      	cmp	r3, #55	@ 0x37
 8014068:	d901      	bls.n	801406e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801406a:	2337      	movs	r3, #55	@ 0x37
 801406c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801406e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014070:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014072:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014076:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014078:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801407c:	2200      	movs	r2, #0
 801407e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014082:	3304      	adds	r3, #4
 8014084:	4618      	mov	r0, r3
 8014086:	f7ff f8a7 	bl	80131d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801408a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801408c:	3318      	adds	r3, #24
 801408e:	4618      	mov	r0, r3
 8014090:	f7ff f8a2 	bl	80131d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014098:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801409a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801409c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80140a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80140a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80140a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80140aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140ac:	2200      	movs	r2, #0
 80140ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80140b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140b4:	2200      	movs	r2, #0
 80140b6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80140ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140bc:	3354      	adds	r3, #84	@ 0x54
 80140be:	224c      	movs	r2, #76	@ 0x4c
 80140c0:	2100      	movs	r1, #0
 80140c2:	4618      	mov	r0, r3
 80140c4:	f003 f818 	bl	80170f8 <memset>
 80140c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140ca:	4a0d      	ldr	r2, [pc, #52]	@ (8014100 <prvInitialiseNewTask+0x144>)
 80140cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80140ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140d0:	4a0c      	ldr	r2, [pc, #48]	@ (8014104 <prvInitialiseNewTask+0x148>)
 80140d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80140d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140d6:	4a0c      	ldr	r2, [pc, #48]	@ (8014108 <prvInitialiseNewTask+0x14c>)
 80140d8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80140da:	683a      	ldr	r2, [r7, #0]
 80140dc:	68f9      	ldr	r1, [r7, #12]
 80140de:	69b8      	ldr	r0, [r7, #24]
 80140e0:	f001 fa36 	bl	8015550 <pxPortInitialiseStack>
 80140e4:	4602      	mov	r2, r0
 80140e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80140ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d002      	beq.n	80140f6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80140f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80140f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80140f6:	bf00      	nop
 80140f8:	3720      	adds	r7, #32
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	bf00      	nop
 8014100:	20003920 	.word	0x20003920
 8014104:	20003988 	.word	0x20003988
 8014108:	200039f0 	.word	0x200039f0

0801410c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b082      	sub	sp, #8
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014114:	f001 fb50 	bl	80157b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014118:	4b2d      	ldr	r3, [pc, #180]	@ (80141d0 <prvAddNewTaskToReadyList+0xc4>)
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	3301      	adds	r3, #1
 801411e:	4a2c      	ldr	r2, [pc, #176]	@ (80141d0 <prvAddNewTaskToReadyList+0xc4>)
 8014120:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014122:	4b2c      	ldr	r3, [pc, #176]	@ (80141d4 <prvAddNewTaskToReadyList+0xc8>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d109      	bne.n	801413e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801412a:	4a2a      	ldr	r2, [pc, #168]	@ (80141d4 <prvAddNewTaskToReadyList+0xc8>)
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014130:	4b27      	ldr	r3, [pc, #156]	@ (80141d0 <prvAddNewTaskToReadyList+0xc4>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	2b01      	cmp	r3, #1
 8014136:	d110      	bne.n	801415a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014138:	f000 fd0a 	bl	8014b50 <prvInitialiseTaskLists>
 801413c:	e00d      	b.n	801415a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801413e:	4b26      	ldr	r3, [pc, #152]	@ (80141d8 <prvAddNewTaskToReadyList+0xcc>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d109      	bne.n	801415a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014146:	4b23      	ldr	r3, [pc, #140]	@ (80141d4 <prvAddNewTaskToReadyList+0xc8>)
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014150:	429a      	cmp	r2, r3
 8014152:	d802      	bhi.n	801415a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014154:	4a1f      	ldr	r2, [pc, #124]	@ (80141d4 <prvAddNewTaskToReadyList+0xc8>)
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801415a:	4b20      	ldr	r3, [pc, #128]	@ (80141dc <prvAddNewTaskToReadyList+0xd0>)
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	3301      	adds	r3, #1
 8014160:	4a1e      	ldr	r2, [pc, #120]	@ (80141dc <prvAddNewTaskToReadyList+0xd0>)
 8014162:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014164:	4b1d      	ldr	r3, [pc, #116]	@ (80141dc <prvAddNewTaskToReadyList+0xd0>)
 8014166:	681a      	ldr	r2, [r3, #0]
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014170:	4b1b      	ldr	r3, [pc, #108]	@ (80141e0 <prvAddNewTaskToReadyList+0xd4>)
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	429a      	cmp	r2, r3
 8014176:	d903      	bls.n	8014180 <prvAddNewTaskToReadyList+0x74>
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801417c:	4a18      	ldr	r2, [pc, #96]	@ (80141e0 <prvAddNewTaskToReadyList+0xd4>)
 801417e:	6013      	str	r3, [r2, #0]
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014184:	4613      	mov	r3, r2
 8014186:	009b      	lsls	r3, r3, #2
 8014188:	4413      	add	r3, r2
 801418a:	009b      	lsls	r3, r3, #2
 801418c:	4a15      	ldr	r2, [pc, #84]	@ (80141e4 <prvAddNewTaskToReadyList+0xd8>)
 801418e:	441a      	add	r2, r3
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	3304      	adds	r3, #4
 8014194:	4619      	mov	r1, r3
 8014196:	4610      	mov	r0, r2
 8014198:	f7ff f82b 	bl	80131f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801419c:	f001 fb3e 	bl	801581c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80141a0:	4b0d      	ldr	r3, [pc, #52]	@ (80141d8 <prvAddNewTaskToReadyList+0xcc>)
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d00e      	beq.n	80141c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80141a8:	4b0a      	ldr	r3, [pc, #40]	@ (80141d4 <prvAddNewTaskToReadyList+0xc8>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141b2:	429a      	cmp	r2, r3
 80141b4:	d207      	bcs.n	80141c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80141b6:	4b0c      	ldr	r3, [pc, #48]	@ (80141e8 <prvAddNewTaskToReadyList+0xdc>)
 80141b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80141bc:	601a      	str	r2, [r3, #0]
 80141be:	f3bf 8f4f 	dsb	sy
 80141c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80141c6:	bf00      	nop
 80141c8:	3708      	adds	r7, #8
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bd80      	pop	{r7, pc}
 80141ce:	bf00      	nop
 80141d0:	20001234 	.word	0x20001234
 80141d4:	20000d60 	.word	0x20000d60
 80141d8:	20001240 	.word	0x20001240
 80141dc:	20001250 	.word	0x20001250
 80141e0:	2000123c 	.word	0x2000123c
 80141e4:	20000d64 	.word	0x20000d64
 80141e8:	e000ed04 	.word	0xe000ed04

080141ec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b084      	sub	sp, #16
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80141f4:	f001 fae0 	bl	80157b8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d102      	bne.n	8014204 <vTaskDelete+0x18>
 80141fe:	4b2d      	ldr	r3, [pc, #180]	@ (80142b4 <vTaskDelete+0xc8>)
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	e000      	b.n	8014206 <vTaskDelete+0x1a>
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	3304      	adds	r3, #4
 801420c:	4618      	mov	r0, r3
 801420e:	f7ff f84d 	bl	80132ac <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014216:	2b00      	cmp	r3, #0
 8014218:	d004      	beq.n	8014224 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	3318      	adds	r3, #24
 801421e:	4618      	mov	r0, r3
 8014220:	f7ff f844 	bl	80132ac <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8014224:	4b24      	ldr	r3, [pc, #144]	@ (80142b8 <vTaskDelete+0xcc>)
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	3301      	adds	r3, #1
 801422a:	4a23      	ldr	r2, [pc, #140]	@ (80142b8 <vTaskDelete+0xcc>)
 801422c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801422e:	4b21      	ldr	r3, [pc, #132]	@ (80142b4 <vTaskDelete+0xc8>)
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	68fa      	ldr	r2, [r7, #12]
 8014234:	429a      	cmp	r2, r3
 8014236:	d10b      	bne.n	8014250 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	3304      	adds	r3, #4
 801423c:	4619      	mov	r1, r3
 801423e:	481f      	ldr	r0, [pc, #124]	@ (80142bc <vTaskDelete+0xd0>)
 8014240:	f7fe ffd7 	bl	80131f2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8014244:	4b1e      	ldr	r3, [pc, #120]	@ (80142c0 <vTaskDelete+0xd4>)
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	3301      	adds	r3, #1
 801424a:	4a1d      	ldr	r2, [pc, #116]	@ (80142c0 <vTaskDelete+0xd4>)
 801424c:	6013      	str	r3, [r2, #0]
 801424e:	e009      	b.n	8014264 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8014250:	4b1c      	ldr	r3, [pc, #112]	@ (80142c4 <vTaskDelete+0xd8>)
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	3b01      	subs	r3, #1
 8014256:	4a1b      	ldr	r2, [pc, #108]	@ (80142c4 <vTaskDelete+0xd8>)
 8014258:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801425a:	68f8      	ldr	r0, [r7, #12]
 801425c:	f000 fce6 	bl	8014c2c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8014260:	f000 fd1a 	bl	8014c98 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8014264:	f001 fada 	bl	801581c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8014268:	4b17      	ldr	r3, [pc, #92]	@ (80142c8 <vTaskDelete+0xdc>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d01c      	beq.n	80142aa <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8014270:	4b10      	ldr	r3, [pc, #64]	@ (80142b4 <vTaskDelete+0xc8>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	68fa      	ldr	r2, [r7, #12]
 8014276:	429a      	cmp	r2, r3
 8014278:	d117      	bne.n	80142aa <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801427a:	4b14      	ldr	r3, [pc, #80]	@ (80142cc <vTaskDelete+0xe0>)
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d00b      	beq.n	801429a <vTaskDelete+0xae>
	__asm volatile
 8014282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014286:	f383 8811 	msr	BASEPRI, r3
 801428a:	f3bf 8f6f 	isb	sy
 801428e:	f3bf 8f4f 	dsb	sy
 8014292:	60bb      	str	r3, [r7, #8]
}
 8014294:	bf00      	nop
 8014296:	bf00      	nop
 8014298:	e7fd      	b.n	8014296 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801429a:	4b0d      	ldr	r3, [pc, #52]	@ (80142d0 <vTaskDelete+0xe4>)
 801429c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80142a0:	601a      	str	r2, [r3, #0]
 80142a2:	f3bf 8f4f 	dsb	sy
 80142a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80142aa:	bf00      	nop
 80142ac:	3710      	adds	r7, #16
 80142ae:	46bd      	mov	sp, r7
 80142b0:	bd80      	pop	{r7, pc}
 80142b2:	bf00      	nop
 80142b4:	20000d60 	.word	0x20000d60
 80142b8:	20001250 	.word	0x20001250
 80142bc:	20001208 	.word	0x20001208
 80142c0:	2000121c 	.word	0x2000121c
 80142c4:	20001234 	.word	0x20001234
 80142c8:	20001240 	.word	0x20001240
 80142cc:	2000125c 	.word	0x2000125c
 80142d0:	e000ed04 	.word	0xe000ed04

080142d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b084      	sub	sp, #16
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80142dc:	2300      	movs	r3, #0
 80142de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d018      	beq.n	8014318 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80142e6:	4b14      	ldr	r3, [pc, #80]	@ (8014338 <vTaskDelay+0x64>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d00b      	beq.n	8014306 <vTaskDelay+0x32>
	__asm volatile
 80142ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142f2:	f383 8811 	msr	BASEPRI, r3
 80142f6:	f3bf 8f6f 	isb	sy
 80142fa:	f3bf 8f4f 	dsb	sy
 80142fe:	60bb      	str	r3, [r7, #8]
}
 8014300:	bf00      	nop
 8014302:	bf00      	nop
 8014304:	e7fd      	b.n	8014302 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014306:	f000 f8f3 	bl	80144f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801430a:	2100      	movs	r1, #0
 801430c:	6878      	ldr	r0, [r7, #4]
 801430e:	f000 fd71 	bl	8014df4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014312:	f000 f8fb 	bl	801450c <xTaskResumeAll>
 8014316:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d107      	bne.n	801432e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801431e:	4b07      	ldr	r3, [pc, #28]	@ (801433c <vTaskDelay+0x68>)
 8014320:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014324:	601a      	str	r2, [r3, #0]
 8014326:	f3bf 8f4f 	dsb	sy
 801432a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801432e:	bf00      	nop
 8014330:	3710      	adds	r7, #16
 8014332:	46bd      	mov	sp, r7
 8014334:	bd80      	pop	{r7, pc}
 8014336:	bf00      	nop
 8014338:	2000125c 	.word	0x2000125c
 801433c:	e000ed04 	.word	0xe000ed04

08014340 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8014340:	b580      	push	{r7, lr}
 8014342:	b088      	sub	sp, #32
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801434c:	69bb      	ldr	r3, [r7, #24]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d10b      	bne.n	801436a <eTaskGetState+0x2a>
	__asm volatile
 8014352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014356:	f383 8811 	msr	BASEPRI, r3
 801435a:	f3bf 8f6f 	isb	sy
 801435e:	f3bf 8f4f 	dsb	sy
 8014362:	60bb      	str	r3, [r7, #8]
}
 8014364:	bf00      	nop
 8014366:	bf00      	nop
 8014368:	e7fd      	b.n	8014366 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 801436a:	4b24      	ldr	r3, [pc, #144]	@ (80143fc <eTaskGetState+0xbc>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	69ba      	ldr	r2, [r7, #24]
 8014370:	429a      	cmp	r2, r3
 8014372:	d102      	bne.n	801437a <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8014374:	2300      	movs	r3, #0
 8014376:	77fb      	strb	r3, [r7, #31]
 8014378:	e03a      	b.n	80143f0 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 801437a:	f001 fa1d 	bl	80157b8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801437e:	69bb      	ldr	r3, [r7, #24]
 8014380:	695b      	ldr	r3, [r3, #20]
 8014382:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8014384:	4b1e      	ldr	r3, [pc, #120]	@ (8014400 <eTaskGetState+0xc0>)
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801438a:	4b1e      	ldr	r3, [pc, #120]	@ (8014404 <eTaskGetState+0xc4>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8014390:	f001 fa44 	bl	801581c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8014394:	697a      	ldr	r2, [r7, #20]
 8014396:	693b      	ldr	r3, [r7, #16]
 8014398:	429a      	cmp	r2, r3
 801439a:	d003      	beq.n	80143a4 <eTaskGetState+0x64>
 801439c:	697a      	ldr	r2, [r7, #20]
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	429a      	cmp	r2, r3
 80143a2:	d102      	bne.n	80143aa <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80143a4:	2302      	movs	r3, #2
 80143a6:	77fb      	strb	r3, [r7, #31]
 80143a8:	e022      	b.n	80143f0 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80143aa:	697b      	ldr	r3, [r7, #20]
 80143ac:	4a16      	ldr	r2, [pc, #88]	@ (8014408 <eTaskGetState+0xc8>)
 80143ae:	4293      	cmp	r3, r2
 80143b0:	d112      	bne.n	80143d8 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80143b2:	69bb      	ldr	r3, [r7, #24]
 80143b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d10b      	bne.n	80143d2 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80143ba:	69bb      	ldr	r3, [r7, #24]
 80143bc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80143c0:	b2db      	uxtb	r3, r3
 80143c2:	2b01      	cmp	r3, #1
 80143c4:	d102      	bne.n	80143cc <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 80143c6:	2302      	movs	r3, #2
 80143c8:	77fb      	strb	r3, [r7, #31]
 80143ca:	e011      	b.n	80143f0 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 80143cc:	2303      	movs	r3, #3
 80143ce:	77fb      	strb	r3, [r7, #31]
 80143d0:	e00e      	b.n	80143f0 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80143d2:	2302      	movs	r3, #2
 80143d4:	77fb      	strb	r3, [r7, #31]
 80143d6:	e00b      	b.n	80143f0 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80143d8:	697b      	ldr	r3, [r7, #20]
 80143da:	4a0c      	ldr	r2, [pc, #48]	@ (801440c <eTaskGetState+0xcc>)
 80143dc:	4293      	cmp	r3, r2
 80143de:	d002      	beq.n	80143e6 <eTaskGetState+0xa6>
 80143e0:	697b      	ldr	r3, [r7, #20]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d102      	bne.n	80143ec <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80143e6:	2304      	movs	r3, #4
 80143e8:	77fb      	strb	r3, [r7, #31]
 80143ea:	e001      	b.n	80143f0 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80143ec:	2301      	movs	r3, #1
 80143ee:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80143f0:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80143f2:	4618      	mov	r0, r3
 80143f4:	3720      	adds	r7, #32
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}
 80143fa:	bf00      	nop
 80143fc:	20000d60 	.word	0x20000d60
 8014400:	200011ec 	.word	0x200011ec
 8014404:	200011f0 	.word	0x200011f0
 8014408:	20001220 	.word	0x20001220
 801440c:	20001208 	.word	0x20001208

08014410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b08a      	sub	sp, #40	@ 0x28
 8014414:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014416:	2300      	movs	r3, #0
 8014418:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801441a:	2300      	movs	r3, #0
 801441c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801441e:	463a      	mov	r2, r7
 8014420:	1d39      	adds	r1, r7, #4
 8014422:	f107 0308 	add.w	r3, r7, #8
 8014426:	4618      	mov	r0, r3
 8014428:	f7fe fe82 	bl	8013130 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801442c:	6839      	ldr	r1, [r7, #0]
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	68ba      	ldr	r2, [r7, #8]
 8014432:	9202      	str	r2, [sp, #8]
 8014434:	9301      	str	r3, [sp, #4]
 8014436:	2300      	movs	r3, #0
 8014438:	9300      	str	r3, [sp, #0]
 801443a:	2300      	movs	r3, #0
 801443c:	460a      	mov	r2, r1
 801443e:	4924      	ldr	r1, [pc, #144]	@ (80144d0 <vTaskStartScheduler+0xc0>)
 8014440:	4824      	ldr	r0, [pc, #144]	@ (80144d4 <vTaskStartScheduler+0xc4>)
 8014442:	f7ff fd15 	bl	8013e70 <xTaskCreateStatic>
 8014446:	4603      	mov	r3, r0
 8014448:	4a23      	ldr	r2, [pc, #140]	@ (80144d8 <vTaskStartScheduler+0xc8>)
 801444a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801444c:	4b22      	ldr	r3, [pc, #136]	@ (80144d8 <vTaskStartScheduler+0xc8>)
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d002      	beq.n	801445a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014454:	2301      	movs	r3, #1
 8014456:	617b      	str	r3, [r7, #20]
 8014458:	e001      	b.n	801445e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801445a:	2300      	movs	r3, #0
 801445c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801445e:	697b      	ldr	r3, [r7, #20]
 8014460:	2b01      	cmp	r3, #1
 8014462:	d102      	bne.n	801446a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014464:	f000 fd1a 	bl	8014e9c <xTimerCreateTimerTask>
 8014468:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801446a:	697b      	ldr	r3, [r7, #20]
 801446c:	2b01      	cmp	r3, #1
 801446e:	d11b      	bne.n	80144a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8014470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014474:	f383 8811 	msr	BASEPRI, r3
 8014478:	f3bf 8f6f 	isb	sy
 801447c:	f3bf 8f4f 	dsb	sy
 8014480:	613b      	str	r3, [r7, #16]
}
 8014482:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014484:	4b15      	ldr	r3, [pc, #84]	@ (80144dc <vTaskStartScheduler+0xcc>)
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	3354      	adds	r3, #84	@ 0x54
 801448a:	4a15      	ldr	r2, [pc, #84]	@ (80144e0 <vTaskStartScheduler+0xd0>)
 801448c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801448e:	4b15      	ldr	r3, [pc, #84]	@ (80144e4 <vTaskStartScheduler+0xd4>)
 8014490:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014494:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014496:	4b14      	ldr	r3, [pc, #80]	@ (80144e8 <vTaskStartScheduler+0xd8>)
 8014498:	2201      	movs	r2, #1
 801449a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801449c:	4b13      	ldr	r3, [pc, #76]	@ (80144ec <vTaskStartScheduler+0xdc>)
 801449e:	2200      	movs	r2, #0
 80144a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80144a2:	f001 f8e5 	bl	8015670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80144a6:	e00f      	b.n	80144c8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80144a8:	697b      	ldr	r3, [r7, #20]
 80144aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80144ae:	d10b      	bne.n	80144c8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80144b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144b4:	f383 8811 	msr	BASEPRI, r3
 80144b8:	f3bf 8f6f 	isb	sy
 80144bc:	f3bf 8f4f 	dsb	sy
 80144c0:	60fb      	str	r3, [r7, #12]
}
 80144c2:	bf00      	nop
 80144c4:	bf00      	nop
 80144c6:	e7fd      	b.n	80144c4 <vTaskStartScheduler+0xb4>
}
 80144c8:	bf00      	nop
 80144ca:	3718      	adds	r7, #24
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}
 80144d0:	08017314 	.word	0x08017314
 80144d4:	08014b21 	.word	0x08014b21
 80144d8:	20001258 	.word	0x20001258
 80144dc:	20000d60 	.word	0x20000d60
 80144e0:	2000025c 	.word	0x2000025c
 80144e4:	20001254 	.word	0x20001254
 80144e8:	20001240 	.word	0x20001240
 80144ec:	20001238 	.word	0x20001238

080144f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80144f0:	b480      	push	{r7}
 80144f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80144f4:	4b04      	ldr	r3, [pc, #16]	@ (8014508 <vTaskSuspendAll+0x18>)
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	3301      	adds	r3, #1
 80144fa:	4a03      	ldr	r2, [pc, #12]	@ (8014508 <vTaskSuspendAll+0x18>)
 80144fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80144fe:	bf00      	nop
 8014500:	46bd      	mov	sp, r7
 8014502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014506:	4770      	bx	lr
 8014508:	2000125c 	.word	0x2000125c

0801450c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b084      	sub	sp, #16
 8014510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014512:	2300      	movs	r3, #0
 8014514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014516:	2300      	movs	r3, #0
 8014518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801451a:	4b42      	ldr	r3, [pc, #264]	@ (8014624 <xTaskResumeAll+0x118>)
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d10b      	bne.n	801453a <xTaskResumeAll+0x2e>
	__asm volatile
 8014522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014526:	f383 8811 	msr	BASEPRI, r3
 801452a:	f3bf 8f6f 	isb	sy
 801452e:	f3bf 8f4f 	dsb	sy
 8014532:	603b      	str	r3, [r7, #0]
}
 8014534:	bf00      	nop
 8014536:	bf00      	nop
 8014538:	e7fd      	b.n	8014536 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801453a:	f001 f93d 	bl	80157b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801453e:	4b39      	ldr	r3, [pc, #228]	@ (8014624 <xTaskResumeAll+0x118>)
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	3b01      	subs	r3, #1
 8014544:	4a37      	ldr	r2, [pc, #220]	@ (8014624 <xTaskResumeAll+0x118>)
 8014546:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014548:	4b36      	ldr	r3, [pc, #216]	@ (8014624 <xTaskResumeAll+0x118>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d162      	bne.n	8014616 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014550:	4b35      	ldr	r3, [pc, #212]	@ (8014628 <xTaskResumeAll+0x11c>)
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d05e      	beq.n	8014616 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014558:	e02f      	b.n	80145ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801455a:	4b34      	ldr	r3, [pc, #208]	@ (801462c <xTaskResumeAll+0x120>)
 801455c:	68db      	ldr	r3, [r3, #12]
 801455e:	68db      	ldr	r3, [r3, #12]
 8014560:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	3318      	adds	r3, #24
 8014566:	4618      	mov	r0, r3
 8014568:	f7fe fea0 	bl	80132ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	3304      	adds	r3, #4
 8014570:	4618      	mov	r0, r3
 8014572:	f7fe fe9b 	bl	80132ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801457a:	4b2d      	ldr	r3, [pc, #180]	@ (8014630 <xTaskResumeAll+0x124>)
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	429a      	cmp	r2, r3
 8014580:	d903      	bls.n	801458a <xTaskResumeAll+0x7e>
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014586:	4a2a      	ldr	r2, [pc, #168]	@ (8014630 <xTaskResumeAll+0x124>)
 8014588:	6013      	str	r3, [r2, #0]
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801458e:	4613      	mov	r3, r2
 8014590:	009b      	lsls	r3, r3, #2
 8014592:	4413      	add	r3, r2
 8014594:	009b      	lsls	r3, r3, #2
 8014596:	4a27      	ldr	r2, [pc, #156]	@ (8014634 <xTaskResumeAll+0x128>)
 8014598:	441a      	add	r2, r3
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	3304      	adds	r3, #4
 801459e:	4619      	mov	r1, r3
 80145a0:	4610      	mov	r0, r2
 80145a2:	f7fe fe26 	bl	80131f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145aa:	4b23      	ldr	r3, [pc, #140]	@ (8014638 <xTaskResumeAll+0x12c>)
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145b0:	429a      	cmp	r2, r3
 80145b2:	d302      	bcc.n	80145ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80145b4:	4b21      	ldr	r3, [pc, #132]	@ (801463c <xTaskResumeAll+0x130>)
 80145b6:	2201      	movs	r2, #1
 80145b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80145ba:	4b1c      	ldr	r3, [pc, #112]	@ (801462c <xTaskResumeAll+0x120>)
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d1cb      	bne.n	801455a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d001      	beq.n	80145cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80145c8:	f000 fb66 	bl	8014c98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80145cc:	4b1c      	ldr	r3, [pc, #112]	@ (8014640 <xTaskResumeAll+0x134>)
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d010      	beq.n	80145fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80145d8:	f000 f846 	bl	8014668 <xTaskIncrementTick>
 80145dc:	4603      	mov	r3, r0
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d002      	beq.n	80145e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80145e2:	4b16      	ldr	r3, [pc, #88]	@ (801463c <xTaskResumeAll+0x130>)
 80145e4:	2201      	movs	r2, #1
 80145e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	3b01      	subs	r3, #1
 80145ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d1f1      	bne.n	80145d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80145f4:	4b12      	ldr	r3, [pc, #72]	@ (8014640 <xTaskResumeAll+0x134>)
 80145f6:	2200      	movs	r2, #0
 80145f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80145fa:	4b10      	ldr	r3, [pc, #64]	@ (801463c <xTaskResumeAll+0x130>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d009      	beq.n	8014616 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014602:	2301      	movs	r3, #1
 8014604:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014606:	4b0f      	ldr	r3, [pc, #60]	@ (8014644 <xTaskResumeAll+0x138>)
 8014608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801460c:	601a      	str	r2, [r3, #0]
 801460e:	f3bf 8f4f 	dsb	sy
 8014612:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014616:	f001 f901 	bl	801581c <vPortExitCritical>

	return xAlreadyYielded;
 801461a:	68bb      	ldr	r3, [r7, #8]
}
 801461c:	4618      	mov	r0, r3
 801461e:	3710      	adds	r7, #16
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}
 8014624:	2000125c 	.word	0x2000125c
 8014628:	20001234 	.word	0x20001234
 801462c:	200011f4 	.word	0x200011f4
 8014630:	2000123c 	.word	0x2000123c
 8014634:	20000d64 	.word	0x20000d64
 8014638:	20000d60 	.word	0x20000d60
 801463c:	20001248 	.word	0x20001248
 8014640:	20001244 	.word	0x20001244
 8014644:	e000ed04 	.word	0xe000ed04

08014648 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014648:	b480      	push	{r7}
 801464a:	b083      	sub	sp, #12
 801464c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801464e:	4b05      	ldr	r3, [pc, #20]	@ (8014664 <xTaskGetTickCount+0x1c>)
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014654:	687b      	ldr	r3, [r7, #4]
}
 8014656:	4618      	mov	r0, r3
 8014658:	370c      	adds	r7, #12
 801465a:	46bd      	mov	sp, r7
 801465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014660:	4770      	bx	lr
 8014662:	bf00      	nop
 8014664:	20001238 	.word	0x20001238

08014668 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b086      	sub	sp, #24
 801466c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801466e:	2300      	movs	r3, #0
 8014670:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014672:	4b4f      	ldr	r3, [pc, #316]	@ (80147b0 <xTaskIncrementTick+0x148>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	2b00      	cmp	r3, #0
 8014678:	f040 8090 	bne.w	801479c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801467c:	4b4d      	ldr	r3, [pc, #308]	@ (80147b4 <xTaskIncrementTick+0x14c>)
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	3301      	adds	r3, #1
 8014682:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014684:	4a4b      	ldr	r2, [pc, #300]	@ (80147b4 <xTaskIncrementTick+0x14c>)
 8014686:	693b      	ldr	r3, [r7, #16]
 8014688:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801468a:	693b      	ldr	r3, [r7, #16]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d121      	bne.n	80146d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8014690:	4b49      	ldr	r3, [pc, #292]	@ (80147b8 <xTaskIncrementTick+0x150>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d00b      	beq.n	80146b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 801469a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801469e:	f383 8811 	msr	BASEPRI, r3
 80146a2:	f3bf 8f6f 	isb	sy
 80146a6:	f3bf 8f4f 	dsb	sy
 80146aa:	603b      	str	r3, [r7, #0]
}
 80146ac:	bf00      	nop
 80146ae:	bf00      	nop
 80146b0:	e7fd      	b.n	80146ae <xTaskIncrementTick+0x46>
 80146b2:	4b41      	ldr	r3, [pc, #260]	@ (80147b8 <xTaskIncrementTick+0x150>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	60fb      	str	r3, [r7, #12]
 80146b8:	4b40      	ldr	r3, [pc, #256]	@ (80147bc <xTaskIncrementTick+0x154>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	4a3e      	ldr	r2, [pc, #248]	@ (80147b8 <xTaskIncrementTick+0x150>)
 80146be:	6013      	str	r3, [r2, #0]
 80146c0:	4a3e      	ldr	r2, [pc, #248]	@ (80147bc <xTaskIncrementTick+0x154>)
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	6013      	str	r3, [r2, #0]
 80146c6:	4b3e      	ldr	r3, [pc, #248]	@ (80147c0 <xTaskIncrementTick+0x158>)
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	3301      	adds	r3, #1
 80146cc:	4a3c      	ldr	r2, [pc, #240]	@ (80147c0 <xTaskIncrementTick+0x158>)
 80146ce:	6013      	str	r3, [r2, #0]
 80146d0:	f000 fae2 	bl	8014c98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80146d4:	4b3b      	ldr	r3, [pc, #236]	@ (80147c4 <xTaskIncrementTick+0x15c>)
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	693a      	ldr	r2, [r7, #16]
 80146da:	429a      	cmp	r2, r3
 80146dc:	d349      	bcc.n	8014772 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80146de:	4b36      	ldr	r3, [pc, #216]	@ (80147b8 <xTaskIncrementTick+0x150>)
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d104      	bne.n	80146f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146e8:	4b36      	ldr	r3, [pc, #216]	@ (80147c4 <xTaskIncrementTick+0x15c>)
 80146ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80146ee:	601a      	str	r2, [r3, #0]
					break;
 80146f0:	e03f      	b.n	8014772 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80146f2:	4b31      	ldr	r3, [pc, #196]	@ (80147b8 <xTaskIncrementTick+0x150>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	68db      	ldr	r3, [r3, #12]
 80146f8:	68db      	ldr	r3, [r3, #12]
 80146fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80146fc:	68bb      	ldr	r3, [r7, #8]
 80146fe:	685b      	ldr	r3, [r3, #4]
 8014700:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014702:	693a      	ldr	r2, [r7, #16]
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	429a      	cmp	r2, r3
 8014708:	d203      	bcs.n	8014712 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801470a:	4a2e      	ldr	r2, [pc, #184]	@ (80147c4 <xTaskIncrementTick+0x15c>)
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014710:	e02f      	b.n	8014772 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	3304      	adds	r3, #4
 8014716:	4618      	mov	r0, r3
 8014718:	f7fe fdc8 	bl	80132ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801471c:	68bb      	ldr	r3, [r7, #8]
 801471e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014720:	2b00      	cmp	r3, #0
 8014722:	d004      	beq.n	801472e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014724:	68bb      	ldr	r3, [r7, #8]
 8014726:	3318      	adds	r3, #24
 8014728:	4618      	mov	r0, r3
 801472a:	f7fe fdbf 	bl	80132ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801472e:	68bb      	ldr	r3, [r7, #8]
 8014730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014732:	4b25      	ldr	r3, [pc, #148]	@ (80147c8 <xTaskIncrementTick+0x160>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	429a      	cmp	r2, r3
 8014738:	d903      	bls.n	8014742 <xTaskIncrementTick+0xda>
 801473a:	68bb      	ldr	r3, [r7, #8]
 801473c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801473e:	4a22      	ldr	r2, [pc, #136]	@ (80147c8 <xTaskIncrementTick+0x160>)
 8014740:	6013      	str	r3, [r2, #0]
 8014742:	68bb      	ldr	r3, [r7, #8]
 8014744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014746:	4613      	mov	r3, r2
 8014748:	009b      	lsls	r3, r3, #2
 801474a:	4413      	add	r3, r2
 801474c:	009b      	lsls	r3, r3, #2
 801474e:	4a1f      	ldr	r2, [pc, #124]	@ (80147cc <xTaskIncrementTick+0x164>)
 8014750:	441a      	add	r2, r3
 8014752:	68bb      	ldr	r3, [r7, #8]
 8014754:	3304      	adds	r3, #4
 8014756:	4619      	mov	r1, r3
 8014758:	4610      	mov	r0, r2
 801475a:	f7fe fd4a 	bl	80131f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801475e:	68bb      	ldr	r3, [r7, #8]
 8014760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014762:	4b1b      	ldr	r3, [pc, #108]	@ (80147d0 <xTaskIncrementTick+0x168>)
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014768:	429a      	cmp	r2, r3
 801476a:	d3b8      	bcc.n	80146de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801476c:	2301      	movs	r3, #1
 801476e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014770:	e7b5      	b.n	80146de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014772:	4b17      	ldr	r3, [pc, #92]	@ (80147d0 <xTaskIncrementTick+0x168>)
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014778:	4914      	ldr	r1, [pc, #80]	@ (80147cc <xTaskIncrementTick+0x164>)
 801477a:	4613      	mov	r3, r2
 801477c:	009b      	lsls	r3, r3, #2
 801477e:	4413      	add	r3, r2
 8014780:	009b      	lsls	r3, r3, #2
 8014782:	440b      	add	r3, r1
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	2b01      	cmp	r3, #1
 8014788:	d901      	bls.n	801478e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801478a:	2301      	movs	r3, #1
 801478c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801478e:	4b11      	ldr	r3, [pc, #68]	@ (80147d4 <xTaskIncrementTick+0x16c>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d007      	beq.n	80147a6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8014796:	2301      	movs	r3, #1
 8014798:	617b      	str	r3, [r7, #20]
 801479a:	e004      	b.n	80147a6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801479c:	4b0e      	ldr	r3, [pc, #56]	@ (80147d8 <xTaskIncrementTick+0x170>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	3301      	adds	r3, #1
 80147a2:	4a0d      	ldr	r2, [pc, #52]	@ (80147d8 <xTaskIncrementTick+0x170>)
 80147a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80147a6:	697b      	ldr	r3, [r7, #20]
}
 80147a8:	4618      	mov	r0, r3
 80147aa:	3718      	adds	r7, #24
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}
 80147b0:	2000125c 	.word	0x2000125c
 80147b4:	20001238 	.word	0x20001238
 80147b8:	200011ec 	.word	0x200011ec
 80147bc:	200011f0 	.word	0x200011f0
 80147c0:	2000124c 	.word	0x2000124c
 80147c4:	20001254 	.word	0x20001254
 80147c8:	2000123c 	.word	0x2000123c
 80147cc:	20000d64 	.word	0x20000d64
 80147d0:	20000d60 	.word	0x20000d60
 80147d4:	20001248 	.word	0x20001248
 80147d8:	20001244 	.word	0x20001244

080147dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80147dc:	b480      	push	{r7}
 80147de:	b085      	sub	sp, #20
 80147e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80147e2:	4b2b      	ldr	r3, [pc, #172]	@ (8014890 <vTaskSwitchContext+0xb4>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d003      	beq.n	80147f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80147ea:	4b2a      	ldr	r3, [pc, #168]	@ (8014894 <vTaskSwitchContext+0xb8>)
 80147ec:	2201      	movs	r2, #1
 80147ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80147f0:	e047      	b.n	8014882 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80147f2:	4b28      	ldr	r3, [pc, #160]	@ (8014894 <vTaskSwitchContext+0xb8>)
 80147f4:	2200      	movs	r2, #0
 80147f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147f8:	4b27      	ldr	r3, [pc, #156]	@ (8014898 <vTaskSwitchContext+0xbc>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	60fb      	str	r3, [r7, #12]
 80147fe:	e011      	b.n	8014824 <vTaskSwitchContext+0x48>
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d10b      	bne.n	801481e <vTaskSwitchContext+0x42>
	__asm volatile
 8014806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801480a:	f383 8811 	msr	BASEPRI, r3
 801480e:	f3bf 8f6f 	isb	sy
 8014812:	f3bf 8f4f 	dsb	sy
 8014816:	607b      	str	r3, [r7, #4]
}
 8014818:	bf00      	nop
 801481a:	bf00      	nop
 801481c:	e7fd      	b.n	801481a <vTaskSwitchContext+0x3e>
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	3b01      	subs	r3, #1
 8014822:	60fb      	str	r3, [r7, #12]
 8014824:	491d      	ldr	r1, [pc, #116]	@ (801489c <vTaskSwitchContext+0xc0>)
 8014826:	68fa      	ldr	r2, [r7, #12]
 8014828:	4613      	mov	r3, r2
 801482a:	009b      	lsls	r3, r3, #2
 801482c:	4413      	add	r3, r2
 801482e:	009b      	lsls	r3, r3, #2
 8014830:	440b      	add	r3, r1
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d0e3      	beq.n	8014800 <vTaskSwitchContext+0x24>
 8014838:	68fa      	ldr	r2, [r7, #12]
 801483a:	4613      	mov	r3, r2
 801483c:	009b      	lsls	r3, r3, #2
 801483e:	4413      	add	r3, r2
 8014840:	009b      	lsls	r3, r3, #2
 8014842:	4a16      	ldr	r2, [pc, #88]	@ (801489c <vTaskSwitchContext+0xc0>)
 8014844:	4413      	add	r3, r2
 8014846:	60bb      	str	r3, [r7, #8]
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	685b      	ldr	r3, [r3, #4]
 801484c:	685a      	ldr	r2, [r3, #4]
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	605a      	str	r2, [r3, #4]
 8014852:	68bb      	ldr	r3, [r7, #8]
 8014854:	685a      	ldr	r2, [r3, #4]
 8014856:	68bb      	ldr	r3, [r7, #8]
 8014858:	3308      	adds	r3, #8
 801485a:	429a      	cmp	r2, r3
 801485c:	d104      	bne.n	8014868 <vTaskSwitchContext+0x8c>
 801485e:	68bb      	ldr	r3, [r7, #8]
 8014860:	685b      	ldr	r3, [r3, #4]
 8014862:	685a      	ldr	r2, [r3, #4]
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	605a      	str	r2, [r3, #4]
 8014868:	68bb      	ldr	r3, [r7, #8]
 801486a:	685b      	ldr	r3, [r3, #4]
 801486c:	68db      	ldr	r3, [r3, #12]
 801486e:	4a0c      	ldr	r2, [pc, #48]	@ (80148a0 <vTaskSwitchContext+0xc4>)
 8014870:	6013      	str	r3, [r2, #0]
 8014872:	4a09      	ldr	r2, [pc, #36]	@ (8014898 <vTaskSwitchContext+0xbc>)
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014878:	4b09      	ldr	r3, [pc, #36]	@ (80148a0 <vTaskSwitchContext+0xc4>)
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	3354      	adds	r3, #84	@ 0x54
 801487e:	4a09      	ldr	r2, [pc, #36]	@ (80148a4 <vTaskSwitchContext+0xc8>)
 8014880:	6013      	str	r3, [r2, #0]
}
 8014882:	bf00      	nop
 8014884:	3714      	adds	r7, #20
 8014886:	46bd      	mov	sp, r7
 8014888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488c:	4770      	bx	lr
 801488e:	bf00      	nop
 8014890:	2000125c 	.word	0x2000125c
 8014894:	20001248 	.word	0x20001248
 8014898:	2000123c 	.word	0x2000123c
 801489c:	20000d64 	.word	0x20000d64
 80148a0:	20000d60 	.word	0x20000d60
 80148a4:	2000025c 	.word	0x2000025c

080148a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b084      	sub	sp, #16
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]
 80148b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d10b      	bne.n	80148d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80148b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148bc:	f383 8811 	msr	BASEPRI, r3
 80148c0:	f3bf 8f6f 	isb	sy
 80148c4:	f3bf 8f4f 	dsb	sy
 80148c8:	60fb      	str	r3, [r7, #12]
}
 80148ca:	bf00      	nop
 80148cc:	bf00      	nop
 80148ce:	e7fd      	b.n	80148cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80148d0:	4b07      	ldr	r3, [pc, #28]	@ (80148f0 <vTaskPlaceOnEventList+0x48>)
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	3318      	adds	r3, #24
 80148d6:	4619      	mov	r1, r3
 80148d8:	6878      	ldr	r0, [r7, #4]
 80148da:	f7fe fcae 	bl	801323a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80148de:	2101      	movs	r1, #1
 80148e0:	6838      	ldr	r0, [r7, #0]
 80148e2:	f000 fa87 	bl	8014df4 <prvAddCurrentTaskToDelayedList>
}
 80148e6:	bf00      	nop
 80148e8:	3710      	adds	r7, #16
 80148ea:	46bd      	mov	sp, r7
 80148ec:	bd80      	pop	{r7, pc}
 80148ee:	bf00      	nop
 80148f0:	20000d60 	.word	0x20000d60

080148f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b086      	sub	sp, #24
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	60f8      	str	r0, [r7, #12]
 80148fc:	60b9      	str	r1, [r7, #8]
 80148fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d10b      	bne.n	801491e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8014906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801490a:	f383 8811 	msr	BASEPRI, r3
 801490e:	f3bf 8f6f 	isb	sy
 8014912:	f3bf 8f4f 	dsb	sy
 8014916:	617b      	str	r3, [r7, #20]
}
 8014918:	bf00      	nop
 801491a:	bf00      	nop
 801491c:	e7fd      	b.n	801491a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801491e:	4b0a      	ldr	r3, [pc, #40]	@ (8014948 <vTaskPlaceOnEventListRestricted+0x54>)
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	3318      	adds	r3, #24
 8014924:	4619      	mov	r1, r3
 8014926:	68f8      	ldr	r0, [r7, #12]
 8014928:	f7fe fc63 	bl	80131f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d002      	beq.n	8014938 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8014932:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014936:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014938:	6879      	ldr	r1, [r7, #4]
 801493a:	68b8      	ldr	r0, [r7, #8]
 801493c:	f000 fa5a 	bl	8014df4 <prvAddCurrentTaskToDelayedList>
	}
 8014940:	bf00      	nop
 8014942:	3718      	adds	r7, #24
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}
 8014948:	20000d60 	.word	0x20000d60

0801494c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b086      	sub	sp, #24
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	68db      	ldr	r3, [r3, #12]
 8014958:	68db      	ldr	r3, [r3, #12]
 801495a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801495c:	693b      	ldr	r3, [r7, #16]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d10b      	bne.n	801497a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8014962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014966:	f383 8811 	msr	BASEPRI, r3
 801496a:	f3bf 8f6f 	isb	sy
 801496e:	f3bf 8f4f 	dsb	sy
 8014972:	60fb      	str	r3, [r7, #12]
}
 8014974:	bf00      	nop
 8014976:	bf00      	nop
 8014978:	e7fd      	b.n	8014976 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801497a:	693b      	ldr	r3, [r7, #16]
 801497c:	3318      	adds	r3, #24
 801497e:	4618      	mov	r0, r3
 8014980:	f7fe fc94 	bl	80132ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014984:	4b1d      	ldr	r3, [pc, #116]	@ (80149fc <xTaskRemoveFromEventList+0xb0>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d11d      	bne.n	80149c8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801498c:	693b      	ldr	r3, [r7, #16]
 801498e:	3304      	adds	r3, #4
 8014990:	4618      	mov	r0, r3
 8014992:	f7fe fc8b 	bl	80132ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014996:	693b      	ldr	r3, [r7, #16]
 8014998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801499a:	4b19      	ldr	r3, [pc, #100]	@ (8014a00 <xTaskRemoveFromEventList+0xb4>)
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	429a      	cmp	r2, r3
 80149a0:	d903      	bls.n	80149aa <xTaskRemoveFromEventList+0x5e>
 80149a2:	693b      	ldr	r3, [r7, #16]
 80149a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149a6:	4a16      	ldr	r2, [pc, #88]	@ (8014a00 <xTaskRemoveFromEventList+0xb4>)
 80149a8:	6013      	str	r3, [r2, #0]
 80149aa:	693b      	ldr	r3, [r7, #16]
 80149ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149ae:	4613      	mov	r3, r2
 80149b0:	009b      	lsls	r3, r3, #2
 80149b2:	4413      	add	r3, r2
 80149b4:	009b      	lsls	r3, r3, #2
 80149b6:	4a13      	ldr	r2, [pc, #76]	@ (8014a04 <xTaskRemoveFromEventList+0xb8>)
 80149b8:	441a      	add	r2, r3
 80149ba:	693b      	ldr	r3, [r7, #16]
 80149bc:	3304      	adds	r3, #4
 80149be:	4619      	mov	r1, r3
 80149c0:	4610      	mov	r0, r2
 80149c2:	f7fe fc16 	bl	80131f2 <vListInsertEnd>
 80149c6:	e005      	b.n	80149d4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80149c8:	693b      	ldr	r3, [r7, #16]
 80149ca:	3318      	adds	r3, #24
 80149cc:	4619      	mov	r1, r3
 80149ce:	480e      	ldr	r0, [pc, #56]	@ (8014a08 <xTaskRemoveFromEventList+0xbc>)
 80149d0:	f7fe fc0f 	bl	80131f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80149d4:	693b      	ldr	r3, [r7, #16]
 80149d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149d8:	4b0c      	ldr	r3, [pc, #48]	@ (8014a0c <xTaskRemoveFromEventList+0xc0>)
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149de:	429a      	cmp	r2, r3
 80149e0:	d905      	bls.n	80149ee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80149e2:	2301      	movs	r3, #1
 80149e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80149e6:	4b0a      	ldr	r3, [pc, #40]	@ (8014a10 <xTaskRemoveFromEventList+0xc4>)
 80149e8:	2201      	movs	r2, #1
 80149ea:	601a      	str	r2, [r3, #0]
 80149ec:	e001      	b.n	80149f2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80149ee:	2300      	movs	r3, #0
 80149f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80149f2:	697b      	ldr	r3, [r7, #20]
}
 80149f4:	4618      	mov	r0, r3
 80149f6:	3718      	adds	r7, #24
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bd80      	pop	{r7, pc}
 80149fc:	2000125c 	.word	0x2000125c
 8014a00:	2000123c 	.word	0x2000123c
 8014a04:	20000d64 	.word	0x20000d64
 8014a08:	200011f4 	.word	0x200011f4
 8014a0c:	20000d60 	.word	0x20000d60
 8014a10:	20001248 	.word	0x20001248

08014a14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014a14:	b480      	push	{r7}
 8014a16:	b083      	sub	sp, #12
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014a1c:	4b06      	ldr	r3, [pc, #24]	@ (8014a38 <vTaskInternalSetTimeOutState+0x24>)
 8014a1e:	681a      	ldr	r2, [r3, #0]
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014a24:	4b05      	ldr	r3, [pc, #20]	@ (8014a3c <vTaskInternalSetTimeOutState+0x28>)
 8014a26:	681a      	ldr	r2, [r3, #0]
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	605a      	str	r2, [r3, #4]
}
 8014a2c:	bf00      	nop
 8014a2e:	370c      	adds	r7, #12
 8014a30:	46bd      	mov	sp, r7
 8014a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a36:	4770      	bx	lr
 8014a38:	2000124c 	.word	0x2000124c
 8014a3c:	20001238 	.word	0x20001238

08014a40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b088      	sub	sp, #32
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
 8014a48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d10b      	bne.n	8014a68 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8014a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a54:	f383 8811 	msr	BASEPRI, r3
 8014a58:	f3bf 8f6f 	isb	sy
 8014a5c:	f3bf 8f4f 	dsb	sy
 8014a60:	613b      	str	r3, [r7, #16]
}
 8014a62:	bf00      	nop
 8014a64:	bf00      	nop
 8014a66:	e7fd      	b.n	8014a64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d10b      	bne.n	8014a86 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8014a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a72:	f383 8811 	msr	BASEPRI, r3
 8014a76:	f3bf 8f6f 	isb	sy
 8014a7a:	f3bf 8f4f 	dsb	sy
 8014a7e:	60fb      	str	r3, [r7, #12]
}
 8014a80:	bf00      	nop
 8014a82:	bf00      	nop
 8014a84:	e7fd      	b.n	8014a82 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8014a86:	f000 fe97 	bl	80157b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8014b00 <xTaskCheckForTimeOut+0xc0>)
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	685b      	ldr	r3, [r3, #4]
 8014a94:	69ba      	ldr	r2, [r7, #24]
 8014a96:	1ad3      	subs	r3, r2, r3
 8014a98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014a9a:	683b      	ldr	r3, [r7, #0]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014aa2:	d102      	bne.n	8014aaa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	61fb      	str	r3, [r7, #28]
 8014aa8:	e023      	b.n	8014af2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	681a      	ldr	r2, [r3, #0]
 8014aae:	4b15      	ldr	r3, [pc, #84]	@ (8014b04 <xTaskCheckForTimeOut+0xc4>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	429a      	cmp	r2, r3
 8014ab4:	d007      	beq.n	8014ac6 <xTaskCheckForTimeOut+0x86>
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	685b      	ldr	r3, [r3, #4]
 8014aba:	69ba      	ldr	r2, [r7, #24]
 8014abc:	429a      	cmp	r2, r3
 8014abe:	d302      	bcc.n	8014ac6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014ac0:	2301      	movs	r3, #1
 8014ac2:	61fb      	str	r3, [r7, #28]
 8014ac4:	e015      	b.n	8014af2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014ac6:	683b      	ldr	r3, [r7, #0]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	697a      	ldr	r2, [r7, #20]
 8014acc:	429a      	cmp	r2, r3
 8014ace:	d20b      	bcs.n	8014ae8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014ad0:	683b      	ldr	r3, [r7, #0]
 8014ad2:	681a      	ldr	r2, [r3, #0]
 8014ad4:	697b      	ldr	r3, [r7, #20]
 8014ad6:	1ad2      	subs	r2, r2, r3
 8014ad8:	683b      	ldr	r3, [r7, #0]
 8014ada:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014adc:	6878      	ldr	r0, [r7, #4]
 8014ade:	f7ff ff99 	bl	8014a14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	61fb      	str	r3, [r7, #28]
 8014ae6:	e004      	b.n	8014af2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014ae8:	683b      	ldr	r3, [r7, #0]
 8014aea:	2200      	movs	r2, #0
 8014aec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014aee:	2301      	movs	r3, #1
 8014af0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014af2:	f000 fe93 	bl	801581c <vPortExitCritical>

	return xReturn;
 8014af6:	69fb      	ldr	r3, [r7, #28]
}
 8014af8:	4618      	mov	r0, r3
 8014afa:	3720      	adds	r7, #32
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd80      	pop	{r7, pc}
 8014b00:	20001238 	.word	0x20001238
 8014b04:	2000124c 	.word	0x2000124c

08014b08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014b08:	b480      	push	{r7}
 8014b0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014b0c:	4b03      	ldr	r3, [pc, #12]	@ (8014b1c <vTaskMissedYield+0x14>)
 8014b0e:	2201      	movs	r2, #1
 8014b10:	601a      	str	r2, [r3, #0]
}
 8014b12:	bf00      	nop
 8014b14:	46bd      	mov	sp, r7
 8014b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b1a:	4770      	bx	lr
 8014b1c:	20001248 	.word	0x20001248

08014b20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b082      	sub	sp, #8
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014b28:	f000 f852 	bl	8014bd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014b2c:	4b06      	ldr	r3, [pc, #24]	@ (8014b48 <prvIdleTask+0x28>)
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	2b01      	cmp	r3, #1
 8014b32:	d9f9      	bls.n	8014b28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014b34:	4b05      	ldr	r3, [pc, #20]	@ (8014b4c <prvIdleTask+0x2c>)
 8014b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b3a:	601a      	str	r2, [r3, #0]
 8014b3c:	f3bf 8f4f 	dsb	sy
 8014b40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014b44:	e7f0      	b.n	8014b28 <prvIdleTask+0x8>
 8014b46:	bf00      	nop
 8014b48:	20000d64 	.word	0x20000d64
 8014b4c:	e000ed04 	.word	0xe000ed04

08014b50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b082      	sub	sp, #8
 8014b54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014b56:	2300      	movs	r3, #0
 8014b58:	607b      	str	r3, [r7, #4]
 8014b5a:	e00c      	b.n	8014b76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014b5c:	687a      	ldr	r2, [r7, #4]
 8014b5e:	4613      	mov	r3, r2
 8014b60:	009b      	lsls	r3, r3, #2
 8014b62:	4413      	add	r3, r2
 8014b64:	009b      	lsls	r3, r3, #2
 8014b66:	4a12      	ldr	r2, [pc, #72]	@ (8014bb0 <prvInitialiseTaskLists+0x60>)
 8014b68:	4413      	add	r3, r2
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f7fe fb14 	bl	8013198 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	3301      	adds	r3, #1
 8014b74:	607b      	str	r3, [r7, #4]
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	2b37      	cmp	r3, #55	@ 0x37
 8014b7a:	d9ef      	bls.n	8014b5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014b7c:	480d      	ldr	r0, [pc, #52]	@ (8014bb4 <prvInitialiseTaskLists+0x64>)
 8014b7e:	f7fe fb0b 	bl	8013198 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014b82:	480d      	ldr	r0, [pc, #52]	@ (8014bb8 <prvInitialiseTaskLists+0x68>)
 8014b84:	f7fe fb08 	bl	8013198 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014b88:	480c      	ldr	r0, [pc, #48]	@ (8014bbc <prvInitialiseTaskLists+0x6c>)
 8014b8a:	f7fe fb05 	bl	8013198 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014b8e:	480c      	ldr	r0, [pc, #48]	@ (8014bc0 <prvInitialiseTaskLists+0x70>)
 8014b90:	f7fe fb02 	bl	8013198 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014b94:	480b      	ldr	r0, [pc, #44]	@ (8014bc4 <prvInitialiseTaskLists+0x74>)
 8014b96:	f7fe faff 	bl	8013198 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8014bc8 <prvInitialiseTaskLists+0x78>)
 8014b9c:	4a05      	ldr	r2, [pc, #20]	@ (8014bb4 <prvInitialiseTaskLists+0x64>)
 8014b9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8014bcc <prvInitialiseTaskLists+0x7c>)
 8014ba2:	4a05      	ldr	r2, [pc, #20]	@ (8014bb8 <prvInitialiseTaskLists+0x68>)
 8014ba4:	601a      	str	r2, [r3, #0]
}
 8014ba6:	bf00      	nop
 8014ba8:	3708      	adds	r7, #8
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}
 8014bae:	bf00      	nop
 8014bb0:	20000d64 	.word	0x20000d64
 8014bb4:	200011c4 	.word	0x200011c4
 8014bb8:	200011d8 	.word	0x200011d8
 8014bbc:	200011f4 	.word	0x200011f4
 8014bc0:	20001208 	.word	0x20001208
 8014bc4:	20001220 	.word	0x20001220
 8014bc8:	200011ec 	.word	0x200011ec
 8014bcc:	200011f0 	.word	0x200011f0

08014bd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b082      	sub	sp, #8
 8014bd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014bd6:	e019      	b.n	8014c0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014bd8:	f000 fdee 	bl	80157b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014bdc:	4b10      	ldr	r3, [pc, #64]	@ (8014c20 <prvCheckTasksWaitingTermination+0x50>)
 8014bde:	68db      	ldr	r3, [r3, #12]
 8014be0:	68db      	ldr	r3, [r3, #12]
 8014be2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	3304      	adds	r3, #4
 8014be8:	4618      	mov	r0, r3
 8014bea:	f7fe fb5f 	bl	80132ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014bee:	4b0d      	ldr	r3, [pc, #52]	@ (8014c24 <prvCheckTasksWaitingTermination+0x54>)
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	3b01      	subs	r3, #1
 8014bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8014c24 <prvCheckTasksWaitingTermination+0x54>)
 8014bf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8014c28 <prvCheckTasksWaitingTermination+0x58>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	3b01      	subs	r3, #1
 8014bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8014c28 <prvCheckTasksWaitingTermination+0x58>)
 8014c00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014c02:	f000 fe0b 	bl	801581c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014c06:	6878      	ldr	r0, [r7, #4]
 8014c08:	f000 f810 	bl	8014c2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014c0c:	4b06      	ldr	r3, [pc, #24]	@ (8014c28 <prvCheckTasksWaitingTermination+0x58>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d1e1      	bne.n	8014bd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014c14:	bf00      	nop
 8014c16:	bf00      	nop
 8014c18:	3708      	adds	r7, #8
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}
 8014c1e:	bf00      	nop
 8014c20:	20001208 	.word	0x20001208
 8014c24:	20001234 	.word	0x20001234
 8014c28:	2000121c 	.word	0x2000121c

08014c2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b084      	sub	sp, #16
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	3354      	adds	r3, #84	@ 0x54
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f002 fa65 	bl	8017108 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d108      	bne.n	8014c5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f000 ffa3 	bl	8015b98 <vPortFree>
				vPortFree( pxTCB );
 8014c52:	6878      	ldr	r0, [r7, #4]
 8014c54:	f000 ffa0 	bl	8015b98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014c58:	e019      	b.n	8014c8e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014c60:	2b01      	cmp	r3, #1
 8014c62:	d103      	bne.n	8014c6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014c64:	6878      	ldr	r0, [r7, #4]
 8014c66:	f000 ff97 	bl	8015b98 <vPortFree>
	}
 8014c6a:	e010      	b.n	8014c8e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014c72:	2b02      	cmp	r3, #2
 8014c74:	d00b      	beq.n	8014c8e <prvDeleteTCB+0x62>
	__asm volatile
 8014c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c7a:	f383 8811 	msr	BASEPRI, r3
 8014c7e:	f3bf 8f6f 	isb	sy
 8014c82:	f3bf 8f4f 	dsb	sy
 8014c86:	60fb      	str	r3, [r7, #12]
}
 8014c88:	bf00      	nop
 8014c8a:	bf00      	nop
 8014c8c:	e7fd      	b.n	8014c8a <prvDeleteTCB+0x5e>
	}
 8014c8e:	bf00      	nop
 8014c90:	3710      	adds	r7, #16
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd80      	pop	{r7, pc}
	...

08014c98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014c98:	b480      	push	{r7}
 8014c9a:	b083      	sub	sp, #12
 8014c9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8014cd0 <prvResetNextTaskUnblockTime+0x38>)
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d104      	bne.n	8014cb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8014cd4 <prvResetNextTaskUnblockTime+0x3c>)
 8014caa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014cae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014cb0:	e008      	b.n	8014cc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cb2:	4b07      	ldr	r3, [pc, #28]	@ (8014cd0 <prvResetNextTaskUnblockTime+0x38>)
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	68db      	ldr	r3, [r3, #12]
 8014cb8:	68db      	ldr	r3, [r3, #12]
 8014cba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	685b      	ldr	r3, [r3, #4]
 8014cc0:	4a04      	ldr	r2, [pc, #16]	@ (8014cd4 <prvResetNextTaskUnblockTime+0x3c>)
 8014cc2:	6013      	str	r3, [r2, #0]
}
 8014cc4:	bf00      	nop
 8014cc6:	370c      	adds	r7, #12
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cce:	4770      	bx	lr
 8014cd0:	200011ec 	.word	0x200011ec
 8014cd4:	20001254 	.word	0x20001254

08014cd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014cd8:	b480      	push	{r7}
 8014cda:	b083      	sub	sp, #12
 8014cdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014cde:	4b0b      	ldr	r3, [pc, #44]	@ (8014d0c <xTaskGetSchedulerState+0x34>)
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d102      	bne.n	8014cec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	607b      	str	r3, [r7, #4]
 8014cea:	e008      	b.n	8014cfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014cec:	4b08      	ldr	r3, [pc, #32]	@ (8014d10 <xTaskGetSchedulerState+0x38>)
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d102      	bne.n	8014cfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014cf4:	2302      	movs	r3, #2
 8014cf6:	607b      	str	r3, [r7, #4]
 8014cf8:	e001      	b.n	8014cfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014cfe:	687b      	ldr	r3, [r7, #4]
	}
 8014d00:	4618      	mov	r0, r3
 8014d02:	370c      	adds	r7, #12
 8014d04:	46bd      	mov	sp, r7
 8014d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0a:	4770      	bx	lr
 8014d0c:	20001240 	.word	0x20001240
 8014d10:	2000125c 	.word	0x2000125c

08014d14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b086      	sub	sp, #24
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014d20:	2300      	movs	r3, #0
 8014d22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d058      	beq.n	8014ddc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8014de8 <xTaskPriorityDisinherit+0xd4>)
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	693a      	ldr	r2, [r7, #16]
 8014d30:	429a      	cmp	r2, r3
 8014d32:	d00b      	beq.n	8014d4c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d38:	f383 8811 	msr	BASEPRI, r3
 8014d3c:	f3bf 8f6f 	isb	sy
 8014d40:	f3bf 8f4f 	dsb	sy
 8014d44:	60fb      	str	r3, [r7, #12]
}
 8014d46:	bf00      	nop
 8014d48:	bf00      	nop
 8014d4a:	e7fd      	b.n	8014d48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014d4c:	693b      	ldr	r3, [r7, #16]
 8014d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d10b      	bne.n	8014d6c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8014d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d58:	f383 8811 	msr	BASEPRI, r3
 8014d5c:	f3bf 8f6f 	isb	sy
 8014d60:	f3bf 8f4f 	dsb	sy
 8014d64:	60bb      	str	r3, [r7, #8]
}
 8014d66:	bf00      	nop
 8014d68:	bf00      	nop
 8014d6a:	e7fd      	b.n	8014d68 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8014d6c:	693b      	ldr	r3, [r7, #16]
 8014d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014d70:	1e5a      	subs	r2, r3, #1
 8014d72:	693b      	ldr	r3, [r7, #16]
 8014d74:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d7a:	693b      	ldr	r3, [r7, #16]
 8014d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	d02c      	beq.n	8014ddc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014d82:	693b      	ldr	r3, [r7, #16]
 8014d84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d128      	bne.n	8014ddc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014d8a:	693b      	ldr	r3, [r7, #16]
 8014d8c:	3304      	adds	r3, #4
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7fe fa8c 	bl	80132ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014d94:	693b      	ldr	r3, [r7, #16]
 8014d96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014d98:	693b      	ldr	r3, [r7, #16]
 8014d9a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d9c:	693b      	ldr	r3, [r7, #16]
 8014d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014da0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014da4:	693b      	ldr	r3, [r7, #16]
 8014da6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014da8:	693b      	ldr	r3, [r7, #16]
 8014daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014dac:	4b0f      	ldr	r3, [pc, #60]	@ (8014dec <xTaskPriorityDisinherit+0xd8>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	429a      	cmp	r2, r3
 8014db2:	d903      	bls.n	8014dbc <xTaskPriorityDisinherit+0xa8>
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014db8:	4a0c      	ldr	r2, [pc, #48]	@ (8014dec <xTaskPriorityDisinherit+0xd8>)
 8014dba:	6013      	str	r3, [r2, #0]
 8014dbc:	693b      	ldr	r3, [r7, #16]
 8014dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014dc0:	4613      	mov	r3, r2
 8014dc2:	009b      	lsls	r3, r3, #2
 8014dc4:	4413      	add	r3, r2
 8014dc6:	009b      	lsls	r3, r3, #2
 8014dc8:	4a09      	ldr	r2, [pc, #36]	@ (8014df0 <xTaskPriorityDisinherit+0xdc>)
 8014dca:	441a      	add	r2, r3
 8014dcc:	693b      	ldr	r3, [r7, #16]
 8014dce:	3304      	adds	r3, #4
 8014dd0:	4619      	mov	r1, r3
 8014dd2:	4610      	mov	r0, r2
 8014dd4:	f7fe fa0d 	bl	80131f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014dd8:	2301      	movs	r3, #1
 8014dda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014ddc:	697b      	ldr	r3, [r7, #20]
	}
 8014dde:	4618      	mov	r0, r3
 8014de0:	3718      	adds	r7, #24
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}
 8014de6:	bf00      	nop
 8014de8:	20000d60 	.word	0x20000d60
 8014dec:	2000123c 	.word	0x2000123c
 8014df0:	20000d64 	.word	0x20000d64

08014df4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b084      	sub	sp, #16
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
 8014dfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014dfe:	4b21      	ldr	r3, [pc, #132]	@ (8014e84 <prvAddCurrentTaskToDelayedList+0x90>)
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014e04:	4b20      	ldr	r3, [pc, #128]	@ (8014e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	3304      	adds	r3, #4
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7fe fa4e 	bl	80132ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014e16:	d10a      	bne.n	8014e2e <prvAddCurrentTaskToDelayedList+0x3a>
 8014e18:	683b      	ldr	r3, [r7, #0]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d007      	beq.n	8014e2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8014e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	3304      	adds	r3, #4
 8014e24:	4619      	mov	r1, r3
 8014e26:	4819      	ldr	r0, [pc, #100]	@ (8014e8c <prvAddCurrentTaskToDelayedList+0x98>)
 8014e28:	f7fe f9e3 	bl	80131f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014e2c:	e026      	b.n	8014e7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014e2e:	68fa      	ldr	r2, [r7, #12]
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	4413      	add	r3, r2
 8014e34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014e36:	4b14      	ldr	r3, [pc, #80]	@ (8014e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	68ba      	ldr	r2, [r7, #8]
 8014e3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014e3e:	68ba      	ldr	r2, [r7, #8]
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	429a      	cmp	r2, r3
 8014e44:	d209      	bcs.n	8014e5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014e46:	4b12      	ldr	r3, [pc, #72]	@ (8014e90 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014e48:	681a      	ldr	r2, [r3, #0]
 8014e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8014e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	3304      	adds	r3, #4
 8014e50:	4619      	mov	r1, r3
 8014e52:	4610      	mov	r0, r2
 8014e54:	f7fe f9f1 	bl	801323a <vListInsert>
}
 8014e58:	e010      	b.n	8014e7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8014e94 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014e5c:	681a      	ldr	r2, [r3, #0]
 8014e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8014e88 <prvAddCurrentTaskToDelayedList+0x94>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	3304      	adds	r3, #4
 8014e64:	4619      	mov	r1, r3
 8014e66:	4610      	mov	r0, r2
 8014e68:	f7fe f9e7 	bl	801323a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8014e98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	68ba      	ldr	r2, [r7, #8]
 8014e72:	429a      	cmp	r2, r3
 8014e74:	d202      	bcs.n	8014e7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014e76:	4a08      	ldr	r2, [pc, #32]	@ (8014e98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014e78:	68bb      	ldr	r3, [r7, #8]
 8014e7a:	6013      	str	r3, [r2, #0]
}
 8014e7c:	bf00      	nop
 8014e7e:	3710      	adds	r7, #16
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	20001238 	.word	0x20001238
 8014e88:	20000d60 	.word	0x20000d60
 8014e8c:	20001220 	.word	0x20001220
 8014e90:	200011f0 	.word	0x200011f0
 8014e94:	200011ec 	.word	0x200011ec
 8014e98:	20001254 	.word	0x20001254

08014e9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b08a      	sub	sp, #40	@ 0x28
 8014ea0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014ea6:	f000 fb13 	bl	80154d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8014f20 <xTimerCreateTimerTask+0x84>)
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d021      	beq.n	8014ef6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014eba:	1d3a      	adds	r2, r7, #4
 8014ebc:	f107 0108 	add.w	r1, r7, #8
 8014ec0:	f107 030c 	add.w	r3, r7, #12
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	f7fe f94d 	bl	8013164 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014eca:	6879      	ldr	r1, [r7, #4]
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	68fa      	ldr	r2, [r7, #12]
 8014ed0:	9202      	str	r2, [sp, #8]
 8014ed2:	9301      	str	r3, [sp, #4]
 8014ed4:	2302      	movs	r3, #2
 8014ed6:	9300      	str	r3, [sp, #0]
 8014ed8:	2300      	movs	r3, #0
 8014eda:	460a      	mov	r2, r1
 8014edc:	4911      	ldr	r1, [pc, #68]	@ (8014f24 <xTimerCreateTimerTask+0x88>)
 8014ede:	4812      	ldr	r0, [pc, #72]	@ (8014f28 <xTimerCreateTimerTask+0x8c>)
 8014ee0:	f7fe ffc6 	bl	8013e70 <xTaskCreateStatic>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	4a11      	ldr	r2, [pc, #68]	@ (8014f2c <xTimerCreateTimerTask+0x90>)
 8014ee8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014eea:	4b10      	ldr	r3, [pc, #64]	@ (8014f2c <xTimerCreateTimerTask+0x90>)
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d001      	beq.n	8014ef6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014ef2:	2301      	movs	r3, #1
 8014ef4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014ef6:	697b      	ldr	r3, [r7, #20]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d10b      	bne.n	8014f14 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8014efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f00:	f383 8811 	msr	BASEPRI, r3
 8014f04:	f3bf 8f6f 	isb	sy
 8014f08:	f3bf 8f4f 	dsb	sy
 8014f0c:	613b      	str	r3, [r7, #16]
}
 8014f0e:	bf00      	nop
 8014f10:	bf00      	nop
 8014f12:	e7fd      	b.n	8014f10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8014f14:	697b      	ldr	r3, [r7, #20]
}
 8014f16:	4618      	mov	r0, r3
 8014f18:	3718      	adds	r7, #24
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bd80      	pop	{r7, pc}
 8014f1e:	bf00      	nop
 8014f20:	20001290 	.word	0x20001290
 8014f24:	0801731c 	.word	0x0801731c
 8014f28:	08015069 	.word	0x08015069
 8014f2c:	20001294 	.word	0x20001294

08014f30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b08a      	sub	sp, #40	@ 0x28
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	60f8      	str	r0, [r7, #12]
 8014f38:	60b9      	str	r1, [r7, #8]
 8014f3a:	607a      	str	r2, [r7, #4]
 8014f3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d10b      	bne.n	8014f60 <xTimerGenericCommand+0x30>
	__asm volatile
 8014f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f4c:	f383 8811 	msr	BASEPRI, r3
 8014f50:	f3bf 8f6f 	isb	sy
 8014f54:	f3bf 8f4f 	dsb	sy
 8014f58:	623b      	str	r3, [r7, #32]
}
 8014f5a:	bf00      	nop
 8014f5c:	bf00      	nop
 8014f5e:	e7fd      	b.n	8014f5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014f60:	4b19      	ldr	r3, [pc, #100]	@ (8014fc8 <xTimerGenericCommand+0x98>)
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d02a      	beq.n	8014fbe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014f68:	68bb      	ldr	r3, [r7, #8]
 8014f6a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014f74:	68bb      	ldr	r3, [r7, #8]
 8014f76:	2b05      	cmp	r3, #5
 8014f78:	dc18      	bgt.n	8014fac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014f7a:	f7ff fead 	bl	8014cd8 <xTaskGetSchedulerState>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	2b02      	cmp	r3, #2
 8014f82:	d109      	bne.n	8014f98 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014f84:	4b10      	ldr	r3, [pc, #64]	@ (8014fc8 <xTimerGenericCommand+0x98>)
 8014f86:	6818      	ldr	r0, [r3, #0]
 8014f88:	f107 0110 	add.w	r1, r7, #16
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014f90:	f7fe fafc 	bl	801358c <xQueueGenericSend>
 8014f94:	6278      	str	r0, [r7, #36]	@ 0x24
 8014f96:	e012      	b.n	8014fbe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014f98:	4b0b      	ldr	r3, [pc, #44]	@ (8014fc8 <xTimerGenericCommand+0x98>)
 8014f9a:	6818      	ldr	r0, [r3, #0]
 8014f9c:	f107 0110 	add.w	r1, r7, #16
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	f7fe faf2 	bl	801358c <xQueueGenericSend>
 8014fa8:	6278      	str	r0, [r7, #36]	@ 0x24
 8014faa:	e008      	b.n	8014fbe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014fac:	4b06      	ldr	r3, [pc, #24]	@ (8014fc8 <xTimerGenericCommand+0x98>)
 8014fae:	6818      	ldr	r0, [r3, #0]
 8014fb0:	f107 0110 	add.w	r1, r7, #16
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	683a      	ldr	r2, [r7, #0]
 8014fb8:	f7fe fbea 	bl	8013790 <xQueueGenericSendFromISR>
 8014fbc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	3728      	adds	r7, #40	@ 0x28
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}
 8014fc8:	20001290 	.word	0x20001290

08014fcc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b088      	sub	sp, #32
 8014fd0:	af02      	add	r7, sp, #8
 8014fd2:	6078      	str	r0, [r7, #4]
 8014fd4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014fd6:	4b23      	ldr	r3, [pc, #140]	@ (8015064 <prvProcessExpiredTimer+0x98>)
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	68db      	ldr	r3, [r3, #12]
 8014fdc:	68db      	ldr	r3, [r3, #12]
 8014fde:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	3304      	adds	r3, #4
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f7fe f961 	bl	80132ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014fea:	697b      	ldr	r3, [r7, #20]
 8014fec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014ff0:	f003 0304 	and.w	r3, r3, #4
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d023      	beq.n	8015040 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014ff8:	697b      	ldr	r3, [r7, #20]
 8014ffa:	699a      	ldr	r2, [r3, #24]
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	18d1      	adds	r1, r2, r3
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	683a      	ldr	r2, [r7, #0]
 8015004:	6978      	ldr	r0, [r7, #20]
 8015006:	f000 f8d5 	bl	80151b4 <prvInsertTimerInActiveList>
 801500a:	4603      	mov	r3, r0
 801500c:	2b00      	cmp	r3, #0
 801500e:	d020      	beq.n	8015052 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015010:	2300      	movs	r3, #0
 8015012:	9300      	str	r3, [sp, #0]
 8015014:	2300      	movs	r3, #0
 8015016:	687a      	ldr	r2, [r7, #4]
 8015018:	2100      	movs	r1, #0
 801501a:	6978      	ldr	r0, [r7, #20]
 801501c:	f7ff ff88 	bl	8014f30 <xTimerGenericCommand>
 8015020:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015022:	693b      	ldr	r3, [r7, #16]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d114      	bne.n	8015052 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8015028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801502c:	f383 8811 	msr	BASEPRI, r3
 8015030:	f3bf 8f6f 	isb	sy
 8015034:	f3bf 8f4f 	dsb	sy
 8015038:	60fb      	str	r3, [r7, #12]
}
 801503a:	bf00      	nop
 801503c:	bf00      	nop
 801503e:	e7fd      	b.n	801503c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015046:	f023 0301 	bic.w	r3, r3, #1
 801504a:	b2da      	uxtb	r2, r3
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015052:	697b      	ldr	r3, [r7, #20]
 8015054:	6a1b      	ldr	r3, [r3, #32]
 8015056:	6978      	ldr	r0, [r7, #20]
 8015058:	4798      	blx	r3
}
 801505a:	bf00      	nop
 801505c:	3718      	adds	r7, #24
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}
 8015062:	bf00      	nop
 8015064:	20001288 	.word	0x20001288

08015068 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b084      	sub	sp, #16
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015070:	f107 0308 	add.w	r3, r7, #8
 8015074:	4618      	mov	r0, r3
 8015076:	f000 f859 	bl	801512c <prvGetNextExpireTime>
 801507a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	4619      	mov	r1, r3
 8015080:	68f8      	ldr	r0, [r7, #12]
 8015082:	f000 f805 	bl	8015090 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015086:	f000 f8d7 	bl	8015238 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801508a:	bf00      	nop
 801508c:	e7f0      	b.n	8015070 <prvTimerTask+0x8>
	...

08015090 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b084      	sub	sp, #16
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
 8015098:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801509a:	f7ff fa29 	bl	80144f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801509e:	f107 0308 	add.w	r3, r7, #8
 80150a2:	4618      	mov	r0, r3
 80150a4:	f000 f866 	bl	8015174 <prvSampleTimeNow>
 80150a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80150aa:	68bb      	ldr	r3, [r7, #8]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d130      	bne.n	8015112 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d10a      	bne.n	80150cc <prvProcessTimerOrBlockTask+0x3c>
 80150b6:	687a      	ldr	r2, [r7, #4]
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	429a      	cmp	r2, r3
 80150bc:	d806      	bhi.n	80150cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80150be:	f7ff fa25 	bl	801450c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80150c2:	68f9      	ldr	r1, [r7, #12]
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f7ff ff81 	bl	8014fcc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80150ca:	e024      	b.n	8015116 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d008      	beq.n	80150e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80150d2:	4b13      	ldr	r3, [pc, #76]	@ (8015120 <prvProcessTimerOrBlockTask+0x90>)
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d101      	bne.n	80150e0 <prvProcessTimerOrBlockTask+0x50>
 80150dc:	2301      	movs	r3, #1
 80150de:	e000      	b.n	80150e2 <prvProcessTimerOrBlockTask+0x52>
 80150e0:	2300      	movs	r3, #0
 80150e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80150e4:	4b0f      	ldr	r3, [pc, #60]	@ (8015124 <prvProcessTimerOrBlockTask+0x94>)
 80150e6:	6818      	ldr	r0, [r3, #0]
 80150e8:	687a      	ldr	r2, [r7, #4]
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	1ad3      	subs	r3, r2, r3
 80150ee:	683a      	ldr	r2, [r7, #0]
 80150f0:	4619      	mov	r1, r3
 80150f2:	f7fe fe89 	bl	8013e08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80150f6:	f7ff fa09 	bl	801450c <xTaskResumeAll>
 80150fa:	4603      	mov	r3, r0
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d10a      	bne.n	8015116 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015100:	4b09      	ldr	r3, [pc, #36]	@ (8015128 <prvProcessTimerOrBlockTask+0x98>)
 8015102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015106:	601a      	str	r2, [r3, #0]
 8015108:	f3bf 8f4f 	dsb	sy
 801510c:	f3bf 8f6f 	isb	sy
}
 8015110:	e001      	b.n	8015116 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015112:	f7ff f9fb 	bl	801450c <xTaskResumeAll>
}
 8015116:	bf00      	nop
 8015118:	3710      	adds	r7, #16
 801511a:	46bd      	mov	sp, r7
 801511c:	bd80      	pop	{r7, pc}
 801511e:	bf00      	nop
 8015120:	2000128c 	.word	0x2000128c
 8015124:	20001290 	.word	0x20001290
 8015128:	e000ed04 	.word	0xe000ed04

0801512c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801512c:	b480      	push	{r7}
 801512e:	b085      	sub	sp, #20
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015134:	4b0e      	ldr	r3, [pc, #56]	@ (8015170 <prvGetNextExpireTime+0x44>)
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d101      	bne.n	8015142 <prvGetNextExpireTime+0x16>
 801513e:	2201      	movs	r2, #1
 8015140:	e000      	b.n	8015144 <prvGetNextExpireTime+0x18>
 8015142:	2200      	movs	r2, #0
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d105      	bne.n	801515c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015150:	4b07      	ldr	r3, [pc, #28]	@ (8015170 <prvGetNextExpireTime+0x44>)
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	68db      	ldr	r3, [r3, #12]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	60fb      	str	r3, [r7, #12]
 801515a:	e001      	b.n	8015160 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801515c:	2300      	movs	r3, #0
 801515e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015160:	68fb      	ldr	r3, [r7, #12]
}
 8015162:	4618      	mov	r0, r3
 8015164:	3714      	adds	r7, #20
 8015166:	46bd      	mov	sp, r7
 8015168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516c:	4770      	bx	lr
 801516e:	bf00      	nop
 8015170:	20001288 	.word	0x20001288

08015174 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b084      	sub	sp, #16
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801517c:	f7ff fa64 	bl	8014648 <xTaskGetTickCount>
 8015180:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015182:	4b0b      	ldr	r3, [pc, #44]	@ (80151b0 <prvSampleTimeNow+0x3c>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	68fa      	ldr	r2, [r7, #12]
 8015188:	429a      	cmp	r2, r3
 801518a:	d205      	bcs.n	8015198 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801518c:	f000 f93a 	bl	8015404 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	2201      	movs	r2, #1
 8015194:	601a      	str	r2, [r3, #0]
 8015196:	e002      	b.n	801519e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	2200      	movs	r2, #0
 801519c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801519e:	4a04      	ldr	r2, [pc, #16]	@ (80151b0 <prvSampleTimeNow+0x3c>)
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80151a4:	68fb      	ldr	r3, [r7, #12]
}
 80151a6:	4618      	mov	r0, r3
 80151a8:	3710      	adds	r7, #16
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bd80      	pop	{r7, pc}
 80151ae:	bf00      	nop
 80151b0:	20001298 	.word	0x20001298

080151b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b086      	sub	sp, #24
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	60f8      	str	r0, [r7, #12]
 80151bc:	60b9      	str	r1, [r7, #8]
 80151be:	607a      	str	r2, [r7, #4]
 80151c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80151c2:	2300      	movs	r3, #0
 80151c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	68ba      	ldr	r2, [r7, #8]
 80151ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	68fa      	ldr	r2, [r7, #12]
 80151d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80151d2:	68ba      	ldr	r2, [r7, #8]
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	429a      	cmp	r2, r3
 80151d8:	d812      	bhi.n	8015200 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80151da:	687a      	ldr	r2, [r7, #4]
 80151dc:	683b      	ldr	r3, [r7, #0]
 80151de:	1ad2      	subs	r2, r2, r3
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	699b      	ldr	r3, [r3, #24]
 80151e4:	429a      	cmp	r2, r3
 80151e6:	d302      	bcc.n	80151ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80151e8:	2301      	movs	r3, #1
 80151ea:	617b      	str	r3, [r7, #20]
 80151ec:	e01b      	b.n	8015226 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80151ee:	4b10      	ldr	r3, [pc, #64]	@ (8015230 <prvInsertTimerInActiveList+0x7c>)
 80151f0:	681a      	ldr	r2, [r3, #0]
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	3304      	adds	r3, #4
 80151f6:	4619      	mov	r1, r3
 80151f8:	4610      	mov	r0, r2
 80151fa:	f7fe f81e 	bl	801323a <vListInsert>
 80151fe:	e012      	b.n	8015226 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015200:	687a      	ldr	r2, [r7, #4]
 8015202:	683b      	ldr	r3, [r7, #0]
 8015204:	429a      	cmp	r2, r3
 8015206:	d206      	bcs.n	8015216 <prvInsertTimerInActiveList+0x62>
 8015208:	68ba      	ldr	r2, [r7, #8]
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	429a      	cmp	r2, r3
 801520e:	d302      	bcc.n	8015216 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015210:	2301      	movs	r3, #1
 8015212:	617b      	str	r3, [r7, #20]
 8015214:	e007      	b.n	8015226 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015216:	4b07      	ldr	r3, [pc, #28]	@ (8015234 <prvInsertTimerInActiveList+0x80>)
 8015218:	681a      	ldr	r2, [r3, #0]
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	3304      	adds	r3, #4
 801521e:	4619      	mov	r1, r3
 8015220:	4610      	mov	r0, r2
 8015222:	f7fe f80a 	bl	801323a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015226:	697b      	ldr	r3, [r7, #20]
}
 8015228:	4618      	mov	r0, r3
 801522a:	3718      	adds	r7, #24
 801522c:	46bd      	mov	sp, r7
 801522e:	bd80      	pop	{r7, pc}
 8015230:	2000128c 	.word	0x2000128c
 8015234:	20001288 	.word	0x20001288

08015238 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b08e      	sub	sp, #56	@ 0x38
 801523c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801523e:	e0ce      	b.n	80153de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2b00      	cmp	r3, #0
 8015244:	da19      	bge.n	801527a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015246:	1d3b      	adds	r3, r7, #4
 8015248:	3304      	adds	r3, #4
 801524a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801524c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801524e:	2b00      	cmp	r3, #0
 8015250:	d10b      	bne.n	801526a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8015252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015256:	f383 8811 	msr	BASEPRI, r3
 801525a:	f3bf 8f6f 	isb	sy
 801525e:	f3bf 8f4f 	dsb	sy
 8015262:	61fb      	str	r3, [r7, #28]
}
 8015264:	bf00      	nop
 8015266:	bf00      	nop
 8015268:	e7fd      	b.n	8015266 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801526a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015270:	6850      	ldr	r0, [r2, #4]
 8015272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015274:	6892      	ldr	r2, [r2, #8]
 8015276:	4611      	mov	r1, r2
 8015278:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	2b00      	cmp	r3, #0
 801527e:	f2c0 80ae 	blt.w	80153de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015288:	695b      	ldr	r3, [r3, #20]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d004      	beq.n	8015298 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801528e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015290:	3304      	adds	r3, #4
 8015292:	4618      	mov	r0, r3
 8015294:	f7fe f80a 	bl	80132ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015298:	463b      	mov	r3, r7
 801529a:	4618      	mov	r0, r3
 801529c:	f7ff ff6a 	bl	8015174 <prvSampleTimeNow>
 80152a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	2b09      	cmp	r3, #9
 80152a6:	f200 8097 	bhi.w	80153d8 <prvProcessReceivedCommands+0x1a0>
 80152aa:	a201      	add	r2, pc, #4	@ (adr r2, 80152b0 <prvProcessReceivedCommands+0x78>)
 80152ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152b0:	080152d9 	.word	0x080152d9
 80152b4:	080152d9 	.word	0x080152d9
 80152b8:	080152d9 	.word	0x080152d9
 80152bc:	0801534f 	.word	0x0801534f
 80152c0:	08015363 	.word	0x08015363
 80152c4:	080153af 	.word	0x080153af
 80152c8:	080152d9 	.word	0x080152d9
 80152cc:	080152d9 	.word	0x080152d9
 80152d0:	0801534f 	.word	0x0801534f
 80152d4:	08015363 	.word	0x08015363
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80152d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80152de:	f043 0301 	orr.w	r3, r3, #1
 80152e2:	b2da      	uxtb	r2, r3
 80152e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80152ea:	68ba      	ldr	r2, [r7, #8]
 80152ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152ee:	699b      	ldr	r3, [r3, #24]
 80152f0:	18d1      	adds	r1, r2, r3
 80152f2:	68bb      	ldr	r3, [r7, #8]
 80152f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80152f8:	f7ff ff5c 	bl	80151b4 <prvInsertTimerInActiveList>
 80152fc:	4603      	mov	r3, r0
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d06c      	beq.n	80153dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015304:	6a1b      	ldr	r3, [r3, #32]
 8015306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015308:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801530a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801530c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015310:	f003 0304 	and.w	r3, r3, #4
 8015314:	2b00      	cmp	r3, #0
 8015316:	d061      	beq.n	80153dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015318:	68ba      	ldr	r2, [r7, #8]
 801531a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801531c:	699b      	ldr	r3, [r3, #24]
 801531e:	441a      	add	r2, r3
 8015320:	2300      	movs	r3, #0
 8015322:	9300      	str	r3, [sp, #0]
 8015324:	2300      	movs	r3, #0
 8015326:	2100      	movs	r1, #0
 8015328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801532a:	f7ff fe01 	bl	8014f30 <xTimerGenericCommand>
 801532e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015330:	6a3b      	ldr	r3, [r7, #32]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d152      	bne.n	80153dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8015336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801533a:	f383 8811 	msr	BASEPRI, r3
 801533e:	f3bf 8f6f 	isb	sy
 8015342:	f3bf 8f4f 	dsb	sy
 8015346:	61bb      	str	r3, [r7, #24]
}
 8015348:	bf00      	nop
 801534a:	bf00      	nop
 801534c:	e7fd      	b.n	801534a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801534e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015350:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015354:	f023 0301 	bic.w	r3, r3, #1
 8015358:	b2da      	uxtb	r2, r3
 801535a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801535c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8015360:	e03d      	b.n	80153de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015364:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015368:	f043 0301 	orr.w	r3, r3, #1
 801536c:	b2da      	uxtb	r2, r3
 801536e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015370:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015374:	68ba      	ldr	r2, [r7, #8]
 8015376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015378:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801537a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801537c:	699b      	ldr	r3, [r3, #24]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d10b      	bne.n	801539a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8015382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015386:	f383 8811 	msr	BASEPRI, r3
 801538a:	f3bf 8f6f 	isb	sy
 801538e:	f3bf 8f4f 	dsb	sy
 8015392:	617b      	str	r3, [r7, #20]
}
 8015394:	bf00      	nop
 8015396:	bf00      	nop
 8015398:	e7fd      	b.n	8015396 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801539a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801539c:	699a      	ldr	r2, [r3, #24]
 801539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153a0:	18d1      	adds	r1, r2, r3
 80153a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80153a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80153a8:	f7ff ff04 	bl	80151b4 <prvInsertTimerInActiveList>
					break;
 80153ac:	e017      	b.n	80153de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80153ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80153b4:	f003 0302 	and.w	r3, r3, #2
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d103      	bne.n	80153c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80153bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80153be:	f000 fbeb 	bl	8015b98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80153c2:	e00c      	b.n	80153de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80153c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80153ca:	f023 0301 	bic.w	r3, r3, #1
 80153ce:	b2da      	uxtb	r2, r3
 80153d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80153d6:	e002      	b.n	80153de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80153d8:	bf00      	nop
 80153da:	e000      	b.n	80153de <prvProcessReceivedCommands+0x1a6>
					break;
 80153dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80153de:	4b08      	ldr	r3, [pc, #32]	@ (8015400 <prvProcessReceivedCommands+0x1c8>)
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	1d39      	adds	r1, r7, #4
 80153e4:	2200      	movs	r2, #0
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7fe fa70 	bl	80138cc <xQueueReceive>
 80153ec:	4603      	mov	r3, r0
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	f47f af26 	bne.w	8015240 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80153f4:	bf00      	nop
 80153f6:	bf00      	nop
 80153f8:	3730      	adds	r7, #48	@ 0x30
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd80      	pop	{r7, pc}
 80153fe:	bf00      	nop
 8015400:	20001290 	.word	0x20001290

08015404 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b088      	sub	sp, #32
 8015408:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801540a:	e049      	b.n	80154a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801540c:	4b2e      	ldr	r3, [pc, #184]	@ (80154c8 <prvSwitchTimerLists+0xc4>)
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	68db      	ldr	r3, [r3, #12]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015416:	4b2c      	ldr	r3, [pc, #176]	@ (80154c8 <prvSwitchTimerLists+0xc4>)
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	68db      	ldr	r3, [r3, #12]
 801541c:	68db      	ldr	r3, [r3, #12]
 801541e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	3304      	adds	r3, #4
 8015424:	4618      	mov	r0, r3
 8015426:	f7fd ff41 	bl	80132ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	6a1b      	ldr	r3, [r3, #32]
 801542e:	68f8      	ldr	r0, [r7, #12]
 8015430:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015438:	f003 0304 	and.w	r3, r3, #4
 801543c:	2b00      	cmp	r3, #0
 801543e:	d02f      	beq.n	80154a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	699b      	ldr	r3, [r3, #24]
 8015444:	693a      	ldr	r2, [r7, #16]
 8015446:	4413      	add	r3, r2
 8015448:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801544a:	68ba      	ldr	r2, [r7, #8]
 801544c:	693b      	ldr	r3, [r7, #16]
 801544e:	429a      	cmp	r2, r3
 8015450:	d90e      	bls.n	8015470 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	68ba      	ldr	r2, [r7, #8]
 8015456:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	68fa      	ldr	r2, [r7, #12]
 801545c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801545e:	4b1a      	ldr	r3, [pc, #104]	@ (80154c8 <prvSwitchTimerLists+0xc4>)
 8015460:	681a      	ldr	r2, [r3, #0]
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	3304      	adds	r3, #4
 8015466:	4619      	mov	r1, r3
 8015468:	4610      	mov	r0, r2
 801546a:	f7fd fee6 	bl	801323a <vListInsert>
 801546e:	e017      	b.n	80154a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015470:	2300      	movs	r3, #0
 8015472:	9300      	str	r3, [sp, #0]
 8015474:	2300      	movs	r3, #0
 8015476:	693a      	ldr	r2, [r7, #16]
 8015478:	2100      	movs	r1, #0
 801547a:	68f8      	ldr	r0, [r7, #12]
 801547c:	f7ff fd58 	bl	8014f30 <xTimerGenericCommand>
 8015480:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d10b      	bne.n	80154a0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8015488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801548c:	f383 8811 	msr	BASEPRI, r3
 8015490:	f3bf 8f6f 	isb	sy
 8015494:	f3bf 8f4f 	dsb	sy
 8015498:	603b      	str	r3, [r7, #0]
}
 801549a:	bf00      	nop
 801549c:	bf00      	nop
 801549e:	e7fd      	b.n	801549c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80154a0:	4b09      	ldr	r3, [pc, #36]	@ (80154c8 <prvSwitchTimerLists+0xc4>)
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d1b0      	bne.n	801540c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80154aa:	4b07      	ldr	r3, [pc, #28]	@ (80154c8 <prvSwitchTimerLists+0xc4>)
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80154b0:	4b06      	ldr	r3, [pc, #24]	@ (80154cc <prvSwitchTimerLists+0xc8>)
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	4a04      	ldr	r2, [pc, #16]	@ (80154c8 <prvSwitchTimerLists+0xc4>)
 80154b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80154b8:	4a04      	ldr	r2, [pc, #16]	@ (80154cc <prvSwitchTimerLists+0xc8>)
 80154ba:	697b      	ldr	r3, [r7, #20]
 80154bc:	6013      	str	r3, [r2, #0]
}
 80154be:	bf00      	nop
 80154c0:	3718      	adds	r7, #24
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bd80      	pop	{r7, pc}
 80154c6:	bf00      	nop
 80154c8:	20001288 	.word	0x20001288
 80154cc:	2000128c 	.word	0x2000128c

080154d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b082      	sub	sp, #8
 80154d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80154d6:	f000 f96f 	bl	80157b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80154da:	4b15      	ldr	r3, [pc, #84]	@ (8015530 <prvCheckForValidListAndQueue+0x60>)
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d120      	bne.n	8015524 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80154e2:	4814      	ldr	r0, [pc, #80]	@ (8015534 <prvCheckForValidListAndQueue+0x64>)
 80154e4:	f7fd fe58 	bl	8013198 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80154e8:	4813      	ldr	r0, [pc, #76]	@ (8015538 <prvCheckForValidListAndQueue+0x68>)
 80154ea:	f7fd fe55 	bl	8013198 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80154ee:	4b13      	ldr	r3, [pc, #76]	@ (801553c <prvCheckForValidListAndQueue+0x6c>)
 80154f0:	4a10      	ldr	r2, [pc, #64]	@ (8015534 <prvCheckForValidListAndQueue+0x64>)
 80154f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80154f4:	4b12      	ldr	r3, [pc, #72]	@ (8015540 <prvCheckForValidListAndQueue+0x70>)
 80154f6:	4a10      	ldr	r2, [pc, #64]	@ (8015538 <prvCheckForValidListAndQueue+0x68>)
 80154f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80154fa:	2300      	movs	r3, #0
 80154fc:	9300      	str	r3, [sp, #0]
 80154fe:	4b11      	ldr	r3, [pc, #68]	@ (8015544 <prvCheckForValidListAndQueue+0x74>)
 8015500:	4a11      	ldr	r2, [pc, #68]	@ (8015548 <prvCheckForValidListAndQueue+0x78>)
 8015502:	2110      	movs	r1, #16
 8015504:	200a      	movs	r0, #10
 8015506:	f7fd ff65 	bl	80133d4 <xQueueGenericCreateStatic>
 801550a:	4603      	mov	r3, r0
 801550c:	4a08      	ldr	r2, [pc, #32]	@ (8015530 <prvCheckForValidListAndQueue+0x60>)
 801550e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015510:	4b07      	ldr	r3, [pc, #28]	@ (8015530 <prvCheckForValidListAndQueue+0x60>)
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d005      	beq.n	8015524 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015518:	4b05      	ldr	r3, [pc, #20]	@ (8015530 <prvCheckForValidListAndQueue+0x60>)
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	490b      	ldr	r1, [pc, #44]	@ (801554c <prvCheckForValidListAndQueue+0x7c>)
 801551e:	4618      	mov	r0, r3
 8015520:	f7fe fc48 	bl	8013db4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015524:	f000 f97a 	bl	801581c <vPortExitCritical>
}
 8015528:	bf00      	nop
 801552a:	46bd      	mov	sp, r7
 801552c:	bd80      	pop	{r7, pc}
 801552e:	bf00      	nop
 8015530:	20001290 	.word	0x20001290
 8015534:	20001260 	.word	0x20001260
 8015538:	20001274 	.word	0x20001274
 801553c:	20001288 	.word	0x20001288
 8015540:	2000128c 	.word	0x2000128c
 8015544:	2000133c 	.word	0x2000133c
 8015548:	2000129c 	.word	0x2000129c
 801554c:	08017324 	.word	0x08017324

08015550 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015550:	b480      	push	{r7}
 8015552:	b085      	sub	sp, #20
 8015554:	af00      	add	r7, sp, #0
 8015556:	60f8      	str	r0, [r7, #12]
 8015558:	60b9      	str	r1, [r7, #8]
 801555a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	3b04      	subs	r3, #4
 8015560:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	3b04      	subs	r3, #4
 801556e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015570:	68bb      	ldr	r3, [r7, #8]
 8015572:	f023 0201 	bic.w	r2, r3, #1
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	3b04      	subs	r3, #4
 801557e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015580:	4a0c      	ldr	r2, [pc, #48]	@ (80155b4 <pxPortInitialiseStack+0x64>)
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	3b14      	subs	r3, #20
 801558a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801558c:	687a      	ldr	r2, [r7, #4]
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	3b04      	subs	r3, #4
 8015596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	f06f 0202 	mvn.w	r2, #2
 801559e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	3b20      	subs	r3, #32
 80155a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80155a6:	68fb      	ldr	r3, [r7, #12]
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	3714      	adds	r7, #20
 80155ac:	46bd      	mov	sp, r7
 80155ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b2:	4770      	bx	lr
 80155b4:	080155b9 	.word	0x080155b9

080155b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80155b8:	b480      	push	{r7}
 80155ba:	b085      	sub	sp, #20
 80155bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80155be:	2300      	movs	r3, #0
 80155c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80155c2:	4b13      	ldr	r3, [pc, #76]	@ (8015610 <prvTaskExitError+0x58>)
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80155ca:	d00b      	beq.n	80155e4 <prvTaskExitError+0x2c>
	__asm volatile
 80155cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155d0:	f383 8811 	msr	BASEPRI, r3
 80155d4:	f3bf 8f6f 	isb	sy
 80155d8:	f3bf 8f4f 	dsb	sy
 80155dc:	60fb      	str	r3, [r7, #12]
}
 80155de:	bf00      	nop
 80155e0:	bf00      	nop
 80155e2:	e7fd      	b.n	80155e0 <prvTaskExitError+0x28>
	__asm volatile
 80155e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155e8:	f383 8811 	msr	BASEPRI, r3
 80155ec:	f3bf 8f6f 	isb	sy
 80155f0:	f3bf 8f4f 	dsb	sy
 80155f4:	60bb      	str	r3, [r7, #8]
}
 80155f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80155f8:	bf00      	nop
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d0fc      	beq.n	80155fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015600:	bf00      	nop
 8015602:	bf00      	nop
 8015604:	3714      	adds	r7, #20
 8015606:	46bd      	mov	sp, r7
 8015608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560c:	4770      	bx	lr
 801560e:	bf00      	nop
 8015610:	20000120 	.word	0x20000120
	...

08015620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015620:	4b07      	ldr	r3, [pc, #28]	@ (8015640 <pxCurrentTCBConst2>)
 8015622:	6819      	ldr	r1, [r3, #0]
 8015624:	6808      	ldr	r0, [r1, #0]
 8015626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801562a:	f380 8809 	msr	PSP, r0
 801562e:	f3bf 8f6f 	isb	sy
 8015632:	f04f 0000 	mov.w	r0, #0
 8015636:	f380 8811 	msr	BASEPRI, r0
 801563a:	4770      	bx	lr
 801563c:	f3af 8000 	nop.w

08015640 <pxCurrentTCBConst2>:
 8015640:	20000d60 	.word	0x20000d60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015644:	bf00      	nop
 8015646:	bf00      	nop

08015648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015648:	4808      	ldr	r0, [pc, #32]	@ (801566c <prvPortStartFirstTask+0x24>)
 801564a:	6800      	ldr	r0, [r0, #0]
 801564c:	6800      	ldr	r0, [r0, #0]
 801564e:	f380 8808 	msr	MSP, r0
 8015652:	f04f 0000 	mov.w	r0, #0
 8015656:	f380 8814 	msr	CONTROL, r0
 801565a:	b662      	cpsie	i
 801565c:	b661      	cpsie	f
 801565e:	f3bf 8f4f 	dsb	sy
 8015662:	f3bf 8f6f 	isb	sy
 8015666:	df00      	svc	0
 8015668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801566a:	bf00      	nop
 801566c:	e000ed08 	.word	0xe000ed08

08015670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b086      	sub	sp, #24
 8015674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015676:	4b47      	ldr	r3, [pc, #284]	@ (8015794 <xPortStartScheduler+0x124>)
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	4a47      	ldr	r2, [pc, #284]	@ (8015798 <xPortStartScheduler+0x128>)
 801567c:	4293      	cmp	r3, r2
 801567e:	d10b      	bne.n	8015698 <xPortStartScheduler+0x28>
	__asm volatile
 8015680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015684:	f383 8811 	msr	BASEPRI, r3
 8015688:	f3bf 8f6f 	isb	sy
 801568c:	f3bf 8f4f 	dsb	sy
 8015690:	613b      	str	r3, [r7, #16]
}
 8015692:	bf00      	nop
 8015694:	bf00      	nop
 8015696:	e7fd      	b.n	8015694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015698:	4b3e      	ldr	r3, [pc, #248]	@ (8015794 <xPortStartScheduler+0x124>)
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	4a3f      	ldr	r2, [pc, #252]	@ (801579c <xPortStartScheduler+0x12c>)
 801569e:	4293      	cmp	r3, r2
 80156a0:	d10b      	bne.n	80156ba <xPortStartScheduler+0x4a>
	__asm volatile
 80156a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156a6:	f383 8811 	msr	BASEPRI, r3
 80156aa:	f3bf 8f6f 	isb	sy
 80156ae:	f3bf 8f4f 	dsb	sy
 80156b2:	60fb      	str	r3, [r7, #12]
}
 80156b4:	bf00      	nop
 80156b6:	bf00      	nop
 80156b8:	e7fd      	b.n	80156b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80156ba:	4b39      	ldr	r3, [pc, #228]	@ (80157a0 <xPortStartScheduler+0x130>)
 80156bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80156be:	697b      	ldr	r3, [r7, #20]
 80156c0:	781b      	ldrb	r3, [r3, #0]
 80156c2:	b2db      	uxtb	r3, r3
 80156c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	22ff      	movs	r2, #255	@ 0xff
 80156ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80156cc:	697b      	ldr	r3, [r7, #20]
 80156ce:	781b      	ldrb	r3, [r3, #0]
 80156d0:	b2db      	uxtb	r3, r3
 80156d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80156d4:	78fb      	ldrb	r3, [r7, #3]
 80156d6:	b2db      	uxtb	r3, r3
 80156d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80156dc:	b2da      	uxtb	r2, r3
 80156de:	4b31      	ldr	r3, [pc, #196]	@ (80157a4 <xPortStartScheduler+0x134>)
 80156e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80156e2:	4b31      	ldr	r3, [pc, #196]	@ (80157a8 <xPortStartScheduler+0x138>)
 80156e4:	2207      	movs	r2, #7
 80156e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80156e8:	e009      	b.n	80156fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80156ea:	4b2f      	ldr	r3, [pc, #188]	@ (80157a8 <xPortStartScheduler+0x138>)
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	3b01      	subs	r3, #1
 80156f0:	4a2d      	ldr	r2, [pc, #180]	@ (80157a8 <xPortStartScheduler+0x138>)
 80156f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80156f4:	78fb      	ldrb	r3, [r7, #3]
 80156f6:	b2db      	uxtb	r3, r3
 80156f8:	005b      	lsls	r3, r3, #1
 80156fa:	b2db      	uxtb	r3, r3
 80156fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80156fe:	78fb      	ldrb	r3, [r7, #3]
 8015700:	b2db      	uxtb	r3, r3
 8015702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015706:	2b80      	cmp	r3, #128	@ 0x80
 8015708:	d0ef      	beq.n	80156ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801570a:	4b27      	ldr	r3, [pc, #156]	@ (80157a8 <xPortStartScheduler+0x138>)
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	f1c3 0307 	rsb	r3, r3, #7
 8015712:	2b04      	cmp	r3, #4
 8015714:	d00b      	beq.n	801572e <xPortStartScheduler+0xbe>
	__asm volatile
 8015716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801571a:	f383 8811 	msr	BASEPRI, r3
 801571e:	f3bf 8f6f 	isb	sy
 8015722:	f3bf 8f4f 	dsb	sy
 8015726:	60bb      	str	r3, [r7, #8]
}
 8015728:	bf00      	nop
 801572a:	bf00      	nop
 801572c:	e7fd      	b.n	801572a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801572e:	4b1e      	ldr	r3, [pc, #120]	@ (80157a8 <xPortStartScheduler+0x138>)
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	021b      	lsls	r3, r3, #8
 8015734:	4a1c      	ldr	r2, [pc, #112]	@ (80157a8 <xPortStartScheduler+0x138>)
 8015736:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015738:	4b1b      	ldr	r3, [pc, #108]	@ (80157a8 <xPortStartScheduler+0x138>)
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015740:	4a19      	ldr	r2, [pc, #100]	@ (80157a8 <xPortStartScheduler+0x138>)
 8015742:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	b2da      	uxtb	r2, r3
 8015748:	697b      	ldr	r3, [r7, #20]
 801574a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801574c:	4b17      	ldr	r3, [pc, #92]	@ (80157ac <xPortStartScheduler+0x13c>)
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	4a16      	ldr	r2, [pc, #88]	@ (80157ac <xPortStartScheduler+0x13c>)
 8015752:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015756:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015758:	4b14      	ldr	r3, [pc, #80]	@ (80157ac <xPortStartScheduler+0x13c>)
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	4a13      	ldr	r2, [pc, #76]	@ (80157ac <xPortStartScheduler+0x13c>)
 801575e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015762:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015764:	f000 f8da 	bl	801591c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015768:	4b11      	ldr	r3, [pc, #68]	@ (80157b0 <xPortStartScheduler+0x140>)
 801576a:	2200      	movs	r2, #0
 801576c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801576e:	f000 f8f9 	bl	8015964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015772:	4b10      	ldr	r3, [pc, #64]	@ (80157b4 <xPortStartScheduler+0x144>)
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	4a0f      	ldr	r2, [pc, #60]	@ (80157b4 <xPortStartScheduler+0x144>)
 8015778:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801577c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801577e:	f7ff ff63 	bl	8015648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015782:	f7ff f82b 	bl	80147dc <vTaskSwitchContext>
	prvTaskExitError();
 8015786:	f7ff ff17 	bl	80155b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801578a:	2300      	movs	r3, #0
}
 801578c:	4618      	mov	r0, r3
 801578e:	3718      	adds	r7, #24
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}
 8015794:	e000ed00 	.word	0xe000ed00
 8015798:	410fc271 	.word	0x410fc271
 801579c:	410fc270 	.word	0x410fc270
 80157a0:	e000e400 	.word	0xe000e400
 80157a4:	2000138c 	.word	0x2000138c
 80157a8:	20001390 	.word	0x20001390
 80157ac:	e000ed20 	.word	0xe000ed20
 80157b0:	20000120 	.word	0x20000120
 80157b4:	e000ef34 	.word	0xe000ef34

080157b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80157b8:	b480      	push	{r7}
 80157ba:	b083      	sub	sp, #12
 80157bc:	af00      	add	r7, sp, #0
	__asm volatile
 80157be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157c2:	f383 8811 	msr	BASEPRI, r3
 80157c6:	f3bf 8f6f 	isb	sy
 80157ca:	f3bf 8f4f 	dsb	sy
 80157ce:	607b      	str	r3, [r7, #4]
}
 80157d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80157d2:	4b10      	ldr	r3, [pc, #64]	@ (8015814 <vPortEnterCritical+0x5c>)
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	3301      	adds	r3, #1
 80157d8:	4a0e      	ldr	r2, [pc, #56]	@ (8015814 <vPortEnterCritical+0x5c>)
 80157da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80157dc:	4b0d      	ldr	r3, [pc, #52]	@ (8015814 <vPortEnterCritical+0x5c>)
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	2b01      	cmp	r3, #1
 80157e2:	d110      	bne.n	8015806 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80157e4:	4b0c      	ldr	r3, [pc, #48]	@ (8015818 <vPortEnterCritical+0x60>)
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	b2db      	uxtb	r3, r3
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d00b      	beq.n	8015806 <vPortEnterCritical+0x4e>
	__asm volatile
 80157ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157f2:	f383 8811 	msr	BASEPRI, r3
 80157f6:	f3bf 8f6f 	isb	sy
 80157fa:	f3bf 8f4f 	dsb	sy
 80157fe:	603b      	str	r3, [r7, #0]
}
 8015800:	bf00      	nop
 8015802:	bf00      	nop
 8015804:	e7fd      	b.n	8015802 <vPortEnterCritical+0x4a>
	}
}
 8015806:	bf00      	nop
 8015808:	370c      	adds	r7, #12
 801580a:	46bd      	mov	sp, r7
 801580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015810:	4770      	bx	lr
 8015812:	bf00      	nop
 8015814:	20000120 	.word	0x20000120
 8015818:	e000ed04 	.word	0xe000ed04

0801581c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801581c:	b480      	push	{r7}
 801581e:	b083      	sub	sp, #12
 8015820:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015822:	4b12      	ldr	r3, [pc, #72]	@ (801586c <vPortExitCritical+0x50>)
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d10b      	bne.n	8015842 <vPortExitCritical+0x26>
	__asm volatile
 801582a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801582e:	f383 8811 	msr	BASEPRI, r3
 8015832:	f3bf 8f6f 	isb	sy
 8015836:	f3bf 8f4f 	dsb	sy
 801583a:	607b      	str	r3, [r7, #4]
}
 801583c:	bf00      	nop
 801583e:	bf00      	nop
 8015840:	e7fd      	b.n	801583e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015842:	4b0a      	ldr	r3, [pc, #40]	@ (801586c <vPortExitCritical+0x50>)
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	3b01      	subs	r3, #1
 8015848:	4a08      	ldr	r2, [pc, #32]	@ (801586c <vPortExitCritical+0x50>)
 801584a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801584c:	4b07      	ldr	r3, [pc, #28]	@ (801586c <vPortExitCritical+0x50>)
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d105      	bne.n	8015860 <vPortExitCritical+0x44>
 8015854:	2300      	movs	r3, #0
 8015856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015858:	683b      	ldr	r3, [r7, #0]
 801585a:	f383 8811 	msr	BASEPRI, r3
}
 801585e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015860:	bf00      	nop
 8015862:	370c      	adds	r7, #12
 8015864:	46bd      	mov	sp, r7
 8015866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586a:	4770      	bx	lr
 801586c:	20000120 	.word	0x20000120

08015870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015870:	f3ef 8009 	mrs	r0, PSP
 8015874:	f3bf 8f6f 	isb	sy
 8015878:	4b15      	ldr	r3, [pc, #84]	@ (80158d0 <pxCurrentTCBConst>)
 801587a:	681a      	ldr	r2, [r3, #0]
 801587c:	f01e 0f10 	tst.w	lr, #16
 8015880:	bf08      	it	eq
 8015882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801588a:	6010      	str	r0, [r2, #0]
 801588c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015890:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015894:	f380 8811 	msr	BASEPRI, r0
 8015898:	f3bf 8f4f 	dsb	sy
 801589c:	f3bf 8f6f 	isb	sy
 80158a0:	f7fe ff9c 	bl	80147dc <vTaskSwitchContext>
 80158a4:	f04f 0000 	mov.w	r0, #0
 80158a8:	f380 8811 	msr	BASEPRI, r0
 80158ac:	bc09      	pop	{r0, r3}
 80158ae:	6819      	ldr	r1, [r3, #0]
 80158b0:	6808      	ldr	r0, [r1, #0]
 80158b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158b6:	f01e 0f10 	tst.w	lr, #16
 80158ba:	bf08      	it	eq
 80158bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80158c0:	f380 8809 	msr	PSP, r0
 80158c4:	f3bf 8f6f 	isb	sy
 80158c8:	4770      	bx	lr
 80158ca:	bf00      	nop
 80158cc:	f3af 8000 	nop.w

080158d0 <pxCurrentTCBConst>:
 80158d0:	20000d60 	.word	0x20000d60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80158d4:	bf00      	nop
 80158d6:	bf00      	nop

080158d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b082      	sub	sp, #8
 80158dc:	af00      	add	r7, sp, #0
	__asm volatile
 80158de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158e2:	f383 8811 	msr	BASEPRI, r3
 80158e6:	f3bf 8f6f 	isb	sy
 80158ea:	f3bf 8f4f 	dsb	sy
 80158ee:	607b      	str	r3, [r7, #4]
}
 80158f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80158f2:	f7fe feb9 	bl	8014668 <xTaskIncrementTick>
 80158f6:	4603      	mov	r3, r0
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d003      	beq.n	8015904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80158fc:	4b06      	ldr	r3, [pc, #24]	@ (8015918 <xPortSysTickHandler+0x40>)
 80158fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015902:	601a      	str	r2, [r3, #0]
 8015904:	2300      	movs	r3, #0
 8015906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015908:	683b      	ldr	r3, [r7, #0]
 801590a:	f383 8811 	msr	BASEPRI, r3
}
 801590e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015910:	bf00      	nop
 8015912:	3708      	adds	r7, #8
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}
 8015918:	e000ed04 	.word	0xe000ed04

0801591c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801591c:	b480      	push	{r7}
 801591e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015920:	4b0b      	ldr	r3, [pc, #44]	@ (8015950 <vPortSetupTimerInterrupt+0x34>)
 8015922:	2200      	movs	r2, #0
 8015924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015926:	4b0b      	ldr	r3, [pc, #44]	@ (8015954 <vPortSetupTimerInterrupt+0x38>)
 8015928:	2200      	movs	r2, #0
 801592a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801592c:	4b0a      	ldr	r3, [pc, #40]	@ (8015958 <vPortSetupTimerInterrupt+0x3c>)
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	4a0a      	ldr	r2, [pc, #40]	@ (801595c <vPortSetupTimerInterrupt+0x40>)
 8015932:	fba2 2303 	umull	r2, r3, r2, r3
 8015936:	099b      	lsrs	r3, r3, #6
 8015938:	4a09      	ldr	r2, [pc, #36]	@ (8015960 <vPortSetupTimerInterrupt+0x44>)
 801593a:	3b01      	subs	r3, #1
 801593c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801593e:	4b04      	ldr	r3, [pc, #16]	@ (8015950 <vPortSetupTimerInterrupt+0x34>)
 8015940:	2207      	movs	r2, #7
 8015942:	601a      	str	r2, [r3, #0]
}
 8015944:	bf00      	nop
 8015946:	46bd      	mov	sp, r7
 8015948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594c:	4770      	bx	lr
 801594e:	bf00      	nop
 8015950:	e000e010 	.word	0xe000e010
 8015954:	e000e018 	.word	0xe000e018
 8015958:	20000004 	.word	0x20000004
 801595c:	10624dd3 	.word	0x10624dd3
 8015960:	e000e014 	.word	0xe000e014

08015964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015964:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8015974 <vPortEnableVFP+0x10>
 8015968:	6801      	ldr	r1, [r0, #0]
 801596a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801596e:	6001      	str	r1, [r0, #0]
 8015970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015972:	bf00      	nop
 8015974:	e000ed88 	.word	0xe000ed88

08015978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015978:	b480      	push	{r7}
 801597a:	b085      	sub	sp, #20
 801597c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801597e:	f3ef 8305 	mrs	r3, IPSR
 8015982:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	2b0f      	cmp	r3, #15
 8015988:	d915      	bls.n	80159b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801598a:	4a18      	ldr	r2, [pc, #96]	@ (80159ec <vPortValidateInterruptPriority+0x74>)
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	4413      	add	r3, r2
 8015990:	781b      	ldrb	r3, [r3, #0]
 8015992:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015994:	4b16      	ldr	r3, [pc, #88]	@ (80159f0 <vPortValidateInterruptPriority+0x78>)
 8015996:	781b      	ldrb	r3, [r3, #0]
 8015998:	7afa      	ldrb	r2, [r7, #11]
 801599a:	429a      	cmp	r2, r3
 801599c:	d20b      	bcs.n	80159b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801599e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159a2:	f383 8811 	msr	BASEPRI, r3
 80159a6:	f3bf 8f6f 	isb	sy
 80159aa:	f3bf 8f4f 	dsb	sy
 80159ae:	607b      	str	r3, [r7, #4]
}
 80159b0:	bf00      	nop
 80159b2:	bf00      	nop
 80159b4:	e7fd      	b.n	80159b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80159b6:	4b0f      	ldr	r3, [pc, #60]	@ (80159f4 <vPortValidateInterruptPriority+0x7c>)
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80159be:	4b0e      	ldr	r3, [pc, #56]	@ (80159f8 <vPortValidateInterruptPriority+0x80>)
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d90b      	bls.n	80159de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80159c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159ca:	f383 8811 	msr	BASEPRI, r3
 80159ce:	f3bf 8f6f 	isb	sy
 80159d2:	f3bf 8f4f 	dsb	sy
 80159d6:	603b      	str	r3, [r7, #0]
}
 80159d8:	bf00      	nop
 80159da:	bf00      	nop
 80159dc:	e7fd      	b.n	80159da <vPortValidateInterruptPriority+0x62>
	}
 80159de:	bf00      	nop
 80159e0:	3714      	adds	r7, #20
 80159e2:	46bd      	mov	sp, r7
 80159e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e8:	4770      	bx	lr
 80159ea:	bf00      	nop
 80159ec:	e000e3f0 	.word	0xe000e3f0
 80159f0:	2000138c 	.word	0x2000138c
 80159f4:	e000ed0c 	.word	0xe000ed0c
 80159f8:	20001390 	.word	0x20001390

080159fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b08a      	sub	sp, #40	@ 0x28
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015a04:	2300      	movs	r3, #0
 8015a06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015a08:	f7fe fd72 	bl	80144f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015a0c:	4b5c      	ldr	r3, [pc, #368]	@ (8015b80 <pvPortMalloc+0x184>)
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d101      	bne.n	8015a18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015a14:	f000 f924 	bl	8015c60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015a18:	4b5a      	ldr	r3, [pc, #360]	@ (8015b84 <pvPortMalloc+0x188>)
 8015a1a:	681a      	ldr	r2, [r3, #0]
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	4013      	ands	r3, r2
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	f040 8095 	bne.w	8015b50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d01e      	beq.n	8015a6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8015a2c:	2208      	movs	r2, #8
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	4413      	add	r3, r2
 8015a32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f003 0307 	and.w	r3, r3, #7
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d015      	beq.n	8015a6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	f023 0307 	bic.w	r3, r3, #7
 8015a44:	3308      	adds	r3, #8
 8015a46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	f003 0307 	and.w	r3, r3, #7
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d00b      	beq.n	8015a6a <pvPortMalloc+0x6e>
	__asm volatile
 8015a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a56:	f383 8811 	msr	BASEPRI, r3
 8015a5a:	f3bf 8f6f 	isb	sy
 8015a5e:	f3bf 8f4f 	dsb	sy
 8015a62:	617b      	str	r3, [r7, #20]
}
 8015a64:	bf00      	nop
 8015a66:	bf00      	nop
 8015a68:	e7fd      	b.n	8015a66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d06f      	beq.n	8015b50 <pvPortMalloc+0x154>
 8015a70:	4b45      	ldr	r3, [pc, #276]	@ (8015b88 <pvPortMalloc+0x18c>)
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	687a      	ldr	r2, [r7, #4]
 8015a76:	429a      	cmp	r2, r3
 8015a78:	d86a      	bhi.n	8015b50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015a7a:	4b44      	ldr	r3, [pc, #272]	@ (8015b8c <pvPortMalloc+0x190>)
 8015a7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015a7e:	4b43      	ldr	r3, [pc, #268]	@ (8015b8c <pvPortMalloc+0x190>)
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015a84:	e004      	b.n	8015a90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a92:	685b      	ldr	r3, [r3, #4]
 8015a94:	687a      	ldr	r2, [r7, #4]
 8015a96:	429a      	cmp	r2, r3
 8015a98:	d903      	bls.n	8015aa2 <pvPortMalloc+0xa6>
 8015a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d1f1      	bne.n	8015a86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015aa2:	4b37      	ldr	r3, [pc, #220]	@ (8015b80 <pvPortMalloc+0x184>)
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015aa8:	429a      	cmp	r2, r3
 8015aaa:	d051      	beq.n	8015b50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015aac:	6a3b      	ldr	r3, [r7, #32]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	2208      	movs	r2, #8
 8015ab2:	4413      	add	r3, r2
 8015ab4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ab8:	681a      	ldr	r2, [r3, #0]
 8015aba:	6a3b      	ldr	r3, [r7, #32]
 8015abc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ac0:	685a      	ldr	r2, [r3, #4]
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	1ad2      	subs	r2, r2, r3
 8015ac6:	2308      	movs	r3, #8
 8015ac8:	005b      	lsls	r3, r3, #1
 8015aca:	429a      	cmp	r2, r3
 8015acc:	d920      	bls.n	8015b10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	4413      	add	r3, r2
 8015ad4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015ad6:	69bb      	ldr	r3, [r7, #24]
 8015ad8:	f003 0307 	and.w	r3, r3, #7
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d00b      	beq.n	8015af8 <pvPortMalloc+0xfc>
	__asm volatile
 8015ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ae4:	f383 8811 	msr	BASEPRI, r3
 8015ae8:	f3bf 8f6f 	isb	sy
 8015aec:	f3bf 8f4f 	dsb	sy
 8015af0:	613b      	str	r3, [r7, #16]
}
 8015af2:	bf00      	nop
 8015af4:	bf00      	nop
 8015af6:	e7fd      	b.n	8015af4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015afa:	685a      	ldr	r2, [r3, #4]
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	1ad2      	subs	r2, r2, r3
 8015b00:	69bb      	ldr	r3, [r7, #24]
 8015b02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b06:	687a      	ldr	r2, [r7, #4]
 8015b08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015b0a:	69b8      	ldr	r0, [r7, #24]
 8015b0c:	f000 f90a 	bl	8015d24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015b10:	4b1d      	ldr	r3, [pc, #116]	@ (8015b88 <pvPortMalloc+0x18c>)
 8015b12:	681a      	ldr	r2, [r3, #0]
 8015b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b16:	685b      	ldr	r3, [r3, #4]
 8015b18:	1ad3      	subs	r3, r2, r3
 8015b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8015b88 <pvPortMalloc+0x18c>)
 8015b1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8015b88 <pvPortMalloc+0x18c>)
 8015b20:	681a      	ldr	r2, [r3, #0]
 8015b22:	4b1b      	ldr	r3, [pc, #108]	@ (8015b90 <pvPortMalloc+0x194>)
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	429a      	cmp	r2, r3
 8015b28:	d203      	bcs.n	8015b32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015b2a:	4b17      	ldr	r3, [pc, #92]	@ (8015b88 <pvPortMalloc+0x18c>)
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	4a18      	ldr	r2, [pc, #96]	@ (8015b90 <pvPortMalloc+0x194>)
 8015b30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b34:	685a      	ldr	r2, [r3, #4]
 8015b36:	4b13      	ldr	r3, [pc, #76]	@ (8015b84 <pvPortMalloc+0x188>)
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	431a      	orrs	r2, r3
 8015b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b42:	2200      	movs	r2, #0
 8015b44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015b46:	4b13      	ldr	r3, [pc, #76]	@ (8015b94 <pvPortMalloc+0x198>)
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	3301      	adds	r3, #1
 8015b4c:	4a11      	ldr	r2, [pc, #68]	@ (8015b94 <pvPortMalloc+0x198>)
 8015b4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015b50:	f7fe fcdc 	bl	801450c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015b54:	69fb      	ldr	r3, [r7, #28]
 8015b56:	f003 0307 	and.w	r3, r3, #7
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d00b      	beq.n	8015b76 <pvPortMalloc+0x17a>
	__asm volatile
 8015b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b62:	f383 8811 	msr	BASEPRI, r3
 8015b66:	f3bf 8f6f 	isb	sy
 8015b6a:	f3bf 8f4f 	dsb	sy
 8015b6e:	60fb      	str	r3, [r7, #12]
}
 8015b70:	bf00      	nop
 8015b72:	bf00      	nop
 8015b74:	e7fd      	b.n	8015b72 <pvPortMalloc+0x176>
	return pvReturn;
 8015b76:	69fb      	ldr	r3, [r7, #28]
}
 8015b78:	4618      	mov	r0, r3
 8015b7a:	3728      	adds	r7, #40	@ 0x28
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	bd80      	pop	{r7, pc}
 8015b80:	20002724 	.word	0x20002724
 8015b84:	20002738 	.word	0x20002738
 8015b88:	20002728 	.word	0x20002728
 8015b8c:	2000271c 	.word	0x2000271c
 8015b90:	2000272c 	.word	0x2000272c
 8015b94:	20002730 	.word	0x20002730

08015b98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b086      	sub	sp, #24
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d04f      	beq.n	8015c4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015baa:	2308      	movs	r3, #8
 8015bac:	425b      	negs	r3, r3
 8015bae:	697a      	ldr	r2, [r7, #20]
 8015bb0:	4413      	add	r3, r2
 8015bb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015bb4:	697b      	ldr	r3, [r7, #20]
 8015bb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015bb8:	693b      	ldr	r3, [r7, #16]
 8015bba:	685a      	ldr	r2, [r3, #4]
 8015bbc:	4b25      	ldr	r3, [pc, #148]	@ (8015c54 <vPortFree+0xbc>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	4013      	ands	r3, r2
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d10b      	bne.n	8015bde <vPortFree+0x46>
	__asm volatile
 8015bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bca:	f383 8811 	msr	BASEPRI, r3
 8015bce:	f3bf 8f6f 	isb	sy
 8015bd2:	f3bf 8f4f 	dsb	sy
 8015bd6:	60fb      	str	r3, [r7, #12]
}
 8015bd8:	bf00      	nop
 8015bda:	bf00      	nop
 8015bdc:	e7fd      	b.n	8015bda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015bde:	693b      	ldr	r3, [r7, #16]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d00b      	beq.n	8015bfe <vPortFree+0x66>
	__asm volatile
 8015be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bea:	f383 8811 	msr	BASEPRI, r3
 8015bee:	f3bf 8f6f 	isb	sy
 8015bf2:	f3bf 8f4f 	dsb	sy
 8015bf6:	60bb      	str	r3, [r7, #8]
}
 8015bf8:	bf00      	nop
 8015bfa:	bf00      	nop
 8015bfc:	e7fd      	b.n	8015bfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015bfe:	693b      	ldr	r3, [r7, #16]
 8015c00:	685a      	ldr	r2, [r3, #4]
 8015c02:	4b14      	ldr	r3, [pc, #80]	@ (8015c54 <vPortFree+0xbc>)
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	4013      	ands	r3, r2
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d01e      	beq.n	8015c4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015c0c:	693b      	ldr	r3, [r7, #16]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d11a      	bne.n	8015c4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015c14:	693b      	ldr	r3, [r7, #16]
 8015c16:	685a      	ldr	r2, [r3, #4]
 8015c18:	4b0e      	ldr	r3, [pc, #56]	@ (8015c54 <vPortFree+0xbc>)
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	43db      	mvns	r3, r3
 8015c1e:	401a      	ands	r2, r3
 8015c20:	693b      	ldr	r3, [r7, #16]
 8015c22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015c24:	f7fe fc64 	bl	80144f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015c28:	693b      	ldr	r3, [r7, #16]
 8015c2a:	685a      	ldr	r2, [r3, #4]
 8015c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8015c58 <vPortFree+0xc0>)
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	4413      	add	r3, r2
 8015c32:	4a09      	ldr	r2, [pc, #36]	@ (8015c58 <vPortFree+0xc0>)
 8015c34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015c36:	6938      	ldr	r0, [r7, #16]
 8015c38:	f000 f874 	bl	8015d24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015c3c:	4b07      	ldr	r3, [pc, #28]	@ (8015c5c <vPortFree+0xc4>)
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	3301      	adds	r3, #1
 8015c42:	4a06      	ldr	r2, [pc, #24]	@ (8015c5c <vPortFree+0xc4>)
 8015c44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015c46:	f7fe fc61 	bl	801450c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015c4a:	bf00      	nop
 8015c4c:	3718      	adds	r7, #24
 8015c4e:	46bd      	mov	sp, r7
 8015c50:	bd80      	pop	{r7, pc}
 8015c52:	bf00      	nop
 8015c54:	20002738 	.word	0x20002738
 8015c58:	20002728 	.word	0x20002728
 8015c5c:	20002734 	.word	0x20002734

08015c60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015c60:	b480      	push	{r7}
 8015c62:	b085      	sub	sp, #20
 8015c64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015c66:	f241 3388 	movw	r3, #5000	@ 0x1388
 8015c6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015c6c:	4b27      	ldr	r3, [pc, #156]	@ (8015d0c <prvHeapInit+0xac>)
 8015c6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	f003 0307 	and.w	r3, r3, #7
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d00c      	beq.n	8015c94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	3307      	adds	r3, #7
 8015c7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	f023 0307 	bic.w	r3, r3, #7
 8015c86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015c88:	68ba      	ldr	r2, [r7, #8]
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	1ad3      	subs	r3, r2, r3
 8015c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8015d0c <prvHeapInit+0xac>)
 8015c90:	4413      	add	r3, r2
 8015c92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015c98:	4a1d      	ldr	r2, [pc, #116]	@ (8015d10 <prvHeapInit+0xb0>)
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8015d10 <prvHeapInit+0xb0>)
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	68ba      	ldr	r2, [r7, #8]
 8015ca8:	4413      	add	r3, r2
 8015caa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015cac:	2208      	movs	r2, #8
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	1a9b      	subs	r3, r3, r2
 8015cb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	f023 0307 	bic.w	r3, r3, #7
 8015cba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	4a15      	ldr	r2, [pc, #84]	@ (8015d14 <prvHeapInit+0xb4>)
 8015cc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015cc2:	4b14      	ldr	r3, [pc, #80]	@ (8015d14 <prvHeapInit+0xb4>)
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015cca:	4b12      	ldr	r3, [pc, #72]	@ (8015d14 <prvHeapInit+0xb4>)
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	2200      	movs	r2, #0
 8015cd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015cd6:	683b      	ldr	r3, [r7, #0]
 8015cd8:	68fa      	ldr	r2, [r7, #12]
 8015cda:	1ad2      	subs	r2, r2, r3
 8015cdc:	683b      	ldr	r3, [r7, #0]
 8015cde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8015d14 <prvHeapInit+0xb4>)
 8015ce2:	681a      	ldr	r2, [r3, #0]
 8015ce4:	683b      	ldr	r3, [r7, #0]
 8015ce6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015ce8:	683b      	ldr	r3, [r7, #0]
 8015cea:	685b      	ldr	r3, [r3, #4]
 8015cec:	4a0a      	ldr	r2, [pc, #40]	@ (8015d18 <prvHeapInit+0xb8>)
 8015cee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015cf0:	683b      	ldr	r3, [r7, #0]
 8015cf2:	685b      	ldr	r3, [r3, #4]
 8015cf4:	4a09      	ldr	r2, [pc, #36]	@ (8015d1c <prvHeapInit+0xbc>)
 8015cf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015cf8:	4b09      	ldr	r3, [pc, #36]	@ (8015d20 <prvHeapInit+0xc0>)
 8015cfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8015cfe:	601a      	str	r2, [r3, #0]
}
 8015d00:	bf00      	nop
 8015d02:	3714      	adds	r7, #20
 8015d04:	46bd      	mov	sp, r7
 8015d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0a:	4770      	bx	lr
 8015d0c:	20001394 	.word	0x20001394
 8015d10:	2000271c 	.word	0x2000271c
 8015d14:	20002724 	.word	0x20002724
 8015d18:	2000272c 	.word	0x2000272c
 8015d1c:	20002728 	.word	0x20002728
 8015d20:	20002738 	.word	0x20002738

08015d24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015d24:	b480      	push	{r7}
 8015d26:	b085      	sub	sp, #20
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015d2c:	4b28      	ldr	r3, [pc, #160]	@ (8015dd0 <prvInsertBlockIntoFreeList+0xac>)
 8015d2e:	60fb      	str	r3, [r7, #12]
 8015d30:	e002      	b.n	8015d38 <prvInsertBlockIntoFreeList+0x14>
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	60fb      	str	r3, [r7, #12]
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	687a      	ldr	r2, [r7, #4]
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	d8f7      	bhi.n	8015d32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	685b      	ldr	r3, [r3, #4]
 8015d4a:	68ba      	ldr	r2, [r7, #8]
 8015d4c:	4413      	add	r3, r2
 8015d4e:	687a      	ldr	r2, [r7, #4]
 8015d50:	429a      	cmp	r2, r3
 8015d52:	d108      	bne.n	8015d66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	685a      	ldr	r2, [r3, #4]
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	685b      	ldr	r3, [r3, #4]
 8015d5c:	441a      	add	r2, r3
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	685b      	ldr	r3, [r3, #4]
 8015d6e:	68ba      	ldr	r2, [r7, #8]
 8015d70:	441a      	add	r2, r3
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	429a      	cmp	r2, r3
 8015d78:	d118      	bne.n	8015dac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	681a      	ldr	r2, [r3, #0]
 8015d7e:	4b15      	ldr	r3, [pc, #84]	@ (8015dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	429a      	cmp	r2, r3
 8015d84:	d00d      	beq.n	8015da2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	685a      	ldr	r2, [r3, #4]
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	685b      	ldr	r3, [r3, #4]
 8015d90:	441a      	add	r2, r3
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	681a      	ldr	r2, [r3, #0]
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	601a      	str	r2, [r3, #0]
 8015da0:	e008      	b.n	8015db4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015da2:	4b0c      	ldr	r3, [pc, #48]	@ (8015dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8015da4:	681a      	ldr	r2, [r3, #0]
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	601a      	str	r2, [r3, #0]
 8015daa:	e003      	b.n	8015db4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	681a      	ldr	r2, [r3, #0]
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015db4:	68fa      	ldr	r2, [r7, #12]
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	429a      	cmp	r2, r3
 8015dba:	d002      	beq.n	8015dc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	687a      	ldr	r2, [r7, #4]
 8015dc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015dc2:	bf00      	nop
 8015dc4:	3714      	adds	r7, #20
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dcc:	4770      	bx	lr
 8015dce:	bf00      	nop
 8015dd0:	2000271c 	.word	0x2000271c
 8015dd4:	20002724 	.word	0x20002724

08015dd8 <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 8015ddc:	f7fa fa0b 	bl	80101f6 <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 8015de0:	f000 f818 	bl	8015e14 <USBPD_DPM_InitCore>
 8015de4:	4603      	mov	r3, r0
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d001      	beq.n	8015dee <MX_USBPD_Init+0x16>
  {
    while(1);
 8015dea:	bf00      	nop
 8015dec:	e7fd      	b.n	8015dea <MX_USBPD_Init+0x12>
  }

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 8015dee:	f000 fa29 	bl	8016244 <USBPD_DPM_UserInit>
 8015df2:	4603      	mov	r3, r0
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d001      	beq.n	8015dfc <MX_USBPD_Init+0x24>
  {
    while(1);
 8015df8:	bf00      	nop
 8015dfa:	e7fd      	b.n	8015df8 <MX_USBPD_Init+0x20>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 8015dfc:	f000 f8b8 	bl	8015f70 <USBPD_DPM_InitOS>
 8015e00:	4603      	mov	r3, r0
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d001      	beq.n	8015e0a <MX_USBPD_Init+0x32>
  {
    while(1);
 8015e06:	bf00      	nop
 8015e08:	e7fd      	b.n	8015e06 <MX_USBPD_Init+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 8015e0a:	b662      	cpsie	i
}
 8015e0c:	bf00      	nop
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 8015e0e:	bf00      	nop
 8015e10:	bd80      	pop	{r7, pc}
	...

08015e14 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b082      	sub	sp, #8
 8015e18:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	71fb      	strb	r3, [r7, #7]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(_LIB_ID))
 8015e1e:	484f      	ldr	r0, [pc, #316]	@ (8015f5c <USBPD_DPM_InitCore+0x148>)
 8015e20:	f7eb fb0b 	bl	800143a <USBPD_PE_CheckLIB>
 8015e24:	4603      	mov	r3, r0
 8015e26:	2b01      	cmp	r3, #1
 8015e28:	d001      	beq.n	8015e2e <USBPD_DPM_InitCore+0x1a>
  {
    return USBPD_ERROR;
 8015e2a:	2302      	movs	r3, #2
 8015e2c:	e092      	b.n	8015f54 <USBPD_DPM_InitCore+0x140>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 8015e2e:	f7eb fb0f 	bl	8001450 <USBPD_PE_GetMemoryConsumption>
 8015e32:	6038      	str	r0, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8015e34:	2300      	movs	r3, #0
 8015e36:	71bb      	strb	r3, [r7, #6]
 8015e38:	e087      	b.n	8015f4a <USBPD_DPM_InitCore+0x136>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 8015e3a:	79bb      	ldrb	r3, [r7, #6]
 8015e3c:	4a48      	ldr	r2, [pc, #288]	@ (8015f60 <USBPD_DPM_InitCore+0x14c>)
 8015e3e:	009b      	lsls	r3, r3, #2
 8015e40:	4413      	add	r3, r2
 8015e42:	785a      	ldrb	r2, [r3, #1]
 8015e44:	f36f 02c3 	bfc	r2, #3, #1
 8015e48:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 8015e4a:	79b9      	ldrb	r1, [r7, #6]
 8015e4c:	79ba      	ldrb	r2, [r7, #6]
 8015e4e:	4845      	ldr	r0, [pc, #276]	@ (8015f64 <USBPD_DPM_InitCore+0x150>)
 8015e50:	460b      	mov	r3, r1
 8015e52:	005b      	lsls	r3, r3, #1
 8015e54:	440b      	add	r3, r1
 8015e56:	009b      	lsls	r3, r3, #2
 8015e58:	4403      	add	r3, r0
 8015e5a:	791b      	ldrb	r3, [r3, #4]
 8015e5c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8015e60:	b2d8      	uxtb	r0, r3
 8015e62:	493f      	ldr	r1, [pc, #252]	@ (8015f60 <USBPD_DPM_InitCore+0x14c>)
 8015e64:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8015e68:	f360 0301 	bfi	r3, r0, #0, #2
 8015e6c:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 8015e70:	79b9      	ldrb	r1, [r7, #6]
 8015e72:	79ba      	ldrb	r2, [r7, #6]
 8015e74:	483b      	ldr	r0, [pc, #236]	@ (8015f64 <USBPD_DPM_InitCore+0x150>)
 8015e76:	460b      	mov	r3, r1
 8015e78:	005b      	lsls	r3, r3, #1
 8015e7a:	440b      	add	r3, r1
 8015e7c:	009b      	lsls	r3, r3, #2
 8015e7e:	4403      	add	r3, r0
 8015e80:	791b      	ldrb	r3, [r3, #4]
 8015e82:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015e86:	b2d8      	uxtb	r0, r3
 8015e88:	4935      	ldr	r1, [pc, #212]	@ (8015f60 <USBPD_DPM_InitCore+0x14c>)
 8015e8a:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8015e8e:	f360 0382 	bfi	r3, r0, #2, #1
 8015e92:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 8015e96:	79ba      	ldrb	r2, [r7, #6]
 8015e98:	4931      	ldr	r1, [pc, #196]	@ (8015f60 <USBPD_DPM_InitCore+0x14c>)
 8015e9a:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8015e9e:	f36f 1304 	bfc	r3, #4, #1
 8015ea2:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 8015ea6:	79ba      	ldrb	r2, [r7, #6]
 8015ea8:	492d      	ldr	r1, [pc, #180]	@ (8015f60 <USBPD_DPM_InitCore+0x14c>)
 8015eaa:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8015eae:	f36f 1387 	bfc	r3, #6, #2
 8015eb2:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 8015eb6:	79bb      	ldrb	r3, [r7, #6]
 8015eb8:	4a29      	ldr	r2, [pc, #164]	@ (8015f60 <USBPD_DPM_InitCore+0x14c>)
 8015eba:	009b      	lsls	r3, r3, #2
 8015ebc:	4413      	add	r3, r2
 8015ebe:	785a      	ldrb	r2, [r3, #1]
 8015ec0:	f36f 1246 	bfc	r2, #5, #2
 8015ec4:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 8015ec6:	79bb      	ldrb	r3, [r7, #6]
 8015ec8:	4a25      	ldr	r2, [pc, #148]	@ (8015f60 <USBPD_DPM_InitCore+0x14c>)
 8015eca:	009b      	lsls	r3, r3, #2
 8015ecc:	4413      	add	r3, r2
 8015ece:	785a      	ldrb	r2, [r3, #1]
 8015ed0:	f36f 12c7 	bfc	r2, #7, #1
 8015ed4:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index, (USBPD_CAD_Callbacks *)&CAD_cbs,
 8015ed6:	79ba      	ldrb	r2, [r7, #6]
 8015ed8:	4613      	mov	r3, r2
 8015eda:	005b      	lsls	r3, r3, #1
 8015edc:	4413      	add	r3, r2
 8015ede:	009b      	lsls	r3, r3, #2
 8015ee0:	4a20      	ldr	r2, [pc, #128]	@ (8015f64 <USBPD_DPM_InitCore+0x150>)
 8015ee2:	441a      	add	r2, r3
 8015ee4:	79bb      	ldrb	r3, [r7, #6]
 8015ee6:	009b      	lsls	r3, r3, #2
 8015ee8:	491d      	ldr	r1, [pc, #116]	@ (8015f60 <USBPD_DPM_InitCore+0x14c>)
 8015eea:	440b      	add	r3, r1
 8015eec:	79b8      	ldrb	r0, [r7, #6]
 8015eee:	491e      	ldr	r1, [pc, #120]	@ (8015f68 <USBPD_DPM_InitCore+0x154>)
 8015ef0:	f7ea f996 	bl	8000220 <USBPD_CAD_Init>
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d001      	beq.n	8015efe <USBPD_DPM_InitCore+0xea>
 8015efa:	2302      	movs	r3, #2
 8015efc:	e02a      	b.n	8015f54 <USBPD_DPM_InitCore+0x140>
                                           (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index], &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 8015efe:	79ba      	ldrb	r2, [r7, #6]
 8015f00:	4613      	mov	r3, r2
 8015f02:	005b      	lsls	r3, r3, #1
 8015f04:	4413      	add	r3, r2
 8015f06:	009b      	lsls	r3, r3, #2
 8015f08:	4a16      	ldr	r2, [pc, #88]	@ (8015f64 <USBPD_DPM_InitCore+0x150>)
 8015f0a:	1899      	adds	r1, r3, r2
 8015f0c:	79bb      	ldrb	r3, [r7, #6]
 8015f0e:	009b      	lsls	r3, r3, #2
 8015f10:	4a13      	ldr	r2, [pc, #76]	@ (8015f60 <USBPD_DPM_InitCore+0x14c>)
 8015f12:	441a      	add	r2, r3
 8015f14:	79b8      	ldrb	r0, [r7, #6]
 8015f16:	4b15      	ldr	r3, [pc, #84]	@ (8015f6c <USBPD_DPM_InitCore+0x158>)
 8015f18:	f7ea fa50 	bl	80003bc <USBPD_PE_Init>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	71fb      	strb	r3, [r7, #7]
 8015f20:	79fb      	ldrb	r3, [r7, #7]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d001      	beq.n	8015f2a <USBPD_DPM_InitCore+0x116>
 8015f26:	79fb      	ldrb	r3, [r7, #7]
 8015f28:	e014      	b.n	8015f54 <USBPD_DPM_InitCore+0x140>
                                         &DPM_Params[_port_index], &dpmCallbacks));

  /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 8015f2a:	79bb      	ldrb	r3, [r7, #6]
 8015f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8015f60 <USBPD_DPM_InitCore+0x14c>)
 8015f2e:	009b      	lsls	r3, r3, #2
 8015f30:	4413      	add	r3, r2
 8015f32:	785a      	ldrb	r2, [r3, #1]
 8015f34:	f042 0208 	orr.w	r2, r2, #8
 8015f38:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
  USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 8015f3a:	79bb      	ldrb	r3, [r7, #6]
 8015f3c:	2101      	movs	r1, #1
 8015f3e:	4618      	mov	r0, r3
 8015f40:	f7ea f996 	bl	8000270 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8015f44:	79bb      	ldrb	r3, [r7, #6]
 8015f46:	3301      	adds	r3, #1
 8015f48:	71bb      	strb	r3, [r7, #6]
 8015f4a:	79bb      	ldrb	r3, [r7, #6]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	f43f af74 	beq.w	8015e3a <USBPD_DPM_InitCore+0x26>
  }

  return _retr;
 8015f52:	79fb      	ldrb	r3, [r7, #7]
}
 8015f54:	4618      	mov	r0, r3
 8015f56:	3708      	adds	r7, #8
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	bd80      	pop	{r7, pc}
 8015f5c:	30410000 	.word	0x30410000
 8015f60:	20002748 	.word	0x20002748
 8015f64:	20000124 	.word	0x20000124
 8015f68:	08017444 	.word	0x08017444
 8015f6c:	0801744c 	.word	0x0801744c

08015f70 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  CADQueueId = osMessageCreate(osMessageQ(queueCAD), NULL);
  if (osThreadCreate(osThread(CAD), NULL) == NULL)
#else
  CADQueueId = osMessageQueueNew (2, sizeof(uint16_t), NULL);
 8015f74:	2200      	movs	r2, #0
 8015f76:	2102      	movs	r1, #2
 8015f78:	2002      	movs	r0, #2
 8015f7a:	f7fc ffa7 	bl	8012ecc <osMessageQueueNew>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	4a0c      	ldr	r2, [pc, #48]	@ (8015fb4 <USBPD_DPM_InitOS+0x44>)
 8015f82:	6013      	str	r3, [r2, #0]
  if (NULL == osThreadNew(USBPD_CAD_Task, &CADQueueId, &CAD_Thread_Atrr))
 8015f84:	4a0c      	ldr	r2, [pc, #48]	@ (8015fb8 <USBPD_DPM_InitOS+0x48>)
 8015f86:	490b      	ldr	r1, [pc, #44]	@ (8015fb4 <USBPD_DPM_InitOS+0x44>)
 8015f88:	480c      	ldr	r0, [pc, #48]	@ (8015fbc <USBPD_DPM_InitOS+0x4c>)
 8015f8a:	f7fc fec5 	bl	8012d18 <osThreadNew>
 8015f8e:	4603      	mov	r3, r0
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d101      	bne.n	8015f98 <USBPD_DPM_InitOS+0x28>
#endif /* osCMSIS < 0x20000U */
  {
    return USBPD_ERROR;
 8015f94:	2302      	movs	r3, #2
 8015f96:	e00b      	b.n	8015fb0 <USBPD_DPM_InitOS+0x40>
  PEQueueId[0] = osMessageCreate(osMessageQ(queuePE), NULL);
#if USBPD_PORT_COUNT == 2
  PEQueueId[1] = osMessageCreate(osMessageQ(queuePE), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#else
  PEQueueId[0] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
 8015f98:	2200      	movs	r2, #0
 8015f9a:	2102      	movs	r1, #2
 8015f9c:	2001      	movs	r0, #1
 8015f9e:	f7fc ff95 	bl	8012ecc <osMessageQueueNew>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	4a06      	ldr	r2, [pc, #24]	@ (8015fc0 <USBPD_DPM_InitOS+0x50>)
 8015fa6:	6013      	str	r3, [r2, #0]
  PEQueueId[1] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#endif /* osCMSIS < 0x20000U */

  /* PE task to be created on attachment */
  DPM_PEThreadId_Table[USBPD_PORT_0] = NULL;
 8015fa8:	4b06      	ldr	r3, [pc, #24]	@ (8015fc4 <USBPD_DPM_InitOS+0x54>)
 8015faa:	2200      	movs	r2, #0
 8015fac:	601a      	str	r2, [r3, #0]
#if USBPD_PORT_COUNT == 2
  DPM_PEThreadId_Table[USBPD_PORT_1] = NULL;
#endif /* USBPD_PORT_COUNT == 2 */

  return USBPD_OK;
 8015fae:	2300      	movs	r3, #0
}
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	bd80      	pop	{r7, pc}
 8015fb4:	2000273c 	.word	0x2000273c
 8015fb8:	200001d0 	.word	0x200001d0
 8015fbc:	0801607d 	.word	0x0801607d
 8015fc0:	20002744 	.word	0x20002744
 8015fc4:	20002740 	.word	0x20002740

08015fc8 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b084      	sub	sp, #16
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	4603      	mov	r3, r0
 8015fd0:	71fb      	strb	r3, [r7, #7]
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(PEQueueId[PortNum], 0xFFFF, 0);
#else
  uint32_t event = 0xFFFFU;
 8015fd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015fd6:	60fb      	str	r3, [r7, #12]
  (void)osMessageQueuePut(PEQueueId[PortNum], &event, 0U, 0U);
 8015fd8:	79fb      	ldrb	r3, [r7, #7]
 8015fda:	4a06      	ldr	r2, [pc, #24]	@ (8015ff4 <USBPD_PE_TaskWakeUp+0x2c>)
 8015fdc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015fe0:	f107 010c 	add.w	r1, r7, #12
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	f7fc ffe4 	bl	8012fb4 <osMessageQueuePut>
#endif /* osCMSIS < 0x20000U */
}
 8015fec:	bf00      	nop
 8015fee:	3710      	adds	r7, #16
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	bd80      	pop	{r7, pc}
 8015ff4:	20002744 	.word	0x20002744

08015ff8 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b082      	sub	sp, #8
 8015ffc:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(CADQueueId, 0xFFFF, 0);
#else
  uint32_t event = 0xFFFFU;
 8015ffe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016002:	607b      	str	r3, [r7, #4]
  (void)osMessageQueuePut(CADQueueId, &event, 0U, 0U);
 8016004:	4b05      	ldr	r3, [pc, #20]	@ (801601c <USBPD_DPM_CADTaskWakeUp+0x24>)
 8016006:	6818      	ldr	r0, [r3, #0]
 8016008:	1d39      	adds	r1, r7, #4
 801600a:	2300      	movs	r3, #0
 801600c:	2200      	movs	r2, #0
 801600e:	f7fc ffd1 	bl	8012fb4 <osMessageQueuePut>
#endif /* osCMSIS < 0x20000U */
}
 8016012:	bf00      	nop
 8016014:	3708      	adds	r7, #8
 8016016:	46bd      	mov	sp, r7
 8016018:	bd80      	pop	{r7, pc}
 801601a:	bf00      	nop
 801601c:	2000273c 	.word	0x2000273c

08016020 <USBPD_PE_Task_P0>:
  * @brief  Main task for PE layer on Port0
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task_P0(void *argument)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b082      	sub	sp, #8
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
  PE_Task(USBPD_PORT_0);
 8016028:	2000      	movs	r0, #0
 801602a:	f000 f80f 	bl	801604c <PE_Task>
}
 801602e:	bf00      	nop
 8016030:	3708      	adds	r7, #8
 8016032:	46bd      	mov	sp, r7
 8016034:	bd80      	pop	{r7, pc}

08016036 <USBPD_PE_Task_P1>:
  * @brief  Main task for PE layer on Port1
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task_P1(void *argument)
{
 8016036:	b580      	push	{r7, lr}
 8016038:	b082      	sub	sp, #8
 801603a:	af00      	add	r7, sp, #0
 801603c:	6078      	str	r0, [r7, #4]
  PE_Task(USBPD_PORT_1);
 801603e:	2001      	movs	r0, #1
 8016040:	f000 f804 	bl	801604c <PE_Task>
}
 8016044:	bf00      	nop
 8016046:	3708      	adds	r7, #8
 8016048:	46bd      	mov	sp, r7
 801604a:	bd80      	pop	{r7, pc}

0801604c <PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
static void PE_Task(uint32_t PortNum)
{
 801604c:	b590      	push	{r4, r7, lr}
 801604e:	b085      	sub	sp, #20
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
  for (;;)
  {
    uint32_t event;
    (void)osMessageQueueGet(PEQueueId[PortNum], &event, NULL,
 8016054:	4a08      	ldr	r2, [pc, #32]	@ (8016078 <PE_Task+0x2c>)
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	b2db      	uxtb	r3, r3
 8016060:	4618      	mov	r0, r3
 8016062:	f7eb fe45 	bl	8001cf0 <USBPD_PE_StateMachine_SNK>
 8016066:	4603      	mov	r3, r0
 8016068:	f107 010c 	add.w	r1, r7, #12
 801606c:	2200      	movs	r2, #0
 801606e:	4620      	mov	r0, r4
 8016070:	f7fd f800 	bl	8013074 <osMessageQueueGet>
  {
 8016074:	bf00      	nop
 8016076:	e7ed      	b.n	8016054 <PE_Task+0x8>
 8016078:	20002744 	.word	0x20002744

0801607c <USBPD_CAD_Task>:
#if (osCMSIS < 0x20000U)
void USBPD_CAD_Task(void const *argument)
#else
void USBPD_CAD_Task(void *argument)
#endif /* osCMSIS < 0x20000U */
{
 801607c:	b590      	push	{r4, r7, lr}
 801607e:	b085      	sub	sp, #20
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
  {
#if (osCMSIS < 0x20000U)
    osMessageGet(CADQueueId, USBPD_CAD_Process());
#else
    uint32_t event;
    (void)osMessageQueueGet(CADQueueId, &event, NULL, USBPD_CAD_Process());
 8016084:	4b06      	ldr	r3, [pc, #24]	@ (80160a0 <USBPD_CAD_Task+0x24>)
 8016086:	681c      	ldr	r4, [r3, #0]
 8016088:	f7ea f8f9 	bl	800027e <USBPD_CAD_Process>
 801608c:	4603      	mov	r3, r0
 801608e:	f107 010c 	add.w	r1, r7, #12
 8016092:	2200      	movs	r2, #0
 8016094:	4620      	mov	r0, r4
 8016096:	f7fc ffed 	bl	8013074 <osMessageQueueGet>
  {
 801609a:	bf00      	nop
 801609c:	e7f2      	b.n	8016084 <USBPD_CAD_Task+0x8>
 801609e:	bf00      	nop
 80160a0:	2000273c 	.word	0x2000273c

080160a4 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b084      	sub	sp, #16
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	4603      	mov	r3, r0
 80160ac:	603a      	str	r2, [r7, #0]
 80160ae:	71fb      	strb	r3, [r7, #7]
 80160b0:	460b      	mov	r3, r1
 80160b2:	71bb      	strb	r3, [r7, #6]

  switch (State)
 80160b4:	79bb      	ldrb	r3, [r7, #6]
 80160b6:	3b01      	subs	r3, #1
 80160b8:	2b03      	cmp	r3, #3
 80160ba:	d867      	bhi.n	801618c <USBPD_DPM_CADCallback+0xe8>
 80160bc:	a201      	add	r2, pc, #4	@ (adr r2, 80160c4 <USBPD_DPM_CADCallback+0x20>)
 80160be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160c2:	bf00      	nop
 80160c4:	080160f1 	.word	0x080160f1
 80160c8:	080160e3 	.word	0x080160e3
 80160cc:	080160f1 	.word	0x080160f1
 80160d0:	080160d5 	.word	0x080160d5
    case USBPD_CAD_EVENT_ATTEMC :
    {
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnStatus = USBPD_TRUE;
#endif /* _VCONN_SUPPORT */
      DPM_ManageAttachedState(PortNum, State, Cc);
 80160d4:	79b9      	ldrb	r1, [r7, #6]
 80160d6:	79fb      	ldrb	r3, [r7, #7]
 80160d8:	683a      	ldr	r2, [r7, #0]
 80160da:	4618      	mov	r0, r3
 80160dc:	f000 f860 	bl	80161a0 <DPM_ManageAttachedState>
#ifdef _VCONN_SUPPORT
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=TRUE");
#endif /* _VCONN_SUPPORT */
      break;
 80160e0:	e055      	b.n	801618e <USBPD_DPM_CADCallback+0xea>
    }
    case USBPD_CAD_EVENT_ATTACHED :
      DPM_ManageAttachedState(PortNum, State, Cc);
 80160e2:	79b9      	ldrb	r1, [r7, #6]
 80160e4:	79fb      	ldrb	r3, [r7, #7]
 80160e6:	683a      	ldr	r2, [r7, #0]
 80160e8:	4618      	mov	r0, r3
 80160ea:	f000 f859 	bl	80161a0 <DPM_ManageAttachedState>
      break;
 80160ee:	e04e      	b.n	801618e <USBPD_DPM_CADCallback+0xea>
    case USBPD_CAD_EVENT_DETACHED :
    case USBPD_CAD_EVENT_EMC :
    {
      /* The ufp is detached */
      (void)USBPD_PE_IsCableConnected(PortNum, 0);
 80160f0:	79fb      	ldrb	r3, [r7, #7]
 80160f2:	2100      	movs	r1, #0
 80160f4:	4618      	mov	r0, r3
 80160f6:	f7ea fa0a 	bl	800050e <USBPD_PE_IsCableConnected>
      /* Terminate PE task */
      if (DPM_PEThreadId_Table[PortNum] != NULL)
 80160fa:	79fb      	ldrb	r3, [r7, #7]
 80160fc:	4a26      	ldr	r2, [pc, #152]	@ (8016198 <USBPD_DPM_CADCallback+0xf4>)
 80160fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d023      	beq.n	801614e <USBPD_DPM_CADCallback+0xaa>
      {
        uint8_t _timeout = 0;
 8016106:	2300      	movs	r3, #0
 8016108:	73fb      	strb	r3, [r7, #15]
        /* Let time to PE to complete the ongoing action */
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 801610a:	e008      	b.n	801611e <USBPD_DPM_CADCallback+0x7a>
        {
          osDelay(1);
 801610c:	2001      	movs	r0, #1
 801610e:	f7fc fec2 	bl	8012e96 <osDelay>
          _timeout++;
 8016112:	7bfb      	ldrb	r3, [r7, #15]
 8016114:	3301      	adds	r3, #1
 8016116:	73fb      	strb	r3, [r7, #15]
          if (_timeout > 30)
 8016118:	7bfb      	ldrb	r3, [r7, #15]
 801611a:	2b1e      	cmp	r3, #30
 801611c:	d80a      	bhi.n	8016134 <USBPD_DPM_CADCallback+0x90>
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 801611e:	79fb      	ldrb	r3, [r7, #7]
 8016120:	4a1d      	ldr	r2, [pc, #116]	@ (8016198 <USBPD_DPM_CADCallback+0xf4>)
 8016122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016126:	4618      	mov	r0, r3
 8016128:	f7fe f90a 	bl	8014340 <eTaskGetState>
 801612c:	4603      	mov	r3, r0
 801612e:	2b02      	cmp	r3, #2
 8016130:	d1ec      	bne.n	801610c <USBPD_DPM_CADCallback+0x68>
 8016132:	e000      	b.n	8016136 <USBPD_DPM_CADCallback+0x92>
          {
            break;
 8016134:	bf00      	nop
          }
        };

        /* Kill PE task */
        osThreadTerminate(DPM_PEThreadId_Table[PortNum]);
 8016136:	79fb      	ldrb	r3, [r7, #7]
 8016138:	4a17      	ldr	r2, [pc, #92]	@ (8016198 <USBPD_DPM_CADCallback+0xf4>)
 801613a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801613e:	4618      	mov	r0, r3
 8016140:	f7fc fe7c 	bl	8012e3c <osThreadTerminate>
        DPM_PEThreadId_Table[PortNum] = NULL;
 8016144:	79fb      	ldrb	r3, [r7, #7]
 8016146:	4a14      	ldr	r2, [pc, #80]	@ (8016198 <USBPD_DPM_CADCallback+0xf4>)
 8016148:	2100      	movs	r1, #0
 801614a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 801614e:	79fa      	ldrb	r2, [r7, #7]
 8016150:	4912      	ldr	r1, [pc, #72]	@ (801619c <USBPD_DPM_CADCallback+0xf8>)
 8016152:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8016156:	f36f 1304 	bfc	r3, #4, #1
 801615a:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].ActiveCCIs = CCNONE;
 801615e:	79fa      	ldrb	r2, [r7, #7]
 8016160:	490e      	ldr	r1, [pc, #56]	@ (801619c <USBPD_DPM_CADCallback+0xf8>)
 8016162:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8016166:	f36f 1387 	bfc	r3, #6, #2
 801616a:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 801616e:	79fb      	ldrb	r3, [r7, #7]
 8016170:	4a0a      	ldr	r2, [pc, #40]	@ (801619c <USBPD_DPM_CADCallback+0xf8>)
 8016172:	009b      	lsls	r3, r3, #2
 8016174:	4413      	add	r3, r2
 8016176:	785a      	ldrb	r2, [r3, #1]
 8016178:	f36f 0202 	bfc	r2, #0, #3
 801617c:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 801617e:	79ba      	ldrb	r2, [r7, #6]
 8016180:	79fb      	ldrb	r3, [r7, #7]
 8016182:	4611      	mov	r1, r2
 8016184:	4618      	mov	r0, r3
 8016186:	f000 f865 	bl	8016254 <USBPD_DPM_UserCableDetection>
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnCCIs = CCNONE;
      DPM_Params[PortNum].VconnStatus = USBPD_FALSE;
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=FALSE");
#endif /* _VCONN_SUPPORT */
      break;
 801618a:	e000      	b.n	801618e <USBPD_DPM_CADCallback+0xea>
    }
    default :
      /* nothing to do */
      break;
 801618c:	bf00      	nop
  }
}
 801618e:	bf00      	nop
 8016190:	3710      	adds	r7, #16
 8016192:	46bd      	mov	sp, r7
 8016194:	bd80      	pop	{r7, pc}
 8016196:	bf00      	nop
 8016198:	20002740 	.word	0x20002740
 801619c:	20002748 	.word	0x20002748

080161a0 <DPM_ManageAttachedState>:

static void DPM_ManageAttachedState(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 80161a0:	b590      	push	{r4, r7, lr}
 80161a2:	b083      	sub	sp, #12
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	4603      	mov	r3, r0
 80161a8:	603a      	str	r2, [r7, #0]
 80161aa:	71fb      	strb	r3, [r7, #7]
 80161ac:	460b      	mov	r3, r1
 80161ae:	71bb      	strb	r3, [r7, #6]
  if (CC2 == Cc)
  {
    DPM_Params[PortNum].VconnCCIs = CC1;
  }
#endif /* _VCONN_SUPPORT */
  DPM_Params[PortNum].ActiveCCIs = Cc;
 80161b0:	79fa      	ldrb	r2, [r7, #7]
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	f003 0303 	and.w	r3, r3, #3
 80161b8:	b2d8      	uxtb	r0, r3
 80161ba:	491c      	ldr	r1, [pc, #112]	@ (801622c <DPM_ManageAttachedState+0x8c>)
 80161bc:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 80161c0:	f360 1387 	bfi	r3, r0, #6, #2
 80161c4:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
  (void)USBPD_PE_IsCableConnected(PortNum, 1);
 80161c8:	79fb      	ldrb	r3, [r7, #7]
 80161ca:	2101      	movs	r1, #1
 80161cc:	4618      	mov	r0, r3
 80161ce:	f7ea f99e 	bl	800050e <USBPD_PE_IsCableConnected>

  USBPD_DPM_UserCableDetection(PortNum, State);
 80161d2:	79ba      	ldrb	r2, [r7, #6]
 80161d4:	79fb      	ldrb	r3, [r7, #7]
 80161d6:	4611      	mov	r1, r2
 80161d8:	4618      	mov	r0, r3
 80161da:	f000 f83b 	bl	8016254 <USBPD_DPM_UserCableDetection>

  /* Create PE task */
  if (DPM_PEThreadId_Table[PortNum] == NULL)
 80161de:	79fb      	ldrb	r3, [r7, #7]
 80161e0:	4a13      	ldr	r2, [pc, #76]	@ (8016230 <DPM_ManageAttachedState+0x90>)
 80161e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d11c      	bne.n	8016224 <DPM_ManageAttachedState+0x84>
  {
#if (osCMSIS < 0x20000U)
    DPM_PEThreadId_Table[PortNum] = osThreadCreate(OSTHREAD_PE(PortNum), (void *)((uint32_t)PortNum));
#else
    DPM_PEThreadId_Table[PortNum] = osThreadNew(OSTHREAD_PE(PortNum), NULL, OSTHREAD_PE_ATTR(PortNum));
 80161ea:	79fb      	ldrb	r3, [r7, #7]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d101      	bne.n	80161f4 <DPM_ManageAttachedState+0x54>
 80161f0:	4810      	ldr	r0, [pc, #64]	@ (8016234 <DPM_ManageAttachedState+0x94>)
 80161f2:	e000      	b.n	80161f6 <DPM_ManageAttachedState+0x56>
 80161f4:	4810      	ldr	r0, [pc, #64]	@ (8016238 <DPM_ManageAttachedState+0x98>)
 80161f6:	79fb      	ldrb	r3, [r7, #7]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d101      	bne.n	8016200 <DPM_ManageAttachedState+0x60>
 80161fc:	4b0f      	ldr	r3, [pc, #60]	@ (801623c <DPM_ManageAttachedState+0x9c>)
 80161fe:	e000      	b.n	8016202 <DPM_ManageAttachedState+0x62>
 8016200:	4b0f      	ldr	r3, [pc, #60]	@ (8016240 <DPM_ManageAttachedState+0xa0>)
 8016202:	79fc      	ldrb	r4, [r7, #7]
 8016204:	461a      	mov	r2, r3
 8016206:	2100      	movs	r1, #0
 8016208:	f7fc fd86 	bl	8012d18 <osThreadNew>
 801620c:	4603      	mov	r3, r0
 801620e:	4a08      	ldr	r2, [pc, #32]	@ (8016230 <DPM_ManageAttachedState+0x90>)
 8016210:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
#endif /* osCMSIS < 0x20000U */
    if (DPM_PEThreadId_Table[PortNum] == NULL)
 8016214:	79fb      	ldrb	r3, [r7, #7]
 8016216:	4a06      	ldr	r2, [pc, #24]	@ (8016230 <DPM_ManageAttachedState+0x90>)
 8016218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801621c:	2b00      	cmp	r3, #0
 801621e:	d101      	bne.n	8016224 <DPM_ManageAttachedState+0x84>
    {
      /* should not occur. May be an issue with FreeRTOS heap size too small */
      while (1);
 8016220:	bf00      	nop
 8016222:	e7fd      	b.n	8016220 <DPM_ManageAttachedState+0x80>
    }
  }
}
 8016224:	bf00      	nop
 8016226:	370c      	adds	r7, #12
 8016228:	46bd      	mov	sp, r7
 801622a:	bd90      	pop	{r4, r7, pc}
 801622c:	20002748 	.word	0x20002748
 8016230:	20002740 	.word	0x20002740
 8016234:	08016021 	.word	0x08016021
 8016238:	08016037 	.word	0x08016037
 801623c:	20000188 	.word	0x20000188
 8016240:	200001ac 	.word	0x200001ac

08016244 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 8016244:	b480      	push	{r7}
 8016246:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  return USBPD_OK;
 8016248:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 801624a:	4618      	mov	r0, r3
 801624c:	46bd      	mov	sp, r7
 801624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016252:	4770      	bx	lr

08016254 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 8016254:	b480      	push	{r7}
 8016256:	b083      	sub	sp, #12
 8016258:	af00      	add	r7, sp, #0
 801625a:	4603      	mov	r3, r0
 801625c:	460a      	mov	r2, r1
 801625e:	71fb      	strb	r3, [r7, #7]
 8016260:	4613      	mov	r3, r2
 8016262:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 8016264:	bf00      	nop
 8016266:	370c      	adds	r7, #12
 8016268:	46bd      	mov	sp, r7
 801626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626e:	4770      	bx	lr

08016270 <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 8016270:	b480      	push	{r7}
 8016272:	b083      	sub	sp, #12
 8016274:	af00      	add	r7, sp, #0
 8016276:	4603      	mov	r3, r0
 8016278:	460a      	mov	r2, r1
 801627a:	71fb      	strb	r3, [r7, #7]
 801627c:	4613      	mov	r3, r2
 801627e:	71bb      	strb	r3, [r7, #6]
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
      break;
 8016280:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_Notification */
}
 8016282:	bf00      	nop
 8016284:	370c      	adds	r7, #12
 8016286:	46bd      	mov	sp, r7
 8016288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801628c:	4770      	bx	lr

0801628e <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 801628e:	b480      	push	{r7}
 8016290:	b083      	sub	sp, #12
 8016292:	af00      	add	r7, sp, #0
 8016294:	4603      	mov	r3, r0
 8016296:	6039      	str	r1, [r7, #0]
 8016298:	71fb      	strb	r3, [r7, #7]
 801629a:	4613      	mov	r3, r2
 801629c:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 801629e:	bf00      	nop
 80162a0:	370c      	adds	r7, #12
 80162a2:	46bd      	mov	sp, r7
 80162a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a8:	4770      	bx	lr

080162aa <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 80162aa:	b480      	push	{r7}
 80162ac:	b085      	sub	sp, #20
 80162ae:	af00      	add	r7, sp, #0
 80162b0:	60ba      	str	r2, [r7, #8]
 80162b2:	607b      	str	r3, [r7, #4]
 80162b4:	4603      	mov	r3, r0
 80162b6:	73fb      	strb	r3, [r7, #15]
 80162b8:	460b      	mov	r3, r1
 80162ba:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
    break;
 80162bc:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 80162be:	bf00      	nop
 80162c0:	3714      	adds	r7, #20
 80162c2:	46bd      	mov	sp, r7
 80162c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c8:	4770      	bx	lr

080162ca <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 80162ca:	b480      	push	{r7}
 80162cc:	b085      	sub	sp, #20
 80162ce:	af00      	add	r7, sp, #0
 80162d0:	60ba      	str	r2, [r7, #8]
 80162d2:	607b      	str	r3, [r7, #4]
 80162d4:	4603      	mov	r3, r0
 80162d6:	73fb      	strb	r3, [r7, #15]
 80162d8:	460b      	mov	r3, r1
 80162da:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
    break;
 80162dc:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

}
 80162de:	bf00      	nop
 80162e0:	3714      	adds	r7, #20
 80162e2:	46bd      	mov	sp, r7
 80162e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e8:	4770      	bx	lr

080162ea <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 80162ea:	b480      	push	{r7}
 80162ec:	b085      	sub	sp, #20
 80162ee:	af00      	add	r7, sp, #0
 80162f0:	4603      	mov	r3, r0
 80162f2:	60b9      	str	r1, [r7, #8]
 80162f4:	607a      	str	r2, [r7, #4]
 80162f6:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SNK_EvaluateCapabilities");
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 80162f8:	bf00      	nop
 80162fa:	3714      	adds	r7, #20
 80162fc:	46bd      	mov	sp, r7
 80162fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016302:	4770      	bx	lr

08016304 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 8016304:	b480      	push	{r7}
 8016306:	b083      	sub	sp, #12
 8016308:	af00      	add	r7, sp, #0
 801630a:	603a      	str	r2, [r7, #0]
 801630c:	461a      	mov	r2, r3
 801630e:	4603      	mov	r3, r0
 8016310:	71fb      	strb	r3, [r7, #7]
 8016312:	460b      	mov	r3, r1
 8016314:	71bb      	strb	r3, [r7, #6]
 8016316:	4613      	mov	r3, r2
 8016318:	80bb      	strh	r3, [r7, #4]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 801631a:	bf00      	nop
 801631c:	370c      	adds	r7, #12
 801631e:	46bd      	mov	sp, r7
 8016320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016324:	4770      	bx	lr

08016326 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 8016326:	b580      	push	{r7, lr}
 8016328:	b082      	sub	sp, #8
 801632a:	af00      	add	r7, sp, #0
 801632c:	4603      	mov	r3, r0
 801632e:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 8016330:	79fb      	ldrb	r3, [r7, #7]
 8016332:	4618      	mov	r0, r3
 8016334:	f7ea f834 	bl	80003a0 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 8016338:	bf00      	nop
 801633a:	3708      	adds	r7, #8
 801633c:	46bd      	mov	sp, r7
 801633e:	bd80      	pop	{r7, pc}

08016340 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 8016340:	b480      	push	{r7}
 8016342:	b085      	sub	sp, #20
 8016344:	af00      	add	r7, sp, #0
 8016346:	4603      	mov	r3, r0
 8016348:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 801634a:	230c      	movs	r3, #12
 801634c:	73fb      	strb	r3, [r7, #15]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 801634e:	79fb      	ldrb	r3, [r7, #7]
 8016350:	4a2c      	ldr	r2, [pc, #176]	@ (8016404 <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 8016352:	2158      	movs	r1, #88	@ 0x58
 8016354:	fb01 f303 	mul.w	r3, r1, r3
 8016358:	4413      	add	r3, r2
 801635a:	781b      	ldrb	r3, [r3, #0]
 801635c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016360:	b2db      	uxtb	r3, r3
 8016362:	2b00      	cmp	r3, #0
 8016364:	d017      	beq.n	8016396 <USBPD_DPM_EvaluateDataRoleSwap+0x56>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 8016366:	79fb      	ldrb	r3, [r7, #7]
 8016368:	4a26      	ldr	r2, [pc, #152]	@ (8016404 <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 801636a:	2158      	movs	r1, #88	@ 0x58
 801636c:	fb01 f303 	mul.w	r3, r1, r3
 8016370:	4413      	add	r3, r2
 8016372:	781b      	ldrb	r3, [r3, #0]
 8016374:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016378:	b2db      	uxtb	r3, r3
 801637a:	2b00      	cmp	r3, #0
 801637c:	d10e      	bne.n	801639c <USBPD_DPM_EvaluateDataRoleSwap+0x5c>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 801637e:	79fb      	ldrb	r3, [r7, #7]
 8016380:	4a20      	ldr	r2, [pc, #128]	@ (8016404 <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 8016382:	2158      	movs	r1, #88	@ 0x58
 8016384:	fb01 f303 	mul.w	r3, r1, r3
 8016388:	4413      	add	r3, r2
 801638a:	781b      	ldrb	r3, [r3, #0]
 801638c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8016390:	b2db      	uxtb	r3, r3
 8016392:	2b00      	cmp	r3, #0
 8016394:	d102      	bne.n	801639c <USBPD_DPM_EvaluateDataRoleSwap+0x5c>
  {
    status = USBPD_NOTSUPPORTED;
 8016396:	2301      	movs	r3, #1
 8016398:	73fb      	strb	r3, [r7, #15]
 801639a:	e02b      	b.n	80163f4 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 801639c:	79fb      	ldrb	r3, [r7, #7]
 801639e:	4a19      	ldr	r2, [pc, #100]	@ (8016404 <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 80163a0:	2158      	movs	r1, #88	@ 0x58
 80163a2:	fb01 f303 	mul.w	r3, r1, r3
 80163a6:	4413      	add	r3, r2
 80163a8:	781b      	ldrb	r3, [r3, #0]
 80163aa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80163ae:	b2db      	uxtb	r3, r3
 80163b0:	2b01      	cmp	r3, #1
 80163b2:	d108      	bne.n	80163c6 <USBPD_DPM_EvaluateDataRoleSwap+0x86>
 80163b4:	79fb      	ldrb	r3, [r7, #7]
 80163b6:	4a14      	ldr	r2, [pc, #80]	@ (8016408 <USBPD_DPM_EvaluateDataRoleSwap+0xc8>)
 80163b8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80163bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80163c0:	b2db      	uxtb	r3, r3
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d014      	beq.n	80163f0 <USBPD_DPM_EvaluateDataRoleSwap+0xb0>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 80163c6:	79fb      	ldrb	r3, [r7, #7]
 80163c8:	4a0e      	ldr	r2, [pc, #56]	@ (8016404 <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 80163ca:	2158      	movs	r1, #88	@ 0x58
 80163cc:	fb01 f303 	mul.w	r3, r1, r3
 80163d0:	4413      	add	r3, r2
 80163d2:	781b      	ldrb	r3, [r3, #0]
 80163d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80163d8:	b2db      	uxtb	r3, r3
 80163da:	2b01      	cmp	r3, #1
 80163dc:	d10a      	bne.n	80163f4 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
 80163de:	79fb      	ldrb	r3, [r7, #7]
 80163e0:	4a09      	ldr	r2, [pc, #36]	@ (8016408 <USBPD_DPM_EvaluateDataRoleSwap+0xc8>)
 80163e2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80163e6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80163ea:	b2db      	uxtb	r3, r3
 80163ec:	2b01      	cmp	r3, #1
 80163ee:	d101      	bne.n	80163f4 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
    {
      status = USBPD_ACCEPT;
 80163f0:	230a      	movs	r3, #10
 80163f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80163f4:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 80163f6:	4618      	mov	r0, r3
 80163f8:	3714      	adds	r7, #20
 80163fa:	46bd      	mov	sp, r7
 80163fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016400:	4770      	bx	lr
 8016402:	bf00      	nop
 8016404:	20000130 	.word	0x20000130
 8016408:	20002748 	.word	0x20002748

0801640c <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b082      	sub	sp, #8
 8016410:	af00      	add	r7, sp, #0
 8016412:	4603      	mov	r3, r0
 8016414:	460a      	mov	r2, r1
 8016416:	71fb      	strb	r3, [r7, #7]
 8016418:	4613      	mov	r3, r2
 801641a:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 801641c:	79ba      	ldrb	r2, [r7, #6]
 801641e:	79fb      	ldrb	r3, [r7, #7]
 8016420:	4611      	mov	r1, r2
 8016422:	4618      	mov	r0, r3
 8016424:	f000 f80a 	bl	801643c <USBPD_PWR_IF_SupplyReady>
 8016428:	4603      	mov	r3, r0
 801642a:	2b00      	cmp	r3, #0
 801642c:	bf0c      	ite	eq
 801642e:	2301      	moveq	r3, #1
 8016430:	2300      	movne	r3, #0
 8016432:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 8016434:	4618      	mov	r0, r3
 8016436:	3708      	adds	r7, #8
 8016438:	46bd      	mov	sp, r7
 801643a:	bd80      	pop	{r7, pc}

0801643c <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b084      	sub	sp, #16
 8016440:	af00      	add	r7, sp, #0
 8016442:	4603      	mov	r3, r0
 8016444:	460a      	mov	r2, r1
 8016446:	71fb      	strb	r3, [r7, #7]
 8016448:	4613      	mov	r3, r2
 801644a:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 801644c:	2302      	movs	r3, #2
 801644e:	73fb      	strb	r3, [r7, #15]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 8016450:	79fb      	ldrb	r3, [r7, #7]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d001      	beq.n	801645a <USBPD_PWR_IF_SupplyReady+0x1e>
  {
    return USBPD_ERROR;
 8016456:	2302      	movs	r3, #2
 8016458:	e01c      	b.n	8016494 <USBPD_PWR_IF_SupplyReady+0x58>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 801645a:	79fb      	ldrb	r3, [r7, #7]
 801645c:	f107 0208 	add.w	r2, r7, #8
 8016460:	4611      	mov	r1, r2
 8016462:	4618      	mov	r0, r3
 8016464:	f000 f890 	bl	8016588 <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 8016468:	79bb      	ldrb	r3, [r7, #6]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d109      	bne.n	8016482 <USBPD_PWR_IF_SupplyReady+0x46>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801646e:	68bb      	ldr	r3, [r7, #8]
 8016470:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8016474:	4293      	cmp	r3, r2
 8016476:	d801      	bhi.n	801647c <USBPD_PWR_IF_SupplyReady+0x40>
 8016478:	2300      	movs	r3, #0
 801647a:	e000      	b.n	801647e <USBPD_PWR_IF_SupplyReady+0x42>
 801647c:	2302      	movs	r3, #2
 801647e:	73fb      	strb	r3, [r7, #15]
 8016480:	e007      	b.n	8016492 <USBPD_PWR_IF_SupplyReady+0x56>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8016482:	68bb      	ldr	r3, [r7, #8]
 8016484:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8016488:	d901      	bls.n	801648e <USBPD_PWR_IF_SupplyReady+0x52>
 801648a:	2300      	movs	r3, #0
 801648c:	e000      	b.n	8016490 <USBPD_PWR_IF_SupplyReady+0x54>
 801648e:	2302      	movs	r3, #2
 8016490:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8016492:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 8016494:	4618      	mov	r0, r3
 8016496:	3710      	adds	r7, #16
 8016498:	46bd      	mov	sp, r7
 801649a:	bd80      	pop	{r7, pc}

0801649c <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 801649c:	b580      	push	{r7, lr}
 801649e:	b084      	sub	sp, #16
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	4603      	mov	r3, r0
 80164a4:	460a      	mov	r2, r1
 80164a6:	71fb      	strb	r3, [r7, #7]
 80164a8:	4613      	mov	r3, r2
 80164aa:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 80164ac:	2300      	movs	r3, #0
 80164ae:	73fb      	strb	r3, [r7, #15]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 80164b0:	79fb      	ldrb	r3, [r7, #7]
 80164b2:	4618      	mov	r0, r3
 80164b4:	f7fa fc4c 	bl	8010d50 <HW_IF_PWR_GetVoltage>
 80164b8:	4603      	mov	r3, r0
 80164ba:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 80164bc:	79bb      	ldrb	r3, [r7, #6]
 80164be:	2b02      	cmp	r3, #2
 80164c0:	d015      	beq.n	80164ee <USBPD_PWR_IF_GetVBUSStatus+0x52>
 80164c2:	2b02      	cmp	r3, #2
 80164c4:	dc1a      	bgt.n	80164fc <USBPD_PWR_IF_GetVBUSStatus+0x60>
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d002      	beq.n	80164d0 <USBPD_PWR_IF_GetVBUSStatus+0x34>
 80164ca:	2b01      	cmp	r3, #1
 80164cc:	d008      	beq.n	80164e0 <USBPD_PWR_IF_GetVBUSStatus+0x44>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 80164ce:	e015      	b.n	80164fc <USBPD_PWR_IF_GetVBUSStatus+0x60>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 80164d0:	68bb      	ldr	r3, [r7, #8]
 80164d2:	f240 22ed 	movw	r2, #749	@ 0x2ed
 80164d6:	4293      	cmp	r3, r2
 80164d8:	d812      	bhi.n	8016500 <USBPD_PWR_IF_GetVBUSStatus+0x64>
 80164da:	2301      	movs	r3, #1
 80164dc:	73fb      	strb	r3, [r7, #15]
    break;
 80164de:	e00f      	b.n	8016500 <USBPD_PWR_IF_GetVBUSStatus+0x64>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 80164e0:	68bb      	ldr	r3, [r7, #8]
 80164e2:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 80164e6:	d30d      	bcc.n	8016504 <USBPD_PWR_IF_GetVBUSStatus+0x68>
 80164e8:	2301      	movs	r3, #1
 80164ea:	73fb      	strb	r3, [r7, #15]
    break;
 80164ec:	e00a      	b.n	8016504 <USBPD_PWR_IF_GetVBUSStatus+0x68>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 80164ee:	68bb      	ldr	r3, [r7, #8]
 80164f0:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 80164f4:	d208      	bcs.n	8016508 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
 80164f6:	2301      	movs	r3, #1
 80164f8:	73fb      	strb	r3, [r7, #15]
    break;
 80164fa:	e005      	b.n	8016508 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
    break;
 80164fc:	bf00      	nop
 80164fe:	e004      	b.n	801650a <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 8016500:	bf00      	nop
 8016502:	e002      	b.n	801650a <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 8016504:	bf00      	nop
 8016506:	e000      	b.n	801650a <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 8016508:	bf00      	nop
  }
  return _status;
 801650a:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 801650c:	4618      	mov	r0, r3
 801650e:	3710      	adds	r7, #16
 8016510:	46bd      	mov	sp, r7
 8016512:	bd80      	pop	{r7, pc}

08016514 <BSP_USBPD_PWR_Init>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 8016514:	b480      	push	{r7}
 8016516:	b085      	sub	sp, #20
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801651c:	2300      	movs	r3, #0
 801651e:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	2b00      	cmp	r3, #0
 8016524:	d002      	beq.n	801652c <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8016526:	f06f 0301 	mvn.w	r3, #1
 801652a:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801652c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 801652e:	4618      	mov	r0, r3
 8016530:	3714      	adds	r7, #20
 8016532:	46bd      	mov	sp, r7
 8016534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016538:	4770      	bx	lr

0801653a <BSP_USBPD_PWR_VBUSInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 801653a:	b480      	push	{r7}
 801653c:	b085      	sub	sp, #20
 801653e:	af00      	add	r7, sp, #0
 8016540:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8016542:	2300      	movs	r3, #0
 8016544:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d002      	beq.n	8016552 <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801654c:	f06f 0301 	mvn.w	r3, #1
 8016550:	60fb      	str	r3, [r7, #12]
  else
  {
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 8016552:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 8016554:	4618      	mov	r0, r3
 8016556:	3714      	adds	r7, #20
 8016558:	46bd      	mov	sp, r7
 801655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655e:	4770      	bx	lr

08016560 <BSP_USBPD_PWR_VBUSDeInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 8016560:	b480      	push	{r7}
 8016562:	b085      	sub	sp, #20
 8016564:	af00      	add	r7, sp, #0
 8016566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8016568:	f06f 030a 	mvn.w	r3, #10
 801656c:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d002      	beq.n	801657a <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8016574:	f06f 0301 	mvn.w	r3, #1
 8016578:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801657a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 801657c:	4618      	mov	r0, r3
 801657e:	3714      	adds	r7, #20
 8016580:	46bd      	mov	sp, r7
 8016582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016586:	4770      	bx	lr

08016588 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 8016588:	b480      	push	{r7}
 801658a:	b085      	sub	sp, #20
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
 8016590:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */
  /* Check if instance is valid       */
  int32_t ret;
  uint32_t val = 0U;
 8016592:	2300      	movs	r3, #0
 8016594:	60bb      	str	r3, [r7, #8]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d102      	bne.n	80165a2 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 801659c:	683b      	ldr	r3, [r7, #0]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d103      	bne.n	80165aa <BSP_USBPD_PWR_VBUSGetVoltage+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80165a2:	f06f 0301 	mvn.w	r3, #1
 80165a6:	60fb      	str	r3, [r7, #12]
 80165a8:	e002      	b.n	80165b0 <BSP_USBPD_PWR_VBUSGetVoltage+0x28>
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80165aa:	f06f 030a 	mvn.w	r3, #10
 80165ae:	60fb      	str	r3, [r7, #12]
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
  }
  *pVoltage = val;
 80165b0:	683b      	ldr	r3, [r7, #0]
 80165b2:	68ba      	ldr	r2, [r7, #8]
 80165b4:	601a      	str	r2, [r3, #0]
  return ret;
 80165b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 80165b8:	4618      	mov	r0, r3
 80165ba:	3714      	adds	r7, #20
 80165bc:	46bd      	mov	sp, r7
 80165be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c2:	4770      	bx	lr

080165c4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80165c4:	b580      	push	{r7, lr}
 80165c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80165c8:	2200      	movs	r2, #0
 80165ca:	4912      	ldr	r1, [pc, #72]	@ (8016614 <MX_USB_Device_Init+0x50>)
 80165cc:	4812      	ldr	r0, [pc, #72]	@ (8016618 <MX_USB_Device_Init+0x54>)
 80165ce:	f7fb f9f5 	bl	80119bc <USBD_Init>
 80165d2:	4603      	mov	r3, r0
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d001      	beq.n	80165dc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80165d8:	f7f0 f8ea 	bl	80067b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80165dc:	490f      	ldr	r1, [pc, #60]	@ (801661c <MX_USB_Device_Init+0x58>)
 80165de:	480e      	ldr	r0, [pc, #56]	@ (8016618 <MX_USB_Device_Init+0x54>)
 80165e0:	f7fb fa1c 	bl	8011a1c <USBD_RegisterClass>
 80165e4:	4603      	mov	r3, r0
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d001      	beq.n	80165ee <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80165ea:	f7f0 f8e1 	bl	80067b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80165ee:	490c      	ldr	r1, [pc, #48]	@ (8016620 <MX_USB_Device_Init+0x5c>)
 80165f0:	4809      	ldr	r0, [pc, #36]	@ (8016618 <MX_USB_Device_Init+0x54>)
 80165f2:	f7fb f96d 	bl	80118d0 <USBD_CDC_RegisterInterface>
 80165f6:	4603      	mov	r3, r0
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d001      	beq.n	8016600 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80165fc:	f7f0 f8d8 	bl	80067b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8016600:	4805      	ldr	r0, [pc, #20]	@ (8016618 <MX_USB_Device_Init+0x54>)
 8016602:	f7fb fa32 	bl	8011a6a <USBD_Start>
 8016606:	4603      	mov	r3, r0
 8016608:	2b00      	cmp	r3, #0
 801660a:	d001      	beq.n	8016610 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 801660c:	f7f0 f8d0 	bl	80067b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8016610:	bf00      	nop
 8016612:	bd80      	pop	{r7, pc}
 8016614:	20000208 	.word	0x20000208
 8016618:	2000274c 	.word	0x2000274c
 801661c:	2000001c 	.word	0x2000001c
 8016620:	200001f4 	.word	0x200001f4

08016624 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016628:	2200      	movs	r2, #0
 801662a:	4905      	ldr	r1, [pc, #20]	@ (8016640 <CDC_Init_FS+0x1c>)
 801662c:	4805      	ldr	r0, [pc, #20]	@ (8016644 <CDC_Init_FS+0x20>)
 801662e:	f7fb f964 	bl	80118fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016632:	4905      	ldr	r1, [pc, #20]	@ (8016648 <CDC_Init_FS+0x24>)
 8016634:	4803      	ldr	r0, [pc, #12]	@ (8016644 <CDC_Init_FS+0x20>)
 8016636:	f7fb f97e 	bl	8011936 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801663a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801663c:	4618      	mov	r0, r3
 801663e:	bd80      	pop	{r7, pc}
 8016640:	20002e1c 	.word	0x20002e1c
 8016644:	2000274c 	.word	0x2000274c
 8016648:	20002a1c 	.word	0x20002a1c

0801664c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801664c:	b480      	push	{r7}
 801664e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016650:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016652:	4618      	mov	r0, r3
 8016654:	46bd      	mov	sp, r7
 8016656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801665a:	4770      	bx	lr

0801665c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801665c:	b480      	push	{r7}
 801665e:	b083      	sub	sp, #12
 8016660:	af00      	add	r7, sp, #0
 8016662:	4603      	mov	r3, r0
 8016664:	6039      	str	r1, [r7, #0]
 8016666:	71fb      	strb	r3, [r7, #7]
 8016668:	4613      	mov	r3, r2
 801666a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801666c:	79fb      	ldrb	r3, [r7, #7]
 801666e:	2b23      	cmp	r3, #35	@ 0x23
 8016670:	d84a      	bhi.n	8016708 <CDC_Control_FS+0xac>
 8016672:	a201      	add	r2, pc, #4	@ (adr r2, 8016678 <CDC_Control_FS+0x1c>)
 8016674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016678:	08016709 	.word	0x08016709
 801667c:	08016709 	.word	0x08016709
 8016680:	08016709 	.word	0x08016709
 8016684:	08016709 	.word	0x08016709
 8016688:	08016709 	.word	0x08016709
 801668c:	08016709 	.word	0x08016709
 8016690:	08016709 	.word	0x08016709
 8016694:	08016709 	.word	0x08016709
 8016698:	08016709 	.word	0x08016709
 801669c:	08016709 	.word	0x08016709
 80166a0:	08016709 	.word	0x08016709
 80166a4:	08016709 	.word	0x08016709
 80166a8:	08016709 	.word	0x08016709
 80166ac:	08016709 	.word	0x08016709
 80166b0:	08016709 	.word	0x08016709
 80166b4:	08016709 	.word	0x08016709
 80166b8:	08016709 	.word	0x08016709
 80166bc:	08016709 	.word	0x08016709
 80166c0:	08016709 	.word	0x08016709
 80166c4:	08016709 	.word	0x08016709
 80166c8:	08016709 	.word	0x08016709
 80166cc:	08016709 	.word	0x08016709
 80166d0:	08016709 	.word	0x08016709
 80166d4:	08016709 	.word	0x08016709
 80166d8:	08016709 	.word	0x08016709
 80166dc:	08016709 	.word	0x08016709
 80166e0:	08016709 	.word	0x08016709
 80166e4:	08016709 	.word	0x08016709
 80166e8:	08016709 	.word	0x08016709
 80166ec:	08016709 	.word	0x08016709
 80166f0:	08016709 	.word	0x08016709
 80166f4:	08016709 	.word	0x08016709
 80166f8:	08016709 	.word	0x08016709
 80166fc:	08016709 	.word	0x08016709
 8016700:	08016709 	.word	0x08016709
 8016704:	08016709 	.word	0x08016709
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016708:	bf00      	nop
  }

  return (USBD_OK);
 801670a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801670c:	4618      	mov	r0, r3
 801670e:	370c      	adds	r7, #12
 8016710:	46bd      	mov	sp, r7
 8016712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016716:	4770      	bx	lr

08016718 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016718:	b580      	push	{r7, lr}
 801671a:	b082      	sub	sp, #8
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
 8016720:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016722:	6879      	ldr	r1, [r7, #4]
 8016724:	4805      	ldr	r0, [pc, #20]	@ (801673c <CDC_Receive_FS+0x24>)
 8016726:	f7fb f906 	bl	8011936 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801672a:	4804      	ldr	r0, [pc, #16]	@ (801673c <CDC_Receive_FS+0x24>)
 801672c:	f7fb f91c 	bl	8011968 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016730:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016732:	4618      	mov	r0, r3
 8016734:	3708      	adds	r7, #8
 8016736:	46bd      	mov	sp, r7
 8016738:	bd80      	pop	{r7, pc}
 801673a:	bf00      	nop
 801673c:	2000274c 	.word	0x2000274c

08016740 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016740:	b480      	push	{r7}
 8016742:	b087      	sub	sp, #28
 8016744:	af00      	add	r7, sp, #0
 8016746:	60f8      	str	r0, [r7, #12]
 8016748:	60b9      	str	r1, [r7, #8]
 801674a:	4613      	mov	r3, r2
 801674c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801674e:	2300      	movs	r3, #0
 8016750:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016752:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016756:	4618      	mov	r0, r3
 8016758:	371c      	adds	r7, #28
 801675a:	46bd      	mov	sp, r7
 801675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016760:	4770      	bx	lr
	...

08016764 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016764:	b480      	push	{r7}
 8016766:	b083      	sub	sp, #12
 8016768:	af00      	add	r7, sp, #0
 801676a:	4603      	mov	r3, r0
 801676c:	6039      	str	r1, [r7, #0]
 801676e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8016770:	683b      	ldr	r3, [r7, #0]
 8016772:	2212      	movs	r2, #18
 8016774:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8016776:	4b03      	ldr	r3, [pc, #12]	@ (8016784 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8016778:	4618      	mov	r0, r3
 801677a:	370c      	adds	r7, #12
 801677c:	46bd      	mov	sp, r7
 801677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016782:	4770      	bx	lr
 8016784:	20000228 	.word	0x20000228

08016788 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016788:	b480      	push	{r7}
 801678a:	b083      	sub	sp, #12
 801678c:	af00      	add	r7, sp, #0
 801678e:	4603      	mov	r3, r0
 8016790:	6039      	str	r1, [r7, #0]
 8016792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016794:	683b      	ldr	r3, [r7, #0]
 8016796:	2204      	movs	r2, #4
 8016798:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801679a:	4b03      	ldr	r3, [pc, #12]	@ (80167a8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801679c:	4618      	mov	r0, r3
 801679e:	370c      	adds	r7, #12
 80167a0:	46bd      	mov	sp, r7
 80167a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a6:	4770      	bx	lr
 80167a8:	2000023c 	.word	0x2000023c

080167ac <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b082      	sub	sp, #8
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	4603      	mov	r3, r0
 80167b4:	6039      	str	r1, [r7, #0]
 80167b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80167b8:	79fb      	ldrb	r3, [r7, #7]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d105      	bne.n	80167ca <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80167be:	683a      	ldr	r2, [r7, #0]
 80167c0:	4907      	ldr	r1, [pc, #28]	@ (80167e0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80167c2:	4808      	ldr	r0, [pc, #32]	@ (80167e4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80167c4:	f7fc f939 	bl	8012a3a <USBD_GetString>
 80167c8:	e004      	b.n	80167d4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80167ca:	683a      	ldr	r2, [r7, #0]
 80167cc:	4904      	ldr	r1, [pc, #16]	@ (80167e0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80167ce:	4805      	ldr	r0, [pc, #20]	@ (80167e4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80167d0:	f7fc f933 	bl	8012a3a <USBD_GetString>
  }
  return USBD_StrDesc;
 80167d4:	4b02      	ldr	r3, [pc, #8]	@ (80167e0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80167d6:	4618      	mov	r0, r3
 80167d8:	3708      	adds	r7, #8
 80167da:	46bd      	mov	sp, r7
 80167dc:	bd80      	pop	{r7, pc}
 80167de:	bf00      	nop
 80167e0:	2000321c 	.word	0x2000321c
 80167e4:	08017340 	.word	0x08017340

080167e8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b082      	sub	sp, #8
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	4603      	mov	r3, r0
 80167f0:	6039      	str	r1, [r7, #0]
 80167f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80167f4:	683a      	ldr	r2, [r7, #0]
 80167f6:	4904      	ldr	r1, [pc, #16]	@ (8016808 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80167f8:	4804      	ldr	r0, [pc, #16]	@ (801680c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80167fa:	f7fc f91e 	bl	8012a3a <USBD_GetString>
  return USBD_StrDesc;
 80167fe:	4b02      	ldr	r3, [pc, #8]	@ (8016808 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8016800:	4618      	mov	r0, r3
 8016802:	3708      	adds	r7, #8
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}
 8016808:	2000321c 	.word	0x2000321c
 801680c:	08017358 	.word	0x08017358

08016810 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b082      	sub	sp, #8
 8016814:	af00      	add	r7, sp, #0
 8016816:	4603      	mov	r3, r0
 8016818:	6039      	str	r1, [r7, #0]
 801681a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801681c:	683b      	ldr	r3, [r7, #0]
 801681e:	221a      	movs	r2, #26
 8016820:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016822:	f000 f843 	bl	80168ac <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016826:	4b02      	ldr	r3, [pc, #8]	@ (8016830 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8016828:	4618      	mov	r0, r3
 801682a:	3708      	adds	r7, #8
 801682c:	46bd      	mov	sp, r7
 801682e:	bd80      	pop	{r7, pc}
 8016830:	20000240 	.word	0x20000240

08016834 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b082      	sub	sp, #8
 8016838:	af00      	add	r7, sp, #0
 801683a:	4603      	mov	r3, r0
 801683c:	6039      	str	r1, [r7, #0]
 801683e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016840:	79fb      	ldrb	r3, [r7, #7]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d105      	bne.n	8016852 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8016846:	683a      	ldr	r2, [r7, #0]
 8016848:	4907      	ldr	r1, [pc, #28]	@ (8016868 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801684a:	4808      	ldr	r0, [pc, #32]	@ (801686c <USBD_CDC_ConfigStrDescriptor+0x38>)
 801684c:	f7fc f8f5 	bl	8012a3a <USBD_GetString>
 8016850:	e004      	b.n	801685c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8016852:	683a      	ldr	r2, [r7, #0]
 8016854:	4904      	ldr	r1, [pc, #16]	@ (8016868 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8016856:	4805      	ldr	r0, [pc, #20]	@ (801686c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8016858:	f7fc f8ef 	bl	8012a3a <USBD_GetString>
  }
  return USBD_StrDesc;
 801685c:	4b02      	ldr	r3, [pc, #8]	@ (8016868 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801685e:	4618      	mov	r0, r3
 8016860:	3708      	adds	r7, #8
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
 8016866:	bf00      	nop
 8016868:	2000321c 	.word	0x2000321c
 801686c:	0801736c 	.word	0x0801736c

08016870 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016870:	b580      	push	{r7, lr}
 8016872:	b082      	sub	sp, #8
 8016874:	af00      	add	r7, sp, #0
 8016876:	4603      	mov	r3, r0
 8016878:	6039      	str	r1, [r7, #0]
 801687a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801687c:	79fb      	ldrb	r3, [r7, #7]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d105      	bne.n	801688e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8016882:	683a      	ldr	r2, [r7, #0]
 8016884:	4907      	ldr	r1, [pc, #28]	@ (80168a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8016886:	4808      	ldr	r0, [pc, #32]	@ (80168a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8016888:	f7fc f8d7 	bl	8012a3a <USBD_GetString>
 801688c:	e004      	b.n	8016898 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801688e:	683a      	ldr	r2, [r7, #0]
 8016890:	4904      	ldr	r1, [pc, #16]	@ (80168a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8016892:	4805      	ldr	r0, [pc, #20]	@ (80168a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8016894:	f7fc f8d1 	bl	8012a3a <USBD_GetString>
  }
  return USBD_StrDesc;
 8016898:	4b02      	ldr	r3, [pc, #8]	@ (80168a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801689a:	4618      	mov	r0, r3
 801689c:	3708      	adds	r7, #8
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd80      	pop	{r7, pc}
 80168a2:	bf00      	nop
 80168a4:	2000321c 	.word	0x2000321c
 80168a8:	08017378 	.word	0x08017378

080168ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b084      	sub	sp, #16
 80168b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80168b2:	4b0f      	ldr	r3, [pc, #60]	@ (80168f0 <Get_SerialNum+0x44>)
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80168b8:	4b0e      	ldr	r3, [pc, #56]	@ (80168f4 <Get_SerialNum+0x48>)
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80168be:	4b0e      	ldr	r3, [pc, #56]	@ (80168f8 <Get_SerialNum+0x4c>)
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80168c4:	68fa      	ldr	r2, [r7, #12]
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	4413      	add	r3, r2
 80168ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d009      	beq.n	80168e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80168d2:	2208      	movs	r2, #8
 80168d4:	4909      	ldr	r1, [pc, #36]	@ (80168fc <Get_SerialNum+0x50>)
 80168d6:	68f8      	ldr	r0, [r7, #12]
 80168d8:	f000 f814 	bl	8016904 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80168dc:	2204      	movs	r2, #4
 80168de:	4908      	ldr	r1, [pc, #32]	@ (8016900 <Get_SerialNum+0x54>)
 80168e0:	68b8      	ldr	r0, [r7, #8]
 80168e2:	f000 f80f 	bl	8016904 <IntToUnicode>
  }
}
 80168e6:	bf00      	nop
 80168e8:	3710      	adds	r7, #16
 80168ea:	46bd      	mov	sp, r7
 80168ec:	bd80      	pop	{r7, pc}
 80168ee:	bf00      	nop
 80168f0:	1fff7590 	.word	0x1fff7590
 80168f4:	1fff7594 	.word	0x1fff7594
 80168f8:	1fff7598 	.word	0x1fff7598
 80168fc:	20000242 	.word	0x20000242
 8016900:	20000252 	.word	0x20000252

08016904 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016904:	b480      	push	{r7}
 8016906:	b087      	sub	sp, #28
 8016908:	af00      	add	r7, sp, #0
 801690a:	60f8      	str	r0, [r7, #12]
 801690c:	60b9      	str	r1, [r7, #8]
 801690e:	4613      	mov	r3, r2
 8016910:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016912:	2300      	movs	r3, #0
 8016914:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016916:	2300      	movs	r3, #0
 8016918:	75fb      	strb	r3, [r7, #23]
 801691a:	e027      	b.n	801696c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	0f1b      	lsrs	r3, r3, #28
 8016920:	2b09      	cmp	r3, #9
 8016922:	d80b      	bhi.n	801693c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	0f1b      	lsrs	r3, r3, #28
 8016928:	b2da      	uxtb	r2, r3
 801692a:	7dfb      	ldrb	r3, [r7, #23]
 801692c:	005b      	lsls	r3, r3, #1
 801692e:	4619      	mov	r1, r3
 8016930:	68bb      	ldr	r3, [r7, #8]
 8016932:	440b      	add	r3, r1
 8016934:	3230      	adds	r2, #48	@ 0x30
 8016936:	b2d2      	uxtb	r2, r2
 8016938:	701a      	strb	r2, [r3, #0]
 801693a:	e00a      	b.n	8016952 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	0f1b      	lsrs	r3, r3, #28
 8016940:	b2da      	uxtb	r2, r3
 8016942:	7dfb      	ldrb	r3, [r7, #23]
 8016944:	005b      	lsls	r3, r3, #1
 8016946:	4619      	mov	r1, r3
 8016948:	68bb      	ldr	r3, [r7, #8]
 801694a:	440b      	add	r3, r1
 801694c:	3237      	adds	r2, #55	@ 0x37
 801694e:	b2d2      	uxtb	r2, r2
 8016950:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	011b      	lsls	r3, r3, #4
 8016956:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016958:	7dfb      	ldrb	r3, [r7, #23]
 801695a:	005b      	lsls	r3, r3, #1
 801695c:	3301      	adds	r3, #1
 801695e:	68ba      	ldr	r2, [r7, #8]
 8016960:	4413      	add	r3, r2
 8016962:	2200      	movs	r2, #0
 8016964:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016966:	7dfb      	ldrb	r3, [r7, #23]
 8016968:	3301      	adds	r3, #1
 801696a:	75fb      	strb	r3, [r7, #23]
 801696c:	7dfa      	ldrb	r2, [r7, #23]
 801696e:	79fb      	ldrb	r3, [r7, #7]
 8016970:	429a      	cmp	r2, r3
 8016972:	d3d3      	bcc.n	801691c <IntToUnicode+0x18>
  }
}
 8016974:	bf00      	nop
 8016976:	bf00      	nop
 8016978:	371c      	adds	r7, #28
 801697a:	46bd      	mov	sp, r7
 801697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016980:	4770      	bx	lr
	...

08016984 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b094      	sub	sp, #80	@ 0x50
 8016988:	af00      	add	r7, sp, #0
 801698a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801698c:	f107 030c 	add.w	r3, r7, #12
 8016990:	2244      	movs	r2, #68	@ 0x44
 8016992:	2100      	movs	r1, #0
 8016994:	4618      	mov	r0, r3
 8016996:	f000 fbaf 	bl	80170f8 <memset>
  if(pcdHandle->Instance==USB)
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	4a15      	ldr	r2, [pc, #84]	@ (80169f4 <HAL_PCD_MspInit+0x70>)
 80169a0:	4293      	cmp	r3, r2
 80169a2:	d123      	bne.n	80169ec <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80169a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80169a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80169aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80169ae:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80169b0:	f107 030c 	add.w	r3, r7, #12
 80169b4:	4618      	mov	r0, r3
 80169b6:	f7f4 fbad 	bl	800b114 <HAL_RCCEx_PeriphCLKConfig>
 80169ba:	4603      	mov	r3, r0
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d001      	beq.n	80169c4 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 80169c0:	f7ef fef6 	bl	80067b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80169c4:	4b0c      	ldr	r3, [pc, #48]	@ (80169f8 <HAL_PCD_MspInit+0x74>)
 80169c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80169c8:	4a0b      	ldr	r2, [pc, #44]	@ (80169f8 <HAL_PCD_MspInit+0x74>)
 80169ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80169ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80169d0:	4b09      	ldr	r3, [pc, #36]	@ (80169f8 <HAL_PCD_MspInit+0x74>)
 80169d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80169d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80169d8:	60bb      	str	r3, [r7, #8]
 80169da:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80169dc:	2200      	movs	r2, #0
 80169de:	2105      	movs	r1, #5
 80169e0:	2014      	movs	r0, #20
 80169e2:	f7f1 fbdf 	bl	80081a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80169e6:	2014      	movs	r0, #20
 80169e8:	f7f1 fbf6 	bl	80081d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80169ec:	bf00      	nop
 80169ee:	3750      	adds	r7, #80	@ 0x50
 80169f0:	46bd      	mov	sp, r7
 80169f2:	bd80      	pop	{r7, pc}
 80169f4:	40005c00 	.word	0x40005c00
 80169f8:	40021000 	.word	0x40021000

080169fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b082      	sub	sp, #8
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8016a10:	4619      	mov	r1, r3
 8016a12:	4610      	mov	r0, r2
 8016a14:	f7fb f874 	bl	8011b00 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8016a18:	bf00      	nop
 8016a1a:	3708      	adds	r7, #8
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	bd80      	pop	{r7, pc}

08016a20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b082      	sub	sp, #8
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
 8016a28:	460b      	mov	r3, r1
 8016a2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8016a32:	78fa      	ldrb	r2, [r7, #3]
 8016a34:	6879      	ldr	r1, [r7, #4]
 8016a36:	4613      	mov	r3, r2
 8016a38:	009b      	lsls	r3, r3, #2
 8016a3a:	4413      	add	r3, r2
 8016a3c:	00db      	lsls	r3, r3, #3
 8016a3e:	440b      	add	r3, r1
 8016a40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016a44:	681a      	ldr	r2, [r3, #0]
 8016a46:	78fb      	ldrb	r3, [r7, #3]
 8016a48:	4619      	mov	r1, r3
 8016a4a:	f7fb f8ae 	bl	8011baa <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8016a4e:	bf00      	nop
 8016a50:	3708      	adds	r7, #8
 8016a52:	46bd      	mov	sp, r7
 8016a54:	bd80      	pop	{r7, pc}

08016a56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a56:	b580      	push	{r7, lr}
 8016a58:	b082      	sub	sp, #8
 8016a5a:	af00      	add	r7, sp, #0
 8016a5c:	6078      	str	r0, [r7, #4]
 8016a5e:	460b      	mov	r3, r1
 8016a60:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8016a68:	78fa      	ldrb	r2, [r7, #3]
 8016a6a:	6879      	ldr	r1, [r7, #4]
 8016a6c:	4613      	mov	r3, r2
 8016a6e:	009b      	lsls	r3, r3, #2
 8016a70:	4413      	add	r3, r2
 8016a72:	00db      	lsls	r3, r3, #3
 8016a74:	440b      	add	r3, r1
 8016a76:	3324      	adds	r3, #36	@ 0x24
 8016a78:	681a      	ldr	r2, [r3, #0]
 8016a7a:	78fb      	ldrb	r3, [r7, #3]
 8016a7c:	4619      	mov	r1, r3
 8016a7e:	f7fb f8f7 	bl	8011c70 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8016a82:	bf00      	nop
 8016a84:	3708      	adds	r7, #8
 8016a86:	46bd      	mov	sp, r7
 8016a88:	bd80      	pop	{r7, pc}

08016a8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a8a:	b580      	push	{r7, lr}
 8016a8c:	b082      	sub	sp, #8
 8016a8e:	af00      	add	r7, sp, #0
 8016a90:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016a98:	4618      	mov	r0, r3
 8016a9a:	f7fb fa0b 	bl	8011eb4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8016a9e:	bf00      	nop
 8016aa0:	3708      	adds	r7, #8
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	bd80      	pop	{r7, pc}

08016aa6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016aa6:	b580      	push	{r7, lr}
 8016aa8:	b084      	sub	sp, #16
 8016aaa:	af00      	add	r7, sp, #0
 8016aac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016aae:	2301      	movs	r3, #1
 8016ab0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	795b      	ldrb	r3, [r3, #5]
 8016ab6:	2b02      	cmp	r3, #2
 8016ab8:	d001      	beq.n	8016abe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8016aba:	f7ef fe79 	bl	80067b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016ac4:	7bfa      	ldrb	r2, [r7, #15]
 8016ac6:	4611      	mov	r1, r2
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f7fb f9b5 	bl	8011e38 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	f7fb f961 	bl	8011d9c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8016ada:	bf00      	nop
 8016adc:	3710      	adds	r7, #16
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	bd80      	pop	{r7, pc}
	...

08016ae4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b082      	sub	sp, #8
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016af2:	4618      	mov	r0, r3
 8016af4:	f7fb f9b0 	bl	8011e58 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	7a5b      	ldrb	r3, [r3, #9]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d005      	beq.n	8016b0c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016b00:	4b04      	ldr	r3, [pc, #16]	@ (8016b14 <HAL_PCD_SuspendCallback+0x30>)
 8016b02:	691b      	ldr	r3, [r3, #16]
 8016b04:	4a03      	ldr	r2, [pc, #12]	@ (8016b14 <HAL_PCD_SuspendCallback+0x30>)
 8016b06:	f043 0306 	orr.w	r3, r3, #6
 8016b0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8016b0c:	bf00      	nop
 8016b0e:	3708      	adds	r7, #8
 8016b10:	46bd      	mov	sp, r7
 8016b12:	bd80      	pop	{r7, pc}
 8016b14:	e000ed00 	.word	0xe000ed00

08016b18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b082      	sub	sp, #8
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	7a5b      	ldrb	r3, [r3, #9]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d007      	beq.n	8016b38 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016b28:	4b08      	ldr	r3, [pc, #32]	@ (8016b4c <HAL_PCD_ResumeCallback+0x34>)
 8016b2a:	691b      	ldr	r3, [r3, #16]
 8016b2c:	4a07      	ldr	r2, [pc, #28]	@ (8016b4c <HAL_PCD_ResumeCallback+0x34>)
 8016b2e:	f023 0306 	bic.w	r3, r3, #6
 8016b32:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8016b34:	f000 f9f8 	bl	8016f28 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016b3e:	4618      	mov	r0, r3
 8016b40:	f7fb f9a0 	bl	8011e84 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8016b44:	bf00      	nop
 8016b46:	3708      	adds	r7, #8
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	bd80      	pop	{r7, pc}
 8016b4c:	e000ed00 	.word	0xe000ed00

08016b50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016b50:	b580      	push	{r7, lr}
 8016b52:	b082      	sub	sp, #8
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8016b58:	4a2b      	ldr	r2, [pc, #172]	@ (8016c08 <USBD_LL_Init+0xb8>)
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	4a29      	ldr	r2, [pc, #164]	@ (8016c08 <USBD_LL_Init+0xb8>)
 8016b64:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8016b68:	4b27      	ldr	r3, [pc, #156]	@ (8016c08 <USBD_LL_Init+0xb8>)
 8016b6a:	4a28      	ldr	r2, [pc, #160]	@ (8016c0c <USBD_LL_Init+0xbc>)
 8016b6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8016b6e:	4b26      	ldr	r3, [pc, #152]	@ (8016c08 <USBD_LL_Init+0xb8>)
 8016b70:	2208      	movs	r2, #8
 8016b72:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8016b74:	4b24      	ldr	r3, [pc, #144]	@ (8016c08 <USBD_LL_Init+0xb8>)
 8016b76:	2202      	movs	r2, #2
 8016b78:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016b7a:	4b23      	ldr	r3, [pc, #140]	@ (8016c08 <USBD_LL_Init+0xb8>)
 8016b7c:	2202      	movs	r2, #2
 8016b7e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8016b80:	4b21      	ldr	r3, [pc, #132]	@ (8016c08 <USBD_LL_Init+0xb8>)
 8016b82:	2200      	movs	r2, #0
 8016b84:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8016b86:	4b20      	ldr	r3, [pc, #128]	@ (8016c08 <USBD_LL_Init+0xb8>)
 8016b88:	2200      	movs	r2, #0
 8016b8a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8016b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8016c08 <USBD_LL_Init+0xb8>)
 8016b8e:	2200      	movs	r2, #0
 8016b90:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8016b92:	4b1d      	ldr	r3, [pc, #116]	@ (8016c08 <USBD_LL_Init+0xb8>)
 8016b94:	2200      	movs	r2, #0
 8016b96:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8016b98:	481b      	ldr	r0, [pc, #108]	@ (8016c08 <USBD_LL_Init+0xb8>)
 8016b9a:	f7f1 ffbb 	bl	8008b14 <HAL_PCD_Init>
 8016b9e:	4603      	mov	r3, r0
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d001      	beq.n	8016ba8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8016ba4:	f7ef fe04 	bl	80067b0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8016bae:	2318      	movs	r3, #24
 8016bb0:	2200      	movs	r2, #0
 8016bb2:	2100      	movs	r1, #0
 8016bb4:	f7f3 fc42 	bl	800a43c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8016bbe:	2358      	movs	r3, #88	@ 0x58
 8016bc0:	2200      	movs	r2, #0
 8016bc2:	2180      	movs	r1, #128	@ 0x80
 8016bc4:	f7f3 fc3a 	bl	800a43c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8016bce:	23c0      	movs	r3, #192	@ 0xc0
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	2181      	movs	r1, #129	@ 0x81
 8016bd4:	f7f3 fc32 	bl	800a43c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8016bde:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8016be2:	2200      	movs	r2, #0
 8016be4:	2101      	movs	r1, #1
 8016be6:	f7f3 fc29 	bl	800a43c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8016bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	2182      	movs	r1, #130	@ 0x82
 8016bf8:	f7f3 fc20 	bl	800a43c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8016bfc:	2300      	movs	r3, #0
}
 8016bfe:	4618      	mov	r0, r3
 8016c00:	3708      	adds	r7, #8
 8016c02:	46bd      	mov	sp, r7
 8016c04:	bd80      	pop	{r7, pc}
 8016c06:	bf00      	nop
 8016c08:	2000341c 	.word	0x2000341c
 8016c0c:	40005c00 	.word	0x40005c00

08016c10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b084      	sub	sp, #16
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c18:	2300      	movs	r3, #0
 8016c1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8016c26:	4618      	mov	r0, r3
 8016c28:	f7f2 f842 	bl	8008cb0 <HAL_PCD_Start>
 8016c2c:	4603      	mov	r3, r0
 8016c2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c30:	7bfb      	ldrb	r3, [r7, #15]
 8016c32:	4618      	mov	r0, r3
 8016c34:	f000 f97e 	bl	8016f34 <USBD_Get_USB_Status>
 8016c38:	4603      	mov	r3, r0
 8016c3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c3e:	4618      	mov	r0, r3
 8016c40:	3710      	adds	r7, #16
 8016c42:	46bd      	mov	sp, r7
 8016c44:	bd80      	pop	{r7, pc}

08016c46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016c46:	b580      	push	{r7, lr}
 8016c48:	b084      	sub	sp, #16
 8016c4a:	af00      	add	r7, sp, #0
 8016c4c:	6078      	str	r0, [r7, #4]
 8016c4e:	4608      	mov	r0, r1
 8016c50:	4611      	mov	r1, r2
 8016c52:	461a      	mov	r2, r3
 8016c54:	4603      	mov	r3, r0
 8016c56:	70fb      	strb	r3, [r7, #3]
 8016c58:	460b      	mov	r3, r1
 8016c5a:	70bb      	strb	r3, [r7, #2]
 8016c5c:	4613      	mov	r3, r2
 8016c5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c60:	2300      	movs	r3, #0
 8016c62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c64:	2300      	movs	r3, #0
 8016c66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8016c6e:	78bb      	ldrb	r3, [r7, #2]
 8016c70:	883a      	ldrh	r2, [r7, #0]
 8016c72:	78f9      	ldrb	r1, [r7, #3]
 8016c74:	f7f2 f989 	bl	8008f8a <HAL_PCD_EP_Open>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c7c:	7bfb      	ldrb	r3, [r7, #15]
 8016c7e:	4618      	mov	r0, r3
 8016c80:	f000 f958 	bl	8016f34 <USBD_Get_USB_Status>
 8016c84:	4603      	mov	r3, r0
 8016c86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c88:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	3710      	adds	r7, #16
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	bd80      	pop	{r7, pc}

08016c92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c92:	b580      	push	{r7, lr}
 8016c94:	b084      	sub	sp, #16
 8016c96:	af00      	add	r7, sp, #0
 8016c98:	6078      	str	r0, [r7, #4]
 8016c9a:	460b      	mov	r3, r1
 8016c9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8016cac:	78fa      	ldrb	r2, [r7, #3]
 8016cae:	4611      	mov	r1, r2
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f7f2 f9c9 	bl	8009048 <HAL_PCD_EP_Close>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016cba:	7bfb      	ldrb	r3, [r7, #15]
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	f000 f939 	bl	8016f34 <USBD_Get_USB_Status>
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016cc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8016cc8:	4618      	mov	r0, r3
 8016cca:	3710      	adds	r7, #16
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	bd80      	pop	{r7, pc}

08016cd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b084      	sub	sp, #16
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
 8016cd8:	460b      	mov	r3, r1
 8016cda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016cdc:	2300      	movs	r3, #0
 8016cde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ce0:	2300      	movs	r3, #0
 8016ce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8016cea:	78fa      	ldrb	r2, [r7, #3]
 8016cec:	4611      	mov	r1, r2
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f7f2 fa72 	bl	80091d8 <HAL_PCD_EP_SetStall>
 8016cf4:	4603      	mov	r3, r0
 8016cf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016cf8:	7bfb      	ldrb	r3, [r7, #15]
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	f000 f91a 	bl	8016f34 <USBD_Get_USB_Status>
 8016d00:	4603      	mov	r3, r0
 8016d02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d04:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d06:	4618      	mov	r0, r3
 8016d08:	3710      	adds	r7, #16
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	bd80      	pop	{r7, pc}

08016d0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d0e:	b580      	push	{r7, lr}
 8016d10:	b084      	sub	sp, #16
 8016d12:	af00      	add	r7, sp, #0
 8016d14:	6078      	str	r0, [r7, #4]
 8016d16:	460b      	mov	r3, r1
 8016d18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d1e:	2300      	movs	r3, #0
 8016d20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8016d28:	78fa      	ldrb	r2, [r7, #3]
 8016d2a:	4611      	mov	r1, r2
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	f7f2 faa5 	bl	800927c <HAL_PCD_EP_ClrStall>
 8016d32:	4603      	mov	r3, r0
 8016d34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d36:	7bfb      	ldrb	r3, [r7, #15]
 8016d38:	4618      	mov	r0, r3
 8016d3a:	f000 f8fb 	bl	8016f34 <USBD_Get_USB_Status>
 8016d3e:	4603      	mov	r3, r0
 8016d40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d42:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d44:	4618      	mov	r0, r3
 8016d46:	3710      	adds	r7, #16
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	bd80      	pop	{r7, pc}

08016d4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d4c:	b480      	push	{r7}
 8016d4e:	b085      	sub	sp, #20
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
 8016d54:	460b      	mov	r3, r1
 8016d56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8016d5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	da0b      	bge.n	8016d80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016d68:	78fb      	ldrb	r3, [r7, #3]
 8016d6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016d6e:	68f9      	ldr	r1, [r7, #12]
 8016d70:	4613      	mov	r3, r2
 8016d72:	009b      	lsls	r3, r3, #2
 8016d74:	4413      	add	r3, r2
 8016d76:	00db      	lsls	r3, r3, #3
 8016d78:	440b      	add	r3, r1
 8016d7a:	3312      	adds	r3, #18
 8016d7c:	781b      	ldrb	r3, [r3, #0]
 8016d7e:	e00b      	b.n	8016d98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016d80:	78fb      	ldrb	r3, [r7, #3]
 8016d82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016d86:	68f9      	ldr	r1, [r7, #12]
 8016d88:	4613      	mov	r3, r2
 8016d8a:	009b      	lsls	r3, r3, #2
 8016d8c:	4413      	add	r3, r2
 8016d8e:	00db      	lsls	r3, r3, #3
 8016d90:	440b      	add	r3, r1
 8016d92:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8016d96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016d98:	4618      	mov	r0, r3
 8016d9a:	3714      	adds	r7, #20
 8016d9c:	46bd      	mov	sp, r7
 8016d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da2:	4770      	bx	lr

08016da4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016da4:	b580      	push	{r7, lr}
 8016da6:	b084      	sub	sp, #16
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	6078      	str	r0, [r7, #4]
 8016dac:	460b      	mov	r3, r1
 8016dae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016db0:	2300      	movs	r3, #0
 8016db2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016db4:	2300      	movs	r3, #0
 8016db6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8016dbe:	78fa      	ldrb	r2, [r7, #3]
 8016dc0:	4611      	mov	r1, r2
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	f7f2 f8bd 	bl	8008f42 <HAL_PCD_SetAddress>
 8016dc8:	4603      	mov	r3, r0
 8016dca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016dcc:	7bfb      	ldrb	r3, [r7, #15]
 8016dce:	4618      	mov	r0, r3
 8016dd0:	f000 f8b0 	bl	8016f34 <USBD_Get_USB_Status>
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016dd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016dda:	4618      	mov	r0, r3
 8016ddc:	3710      	adds	r7, #16
 8016dde:	46bd      	mov	sp, r7
 8016de0:	bd80      	pop	{r7, pc}

08016de2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016de2:	b580      	push	{r7, lr}
 8016de4:	b086      	sub	sp, #24
 8016de6:	af00      	add	r7, sp, #0
 8016de8:	60f8      	str	r0, [r7, #12]
 8016dea:	607a      	str	r2, [r7, #4]
 8016dec:	603b      	str	r3, [r7, #0]
 8016dee:	460b      	mov	r3, r1
 8016df0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016df2:	2300      	movs	r3, #0
 8016df4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016df6:	2300      	movs	r3, #0
 8016df8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8016e00:	7af9      	ldrb	r1, [r7, #11]
 8016e02:	683b      	ldr	r3, [r7, #0]
 8016e04:	687a      	ldr	r2, [r7, #4]
 8016e06:	f7f2 f9b0 	bl	800916a <HAL_PCD_EP_Transmit>
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e0e:	7dfb      	ldrb	r3, [r7, #23]
 8016e10:	4618      	mov	r0, r3
 8016e12:	f000 f88f 	bl	8016f34 <USBD_Get_USB_Status>
 8016e16:	4603      	mov	r3, r0
 8016e18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016e1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	3718      	adds	r7, #24
 8016e20:	46bd      	mov	sp, r7
 8016e22:	bd80      	pop	{r7, pc}

08016e24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b086      	sub	sp, #24
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	60f8      	str	r0, [r7, #12]
 8016e2c:	607a      	str	r2, [r7, #4]
 8016e2e:	603b      	str	r3, [r7, #0]
 8016e30:	460b      	mov	r3, r1
 8016e32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e34:	2300      	movs	r3, #0
 8016e36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e38:	2300      	movs	r3, #0
 8016e3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8016e42:	7af9      	ldrb	r1, [r7, #11]
 8016e44:	683b      	ldr	r3, [r7, #0]
 8016e46:	687a      	ldr	r2, [r7, #4]
 8016e48:	f7f2 f946 	bl	80090d8 <HAL_PCD_EP_Receive>
 8016e4c:	4603      	mov	r3, r0
 8016e4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e50:	7dfb      	ldrb	r3, [r7, #23]
 8016e52:	4618      	mov	r0, r3
 8016e54:	f000 f86e 	bl	8016f34 <USBD_Get_USB_Status>
 8016e58:	4603      	mov	r3, r0
 8016e5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016e5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8016e5e:	4618      	mov	r0, r3
 8016e60:	3718      	adds	r7, #24
 8016e62:	46bd      	mov	sp, r7
 8016e64:	bd80      	pop	{r7, pc}

08016e66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e66:	b580      	push	{r7, lr}
 8016e68:	b082      	sub	sp, #8
 8016e6a:	af00      	add	r7, sp, #0
 8016e6c:	6078      	str	r0, [r7, #4]
 8016e6e:	460b      	mov	r3, r1
 8016e70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8016e78:	78fa      	ldrb	r2, [r7, #3]
 8016e7a:	4611      	mov	r1, r2
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	f7f2 f95c 	bl	800913a <HAL_PCD_EP_GetRxCount>
 8016e82:	4603      	mov	r3, r0
}
 8016e84:	4618      	mov	r0, r3
 8016e86:	3708      	adds	r7, #8
 8016e88:	46bd      	mov	sp, r7
 8016e8a:	bd80      	pop	{r7, pc}

08016e8c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b082      	sub	sp, #8
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
 8016e94:	460b      	mov	r3, r1
 8016e96:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8016e98:	78fb      	ldrb	r3, [r7, #3]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d002      	beq.n	8016ea4 <HAL_PCDEx_LPM_Callback+0x18>
 8016e9e:	2b01      	cmp	r3, #1
 8016ea0:	d013      	beq.n	8016eca <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8016ea2:	e023      	b.n	8016eec <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	7a5b      	ldrb	r3, [r3, #9]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d007      	beq.n	8016ebc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8016eac:	f000 f83c 	bl	8016f28 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016eb0:	4b10      	ldr	r3, [pc, #64]	@ (8016ef4 <HAL_PCDEx_LPM_Callback+0x68>)
 8016eb2:	691b      	ldr	r3, [r3, #16]
 8016eb4:	4a0f      	ldr	r2, [pc, #60]	@ (8016ef4 <HAL_PCDEx_LPM_Callback+0x68>)
 8016eb6:	f023 0306 	bic.w	r3, r3, #6
 8016eba:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7fa ffde 	bl	8011e84 <USBD_LL_Resume>
    break;
 8016ec8:	e010      	b.n	8016eec <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	f7fa ffc1 	bl	8011e58 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	7a5b      	ldrb	r3, [r3, #9]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d005      	beq.n	8016eea <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016ede:	4b05      	ldr	r3, [pc, #20]	@ (8016ef4 <HAL_PCDEx_LPM_Callback+0x68>)
 8016ee0:	691b      	ldr	r3, [r3, #16]
 8016ee2:	4a04      	ldr	r2, [pc, #16]	@ (8016ef4 <HAL_PCDEx_LPM_Callback+0x68>)
 8016ee4:	f043 0306 	orr.w	r3, r3, #6
 8016ee8:	6113      	str	r3, [r2, #16]
    break;
 8016eea:	bf00      	nop
}
 8016eec:	bf00      	nop
 8016eee:	3708      	adds	r7, #8
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	bd80      	pop	{r7, pc}
 8016ef4:	e000ed00 	.word	0xe000ed00

08016ef8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016ef8:	b480      	push	{r7}
 8016efa:	b083      	sub	sp, #12
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016f00:	4b03      	ldr	r3, [pc, #12]	@ (8016f10 <USBD_static_malloc+0x18>)
}
 8016f02:	4618      	mov	r0, r3
 8016f04:	370c      	adds	r7, #12
 8016f06:	46bd      	mov	sp, r7
 8016f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f0c:	4770      	bx	lr
 8016f0e:	bf00      	nop
 8016f10:	200036f8 	.word	0x200036f8

08016f14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016f14:	b480      	push	{r7}
 8016f16:	b083      	sub	sp, #12
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	6078      	str	r0, [r7, #4]

}
 8016f1c:	bf00      	nop
 8016f1e:	370c      	adds	r7, #12
 8016f20:	46bd      	mov	sp, r7
 8016f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f26:	4770      	bx	lr

08016f28 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8016f2c:	f7ee fff8 	bl	8005f20 <SystemClock_Config>
}
 8016f30:	bf00      	nop
 8016f32:	bd80      	pop	{r7, pc}

08016f34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016f34:	b480      	push	{r7}
 8016f36:	b085      	sub	sp, #20
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f3e:	2300      	movs	r3, #0
 8016f40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016f42:	79fb      	ldrb	r3, [r7, #7]
 8016f44:	2b03      	cmp	r3, #3
 8016f46:	d817      	bhi.n	8016f78 <USBD_Get_USB_Status+0x44>
 8016f48:	a201      	add	r2, pc, #4	@ (adr r2, 8016f50 <USBD_Get_USB_Status+0x1c>)
 8016f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f4e:	bf00      	nop
 8016f50:	08016f61 	.word	0x08016f61
 8016f54:	08016f67 	.word	0x08016f67
 8016f58:	08016f6d 	.word	0x08016f6d
 8016f5c:	08016f73 	.word	0x08016f73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016f60:	2300      	movs	r3, #0
 8016f62:	73fb      	strb	r3, [r7, #15]
    break;
 8016f64:	e00b      	b.n	8016f7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016f66:	2303      	movs	r3, #3
 8016f68:	73fb      	strb	r3, [r7, #15]
    break;
 8016f6a:	e008      	b.n	8016f7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016f6c:	2301      	movs	r3, #1
 8016f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8016f70:	e005      	b.n	8016f7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016f72:	2303      	movs	r3, #3
 8016f74:	73fb      	strb	r3, [r7, #15]
    break;
 8016f76:	e002      	b.n	8016f7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016f78:	2303      	movs	r3, #3
 8016f7a:	73fb      	strb	r3, [r7, #15]
    break;
 8016f7c:	bf00      	nop
  }
  return usb_status;
 8016f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f80:	4618      	mov	r0, r3
 8016f82:	3714      	adds	r7, #20
 8016f84:	46bd      	mov	sp, r7
 8016f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f8a:	4770      	bx	lr

08016f8c <malloc>:
 8016f8c:	4b02      	ldr	r3, [pc, #8]	@ (8016f98 <malloc+0xc>)
 8016f8e:	4601      	mov	r1, r0
 8016f90:	6818      	ldr	r0, [r3, #0]
 8016f92:	f000 b825 	b.w	8016fe0 <_malloc_r>
 8016f96:	bf00      	nop
 8016f98:	2000025c 	.word	0x2000025c

08016f9c <sbrk_aligned>:
 8016f9c:	b570      	push	{r4, r5, r6, lr}
 8016f9e:	4e0f      	ldr	r6, [pc, #60]	@ (8016fdc <sbrk_aligned+0x40>)
 8016fa0:	460c      	mov	r4, r1
 8016fa2:	6831      	ldr	r1, [r6, #0]
 8016fa4:	4605      	mov	r5, r0
 8016fa6:	b911      	cbnz	r1, 8016fae <sbrk_aligned+0x12>
 8016fa8:	f000 f904 	bl	80171b4 <_sbrk_r>
 8016fac:	6030      	str	r0, [r6, #0]
 8016fae:	4621      	mov	r1, r4
 8016fb0:	4628      	mov	r0, r5
 8016fb2:	f000 f8ff 	bl	80171b4 <_sbrk_r>
 8016fb6:	1c43      	adds	r3, r0, #1
 8016fb8:	d103      	bne.n	8016fc2 <sbrk_aligned+0x26>
 8016fba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016fbe:	4620      	mov	r0, r4
 8016fc0:	bd70      	pop	{r4, r5, r6, pc}
 8016fc2:	1cc4      	adds	r4, r0, #3
 8016fc4:	f024 0403 	bic.w	r4, r4, #3
 8016fc8:	42a0      	cmp	r0, r4
 8016fca:	d0f8      	beq.n	8016fbe <sbrk_aligned+0x22>
 8016fcc:	1a21      	subs	r1, r4, r0
 8016fce:	4628      	mov	r0, r5
 8016fd0:	f000 f8f0 	bl	80171b4 <_sbrk_r>
 8016fd4:	3001      	adds	r0, #1
 8016fd6:	d1f2      	bne.n	8016fbe <sbrk_aligned+0x22>
 8016fd8:	e7ef      	b.n	8016fba <sbrk_aligned+0x1e>
 8016fda:	bf00      	nop
 8016fdc:	20003918 	.word	0x20003918

08016fe0 <_malloc_r>:
 8016fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fe4:	1ccd      	adds	r5, r1, #3
 8016fe6:	f025 0503 	bic.w	r5, r5, #3
 8016fea:	3508      	adds	r5, #8
 8016fec:	2d0c      	cmp	r5, #12
 8016fee:	bf38      	it	cc
 8016ff0:	250c      	movcc	r5, #12
 8016ff2:	2d00      	cmp	r5, #0
 8016ff4:	4606      	mov	r6, r0
 8016ff6:	db01      	blt.n	8016ffc <_malloc_r+0x1c>
 8016ff8:	42a9      	cmp	r1, r5
 8016ffa:	d904      	bls.n	8017006 <_malloc_r+0x26>
 8016ffc:	230c      	movs	r3, #12
 8016ffe:	6033      	str	r3, [r6, #0]
 8017000:	2000      	movs	r0, #0
 8017002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017006:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80170dc <_malloc_r+0xfc>
 801700a:	f000 f869 	bl	80170e0 <__malloc_lock>
 801700e:	f8d8 3000 	ldr.w	r3, [r8]
 8017012:	461c      	mov	r4, r3
 8017014:	bb44      	cbnz	r4, 8017068 <_malloc_r+0x88>
 8017016:	4629      	mov	r1, r5
 8017018:	4630      	mov	r0, r6
 801701a:	f7ff ffbf 	bl	8016f9c <sbrk_aligned>
 801701e:	1c43      	adds	r3, r0, #1
 8017020:	4604      	mov	r4, r0
 8017022:	d158      	bne.n	80170d6 <_malloc_r+0xf6>
 8017024:	f8d8 4000 	ldr.w	r4, [r8]
 8017028:	4627      	mov	r7, r4
 801702a:	2f00      	cmp	r7, #0
 801702c:	d143      	bne.n	80170b6 <_malloc_r+0xd6>
 801702e:	2c00      	cmp	r4, #0
 8017030:	d04b      	beq.n	80170ca <_malloc_r+0xea>
 8017032:	6823      	ldr	r3, [r4, #0]
 8017034:	4639      	mov	r1, r7
 8017036:	4630      	mov	r0, r6
 8017038:	eb04 0903 	add.w	r9, r4, r3
 801703c:	f000 f8ba 	bl	80171b4 <_sbrk_r>
 8017040:	4581      	cmp	r9, r0
 8017042:	d142      	bne.n	80170ca <_malloc_r+0xea>
 8017044:	6821      	ldr	r1, [r4, #0]
 8017046:	1a6d      	subs	r5, r5, r1
 8017048:	4629      	mov	r1, r5
 801704a:	4630      	mov	r0, r6
 801704c:	f7ff ffa6 	bl	8016f9c <sbrk_aligned>
 8017050:	3001      	adds	r0, #1
 8017052:	d03a      	beq.n	80170ca <_malloc_r+0xea>
 8017054:	6823      	ldr	r3, [r4, #0]
 8017056:	442b      	add	r3, r5
 8017058:	6023      	str	r3, [r4, #0]
 801705a:	f8d8 3000 	ldr.w	r3, [r8]
 801705e:	685a      	ldr	r2, [r3, #4]
 8017060:	bb62      	cbnz	r2, 80170bc <_malloc_r+0xdc>
 8017062:	f8c8 7000 	str.w	r7, [r8]
 8017066:	e00f      	b.n	8017088 <_malloc_r+0xa8>
 8017068:	6822      	ldr	r2, [r4, #0]
 801706a:	1b52      	subs	r2, r2, r5
 801706c:	d420      	bmi.n	80170b0 <_malloc_r+0xd0>
 801706e:	2a0b      	cmp	r2, #11
 8017070:	d917      	bls.n	80170a2 <_malloc_r+0xc2>
 8017072:	1961      	adds	r1, r4, r5
 8017074:	42a3      	cmp	r3, r4
 8017076:	6025      	str	r5, [r4, #0]
 8017078:	bf18      	it	ne
 801707a:	6059      	strne	r1, [r3, #4]
 801707c:	6863      	ldr	r3, [r4, #4]
 801707e:	bf08      	it	eq
 8017080:	f8c8 1000 	streq.w	r1, [r8]
 8017084:	5162      	str	r2, [r4, r5]
 8017086:	604b      	str	r3, [r1, #4]
 8017088:	4630      	mov	r0, r6
 801708a:	f000 f82f 	bl	80170ec <__malloc_unlock>
 801708e:	f104 000b 	add.w	r0, r4, #11
 8017092:	1d23      	adds	r3, r4, #4
 8017094:	f020 0007 	bic.w	r0, r0, #7
 8017098:	1ac2      	subs	r2, r0, r3
 801709a:	bf1c      	itt	ne
 801709c:	1a1b      	subne	r3, r3, r0
 801709e:	50a3      	strne	r3, [r4, r2]
 80170a0:	e7af      	b.n	8017002 <_malloc_r+0x22>
 80170a2:	6862      	ldr	r2, [r4, #4]
 80170a4:	42a3      	cmp	r3, r4
 80170a6:	bf0c      	ite	eq
 80170a8:	f8c8 2000 	streq.w	r2, [r8]
 80170ac:	605a      	strne	r2, [r3, #4]
 80170ae:	e7eb      	b.n	8017088 <_malloc_r+0xa8>
 80170b0:	4623      	mov	r3, r4
 80170b2:	6864      	ldr	r4, [r4, #4]
 80170b4:	e7ae      	b.n	8017014 <_malloc_r+0x34>
 80170b6:	463c      	mov	r4, r7
 80170b8:	687f      	ldr	r7, [r7, #4]
 80170ba:	e7b6      	b.n	801702a <_malloc_r+0x4a>
 80170bc:	461a      	mov	r2, r3
 80170be:	685b      	ldr	r3, [r3, #4]
 80170c0:	42a3      	cmp	r3, r4
 80170c2:	d1fb      	bne.n	80170bc <_malloc_r+0xdc>
 80170c4:	2300      	movs	r3, #0
 80170c6:	6053      	str	r3, [r2, #4]
 80170c8:	e7de      	b.n	8017088 <_malloc_r+0xa8>
 80170ca:	230c      	movs	r3, #12
 80170cc:	6033      	str	r3, [r6, #0]
 80170ce:	4630      	mov	r0, r6
 80170d0:	f000 f80c 	bl	80170ec <__malloc_unlock>
 80170d4:	e794      	b.n	8017000 <_malloc_r+0x20>
 80170d6:	6005      	str	r5, [r0, #0]
 80170d8:	e7d6      	b.n	8017088 <_malloc_r+0xa8>
 80170da:	bf00      	nop
 80170dc:	2000391c 	.word	0x2000391c

080170e0 <__malloc_lock>:
 80170e0:	4801      	ldr	r0, [pc, #4]	@ (80170e8 <__malloc_lock+0x8>)
 80170e2:	f000 b8a1 	b.w	8017228 <__retarget_lock_acquire_recursive>
 80170e6:	bf00      	nop
 80170e8:	20003a5c 	.word	0x20003a5c

080170ec <__malloc_unlock>:
 80170ec:	4801      	ldr	r0, [pc, #4]	@ (80170f4 <__malloc_unlock+0x8>)
 80170ee:	f000 b89c 	b.w	801722a <__retarget_lock_release_recursive>
 80170f2:	bf00      	nop
 80170f4:	20003a5c 	.word	0x20003a5c

080170f8 <memset>:
 80170f8:	4402      	add	r2, r0
 80170fa:	4603      	mov	r3, r0
 80170fc:	4293      	cmp	r3, r2
 80170fe:	d100      	bne.n	8017102 <memset+0xa>
 8017100:	4770      	bx	lr
 8017102:	f803 1b01 	strb.w	r1, [r3], #1
 8017106:	e7f9      	b.n	80170fc <memset+0x4>

08017108 <_reclaim_reent>:
 8017108:	4b29      	ldr	r3, [pc, #164]	@ (80171b0 <_reclaim_reent+0xa8>)
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	4283      	cmp	r3, r0
 801710e:	b570      	push	{r4, r5, r6, lr}
 8017110:	4604      	mov	r4, r0
 8017112:	d04b      	beq.n	80171ac <_reclaim_reent+0xa4>
 8017114:	69c3      	ldr	r3, [r0, #28]
 8017116:	b1ab      	cbz	r3, 8017144 <_reclaim_reent+0x3c>
 8017118:	68db      	ldr	r3, [r3, #12]
 801711a:	b16b      	cbz	r3, 8017138 <_reclaim_reent+0x30>
 801711c:	2500      	movs	r5, #0
 801711e:	69e3      	ldr	r3, [r4, #28]
 8017120:	68db      	ldr	r3, [r3, #12]
 8017122:	5959      	ldr	r1, [r3, r5]
 8017124:	2900      	cmp	r1, #0
 8017126:	d13b      	bne.n	80171a0 <_reclaim_reent+0x98>
 8017128:	3504      	adds	r5, #4
 801712a:	2d80      	cmp	r5, #128	@ 0x80
 801712c:	d1f7      	bne.n	801711e <_reclaim_reent+0x16>
 801712e:	69e3      	ldr	r3, [r4, #28]
 8017130:	4620      	mov	r0, r4
 8017132:	68d9      	ldr	r1, [r3, #12]
 8017134:	f000 f88e 	bl	8017254 <_free_r>
 8017138:	69e3      	ldr	r3, [r4, #28]
 801713a:	6819      	ldr	r1, [r3, #0]
 801713c:	b111      	cbz	r1, 8017144 <_reclaim_reent+0x3c>
 801713e:	4620      	mov	r0, r4
 8017140:	f000 f888 	bl	8017254 <_free_r>
 8017144:	6961      	ldr	r1, [r4, #20]
 8017146:	b111      	cbz	r1, 801714e <_reclaim_reent+0x46>
 8017148:	4620      	mov	r0, r4
 801714a:	f000 f883 	bl	8017254 <_free_r>
 801714e:	69e1      	ldr	r1, [r4, #28]
 8017150:	b111      	cbz	r1, 8017158 <_reclaim_reent+0x50>
 8017152:	4620      	mov	r0, r4
 8017154:	f000 f87e 	bl	8017254 <_free_r>
 8017158:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801715a:	b111      	cbz	r1, 8017162 <_reclaim_reent+0x5a>
 801715c:	4620      	mov	r0, r4
 801715e:	f000 f879 	bl	8017254 <_free_r>
 8017162:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017164:	b111      	cbz	r1, 801716c <_reclaim_reent+0x64>
 8017166:	4620      	mov	r0, r4
 8017168:	f000 f874 	bl	8017254 <_free_r>
 801716c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801716e:	b111      	cbz	r1, 8017176 <_reclaim_reent+0x6e>
 8017170:	4620      	mov	r0, r4
 8017172:	f000 f86f 	bl	8017254 <_free_r>
 8017176:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017178:	b111      	cbz	r1, 8017180 <_reclaim_reent+0x78>
 801717a:	4620      	mov	r0, r4
 801717c:	f000 f86a 	bl	8017254 <_free_r>
 8017180:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017182:	b111      	cbz	r1, 801718a <_reclaim_reent+0x82>
 8017184:	4620      	mov	r0, r4
 8017186:	f000 f865 	bl	8017254 <_free_r>
 801718a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801718c:	b111      	cbz	r1, 8017194 <_reclaim_reent+0x8c>
 801718e:	4620      	mov	r0, r4
 8017190:	f000 f860 	bl	8017254 <_free_r>
 8017194:	6a23      	ldr	r3, [r4, #32]
 8017196:	b14b      	cbz	r3, 80171ac <_reclaim_reent+0xa4>
 8017198:	4620      	mov	r0, r4
 801719a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801719e:	4718      	bx	r3
 80171a0:	680e      	ldr	r6, [r1, #0]
 80171a2:	4620      	mov	r0, r4
 80171a4:	f000 f856 	bl	8017254 <_free_r>
 80171a8:	4631      	mov	r1, r6
 80171aa:	e7bb      	b.n	8017124 <_reclaim_reent+0x1c>
 80171ac:	bd70      	pop	{r4, r5, r6, pc}
 80171ae:	bf00      	nop
 80171b0:	2000025c 	.word	0x2000025c

080171b4 <_sbrk_r>:
 80171b4:	b538      	push	{r3, r4, r5, lr}
 80171b6:	4d06      	ldr	r5, [pc, #24]	@ (80171d0 <_sbrk_r+0x1c>)
 80171b8:	2300      	movs	r3, #0
 80171ba:	4604      	mov	r4, r0
 80171bc:	4608      	mov	r0, r1
 80171be:	602b      	str	r3, [r5, #0]
 80171c0:	f7ef fe5a 	bl	8006e78 <_sbrk>
 80171c4:	1c43      	adds	r3, r0, #1
 80171c6:	d102      	bne.n	80171ce <_sbrk_r+0x1a>
 80171c8:	682b      	ldr	r3, [r5, #0]
 80171ca:	b103      	cbz	r3, 80171ce <_sbrk_r+0x1a>
 80171cc:	6023      	str	r3, [r4, #0]
 80171ce:	bd38      	pop	{r3, r4, r5, pc}
 80171d0:	20003a58 	.word	0x20003a58

080171d4 <__errno>:
 80171d4:	4b01      	ldr	r3, [pc, #4]	@ (80171dc <__errno+0x8>)
 80171d6:	6818      	ldr	r0, [r3, #0]
 80171d8:	4770      	bx	lr
 80171da:	bf00      	nop
 80171dc:	2000025c 	.word	0x2000025c

080171e0 <__libc_init_array>:
 80171e0:	b570      	push	{r4, r5, r6, lr}
 80171e2:	4d0d      	ldr	r5, [pc, #52]	@ (8017218 <__libc_init_array+0x38>)
 80171e4:	4c0d      	ldr	r4, [pc, #52]	@ (801721c <__libc_init_array+0x3c>)
 80171e6:	1b64      	subs	r4, r4, r5
 80171e8:	10a4      	asrs	r4, r4, #2
 80171ea:	2600      	movs	r6, #0
 80171ec:	42a6      	cmp	r6, r4
 80171ee:	d109      	bne.n	8017204 <__libc_init_array+0x24>
 80171f0:	4d0b      	ldr	r5, [pc, #44]	@ (8017220 <__libc_init_array+0x40>)
 80171f2:	4c0c      	ldr	r4, [pc, #48]	@ (8017224 <__libc_init_array+0x44>)
 80171f4:	f000 f878 	bl	80172e8 <_init>
 80171f8:	1b64      	subs	r4, r4, r5
 80171fa:	10a4      	asrs	r4, r4, #2
 80171fc:	2600      	movs	r6, #0
 80171fe:	42a6      	cmp	r6, r4
 8017200:	d105      	bne.n	801720e <__libc_init_array+0x2e>
 8017202:	bd70      	pop	{r4, r5, r6, pc}
 8017204:	f855 3b04 	ldr.w	r3, [r5], #4
 8017208:	4798      	blx	r3
 801720a:	3601      	adds	r6, #1
 801720c:	e7ee      	b.n	80171ec <__libc_init_array+0xc>
 801720e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017212:	4798      	blx	r3
 8017214:	3601      	adds	r6, #1
 8017216:	e7f2      	b.n	80171fe <__libc_init_array+0x1e>
 8017218:	08017494 	.word	0x08017494
 801721c:	08017494 	.word	0x08017494
 8017220:	08017494 	.word	0x08017494
 8017224:	08017498 	.word	0x08017498

08017228 <__retarget_lock_acquire_recursive>:
 8017228:	4770      	bx	lr

0801722a <__retarget_lock_release_recursive>:
 801722a:	4770      	bx	lr

0801722c <__aeabi_memclr>:
 801722c:	2200      	movs	r2, #0
 801722e:	f7ee bc0a 	b.w	8005a46 <__aeabi_memset>

08017232 <memcpy>:
 8017232:	440a      	add	r2, r1
 8017234:	4291      	cmp	r1, r2
 8017236:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801723a:	d100      	bne.n	801723e <memcpy+0xc>
 801723c:	4770      	bx	lr
 801723e:	b510      	push	{r4, lr}
 8017240:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017244:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017248:	4291      	cmp	r1, r2
 801724a:	d1f9      	bne.n	8017240 <memcpy+0xe>
 801724c:	bd10      	pop	{r4, pc}

0801724e <__aeabi_memcpy>:
 801724e:	f7ff bff0 	b.w	8017232 <memcpy>
	...

08017254 <_free_r>:
 8017254:	b538      	push	{r3, r4, r5, lr}
 8017256:	4605      	mov	r5, r0
 8017258:	2900      	cmp	r1, #0
 801725a:	d041      	beq.n	80172e0 <_free_r+0x8c>
 801725c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017260:	1f0c      	subs	r4, r1, #4
 8017262:	2b00      	cmp	r3, #0
 8017264:	bfb8      	it	lt
 8017266:	18e4      	addlt	r4, r4, r3
 8017268:	f7ff ff3a 	bl	80170e0 <__malloc_lock>
 801726c:	4a1d      	ldr	r2, [pc, #116]	@ (80172e4 <_free_r+0x90>)
 801726e:	6813      	ldr	r3, [r2, #0]
 8017270:	b933      	cbnz	r3, 8017280 <_free_r+0x2c>
 8017272:	6063      	str	r3, [r4, #4]
 8017274:	6014      	str	r4, [r2, #0]
 8017276:	4628      	mov	r0, r5
 8017278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801727c:	f7ff bf36 	b.w	80170ec <__malloc_unlock>
 8017280:	42a3      	cmp	r3, r4
 8017282:	d908      	bls.n	8017296 <_free_r+0x42>
 8017284:	6820      	ldr	r0, [r4, #0]
 8017286:	1821      	adds	r1, r4, r0
 8017288:	428b      	cmp	r3, r1
 801728a:	bf01      	itttt	eq
 801728c:	6819      	ldreq	r1, [r3, #0]
 801728e:	685b      	ldreq	r3, [r3, #4]
 8017290:	1809      	addeq	r1, r1, r0
 8017292:	6021      	streq	r1, [r4, #0]
 8017294:	e7ed      	b.n	8017272 <_free_r+0x1e>
 8017296:	461a      	mov	r2, r3
 8017298:	685b      	ldr	r3, [r3, #4]
 801729a:	b10b      	cbz	r3, 80172a0 <_free_r+0x4c>
 801729c:	42a3      	cmp	r3, r4
 801729e:	d9fa      	bls.n	8017296 <_free_r+0x42>
 80172a0:	6811      	ldr	r1, [r2, #0]
 80172a2:	1850      	adds	r0, r2, r1
 80172a4:	42a0      	cmp	r0, r4
 80172a6:	d10b      	bne.n	80172c0 <_free_r+0x6c>
 80172a8:	6820      	ldr	r0, [r4, #0]
 80172aa:	4401      	add	r1, r0
 80172ac:	1850      	adds	r0, r2, r1
 80172ae:	4283      	cmp	r3, r0
 80172b0:	6011      	str	r1, [r2, #0]
 80172b2:	d1e0      	bne.n	8017276 <_free_r+0x22>
 80172b4:	6818      	ldr	r0, [r3, #0]
 80172b6:	685b      	ldr	r3, [r3, #4]
 80172b8:	6053      	str	r3, [r2, #4]
 80172ba:	4408      	add	r0, r1
 80172bc:	6010      	str	r0, [r2, #0]
 80172be:	e7da      	b.n	8017276 <_free_r+0x22>
 80172c0:	d902      	bls.n	80172c8 <_free_r+0x74>
 80172c2:	230c      	movs	r3, #12
 80172c4:	602b      	str	r3, [r5, #0]
 80172c6:	e7d6      	b.n	8017276 <_free_r+0x22>
 80172c8:	6820      	ldr	r0, [r4, #0]
 80172ca:	1821      	adds	r1, r4, r0
 80172cc:	428b      	cmp	r3, r1
 80172ce:	bf04      	itt	eq
 80172d0:	6819      	ldreq	r1, [r3, #0]
 80172d2:	685b      	ldreq	r3, [r3, #4]
 80172d4:	6063      	str	r3, [r4, #4]
 80172d6:	bf04      	itt	eq
 80172d8:	1809      	addeq	r1, r1, r0
 80172da:	6021      	streq	r1, [r4, #0]
 80172dc:	6054      	str	r4, [r2, #4]
 80172de:	e7ca      	b.n	8017276 <_free_r+0x22>
 80172e0:	bd38      	pop	{r3, r4, r5, pc}
 80172e2:	bf00      	nop
 80172e4:	2000391c 	.word	0x2000391c

080172e8 <_init>:
 80172e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172ea:	bf00      	nop
 80172ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80172ee:	bc08      	pop	{r3}
 80172f0:	469e      	mov	lr, r3
 80172f2:	4770      	bx	lr

080172f4 <_fini>:
 80172f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172f6:	bf00      	nop
 80172f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80172fa:	bc08      	pop	{r3}
 80172fc:	469e      	mov	lr, r3
 80172fe:	4770      	bx	lr
